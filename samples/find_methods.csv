repositoryOrigin,repositoryPath,repositoryBranch,sourceFile,method
github.com,"spring-cloud/spring-cloud-commons",main,"spring-cloud-test-support/src/main/java/org/springframework/cloud/test/ModifiedClassPathClassLoader.java","extractedUrls.add(url)"
github.com,"spring-projects/spring-ws-samples",main,"airline/server/src/main/java/org/springframework/ws/samples/airline/schema/support/SchemaConversionUtils.java","schemaTicket.getPassengers().getPassenger().add(toSchemaType(passenger))"
github.com,"spring-cloud/spring-cloud-commons",main,"spring-cloud-test-support/src/main/java/org/springframework/cloud/test/ModifiedClassPathClassLoader.java","urls.add(new URL(entry))"
github.com,"spring-projects/spring-ws-samples",main,"airline/server/src/main/java/org/springframework/ws/samples/airline/ws/AirlineEndpoint.java","response.getFlight().add(SchemaConversionUtils.toSchemaType(domainFlight))"
github.com,"spring-cloud/spring-cloud-commons",main,"spring-cloud-test-support/src/main/java/org/springframework/cloud/test/ModifiedClassPathClassLoader.java","processedUrls.add(url)"
github.com,"spring-projects/spring-ws-samples",main,"airline/server/src/main/java/org/springframework/ws/samples/airline/ws/AirlineEndpoint.java","passengers.add(passenger)"
github.com,"spring-projects/spring-ws-samples",main,"airline/server/src/main/java/org/springframework/ws/samples/airline/ws/AirlineEndpoint.java","passengers.add(frequentFlyer)"
github.com,"spring-cloud/spring-cloud-commons",main,"spring-cloud-test-support/src/main/java/org/springframework/cloud/test/ModifiedClassPathClassLoader.java","resolvedArtifacts.add(artifact.getArtifact().getFile().toURI().toURL())"
github.com,"spring-projects/spring-ws-samples",main,"echo/server/src/main/java/org/springframework/ws/samples/echo/config/EchoConfig.java","interceptors.add(validatingInterceptor)"
github.com,"spring-cloud/spring-cloud-commons",main,"spring-cloud-test-support/src/main/java/org/springframework/cloud/test/ModifiedClassPathClassLoader.java","dependencies.add(new Dependency(new DefaultArtifact(coordinate), null))"
github.com,"spring-projects/spring-ws-samples",main,"echo/server/src/main/java/org/springframework/ws/samples/echo/config/EchoConfig.java","
interceptors.add(new PayloadLoggingInterceptor())"
github.com,"spring-cloud/spring-cloud-commons",main,"spring-cloud-test-support/src/main/java/org/springframework/cloud/test/ModifiedClassPathRunner.java","extractedUrls.add(url)"
github.com,"spring-cloud/spring-cloud-commons",main,"spring-cloud-test-support/src/main/java/org/springframework/cloud/test/ModifiedClassPathRunner.java","urls.add(new URL(entry))"
github.com,"spring-projects/spring-ws-samples",main,"airline/client/spring-ws/src/main/java/org/springframework/ws/samples/airline/client/sws/GetFlights.java","passengers.getPassengerOrUsername().add(""john"")"
github.com,"spring-cloud/spring-cloud-commons",main,"spring-cloud-test-support/src/main/java/org/springframework/cloud/test/ModifiedClassPathRunner.java","processedUrls.add(url)"
github.com,"spring-projects/spring-ws-samples",main,"airline/client/jax-ws/src/main/java/org/springframework/ws/samples/airline/client/jaxws/JaxWsMain.java","passengers.getPassengerOrUsername().add(""john"")"
github.com,"spring-cloud/spring-cloud-commons",main,"spring-cloud-test-support/src/main/java/org/springframework/cloud/test/ModifiedClassPathRunner.java","resolvedArtifacts.add(artifact.getArtifact().getFile().toURI().toURL())"
github.com,"spring-cloud/spring-cloud-commons",main,"spring-cloud-test-support/src/main/java/org/springframework/cloud/test/ModifiedClassPathRunner.java","dependencies.add(new Dependency(new DefaultArtifact(coordinate), null))"
github.com,"spring-cloud/spring-cloud-commons",main,"spring-cloud-test-support/src/main/java/org/springframework/cloud/test/ModifiedClassPathRunner.java","this.exclusions.add(""log4j-*.jar"")"
github.com,"spring-cloud/spring-cloud-commons",main,"spring-cloud-test-support/src/main/java/org/springframework/cloud/test/ModifiedClassPathRunner.java","wrapped.add(new ModifiedClassPathFrameworkMethod(frameworkMethod.getMethod()))"
github.com,"spring-cloud/spring-cloud-commons",main,"spring-cloud-commons/src/main/java/org/springframework/cloud/configuration/CompositeCompatibilityVerifier.java","errors.add(result)"
github.com,"spring-cloud/spring-cloud-commons",main,"spring-cloud-commons/src/main/java/org/springframework/cloud/client/discovery/EnableDiscoveryClientImportSelector.java","importsList.add(""org.springframework.cloud.client.serviceregistry.AutoServiceRegistrationConfiguration"")"
github.com,"spring-cloud/spring-cloud-commons",main,"spring-cloud-commons/src/main/java/org/springframework/cloud/client/discovery/composite/reactive/ReactiveCompositeDiscoveryClient.java","serviceInstances.add(discoveryClient.getInstances(serviceId))"
github.com,"spring-cloud/spring-cloud-commons",main,"spring-cloud-commons/src/main/java/org/springframework/cloud/client/actuator/FeaturesEndpoint.java","features.getDisabled().add(featureName)"
github.com,"spring-cloud/spring-cloud-commons",main,"spring-cloud-commons/src/main/java/org/springframework/cloud/client/actuator/FeaturesEndpoint.java","features.getEnabled().add(new Feature(feature.getName(), type.getCanonicalName(),
		type.getPackage().getImplementationVersion(), type.getPackage().getImplementationVendor()))"
github.com,"spring-cloud/spring-cloud-commons",main,"spring-cloud-commons/src/main/java/org/springframework/cloud/client/serviceregistry/AbstractAutoServiceRegistration.java","this.registrationManagementLifecycles.add(registrationManagementLifecycle)"
github.com,"spring-cloud/spring-cloud-commons",main,"spring-cloud-commons/src/main/java/org/springframework/cloud/client/serviceregistry/AbstractAutoServiceRegistration.java","this.registrationLifecycles.add(registrationLifecycle)"
github.com,"spring-cloud/spring-cloud-commons",main,"spring-cloud-commons/src/main/java/org/springframework/cloud/client/loadbalancer/LoadBalancerAutoConfiguration.java","list.add(loadBalancerInterceptor)"
github.com,"spring-cloud/spring-cloud-commons",main,"spring-cloud-commons/src/main/java/org/springframework/cloud/client/loadbalancer/LoadBalancerAutoConfiguration.java","list.add(loadBalancerInterceptor)"
github.com,"spring-cloud/spring-cloud-commons",main,"spring-cloud-commons/src/main/java/org/springframework/cloud/commons/ConfigDataMissingEnvironmentPostProcessor.java","configImports.add(propertySource.getProperty(CONFIG_IMPORT_PROPERTY))"
github.com,"spring-cloud/spring-cloud-commons",main,"spring-cloud-commons/src/test/java/org/springframework/cloud/configuration/CompatibilityVerifierTests.java","list.add(() -> VerificationResult.notCompatible(""Wrong Boot version"", ""Use Boot version 1.2""))"
github.com,"spring-cloud/spring-cloud-commons",main,"spring-cloud-commons/src/test/java/org/springframework/cloud/configuration/CompatibilityVerifierTests.java","list.add(() -> VerificationResult.notCompatible(""Wrong JDK version"", ""Use JDK 25""))"
github.com,"spring-cloud/spring-cloud-commons",main,"spring-cloud-commons/src/test/java/org/springframework/cloud/client/discovery/health/DiscoveryCompositeHealthContributorTests.java","contributors.add(contributor)"
github.com,"spring-cloud/spring-cloud-commons",main,"spring-cloud-commons/src/test/java/org/springframework/cloud/client/actuator/FeaturesEndpointTests.java","features.getAbstractFeatures().add(Bar.class)"
github.com,"spring-cloud/spring-cloud-commons",main,"spring-cloud-commons/src/test/java/org/springframework/cloud/client/serviceregistry/AutoServiceRegistrationAutoConfigurationTests.java","list.add(AutoServiceRegistrationConfiguration.class)"
github.com,"spring-cloud/spring-cloud-commons",main,"spring-cloud-commons/src/test/java/org/springframework/cloud/client/serviceregistry/AutoServiceRegistrationAutoConfigurationTests.java","list.add(AutoServiceRegistrationAutoConfiguration.class)"
github.com,"spring-cloud/spring-cloud-commons",main,"spring-cloud-commons/src/test/java/org/springframework/cloud/client/serviceregistry/AbstractAutoServiceRegistrationRegistrationLifecycleTests.java","registrationLifecycles.add(new RegistrationLifecycleImpl())"
github.com,"spring-cloud/spring-cloud-commons",main,"spring-cloud-context/src/main/java/org/springframework/cloud/bootstrap/BootstrapConfigFileApplicationListener.java","this.processedProfiles.add(profile)"
github.com,"spring-cloud/spring-cloud-commons",main,"spring-cloud-context/src/main/java/org/springframework/cloud/bootstrap/BootstrapConfigFileApplicationListener.java","loaded.add(document)"
github.com,"spring-cloud/spring-cloud-commons",main,"spring-cloud-context/src/main/java/org/springframework/cloud/bootstrap/BootstrapConfigFileApplicationListener.java","profiles.add(new Profile(profileName))"
github.com,"spring-cloud/spring-cloud-commons",main,"spring-cloud-context/src/main/java/org/springframework/cloud/bootstrap/BootstrapConfigFileApplicationListener.java",activeProfiles::add
github.com,"spring-cloud/spring-cloud-commons",main,"spring-cloud-context/src/main/java/org/springframework/cloud/bootstrap/encrypt/AbstractEnvironmentDecrypt.java","sources.add(0, source)"
github.com,"spring-cloud/spring-cloud-commons",main,"spring-cloud-context/src/main/java/org/springframework/cloud/bootstrap/BootstrapApplicationListener.java","result.add(context.getBean(name, type))"
github.com,"spring-cloud/spring-cloud-commons",main,"spring-cloud-context/src/main/java/org/springframework/cloud/bootstrap/BootstrapApplicationListener.java","this.names.add(source.getName())"
github.com,"spring-cloud/spring-cloud-commons",main,"spring-cloud-context/src/main/java/org/springframework/cloud/bootstrap/BootstrapImportSelector.java","elements.add(new OrderedAnnotatedElement(this.metadataReaderFactory, name))"
github.com,"spring-cloud/spring-cloud-commons",main,"spring-cloud-context/src/main/java/org/springframework/cloud/bootstrap/config/PropertySourceLocator.java","filteredSources.add(p)"
github.com,"spring-cloud/spring-cloud-commons",main,"spring-cloud-context/src/main/java/org/springframework/cloud/bootstrap/config/PropertySourceBootstrapConfiguration.java","sourceList.add(new BootstrapPropertySource<>(enumerable))"
github.com,"spring-cloud/spring-cloud-commons",main,"spring-cloud-context/src/main/java/org/springframework/cloud/bootstrap/config/PropertySourceBootstrapConfiguration.java","sourceList.add(new SimpleBootstrapPropertySource(p))"
github.com,"spring-cloud/spring-cloud-commons",main,"spring-cloud-context/src/main/java/org/springframework/cloud/bootstrap/config/PropertySourceBootstrapConfiguration.java","activeProfiles.add(0, profile)"
github.com,"spring-cloud/spring-cloud-commons",main,"spring-cloud-context/src/main/java/org/springframework/cloud/context/refresh/ContextRefresher.java","sources.add(0, source)"
github.com,"spring-cloud/spring-cloud-commons",main,"spring-cloud-context/src/main/java/org/springframework/cloud/context/refresh/ContextRefresher.java","sources.add(0, source)"
github.com,"spring-cloud/spring-cloud-commons",main,"spring-cloud-context/src/main/java/org/springframework/cloud/context/scope/GenericScope.java","errors.add(e)"
github.com,"spring-cloud/spring-cloud-commons",main,"spring-cloud-context/src/test/java/org/springframework/cloud/bootstrap/TestBootstrapConfiguration.java","fooSightings.add(property)"
github.com,"spring-cloud/spring-cloud-commons",main,"spring-cloud-context/src/test/java/org/springframework/cloud/bootstrap/BootstrapOrderingCustomOverrideSystemPropertiesIntegrationTests.java","sources.add(new MapPropertySource(""testBootstrap1"", singletonMap(""key1"", ""value1"")))"
github.com,"spring-cloud/spring-cloud-commons",main,"spring-cloud-context/src/test/java/org/springframework/cloud/bootstrap/BootstrapOrderingCustomOverrideSystemPropertiesIntegrationTests.java","sources.add(new MapPropertySource(""testBootstrap2"", singletonMap(""key2"", ""value2"")))"
github.com,"spring-cloud/spring-cloud-commons",main,"spring-cloud-context/src/test/java/org/springframework/cloud/bootstrap/BootstrapOrderingCustomOverrideSystemPropertiesIntegrationTests.java","sources.add(new MapPropertySource(""testBootstrap3"", map))"
github.com,"spring-cloud/spring-cloud-commons",main,"spring-cloud-context/src/test/java/org/springframework/cloud/context/refresh/ContextRefresherTests.java","list.add(p.getName())"
github.com,"spring-cloud/spring-cloud-commons",main,"spring-cloud-context/src/test/java/org/springframework/cloud/context/refresh/ContextRefresherOrderingIntegrationTests.java","sources.add(new MapPropertySource(""testContextRefresherOrdering1"", singletonMap(""key1"", ""value1"")))"
github.com,"spring-cloud/spring-cloud-commons",main,"spring-cloud-context/src/test/java/org/springframework/cloud/context/refresh/ContextRefresherOrderingIntegrationTests.java","sources.add(new MapPropertySource(""testContextRefresherOrdering2"", singletonMap(""key2"", ""value2"")))"
github.com,"spring-cloud/spring-cloud-commons",main,"spring-cloud-context/src/test/java/org/springframework/cloud/context/refresh/ContextRefresherOrderingIntegrationTests.java","sources.add(new MapPropertySource(""testContextRefresherOrdering3"", singletonMap(""key3"", ""value3"")))"
github.com,"spring-cloud/spring-cloud-commons",main,"spring-cloud-context/src/test/java/org/springframework/cloud/context/scope/refresh/RefreshScopeConfigurationScaleTests.java","results.add(this.executor.submit(() -> {
	logger.debug(""Background started."");
	try {
		return RefreshScopeConfigurationScaleTests.this.service.getMessage();
	}
	finally {
		latch.countDown();
		logger.debug(""Background done."");
	}
}))"
github.com,"spring-cloud/spring-cloud-commons",main,"spring-cloud-context/src/test/java/org/springframework/cloud/context/scope/refresh/RefreshScopePureScaleTests.java","results.add(this.executor.submit(() -> {
	logger.debug(""Background started."");
	try {
		return RefreshScopePureScaleTests.this.service.getMessage();
	}
	finally {
		latch.countDown();
		logger.debug(""Background done."");
	}
}))"
github.com,"spring-cloud/spring-cloud-commons",main,"spring-cloud-context/src/test/java/org/springframework/cloud/autoconfigure/LifecycleMvcAutoConfigurationTests.java","defaultProperties.add(""server.port=0"")"
github.com,"spring-cloud/spring-cloud-commons",main,"spring-cloud-context/src/test/java/org/springframework/cloud/autoconfigure/LifecycleMvcAutoConfigurationTests.java","defaultProperties.add(""spring.jmx.default-domain=${random.uuid}"")"
github.com,"spring-cloud/spring-cloud-commons",main,"spring-cloud-context/src/test/java/org/springframework/cloud/endpoint/RefreshEndpointTests.java","this.events.add(event)"
github.com,"spring-cloud/spring-cloud-commons",main,"spring-cloud-loadbalancer/src/main/java/org/springframework/cloud/loadbalancer/core/ZonePreferenceServiceInstanceListSupplier.java","filteredInstances.add(serviceInstance)"
github.com,"spring-cloud/spring-cloud-commons",main,"spring-cloud-loadbalancer/src/main/java/org/springframework/cloud/loadbalancer/core/LoadBalancerServiceInstanceCookieTransformer.java","cookieHeaders.add(serviceInstanceCookie)"
github.com,"spring-cloud/spring-cloud-commons",main,"spring-cloud-loadbalancer/src/main/java/org/springframework/cloud/loadbalancer/core/HintBasedServiceInstanceListSupplier.java","filteredInstances.add(serviceInstance)"
github.com,"spring-cloud/spring-cloud-commons",main,"spring-cloud-loadbalancer/src/main/java/org/springframework/cloud/loadbalancer/core/ServiceInstanceListSupplierBuilder.java","this.creators.add(creator)"
github.com,"spring-cloud/spring-cloud-commons",main,"spring-cloud-loadbalancer/src/main/java/org/springframework/cloud/loadbalancer/core/ServiceInstanceListSupplierBuilder.java","this.creators.add(creator)"
github.com,"spring-cloud/spring-cloud-commons",main,"spring-cloud-loadbalancer/src/main/java/org/springframework/cloud/loadbalancer/core/ServiceInstanceListSupplierBuilder.java","this.creators.add(creator)"
github.com,"spring-cloud/spring-cloud-commons",main,"spring-cloud-loadbalancer/src/main/java/org/springframework/cloud/loadbalancer/core/ServiceInstanceListSupplierBuilder.java","this.creators.add(creator)"
github.com,"spring-cloud/spring-cloud-commons",main,"spring-cloud-loadbalancer/src/main/java/org/springframework/cloud/loadbalancer/core/ServiceInstanceListSupplierBuilder.java","this.creators.add(creator)"
github.com,"spring-cloud/spring-cloud-commons",main,"spring-cloud-loadbalancer/src/main/java/org/springframework/cloud/loadbalancer/core/ServiceInstanceListSupplierBuilder.java","this.creators.add(creator)"
github.com,"spring-cloud/spring-cloud-commons",main,"spring-cloud-loadbalancer/src/main/java/org/springframework/cloud/loadbalancer/core/ServiceInstanceListSupplierBuilder.java","this.creators.add(creator)"
github.com,"spring-cloud/spring-cloud-commons",main,"spring-cloud-loadbalancer/src/main/java/org/springframework/cloud/loadbalancer/core/ServiceInstanceListSupplierBuilder.java","this.creators.add(creator)"
github.com,"spring-cloud/spring-cloud-commons",main,"spring-cloud-loadbalancer/src/main/java/org/springframework/cloud/loadbalancer/core/ServiceInstanceListSupplierBuilder.java","this.creators.add(creator)"
github.com,"spring-cloud/spring-cloud-commons",main,"spring-cloud-loadbalancer/src/main/java/org/springframework/cloud/loadbalancer/core/ServiceInstanceListSupplierBuilder.java","this.creators.add(creator)"
github.com,"spring-cloud/spring-cloud-commons",main,"spring-cloud-loadbalancer/src/main/java/org/springframework/cloud/loadbalancer/core/ServiceInstanceListSupplierBuilder.java","creators.add(creator)"
github.com,"spring-cloud/spring-cloud-commons",main,"spring-cloud-loadbalancer/src/main/java/org/springframework/cloud/loadbalancer/core/ServiceInstanceListSupplierBuilder.java","creators.add(creator)"
github.com,"spring-cloud/spring-cloud-commons",main,"spring-cloud-loadbalancer/src/main/java/org/springframework/cloud/loadbalancer/core/ServiceInstanceListSupplierBuilder.java","creators.add(creator)"
github.com,"spring-cloud/spring-cloud-commons",main,"spring-cloud-loadbalancer/src/main/java/org/springframework/cloud/loadbalancer/core/ServiceInstanceListSupplierBuilder.java","creators.add(delegateCreator)"
github.com,"spring-cloud/spring-cloud-commons",main,"spring-cloud-loadbalancer/src/main/java/org/springframework/cloud/loadbalancer/core/HealthCheckServiceInstanceListSupplier.java","
checks.add(alive)"
github.com,"spring-cloud/spring-cloud-commons",main,"spring-cloud-loadbalancer/src/main/java/org/springframework/cloud/loadbalancer/core/HealthCheckServiceInstanceListSupplier.java","result.add(alive)"
github.com,"spring-cloud/spring-cloud-commons",main,"spring-cloud-loadbalancer/src/test/java/org/springframework/cloud/loadbalancer/core/LazyWeightedServiceInstanceListTest.java","serviceInstances.add(serviceInstance(""test-"" + i, buildWeightMetadata(weight)))"
github.com,"spring-cloud/spring-cloud-commons",main,"spring-cloud-loadbalancer/src/test/java/org/springframework/cloud/loadbalancer/core/LazyWeightedServiceInstanceListTest.java","serviceInstances.add(serviceInstance(""test-"" + i, buildWeightMetadata(weight)))"
github.com,"spring-cloud/spring-cloud-commons",main,"spring-cloud-loadbalancer/src/test/java/org/springframework/cloud/loadbalancer/core/LazyWeightedServiceInstanceListTest.java","serviceInstances.add(serviceInstance(""test-"" + i, buildWeightMetadata(weight)))"
github.com,"spring-cloud/spring-cloud-commons",main,"spring-cloud-loadbalancer/src/test/java/org/springframework/cloud/loadbalancer/core/LazyWeightedServiceInstanceListTest.java","serviceInstances.add(serviceInstance(""test-"" + i, buildWeightMetadata(weight)))"
github.com,"spring-cloud/spring-cloud-commons",main,"spring-cloud-loadbalancer/src/test/java/org/springframework/cloud/loadbalancer/core/RoundRobinLoadBalancerTests.java","instances.add(instance)"
github.com,"spring-projects/spring-ldap",main,"test/integration-tests/src/test/java/org/springframework/ldap/itest/DefaultLdapClientListITests.java","transformed.add(LdapUtils.newLdapName(s))"
github.com,"spring-projects/spring-ldap",main,"test/integration-tests/src/test/java/org/springframework/ldap/itest/LdapTemplateListITests.java","transformed.add(LdapUtils.newLdapName(s))"
github.com,"spring-projects/spring-ldap",main,"test/integration-tests/src/test/java/org/springframework/ldap/itest/LdapTemplateAttributesMapperITests.java","list.add(value)"
github.com,"spring-projects/spring-ldap",main,"odm/src/test/java/org/springframework/ldap/odm/test/Person.java","this.objectClasses.add(""inetOrgPerson"")"
github.com,"spring-projects/spring-ldap",main,"odm/src/test/java/org/springframework/ldap/odm/test/Person.java","this.objectClasses.add(""organizationalPerson"")"
github.com,"spring-projects/spring-ldap",main,"odm/src/test/java/org/springframework/ldap/odm/test/Person.java","this.objectClasses.add(""person"")"
github.com,"spring-projects/spring-ldap",main,"odm/src/test/java/org/springframework/ldap/odm/test/Person.java","this.objectClasses.add(""top"")"
github.com,"spring-projects/spring-ldap",main,"odm/src/test/java/org/springframework/ldap/odm/test/OrganizationalUnit.java","
this.objectClass.add(""top"")"
github.com,"spring-projects/spring-ldap",main,"odm/src/test/java/org/springframework/ldap/odm/test/OrganizationalUnit.java","this.objectClass.add(""organizationalUnit"")"
github.com,"spring-projects/spring-ldap",main,"odm/src/test/java/org/springframework/ldap/odm/test/PlainPerson.java","this.objectClasses.add(""top"")"
github.com,"spring-projects/spring-ldap",main,"odm/src/test/java/org/springframework/ldap/odm/test/PlainPerson.java","this.objectClasses.add(""person"")"
github.com,"spring-projects/spring-ldap",main,"samples/odm/src/main/java/org/springframework/ldap/samples/utils/HtmlRowLdapTreeVisitor.java","
rows.add(sb.toString())"
github.com,"spring-projects/spring-ldap",main,"samples/odm/src/main/java/org/springframework/ldap/samples/utils/LdapTree.java","subContexts.add(ldapTree)"
github.com,"spring-projects/spring-ldap",main,"core/src/main/java/org/springframework/ldap/filter/BinaryLogicalFilter.java","this.queryList.add(query)"
github.com,"spring-projects/spring-ldap",main,"core/src/main/java/org/springframework/ldap/core/DistinguishedName.java","this.names.add(new LdapRdn(name.get(i)))"
github.com,"spring-projects/spring-ldap",main,"core/src/main/java/org/springframework/ldap/core/DistinguishedName.java","this.names.add(0, i.previous())"
github.com,"spring-projects/spring-ldap",main,"core/src/main/java/org/springframework/ldap/core/DistinguishedName.java","strings.add(rdn.getLdapEncoded())"
github.com,"spring-projects/spring-ldap",main,"core/src/main/java/org/springframework/ldap/core/DistinguishedName.java","newNames.add(this.names.get(i))"
github.com,"spring-projects/spring-ldap",main,"core/src/main/java/org/springframework/ldap/core/DistinguishedName.java","newNames.add(this.names.get(i))"
github.com,"spring-projects/spring-ldap",main,"core/src/main/java/org/springframework/ldap/core/DistinguishedName.java","this.names.add(index, new LdapRdn(string))"
github.com,"spring-projects/spring-ldap",main,"core/src/main/java/org/springframework/ldap/core/DistinguishedName.java","this.names.add(new LdapRdn(key, value))"
github.com,"spring-projects/spring-ldap",main,"core/src/main/java/org/springframework/ldap/core/DistinguishedName.java","this.names.add(rdn)"
github.com,"spring-projects/spring-ldap",main,"core/src/main/java/org/springframework/ldap/core/DistinguishedName.java","this.names.add(idx, rdn)"
github.com,"spring-projects/spring-ldap",main,"core/src/main/java/org/springframework/ldap/core/DistinguishedName.java","listWithImmutableRdns.add(rdn.immutableLdapRdn())"
github.com,"spring-projects/spring-ldap",main,"core/src/main/java/org/springframework/ldap/core/support/DefaultIncrementalAttributesMapper.java","this.values.add(valueEnum.next())"
github.com,"spring-projects/spring-ldap",main,"core/src/main/java/org/springframework/ldap/core/support/AggregateDirContextProcessor.java","this.dirContextProcessors.add(processor)"
github.com,"spring-projects/spring-ldap",main,"core/src/main/java/org/springframework/ldap/core/CollectingNameClassPairCallbackHandler.java","this.list.add(getObjectFromNameClassPair(nameClassPair))"
github.com,"spring-projects/spring-ldap",main,"core/src/main/java/org/springframework/ldap/core/DirContextAdapter.java","tmpList.add(oneAttribute.getID())"
github.com,"spring-projects/spring-ldap",main,"core/src/main/java/org/springframework/ldap/core/DirContextAdapter.java","// Replace single-vale attribute.
modificationList.add(new ModificationItem(DirContext.REPLACE_ATTRIBUTE, changedAttr))"
github.com,"spring-projects/spring-ldap",main,"core/src/main/java/org/springframework/ldap/core/DirContextAdapter.java","// Attribute has been removed.
modificationList.add(new ModificationItem(DirContext.REMOVE_ATTRIBUTE, changedAttr))"
github.com,"spring-projects/spring-ldap",main,"core/src/main/java/org/springframework/ldap/core/DirContextAdapter.java","// Attribute has been added.
modificationList.add(new ModificationItem(DirContext.ADD_ATTRIBUTE, changedAttr))"
github.com,"spring-projects/spring-ldap",main,"core/src/main/java/org/springframework/ldap/core/DirContextAdapter.java","// This is a multivalue attribute and it is ordered - the original
// value should be replaced with the new values so that the ordering
// is preserved.
modificationList.add(new ModificationItem(DirContext.REPLACE_ATTRIBUTE, changedAttr))"
github.com,"spring-projects/spring-ldap",main,"core/src/main/java/org/springframework/ldap/core/DirContextAdapter.java","// This means that the attributes are not equal, but the
// actual values are the same - thus the order must have
// changed. This should result in a REPLACE_ATTRIBUTE operation.
myModifications.add(new ModificationItem(DirContext.REPLACE_ATTRIBUTE, changedAttr))"
github.com,"spring-projects/spring-ldap",main,"core/src/main/java/org/springframework/ldap/core/DirContextAdapter.java","// This is actually a complete replacement of the attribute values.
// Fall back to REPLACE
modificationList.add(new ModificationItem(DirContext.REPLACE_ATTRIBUTE, addedValuesAttribute))"
github.com,"spring-projects/spring-ldap",main,"core/src/main/java/org/springframework/ldap/core/DirContextAdapter.java","modificationList.add(new ModificationItem(DirContext.REMOVE_ATTRIBUTE, originalClone))"
github.com,"spring-projects/spring-ldap",main,"core/src/main/java/org/springframework/ldap/core/DirContextAdapter.java","modificationList.add(new ModificationItem(DirContext.ADD_ATTRIBUTE, addedValuesAttribute))"
github.com,"spring-projects/spring-ldap",main,"core/src/main/java/org/springframework/ldap/core/DefaultLdapClient.java","mapped.add(result)"
github.com,"spring-projects/spring-ldap",main,"core/src/main/java/org/springframework/ldap/odm/core/impl/AttributeMetaData.java","attrList.add(localAttributeName)"
github.com,"spring-projects/spring-ldap",main,"core/src/main/java/org/springframework/ldap/odm/core/impl/DefaultObjectDirectoryMapper.java","attributeValues.add(this.converterManager.convert(o, attributeInfo.getSyntax(), targetClass))"
github.com,"spring-projects/spring-ldap",main,"core/src/test/java/org/springframework/ldap/core/DistinguishedNameEditorTests.java","result.getNames().add(new LdapRdn(""cn"", ""john doe""))"
github.com,"spring-projects/spring-ldap",main,"core/src/test/java/org/springframework/ldap/control/PagedResultTests.java","expectedList.add(""dummy"")"
github.com,"spring-projects/spring-ldap",main,"core/src/test/java/org/springframework/ldap/control/PagedResultTests.java","otherList.add(""different"")"
github.com,"spring-projects/spring-ldap",main,"samples/plain/src/main/java/org/springframework/ldap/samples/utils/HtmlRowLdapTreeVisitor.java","
rows.add(sb.toString())"
github.com,"spring-projects/spring-ldap",main,"samples/plain/src/main/java/org/springframework/ldap/samples/utils/LdapTree.java","subContexts.add(ldapTree)"
github.com,"spring-projects/spring-credhub",main,"spring-credhub-core/src/main/java/org/springframework/credhub/core/CredHubRestTemplateFactory.java","restTemplate.getInterceptors().add(new CredHubRequestInterceptor())"
github.com,"spring-projects/spring-credhub",main,"spring-credhub-core/src/main/java/org/springframework/credhub/core/CredHubRestTemplateFactory.java","
restTemplate.getInterceptors().add(new CredHubOAuth2RequestInterceptor(clientRegistration, clientManager))"
github.com,"spring-projects/spring-credhub",main,"spring-credhub-core/src/main/java/org/springframework/credhub/configuration/SslCertificateUtils.java","certs.add((X509Certificate) certificateFactory.generateCertificate(inputStream))"
github.com,"spring-projects/spring-credhub",main,"spring-credhub-core/src/main/java/org/springframework/credhub/support/permissions/Permission.java","operationValues.add(operation.operation())"
github.com,"spring-projects/spring-credhub",main,"spring-credhub-core/src/main/java/org/springframework/credhub/support/permissions/Permission.java","this.operations.add(operation)"
github.com,"spring-projects/spring-credhub",main,"spring-credhub-core/src/main/java/org/springframework/credhub/support/utils/JsonUtils.java","subtypes.add(new NamedType(type.getModelClass(), type.getValueType()))"
github.com,"spring-projects/spring-session",main,"spring-session-samples/spring-session-sample-misc-hazelcast/src/integration-test/java/sample/pages/HomePage.java","rows.add(new Attribute(tr))"
github.com,"spring-projects/spring-session",main,"spring-session-samples/spring-session-sample-javaconfig-custom-cookie/src/integration-test/java/sample/pages/HomePage.java","rows.add(new Attribute(tr))"
github.com,"spring-projects/spring-session",main,"spring-session-samples/spring-session-sample-xml-jdbc/src/integration-test/java/sample/pages/HomePage.java","rows.add(new Attribute(tr))"
github.com,"spring-projects/spring-session",main,"buildSrc/src/main/groovy/io/spring/gradle/convention/SpringDependencyManagementConventionPlugin.groovy","dependencyManagementFiles.add(new File(dir, DEPENDENCY_MANAGEMENT_RESOURCE))"
github.com,"spring-projects/spring-session",main,build.gradle,"options.compilerArgs.add(""-parameters"")"
github.com,"spring-projects/spring-session",main,"spring-session-samples/spring-session-sample-xml-redis/src/integration-test/java/sample/pages/HomePage.java","rows.add(new Attribute(tr))"
github.com,"spring-projects/spring-session",main,"spring-session-samples/spring-session-sample-boot-redis-json/src/integration-test/java/sample/pages/HomePage.java","rows.add(new Attribute(tr))"
github.com,"spring-projects/spring-session",main,"spring-session-samples/spring-session-sample-javaconfig-jdbc/src/integration-test/java/sample/pages/HomePage.java","rows.add(new Attribute(tr))"
github.com,"spring-projects/spring-session",main,"spring-session-hazelcast/src/test/java/org/springframework/session/hazelcast/HazelcastIndexedSessionRepositoryTests.java","saved.add(saved1)"
github.com,"spring-projects/spring-session",main,"spring-session-hazelcast/src/test/java/org/springframework/session/hazelcast/HazelcastIndexedSessionRepositoryTests.java","saved.add(saved2)"
github.com,"spring-projects/spring-session",main,"spring-session-jdbc/src/main/java/org/springframework/session/jdbc/JdbcIndexedSessionRepository.java","sessions.add(session)"
github.com,"spring-projects/spring-session",main,"spring-session-jdbc/src/test/java/org/springframework/session/jdbc/JdbcIndexedSessionRepositoryTests.java","saved.add(saved1)"
github.com,"spring-projects/spring-session",main,"spring-session-jdbc/src/test/java/org/springframework/session/jdbc/JdbcIndexedSessionRepositoryTests.java","saved.add(saved2)"
github.com,"spring-projects/spring-session",main,"spring-session-samples/spring-session-sample-boot-websocket/src/integration-test/java/sample/ApplicationTests.java","transports.add(new WebSocketTransport(new StandardWebSocketClient()))"
github.com,"spring-projects/spring-session",main,"spring-session-samples/spring-session-sample-boot-websocket/src/integration-test/java/sample/ApplicationTests.java","transports.add(new RestTemplateXhrTransport())"
github.com,"spring-projects/spring-session",main,"spring-session-samples/spring-session-sample-javaconfig-redis/src/integration-test/java/sample/pages/HomePage.java","rows.add(new Attribute(tr))"
github.com,"spring-projects/spring-session",main,"spring-session-samples/spring-session-sample-boot-webflux-custom-cookie/src/integration-test/java/sample/pages/HomePage.java","rows.add(new Attribute(tr))"
github.com,"spring-projects/spring-session",main,"spring-session-samples/spring-session-sample-boot-webflux/src/integration-test/java/sample/pages/HomePage.java","rows.add(new Attribute(tr))"
github.com,"spring-projects/spring-session",main,"spring-session-core/src/main/java/org/springframework/session/security/SpringSessionBackedSessionRegistry.java","infos.add(new SpringSessionBackedSessionInformation<>(session, this.sessionRepository))"
github.com,"spring-projects/spring-session",main,"spring-session-core/src/main/java/org/springframework/session/web/http/DefaultCookieSerializer.java","matchingCookieValues.add(sessionId)"
github.com,"spring-projects/spring-session",main,"spring-session-core/src/test/java/org/springframework/session/web/http/OncePerRequestFilterTests.java","OncePerRequestFilterTests.this.invocations.add(this)"
github.com,"spring-projects/spring-session",main,"spring-session-core/src/test/java/org/springframework/session/web/http/OncePerRequestFilterTests.java","OncePerRequestFilterTests.this.invocations.add(this)"
github.com,"spring-projects/spring-modulith",main,"spring-modulith-docs/src/main/java/org/springframework/modulith/docs/Documenter.java","sources.add(FALLBACK_GROUP)"
github.com,"spring-projects/spring-modulith",main,"spring-modulith-docs/src/main/java/org/springframework/modulith/docs/Groupings.java","
groupings.add(of(""Commands"", packageOrTypeAnnotatedWith(Command.class)))"
github.com,"spring-projects/spring-modulith",main,"spring-modulith-docs/src/main/java/org/springframework/modulith/docs/Groupings.java","groupings.add(of(""Command dispatchers"", packageOrTypeAnnotatedWith(CommandDispatcher.class)))"
github.com,"spring-projects/spring-modulith",main,"spring-modulith-docs/src/main/java/org/springframework/modulith/docs/Groupings.java","groupings.add(of(""Command handlers"", packageOrTypeAnnotatedWith(CommandHandler.class)))"
github.com,"spring-projects/spring-modulith",main,"spring-modulith-docs/src/main/java/org/springframework/modulith/docs/Groupings.java","groupings.add(of(""Query models"", packageOrTypeAnnotatedWith(QueryModel.class)))"
github.com,"spring-projects/spring-modulith",main,"spring-modulith-docs/src/main/java/org/springframework/modulith/docs/Groupings.java","
groupings.add(of(""Primary ports"", packageOrTypeAnnotatedWith(PrimaryPort.class)))"
github.com,"spring-projects/spring-modulith",main,"spring-modulith-docs/src/main/java/org/springframework/modulith/docs/Groupings.java","groupings.add(of(""Secondary ports"", packageOrTypeAnnotatedWith(SecondaryPort.class)))"
github.com,"spring-projects/spring-modulith",main,"spring-modulith-docs/src/main/java/org/springframework/modulith/docs/Groupings.java","groupings.add(of(""Ports"", packageOrTypeAnnotatedWith(Port.class)))"
github.com,"spring-projects/spring-modulith",main,"spring-modulith-docs/src/main/java/org/springframework/modulith/docs/Groupings.java","
groupings.add(of(""Application"", packageOrTypeAnnotatedWith(Application.class)))"
github.com,"spring-projects/spring-modulith",main,"spring-modulith-docs/src/main/java/org/springframework/modulith/docs/Groupings.java","
groupings.add(of(""Primary adapters"", packageOrTypeAnnotatedWith(PrimaryAdapter.class)))"
github.com,"spring-projects/spring-modulith",main,"spring-modulith-docs/src/main/java/org/springframework/modulith/docs/Groupings.java","groupings.add(of(""Secondary adapters"", packageOrTypeAnnotatedWith(SecondaryAdapter.class)))"
github.com,"spring-projects/spring-modulith",main,"spring-modulith-docs/src/main/java/org/springframework/modulith/docs/Groupings.java","groupings.add(of(""Adapters"", packageOrTypeAnnotatedWith(Adapter.class)))"
github.com,"spring-projects/spring-modulith",main,"spring-modulith-docs/src/main/java/org/springframework/modulith/docs/Groupings.java","
groupings.add(of(""Application layer"", packageOrTypeAnnotatedWith(ApplicationLayer.class)))"
github.com,"spring-projects/spring-modulith",main,"spring-modulith-docs/src/main/java/org/springframework/modulith/docs/Groupings.java","groupings.add(of(""Domain layer"", packageOrTypeAnnotatedWith(DomainLayer.class)))"
github.com,"spring-projects/spring-modulith",main,"spring-modulith-docs/src/main/java/org/springframework/modulith/docs/Groupings.java","groupings.add(of(""Infrastructure layer"", packageOrTypeAnnotatedWith(InfrastructureLayer.class)))"
github.com,"spring-projects/spring-modulith",main,"spring-modulith-docs/src/main/java/org/springframework/modulith/docs/Groupings.java","groupings.add(of(""Interface layer"", packageOrTypeAnnotatedWith(InterfaceLayer.class)))"
github.com,"spring-projects/spring-modulith",main,"spring-modulith-docs/src/main/java/org/springframework/modulith/docs/Groupings.java","
groupings.add(of(""Application ring"", packageOrTypeAnnotatedWith(ApplicationRing.class)))"
github.com,"spring-projects/spring-modulith",main,"spring-modulith-docs/src/main/java/org/springframework/modulith/docs/Groupings.java","groupings.add(of(""Domain ring"", packageOrTypeAnnotatedWith(DomainRing.class)))"
github.com,"spring-projects/spring-modulith",main,"spring-modulith-docs/src/main/java/org/springframework/modulith/docs/Groupings.java","groupings.add(of(""Infrastructure ring"", packageOrTypeAnnotatedWith(InfrastructureRing.class)))"
github.com,"spring-projects/spring-modulith",main,"spring-modulith-docs/src/main/java/org/springframework/modulith/docs/Groupings.java","
groupings.add(of(""Application service ring"", packageOrTypeAnnotatedWith(ApplicationServiceRing.class)))"
github.com,"spring-projects/spring-modulith",main,"spring-modulith-docs/src/main/java/org/springframework/modulith/docs/Groupings.java","groupings.add(of(""Domain service ring"", packageOrTypeAnnotatedWith(DomainServiceRing.class)))"
github.com,"spring-projects/spring-modulith",main,"spring-modulith-docs/src/main/java/org/springframework/modulith/docs/Groupings.java","groupings.add(of(""Domain model ring"", packageOrTypeAnnotatedWith(DomainModelRing.class)))"
github.com,"spring-projects/spring-modulith",main,"spring-modulith-docs/src/main/java/org/springframework/modulith/docs/Groupings.java","groupings.add(of(""Infrastructure ring"",
		packageOrTypeAnnotatedWith(
				org.jmolecules.architecture.onion.classical.InfrastructureRing.class)))"
github.com,"spring-projects/spring-modulith",main,"spring-modulith-events/spring-modulith-events-jdbc/src/main/java/org/springframework/modulith/events/jdbc/JdbcEventPublicationRepository.java","result.add(publication)"
github.com,"spring-projects/spring-modulith",main,"spring-modulith-test/src/main/java/org/springframework/modulith/test/ModuleTestAutoConfiguration.java",packages::add
github.com,"spring-projects/spring-modulith",main,"spring-modulith-test/src/main/java/org/springframework/modulith/test/ModuleTestAutoConfiguration.java",packages::add
github.com,"spring-projects/spring-modulith",main,"spring-modulith-test/src/main/java/org/springframework/modulith/test/DefaultPublishedEvents.java","this.events.add(unwrapPayloadEvent(event))"
github.com,"spring-projects/spring-modulith",main,"spring-modulith-core/src/main/java/com/tngtech/archunit/core/importer/Location.java","result.add(NormalizedResourceName.from(entry.getName()))"
github.com,"spring-projects/spring-modulith",main,"spring-modulith-core/src/main/java/org/springframework/modulith/core/ArchitecturallyEvidentType.java","delegates.add(new JMoleculesArchitecturallyEvidentType(type))"
github.com,"spring-projects/spring-modulith",main,"spring-modulith-core/src/main/java/org/springframework/modulith/core/ArchitecturallyEvidentType.java","delegates.add(new SpringDataAwareArchitecturallyEvidentType(type, beanTypes))"
github.com,"spring-projects/spring-modulith",main,"spring-modulith-core/src/main/java/org/springframework/modulith/core/ArchitecturallyEvidentType.java","
delegates.add(new SpringAwareArchitecturallyEvidentType(type, beanTypes))"
github.com,"spring-projects/spring-modulith",main,"spring-modulith-core/src/main/java/org/springframework/modulith/core/Violations.java","newExceptions.add(exception)"
github.com,"spring-projects/spring-modulith",main,"spring-modulith-core/src/main/java/org/springframework/modulith/core/ApplicationModules.java","names.add(0, it.getName())"
github.com,"spring-projects/spring-modulith",main,"spring-modulith-core/src/main/java/org/springframework/modulith/core/Classes.java","result.add(it)"
github.com,"spring-projects/spring-modulith",main,"spring-modulith-core/src/main/java/org/springframework/modulith/core/NamedInterfaces.java","namedInterfaces.add(it.merge(candidate))"
github.com,"spring-projects/spring-modulith",main,"spring-modulith-core/src/main/java/org/springframework/modulith/core/NamedInterfaces.java","namedInterfaces.add(candidate)"
github.com,"spring-projects/spring-modulith",main,"spring-modulith-events/spring-modulith-events-core/src/main/java/org/springframework/modulith/events/config/EnablePersistentDomainEvents.java","
result.add(EventPublicationConfiguration.class.getName())"
github.com,"spring-projects/spring-security",main,"crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java","testObjectsString.add(new TestObject<>("""", ""$2a$06$DCq7YPn5Rq63x1Lad4cll."",
		""$2a$06$DCq7YPn5Rq63x1Lad4cll.TV4S6ytwfsfvkgY8jIucDrjc8deX1s.""))"
github.com,"spring-projects/spring-security",main,"crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java","testObjectsString.add(new TestObject<>("""", ""$2a$08$HqWuK6/Ng6sg9gQzbLrgb."",
		""$2a$08$HqWuK6/Ng6sg9gQzbLrgb.Tl.ZHfXLhvt/SgVyWhQqgqcZ7ZuUtye""))"
github.com,"spring-projects/spring-security",main,"crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java","testObjectsString.add(new TestObject<>("""", ""$2a$10$k1wbIrmNyFAPwPVPSVa/ze"",
		""$2a$10$k1wbIrmNyFAPwPVPSVa/zecw2BCEnBwVS2GbrmgzxFUOqW9dk4TCW""))"
github.com,"spring-projects/spring-security",main,"crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java","testObjectsString.add(new TestObject<>("""", ""$2a$12$k42ZFHFWqBp3vWli.nIn8u"",
		""$2a$12$k42ZFHFWqBp3vWli.nIn8uYyIkbvYRvodzbfbK18SSsY.CsIQPlxO""))"
github.com,"spring-projects/spring-security",main,"crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java","testObjectsString.add(new TestObject<>("""", ""$2b$06$8eVN9RiU8Yki430X.wBvN."",
		""$2b$06$8eVN9RiU8Yki430X.wBvN.LWaqh2962emLVSVXVZIXJvDYLsV0oFu""))"
github.com,"spring-projects/spring-security",main,"crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java","testObjectsString.add(new TestObject<>("""", ""$2b$06$NlgfNgpIc6GlHciCkMEW8u"",
		""$2b$06$NlgfNgpIc6GlHciCkMEW8uKOBsyvAp7QwlHpysOlKdtyEw50WQua2""))"
github.com,"spring-projects/spring-security",main,"crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java","testObjectsString.add(new TestObject<>("""", ""$2y$06$mFDtkz6UN7B3GZ2qi2hhaO"",
		""$2y$06$mFDtkz6UN7B3GZ2qi2hhaO3OFWzNEdcY84ELw6iHCPruuQfSAXBLK""))"
github.com,"spring-projects/spring-security",main,"crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java","testObjectsString.add(new TestObject<>("""", ""$2y$06$88kSqVttBx.e9iXTPCLa5u"",
		""$2y$06$88kSqVttBx.e9iXTPCLa5uFPrVFjfLH4D.KcO6pBiAmvUkvdg0EYy""))"
github.com,"spring-projects/spring-security",main,"crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java","testObjectsString.add(new TestObject<>(""a"", ""$2a$06$m0CrhHm10qJ3lXRY.5zDGO"",
		""$2a$06$m0CrhHm10qJ3lXRY.5zDGO3rS2KdeeWLuGmsfGlMfOxih58VYVfxe""))"
github.com,"spring-projects/spring-security",main,"crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java","testObjectsString.add(new TestObject<>(""a"", ""$2a$08$cfcvVd2aQ8CMvoMpP2EBfe"",
		""$2a$08$cfcvVd2aQ8CMvoMpP2EBfeodLEkkFJ9umNEfPD18.hUF62qqlC/V.""))"
github.com,"spring-projects/spring-security",main,"crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java","testObjectsString.add(new TestObject<>(""a"", ""$2a$10$k87L/MF28Q673VKh8/cPi."",
		""$2a$10$k87L/MF28Q673VKh8/cPi.SUl7MU/rWuSiIDDFayrKk/1tBsSQu4u""))"
github.com,"spring-projects/spring-security",main,"crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java","testObjectsString.add(new TestObject<>(""a"", ""$2a$12$8NJH3LsPrANStV6XtBakCe"",
		""$2a$12$8NJH3LsPrANStV6XtBakCez0cKHXVxmvxIlcz785vxAIZrihHZpeS""))"
github.com,"spring-projects/spring-security",main,"crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java","testObjectsString.add(new TestObject<>(""a"", ""$2b$06$ehKGYiS4wt2HAr7KQXS5z."",
		""$2b$06$ehKGYiS4wt2HAr7KQXS5z.OaRjB4jHO7rBHJKlGXbqEH3QVJfO7iO""))"
github.com,"spring-projects/spring-security",main,"crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java","testObjectsString.add(new TestObject<>(""a"", ""$2b$06$PWxFFHA3HiCD46TNOZh30e"",
		""$2b$06$PWxFFHA3HiCD46TNOZh30eNto1hg5uM9tHBlI4q/b03SW/gGKUYk6""))"
github.com,"spring-projects/spring-security",main,"crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java","testObjectsString.add(new TestObject<>(""a"", ""$2y$06$LUdD6/aD0e/UbnxVAVbvGu"",
		""$2y$06$LUdD6/aD0e/UbnxVAVbvGuUmIoJ3l/OK94ThhadpMWwKC34LrGEey""))"
github.com,"spring-projects/spring-security",main,"crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java","testObjectsString.add(new TestObject<>(""a"", ""$2y$06$eqgY.T2yloESMZxgp76deO"",
		""$2y$06$eqgY.T2yloESMZxgp76deOROa7nzXDxbO0k.PJvuClTa.Vu1AuemG""))"
github.com,"spring-projects/spring-security",main,"crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java","testObjectsString.add(new TestObject<>(""abc"", ""$2a$06$If6bvum7DFjUnE9p2uDeDu"",
		""$2a$06$If6bvum7DFjUnE9p2uDeDu0YHzrHM6tf.iqN8.yx.jNN1ILEf7h0i""))"
github.com,"spring-projects/spring-security",main,"crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java","testObjectsString.add(new TestObject<>(""abc"", ""$2a$08$Ro0CUfOqk6cXEKf3dyaM7O"",
		""$2a$08$Ro0CUfOqk6cXEKf3dyaM7OhSCvnwM9s4wIX9JeLapehKK5YdLxKcm""))"
github.com,"spring-projects/spring-security",main,"crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java","testObjectsString.add(new TestObject<>(""abc"", ""$2a$10$WvvTPHKwdBJ3uk0Z37EMR."",
		""$2a$10$WvvTPHKwdBJ3uk0Z37EMR.hLA2W6N9AEBhEgrAOljy2Ae5MtaSIUi""))"
github.com,"spring-projects/spring-security",main,"crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java","testObjectsString.add(new TestObject<>(""abc"", ""$2a$12$EXRkfkdmXn2gzds2SSitu."",
		""$2a$12$EXRkfkdmXn2gzds2SSitu.MW9.gAVqa9eLS1//RYtYCmB1eLHg.9q""))"
github.com,"spring-projects/spring-security",main,"crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java","testObjectsString.add(new TestObject<>(""abc"", ""$2b$06$5FyQoicpbox1xSHFfhhdXu"",
		""$2b$06$5FyQoicpbox1xSHFfhhdXuR2oxLpO1rYsQh5RTkI/9.RIjtoF0/ta""))"
github.com,"spring-projects/spring-security",main,"crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java","testObjectsString.add(new TestObject<>(""abc"", ""$2b$06$1kJyuho8MCVP3HHsjnRMkO"",
		""$2b$06$1kJyuho8MCVP3HHsjnRMkO1nvCOaKTqLnjG2TX1lyMFbXH/aOkgc.""))"
github.com,"spring-projects/spring-security",main,"crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java","testObjectsString.add(new TestObject<>(""abc"", ""$2y$06$ACfku9dT6.H8VjdKb8nhlu"",
		""$2y$06$ACfku9dT6.H8VjdKb8nhluaoBmhJyK7GfoNScEfOfrJffUxoUeCjK""))"
github.com,"spring-projects/spring-security",main,"crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java","testObjectsString.add(new TestObject<>(""abc"", ""$2y$06$9JujYcoWPmifvFA3RUP90e"",
		""$2y$06$9JujYcoWPmifvFA3RUP90e5rSEHAb5Ye6iv3.G9ikiHNv5cxjNEse""))"
github.com,"spring-projects/spring-security",main,"crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java","testObjectsString.add(new TestObject<>(""abcdefghijklmnopqrstuvwxyz"", ""$2a$06$.rCVZVOThsIa97pEDOxvGu"",
		""$2a$06$.rCVZVOThsIa97pEDOxvGuRRgzG64bvtJ0938xuqzv18d3ZpQhstC""))"
github.com,"spring-projects/spring-security",main,"crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java","testObjectsString.add(new TestObject<>(""abcdefghijklmnopqrstuvwxyz"", ""$2a$08$aTsUwsyowQuzRrDqFflhge"",
		""$2a$08$aTsUwsyowQuzRrDqFflhgekJ8d9/7Z3GV3UcgvzQW3J5zMyrTvlz.""))"
github.com,"spring-projects/spring-security",main,"crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java","testObjectsString.add(new TestObject<>(""abcdefghijklmnopqrstuvwxyz"", ""$2a$10$fVH8e28OQRj9tqiDXs1e1u"",
		""$2a$10$fVH8e28OQRj9tqiDXs1e1uxpsjN0c7II7YPKXua2NAKYvM6iQk7dq""))"
github.com,"spring-projects/spring-security",main,"crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java","testObjectsString.add(new TestObject<>(""abcdefghijklmnopqrstuvwxyz"", ""$2a$12$D4G5f18o7aMMfwasBL7Gpu"",
		""$2a$12$D4G5f18o7aMMfwasBL7GpuQWuP3pkrZrOAnqP.bmezbMng.QwJ/pG""))"
github.com,"spring-projects/spring-security",main,"crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java","testObjectsString.add(new TestObject<>(""abcdefghijklmnopqrstuvwxyz"", ""$2b$06$O8E89AQPj1zJQA05YvIAU."",
		""$2b$06$O8E89AQPj1zJQA05YvIAU.hMpj25BXri1bupl/Q7CJMlpLwZDNBoO""))"
github.com,"spring-projects/spring-security",main,"crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java","testObjectsString.add(new TestObject<>(""abcdefghijklmnopqrstuvwxyz"", ""$2b$06$PDqIWr./o/P3EE/P.Q0A/u"",
		""$2b$06$PDqIWr./o/P3EE/P.Q0A/uFg86WL/PXTbaW267TDALEwDylqk00Z.""))"
github.com,"spring-projects/spring-security",main,"crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java","testObjectsString.add(new TestObject<>(""abcdefghijklmnopqrstuvwxyz"", ""$2y$06$34MG90ZLah8/ZNr3ltlHCu"",
		""$2y$06$34MG90ZLah8/ZNr3ltlHCuz6bachF8/3S5jTuzF1h2qg2cUk11sFW""))"
github.com,"spring-projects/spring-security",main,"crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java","testObjectsString.add(new TestObject<>(""abcdefghijklmnopqrstuvwxyz"", ""$2y$06$AK.hSLfMyw706iEW24i68u"",
		""$2y$06$AK.hSLfMyw706iEW24i68uKAc2yorPTrB0cimvjJHEBUrPkOq7VvG""))"
github.com,"spring-projects/spring-security",main,"crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java","testObjectsString.add(new TestObject<>(""~!@#$%^&*()      ~!@#$%^&*()PNBFRD"", ""$2a$06$fPIsBO8qRqkjj273rfaOI."",
		""$2a$06$fPIsBO8qRqkjj273rfaOI.HtSV9jLDpTbZn782DC6/t7qT67P6FfO""))"
github.com,"spring-projects/spring-security",main,"crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java","testObjectsString.add(new TestObject<>(""~!@#$%^&*()      ~!@#$%^&*()PNBFRD"", ""$2a$08$Eq2r4G/76Wv39MzSX262hu"",
		""$2a$08$Eq2r4G/76Wv39MzSX262huzPz612MZiYHVUJe/OcOql2jo4.9UxTW""))"
github.com,"spring-projects/spring-security",main,"crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java","testObjectsString.add(new TestObject<>(""~!@#$%^&*()      ~!@#$%^&*()PNBFRD"", ""$2a$10$LgfYWkbzEvQ4JakH7rOvHe"",
		""$2a$10$LgfYWkbzEvQ4JakH7rOvHe0y8pHKF9OaFgwUZ2q7W2FFZmZzJYlfS""))"
github.com,"spring-projects/spring-security",main,"crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java","testObjectsString.add(new TestObject<>(""~!@#$%^&*()      ~!@#$%^&*()PNBFRD"", ""$2a$12$WApznUOJfkEGSmYRfnkrPO"",
		""$2a$12$WApznUOJfkEGSmYRfnkrPOr466oFDCaj4b6HY3EXGvfxm43seyhgC""))"
github.com,"spring-projects/spring-security",main,"crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java","testObjectsString.add(new TestObject<>(""~!@#$%^&*()      ~!@#$%^&*()PNBFRD"", ""$2b$06$FGWA8OlY6RtQhXBXuCJ8Wu"",
		""$2b$06$FGWA8OlY6RtQhXBXuCJ8WusVipRI15cWOgJK8MYpBHEkktMfbHRIG""))"
github.com,"spring-projects/spring-security",main,"crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java","testObjectsString.add(new TestObject<>(""~!@#$%^&*()      ~!@#$%^&*()PNBFRD"", ""$2b$06$G6aYU7UhUEUDJBdTgq3CRe"",
		""$2b$06$G6aYU7UhUEUDJBdTgq3CRekiopCN4O4sNitFXrf5NUscsVZj3a2r6""))"
github.com,"spring-projects/spring-security",main,"crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java","testObjectsString.add(new TestObject<>(""~!@#$%^&*()      ~!@#$%^&*()PNBFRD"", ""$2y$06$sYDFHqOcXTjBgOsqC0WCKe"",
		""$2y$06$sYDFHqOcXTjBgOsqC0WCKeMd3T1UhHuWQSxncLGtXDLMrcE6vFDti""))"
github.com,"spring-projects/spring-security",main,"crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java","testObjectsString.add(new TestObject<>(""~!@#$%^&*()      ~!@#$%^&*()PNBFRD"", ""$2y$06$6Xm0gCw4g7ZNDCEp4yTise"",
		""$2y$06$6Xm0gCw4g7ZNDCEp4yTisez0kSdpXEl66MvdxGidnmChIe8dFmMnq""))"
github.com,"spring-projects/spring-security",main,"crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java","testObjectsByteArray.add(new TestObject<>(new byte[] {}, ""$2a$06$fPIsBO8qRqkjj273rfaOI."",
		""$2a$06$fPIsBO8qRqkjj273rfaOI.uiVGfgi6Z1Iz.vZr11mi/38o09TUVCy""))"
github.com,"spring-projects/spring-security",main,"crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java","testObjectsByteArray.add(new TestObject<>(new byte[] {}, ""$2a$08$Eq2r4G/76Wv39MzSX262hu"",
		""$2a$08$Eq2r4G/76Wv39MzSX262hu2lrqIItOWKIkPsMMvm5LAFD.iVB7Nmm""))"
github.com,"spring-projects/spring-security",main,"crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java","testObjectsByteArray.add(new TestObject<>(new byte[] {}, ""$2a$10$LgfYWkbzEvQ4JakH7rOvHe"",
		""$2a$10$LgfYWkbzEvQ4JakH7rOvHeU6pINYiHnazYxe4GikGWx9MaUr27Vpa""))"
github.com,"spring-projects/spring-security",main,"crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java","testObjectsByteArray.add(new TestObject<>(new byte[] {}, ""$2a$12$WApznUOJfkEGSmYRfnkrPO"",
		""$2a$12$WApznUOJfkEGSmYRfnkrPONS3wcUvmKuh3LpjxSs6g78T77gZta3W""))"
github.com,"spring-projects/spring-security",main,"crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java","testObjectsByteArray.add(new TestObject<>(new byte[] {}, ""$2b$06$FGWA8OlY6RtQhXBXuCJ8Wu"",
		""$2b$06$FGWA8OlY6RtQhXBXuCJ8Wu5oPJaT8BeCRmS273I6cpp5RwwjAWn7S""))"
github.com,"spring-projects/spring-security",main,"crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java","testObjectsByteArray.add(new TestObject<>(new byte[] {}, ""$2b$06$G6aYU7UhUEUDJBdTgq3CRe"",
		""$2b$06$G6aYU7UhUEUDJBdTgq3CRebzUYAyG8MCS3WdBk0CcPb9bfj1.3cSG""))"
github.com,"spring-projects/spring-security",main,"crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java","testObjectsByteArray.add(new TestObject<>(new byte[] {}, ""$2y$06$sYDFHqOcXTjBgOsqC0WCKe"",
		""$2y$06$sYDFHqOcXTjBgOsqC0WCKeOv88fqPKkuV1yGVh./TROmn1mL8gYh2""))"
github.com,"spring-projects/spring-security",main,"crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java","testObjectsByteArray.add(new TestObject<>(new byte[] {}, ""$2y$06$6Xm0gCw4g7ZNDCEp4yTise"",
		""$2y$06$6Xm0gCw4g7ZNDCEp4yTisecBqTHmLJBHxTNZa8w2hupJKsIhPWOgG""))"
github.com,"spring-projects/spring-security",main,"crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java","testObjectsByteArray.add(new TestObject<>(new byte[] { -11 }, ""$2a$06$fPIsBO8qRqkjj273rfaOI."",
		""$2a$06$fPIsBO8qRqkjj273rfaOI.AyMTPwvUEmZ2EdJM/p0S0eP3UQpBas.""))"
github.com,"spring-projects/spring-security",main,"crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java","testObjectsByteArray.add(new TestObject<>(new byte[] { -11 }, ""$2a$08$Eq2r4G/76Wv39MzSX262hu"",
		""$2a$08$Eq2r4G/76Wv39MzSX262huG.pmfTOWNaSXeVmr8y6qut1BpUiou6m""))"
github.com,"spring-projects/spring-security",main,"crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java","testObjectsByteArray.add(new TestObject<>(new byte[] { -11 }, ""$2a$10$LgfYWkbzEvQ4JakH7rOvHe"",
		""$2a$10$LgfYWkbzEvQ4JakH7rOvHeNm5INR.iq7bbwMewV0Tydrmqq3mZ5IK""))"
github.com,"spring-projects/spring-security",main,"crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java","testObjectsByteArray.add(new TestObject<>(new byte[] { -11 }, ""$2a$12$WApznUOJfkEGSmYRfnkrPO"",
		""$2a$12$WApznUOJfkEGSmYRfnkrPOi2qWwoWBJvfFzMrkqJwDedE3poicqwO""))"
github.com,"spring-projects/spring-security",main,"crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java","testObjectsByteArray.add(new TestObject<>(new byte[] { -11 }, ""$2b$06$FGWA8OlY6RtQhXBXuCJ8Wu"",
		""$2b$06$FGWA8OlY6RtQhXBXuCJ8Wuwip8vUd9WHq9onEGUjOS6CBHFkM./IG""))"
github.com,"spring-projects/spring-security",main,"crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java","testObjectsByteArray.add(new TestObject<>(new byte[] { -11 }, ""$2b$06$G6aYU7UhUEUDJBdTgq3CRe"",
		""$2b$06$G6aYU7UhUEUDJBdTgq3CRe6RQpRSN.PQ28XtDFT7zUVvpXNbg.K4i""))"
github.com,"spring-projects/spring-security",main,"crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java","testObjectsByteArray.add(new TestObject<>(new byte[] { -11 }, ""$2y$06$sYDFHqOcXTjBgOsqC0WCKe"",
		""$2y$06$sYDFHqOcXTjBgOsqC0WCKeduM9n5k0YfzTlgg69FIgGpw4ChTQNu2""))"
github.com,"spring-projects/spring-security",main,"crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java","testObjectsByteArray.add(new TestObject<>(new byte[] { -11 }, ""$2y$06$6Xm0gCw4g7ZNDCEp4yTise"",
		""$2y$06$6Xm0gCw4g7ZNDCEp4yTisetcxOr0uSWmFiVtNpDxjd5iaFWs/tyjG""))"
github.com,"spring-projects/spring-security",main,"crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java","testObjectsByteArray.add(new TestObject<>(new byte[] { 76, -56, -12, 9, -116 }, ""$2a$06$fPIsBO8qRqkjj273rfaOI."",
		""$2a$06$fPIsBO8qRqkjj273rfaOI.5m8yX4eGfjqx/tyHtmte7/HbWtUS9u.""))"
github.com,"spring-projects/spring-security",main,"crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java","testObjectsByteArray.add(new TestObject<>(new byte[] { 76, -56, -12, 9, -116 }, ""$2a$08$Eq2r4G/76Wv39MzSX262hu"",
		""$2a$08$Eq2r4G/76Wv39MzSX262hu0Vc3YdKF53qtdTtZJKD7uQfsPeGfkP6""))"
github.com,"spring-projects/spring-security",main,"crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java","testObjectsByteArray.add(new TestObject<>(new byte[] { 76, -56, -12, 9, -116 }, ""$2a$10$LgfYWkbzEvQ4JakH7rOvHe"",
		""$2a$10$LgfYWkbzEvQ4JakH7rOvHeQBR1Mm2USNr//tnItwdVSZFNZfR/L9.""))"
github.com,"spring-projects/spring-security",main,"crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java","testObjectsByteArray.add(new TestObject<>(new byte[] { 76, -56, -12, 9, -116 }, ""$2a$12$WApznUOJfkEGSmYRfnkrPO"",
		""$2a$12$WApznUOJfkEGSmYRfnkrPO2WxEe4rN3gMECOFt21H8ozd661HB8Za""))"
github.com,"spring-projects/spring-security",main,"crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java","testObjectsByteArray.add(new TestObject<>(new byte[] { 76, -56, -12, 9, -116 }, ""$2b$06$FGWA8OlY6RtQhXBXuCJ8Wu"",
		""$2b$06$FGWA8OlY6RtQhXBXuCJ8Wu5SNpYypZvM0j3zTq7vSCtzqOllUArQW""))"
github.com,"spring-projects/spring-security",main,"crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java","testObjectsByteArray.add(new TestObject<>(new byte[] { 76, -56, -12, 9, -116 }, ""$2b$06$G6aYU7UhUEUDJBdTgq3CRe"",
		""$2b$06$G6aYU7UhUEUDJBdTgq3CRejcZ96XDmofwo2r3O/Lw0hoDHQy/Utxq""))"
github.com,"spring-projects/spring-security",main,"crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java","testObjectsByteArray.add(new TestObject<>(new byte[] { 76, -56, -12, 9, -116 }, ""$2y$06$sYDFHqOcXTjBgOsqC0WCKe"",
		""$2y$06$sYDFHqOcXTjBgOsqC0WCKej6.o3knVxc7obV8y47GTTFc9uUWC4OO""))"
github.com,"spring-projects/spring-security",main,"crypto/src/test/java/org/springframework/security/crypto/bcrypt/BCryptTests.java","testObjectsByteArray.add(new TestObject<>(new byte[] { 76, -56, -12, 9, -116 }, ""$2y$06$6Xm0gCw4g7ZNDCEp4yTise"",
		""$2y$06$6Xm0gCw4g7ZNDCEp4yTiseKCvXMhtv0IrQPu9d36a893DjJ880Vb6""))"
github.com,"spring-projects/spring-security",main,"core/src/test/java/org/springframework/security/core/userdetails/UserTests.java","authorities.add(null)"
github.com,"spring-projects/spring-security",main,"core/src/test/java/org/springframework/security/core/userdetails/UserTests.java","authorities.add(null)"
github.com,"spring-projects/spring-security",main,"core/src/test/java/org/springframework/security/core/userdetails/UserTests.java","auths.add(null)"
github.com,"spring-projects/spring-security",main,"core/src/test/java/org/springframework/security/core/userdetails/UserTests.java","auths.add(null)"
github.com,"spring-projects/spring-security",main,"core/src/test/java/org/springframework/security/core/userdetails/UserTests.java","auths.add(new SimpleGrantedAuthority(""ROLE_THREE""))"
github.com,"spring-projects/spring-security",main,"core/src/test/java/org/springframework/security/authentication/ProviderManagerTests.java","providers.add(mock(AuthenticationProvider.class))"
github.com,"spring-projects/spring-security",main,"core/src/test/java/org/springframework/security/authentication/dao/DaoAuthenticationProviderTests.java","userFoundTimes.add(System.currentTimeMillis() - start)"
github.com,"spring-projects/spring-security",main,"core/src/test/java/org/springframework/security/authentication/dao/DaoAuthenticationProviderTests.java","userNotFoundTimes.add(System.currentTimeMillis() - start)"
github.com,"spring-projects/spring-security",main,"core/src/test/java/org/springframework/security/access/vote/UnanimousBasedTests.java","voters.add(roleVoter)"
github.com,"spring-projects/spring-security",main,"core/src/test/java/org/springframework/security/access/vote/UnanimousBasedTests.java","voters.add(denyForSureVoter)"
github.com,"spring-projects/spring-security",main,"core/src/test/java/org/springframework/security/access/vote/UnanimousBasedTests.java","voters.add(denyAgainForSureVoter)"
github.com,"spring-projects/spring-security",main,"core/src/test/java/org/springframework/security/access/vote/UnanimousBasedTests.java","voters.add(roleVoter)"
github.com,"spring-projects/spring-security",main,"core/src/test/java/org/springframework/security/access/vote/UnanimousBasedTests.java","voters.add(denyForSureVoter)"
github.com,"spring-projects/spring-security",main,"core/src/test/java/org/springframework/security/access/vote/UnanimousBasedTests.java","voters.add(denyAgainForSureVoter)"
github.com,"spring-projects/spring-security",main,"core/src/test/java/org/springframework/security/access/vote/AbstractAccessDecisionManagerTests.java","list.add(denyVoter)"
github.com,"spring-projects/spring-security",main,"core/src/test/java/org/springframework/security/access/vote/AbstractAccessDecisionManagerTests.java","list.add(new DenyVoter())"
github.com,"spring-projects/spring-security",main,"core/src/test/java/org/springframework/security/access/vote/AbstractAccessDecisionManagerTests.java","list.add(new MockStringOnlyVoter())"
github.com,"spring-projects/spring-security",main,"core/src/test/java/org/springframework/security/access/vote/AbstractAccessDecisionManagerTests.java","list.add(voter)"
github.com,"spring-projects/spring-security",main,"core/src/test/java/org/springframework/security/access/vote/AbstractAccessDecisionManagerTests.java","list.add(denyVoter)"
github.com,"spring-projects/spring-security",main,"core/src/test/java/org/springframework/security/access/vote/AbstractAccessDecisionManagerTests.java","list.add(voter)"
github.com,"spring-projects/spring-security",main,"core/src/test/java/org/springframework/security/access/vote/AbstractAccessDecisionManagerTests.java","list.add(denyVoter)"
github.com,"spring-projects/spring-security",main,"core/src/test/java/org/springframework/security/access/vote/ConsensusBasedTests.java","voters.add(roleVoter)"
github.com,"spring-projects/spring-security",main,"core/src/test/java/org/springframework/security/access/vote/ConsensusBasedTests.java","voters.add(denyForSureVoter)"
github.com,"spring-projects/spring-security",main,"core/src/test/java/org/springframework/security/access/vote/ConsensusBasedTests.java","voters.add(denyAgainForSureVoter)"
github.com,"spring-projects/spring-security",main,"core/src/test/java/org/springframework/security/access/method/DelegatingMethodSecurityMetadataSourceTests.java","sources.add(delegate)"
github.com,"spring-projects/spring-security",main,"core/src/test/java/org/springframework/security/access/method/DelegatingMethodSecurityMetadataSourceTests.java","sources.add(delegate)"
github.com,"spring-projects/spring-security",main,"core/src/test/java/org/springframework/security/access/annotation/Jsr250VoterTests.java","attrs.add(new Jsr250SecurityConfig(""A""))"
github.com,"spring-projects/spring-security",main,"core/src/test/java/org/springframework/security/access/annotation/Jsr250VoterTests.java","attrs.add(new Jsr250SecurityConfig(""B""))"
github.com,"spring-projects/spring-security",main,"core/src/test/java/org/springframework/security/access/annotation/Jsr250VoterTests.java","attrs.add(new Jsr250SecurityConfig(""C""))"
github.com,"spring-projects/spring-security",main,"core/src/test/java/org/springframework/security/access/expression/method/MethodExpressionVoterTests.java","cad.add(new PreInvocationExpressionAttribute(null, null, ""hasRole('joedoesnt')""))"
github.com,"spring-projects/spring-security",main,"core/src/test/java/org/springframework/security/access/intercept/AfterInvocationProviderManagerTests.java","list.add(new MockAfterInvocationProvider(""swap1"", MethodInvocation.class, new SecurityConfig(""GIVE_ME_SWAP1"")))"
github.com,"spring-projects/spring-security",main,"core/src/test/java/org/springframework/security/access/intercept/AfterInvocationProviderManagerTests.java","list.add(new MockAfterInvocationProvider(""swap2"", MethodInvocation.class, new SecurityConfig(""GIVE_ME_SWAP2"")))"
github.com,"spring-projects/spring-security",main,"core/src/test/java/org/springframework/security/access/intercept/AfterInvocationProviderManagerTests.java","list.add(new MockAfterInvocationProvider(""swap3"", MethodInvocation.class, new SecurityConfig(""GIVE_ME_SWAP3"")))"
github.com,"spring-projects/spring-security",main,"core/src/test/java/org/springframework/security/access/intercept/AfterInvocationProviderManagerTests.java","list.add(new MockAfterInvocationProvider(""swap1"", MethodInvocation.class, new SecurityConfig(""GIVE_ME_SWAP1"")))"
github.com,"spring-projects/spring-security",main,"core/src/test/java/org/springframework/security/access/intercept/AfterInvocationProviderManagerTests.java","list.add(45)"
github.com,"spring-projects/spring-security",main,"core/src/test/java/org/springframework/security/access/intercept/AfterInvocationProviderManagerTests.java","list.add(new MockAfterInvocationProvider(""swap3"", MethodInvocation.class, new SecurityConfig(""GIVE_ME_SWAP3"")))"
github.com,"spring-projects/spring-security",main,"core/src/test/java/org/springframework/security/access/intercept/AfterInvocationProviderManagerTests.java","list.add(new MockAfterInvocationProvider(""swap1"", MethodInvocation.class, new SecurityConfig(""GIVE_ME_SWAP1"")))"
github.com,"spring-projects/spring-security",main,"core/src/test/java/org/springframework/security/access/intercept/AfterInvocationProviderManagerTests.java","list.add(new MockAfterInvocationProvider(""swap2"", MethodInvocation.class, new SecurityConfig(""GIVE_ME_SWAP2"")))"
github.com,"spring-projects/spring-security",main,"core/src/test/java/org/springframework/security/access/intercept/AfterInvocationProviderManagerTests.java","list.add(new MockAfterInvocationProvider(""swap3"", MethodInvocation.class, new SecurityConfig(""GIVE_ME_SWAP3"")))"
github.com,"spring-projects/spring-security",main,"core/src/test/java/org/springframework/security/access/intercept/AfterInvocationProviderManagerTests.java","list.add(new MockAfterInvocationProvider(""swap1"", MethodInvocation.class, new SecurityConfig(""GIVE_ME_SWAP1"")))"
github.com,"spring-projects/spring-security",main,"core/src/test/java/org/springframework/security/access/intercept/AfterInvocationProviderManagerTests.java","list.add(new MockAfterInvocationProvider(""swap2"", MethodInvocation.class, new SecurityConfig(""GIVE_ME_SWAP2"")))"
github.com,"spring-projects/spring-security",main,"core/src/test/java/org/springframework/security/access/intercept/AfterInvocationProviderManagerTests.java","list.add(new MockAfterInvocationProvider(""swap3"", MethodInvocation.class, new SecurityConfig(""GIVE_ME_SWAP3"")))"
github.com,"spring-projects/spring-security",main,"core/src/test/java/org/springframework/security/access/hierarchicalroles/TestHelperTests.java","authoritiesStrings1.add(""ROLE_A"")"
github.com,"spring-projects/spring-security",main,"core/src/test/java/org/springframework/security/access/hierarchicalroles/TestHelperTests.java","authoritiesStrings1.add(""ROLE_B"")"
github.com,"spring-projects/spring-security",main,"core/src/test/java/org/springframework/security/access/hierarchicalroles/TestHelperTests.java","authoritiesStrings2.add(""ROLE_B"")"
github.com,"spring-projects/spring-security",main,"core/src/test/java/org/springframework/security/access/hierarchicalroles/TestHelperTests.java","authoritiesStrings2.add(""ROLE_A"")"
github.com,"spring-projects/spring-security",main,"core/src/test/java/org/springframework/security/access/hierarchicalroles/TestHelperTests.java","authoritiesStrings3.add(""ROLE_A"")"
github.com,"spring-projects/spring-security",main,"core/src/test/java/org/springframework/security/access/hierarchicalroles/TestHelperTests.java","authoritiesStrings3.add(""ROLE_C"")"
github.com,"spring-projects/spring-security",main,"core/src/test/java/org/springframework/security/access/hierarchicalroles/TestHelperTests.java","authoritiesStrings4.add(""ROLE_A"")"
github.com,"spring-projects/spring-security",main,"core/src/test/java/org/springframework/security/access/hierarchicalroles/TestHelperTests.java","authoritiesStrings5.add(""ROLE_A"")"
github.com,"spring-projects/spring-security",main,"core/src/test/java/org/springframework/security/access/hierarchicalroles/TestHelperTests.java","authoritiesStrings5.add(""ROLE_A"")"
github.com,"spring-projects/spring-security",main,"core/src/test/java/org/springframework/security/access/hierarchicalroles/HierarchicalRolesTestHelper.java","result.add(authority.getAuthority())"
github.com,"spring-projects/spring-security",main,"core/src/test/java/org/springframework/security/access/hierarchicalroles/HierarchicalRolesTestHelper.java","// Use non SimpleGrantedAuthority (SEC-863)
authorities.add((GrantedAuthority) () -> role)"
github.com,"spring-projects/spring-security",main,"core/src/test/java/org/springframework/security/authorization/method/PreFilterAuthorizationMethodInterceptorTests.java","list.add(""john"")"
github.com,"spring-projects/spring-security",main,"core/src/test/java/org/springframework/security/authorization/method/PreFilterAuthorizationMethodInterceptorTests.java","list.add(""bob"")"
github.com,"spring-projects/spring-security",main,"core/src/test/java/org/springframework/security/authorization/method/PreFilterAuthorizationMethodInterceptorTests.java","list.add(""john"")"
github.com,"spring-projects/spring-security",main,"core/src/test/java/org/springframework/security/authorization/method/PreFilterAuthorizationMethodInterceptorTests.java","list.add(""bob"")"
github.com,"spring-projects/spring-security",main,"core/src/test/java/org/springframework/security/authorization/method/PreFilterAuthorizationMethodInterceptorTests.java","list.add(""john"")"
github.com,"spring-projects/spring-security",main,"core/src/test/java/org/springframework/security/authorization/method/PreFilterAuthorizationMethodInterceptorTests.java","list.add(""bob"")"
github.com,"spring-projects/spring-security",main,"core/src/main/java/org/springframework/security/access/prepost/PrePostAnnotationSecurityMetadataSource.java","attrs.add(pre)"
github.com,"spring-projects/spring-security",main,"core/src/main/java/org/springframework/security/access/prepost/PrePostAnnotationSecurityMetadataSource.java","attrs.add(post)"
github.com,"spring-projects/spring-security",main,"core/src/main/java/org/springframework/security/access/SecurityConfig.java","attributes.add(new SecurityConfig(attribute.trim()))"
github.com,"spring-projects/spring-security",main,"core/src/main/java/org/springframework/security/access/annotation/Jsr250MethodSecurityMetadataSource.java","attributes.add(Jsr250SecurityConfig.DENY_ALL_ATTRIBUTE)"
github.com,"spring-projects/spring-security",main,"core/src/main/java/org/springframework/security/access/annotation/Jsr250MethodSecurityMetadataSource.java","attributes.add(Jsr250SecurityConfig.PERMIT_ALL_ATTRIBUTE)"
github.com,"spring-projects/spring-security",main,"core/src/main/java/org/springframework/security/access/annotation/Jsr250MethodSecurityMetadataSource.java","attributes.add(new Jsr250SecurityConfig(defaultedAllowed))"
github.com,"spring-projects/spring-security",main,"core/src/main/java/org/springframework/security/access/annotation/SecuredAnnotationSecurityMetadataSource.java","attributes.add(new SecurityConfig(token))"
github.com,"spring-projects/spring-security",main,"core/src/main/java/org/springframework/security/access/expression/method/DefaultMethodSecurityExpressionHandler.java","retain.add(filterObject)"
github.com,"spring-projects/spring-security",main,"core/src/main/java/org/springframework/security/access/expression/method/DefaultMethodSecurityExpressionHandler.java","retain.add(filterObject)"
github.com,"spring-projects/spring-security",main,"core/src/main/java/org/springframework/security/access/intercept/AfterInvocationProviderManager.java","this.providers.add((AfterInvocationProvider) currentObject)"
github.com,"spring-projects/spring-security",main,"core/src/main/java/org/springframework/security/access/intercept/RunAsManagerImpl.java","newAuthorities.add(extraAuthority)"
github.com,"spring-projects/spring-security",main,"core/src/main/java/org/springframework/security/concurrent/DelegatingSecurityContextExecutorService.java","results.add(wrap(task))"
github.com,"spring-projects/spring-security",main,"core/src/main/java/org/springframework/security/authorization/AuthorizationManagers.java","decisions.add(decision)"
github.com,"spring-projects/spring-security",main,"core/src/main/java/org/springframework/security/authorization/AuthorizationManagers.java","decisions.add(decision)"
github.com,"spring-projects/spring-security",main,"core/src/main/java/org/springframework/security/jackson2/SecurityJackson2Modules.java","modules.add(module)"
github.com,"spring-projects/spring-security",main,"core/src/main/java/org/springframework/security/jackson2/UnmodifiableListDeserializer.java","result.add(mapper.readValue(elementNode.traverse(mapper), Object.class))"
github.com,"spring-projects/spring-security",main,"core/src/main/java/org/springframework/security/jackson2/UnmodifiableListDeserializer.java","result.add(mapper.readValue(node.traverse(mapper), Object.class))"
github.com,"spring-projects/spring-security",main,"core/src/main/java/org/springframework/security/core/authority/mapping/SimpleAttributes2GrantedAuthoritiesMapper.java","result.add(getGrantedAuthority(attribute))"
github.com,"spring-projects/spring-security",main,"core/src/main/java/org/springframework/security/core/authority/AuthorityUtils.java","grantedAuthorities.add(new SimpleGrantedAuthority(authority))"
github.com,"spring-projects/spring-security",main,"core/src/main/java/org/springframework/security/core/authority/AuthorityUtils.java","grantedAuthorities.add(new SimpleGrantedAuthority(authority))"
github.com,"spring-projects/spring-security",main,"core/src/main/java/org/springframework/security/core/ComparableVersion.java","list.add(IntItem.ZERO)"
github.com,"spring-projects/spring-security",main,"core/src/main/java/org/springframework/security/core/ComparableVersion.java","list.add(parseItem(isDigit, version.substring(startIndex, i)))"
github.com,"spring-projects/spring-security",main,"core/src/main/java/org/springframework/security/core/ComparableVersion.java","list.add(IntItem.ZERO)"
github.com,"spring-projects/spring-security",main,"core/src/main/java/org/springframework/security/core/ComparableVersion.java","list.add(parseItem(isDigit, version.substring(startIndex, i)))"
github.com,"spring-projects/spring-security",main,"core/src/main/java/org/springframework/security/core/ComparableVersion.java","
list.add(list = new ListItem())"
github.com,"spring-projects/spring-security",main,"core/src/main/java/org/springframework/security/core/ComparableVersion.java","list.add(new StringItem(version.substring(startIndex, i), true))"
github.com,"spring-projects/spring-security",main,"core/src/main/java/org/springframework/security/core/ComparableVersion.java","
list.add(list = new ListItem())"
github.com,"spring-projects/spring-security",main,"core/src/main/java/org/springframework/security/core/ComparableVersion.java","list.add(parseItem(true, version.substring(startIndex, i)))"
github.com,"spring-projects/spring-security",main,"core/src/main/java/org/springframework/security/core/ComparableVersion.java","
list.add(list = new ListItem())"
github.com,"spring-projects/spring-security",main,"core/src/main/java/org/springframework/security/core/ComparableVersion.java","list.add(parseItem(isDigit, version.substring(startIndex)))"
github.com,"spring-projects/spring-security",main,"core/src/main/java/org/springframework/security/core/session/SessionRegistryImpl.java","list.add(sessionInformation)"
github.com,"spring-projects/spring-security",main,"core/src/main/java/org/springframework/security/core/userdetails/User.java","authorities.add(new SimpleGrantedAuthority(""ROLE_"" + role))"
github.com,"spring-projects/spring-security",main,"core/src/main/java/org/springframework/security/core/userdetails/memory/UserAttributeEditor.java","authoritiesAsStrings.add(currentToken)"
github.com,"spring-projects/spring-security",main,"core/src/main/java/org/springframework/security/core/userdetails/memory/UserAttribute.java","this.authorities.add(newAuthority)"
github.com,"spring-projects/spring-security",main,"core/src/main/java/org/springframework/security/context/DelegatingApplicationListener.java","this.listeners.add(smartApplicationListener)"
github.com,"spring-projects/spring-security",main,"core/src/main/java/org/springframework/security/access/vote/UnanimousBased.java","singleAttributeList.add(null)"
github.com,"spring-projects/spring-security",main,"core/src/main/java/org/springframework/security/access/method/MapBasedMethodSecurityMetadataSource.java","matchingMethods.add(method)"
github.com,"spring-projects/spring-security",main,"oauth2/oauth2-jose/src/main/java/org/springframework/security/oauth2/jwt/JwtValidators.java","validators.add(new JwtTimestampValidator())"
github.com,"spring-projects/spring-security",main,"oauth2/oauth2-jose/src/main/java/org/springframework/security/oauth2/jwt/JwtValidators.java","validators.add(new JwtIssuerValidator(issuer))"
github.com,"spring-projects/spring-security",main,"oauth2/oauth2-jose/src/main/java/org/springframework/security/oauth2/jwt/NimbusJwtEncoder.java","x5cList.add(new Base64(x5c))"
github.com,"spring-projects/spring-security",main,"oauth2/oauth2-jose/src/test/java/org/springframework/security/oauth2/jwt/NimbusJweEncoderTests.java","this.jwkList.add(rsaJwk)"
github.com,"spring-projects/spring-security",main,"oauth2/oauth2-jose/src/test/java/org/springframework/security/oauth2/jwt/NimbusJweEncoderTests.java","this.jwkList.add(rsaJwk)"
github.com,"spring-projects/spring-security",main,"oauth2/oauth2-jose/src/test/java/org/springframework/security/oauth2/jwt/NimbusJwtEncoderTests.java","this.jwkList.add(rsaJwk)"
github.com,"spring-projects/spring-security",main,"oauth2/oauth2-jose/src/test/java/org/springframework/security/oauth2/jwt/NimbusJwtEncoderTests.java","this.jwkList.add(rsaJwk)"
github.com,"spring-projects/spring-security",main,"oauth2/oauth2-jose/src/test/java/org/springframework/security/oauth2/jwt/NimbusJwtEncoderTests.java","this.jwkList.add(rsaJwk)"
github.com,"spring-projects/spring-security",main,"oauth2/oauth2-jose/src/test/java/org/springframework/security/oauth2/jwt/NimbusJwtEncoderTests.java","this.jwkList.add(rsaJwk1)"
github.com,"spring-projects/spring-security",main,"oauth2/oauth2-jose/src/test/java/org/springframework/security/oauth2/jwt/NimbusJwtEncoderTests.java","this.jwkList.add(rsaJwk2)"
github.com,"spring-projects/spring-security",main,"oauth2/oauth2-jose/src/test/java/org/springframework/security/oauth2/jwt/NimbusJwtEncoderTests.java","this.jwkList.add(rsaJwk1)"
github.com,"spring-projects/spring-security",main,"oauth2/oauth2-jose/src/test/java/org/springframework/security/oauth2/jwt/NimbusJwtEncoderTests.java","this.jwkList.add(rsaJwk2)"
github.com,"spring-projects/spring-security",main,"oauth2/oauth2-jose/src/test/java/org/springframework/security/oauth2/jwt/NimbusJwtEncoderTests.java","this.jwkList.add(rsaJwk)"
github.com,"spring-projects/spring-security",main,"test/src/main/java/org/springframework/security/test/context/support/WithMockUserSecurityContextFactory.java","grantedAuthorities.add(new SimpleGrantedAuthority(authority))"
github.com,"spring-projects/spring-security",main,"test/src/main/java/org/springframework/security/test/context/support/WithMockUserSecurityContextFactory.java","grantedAuthorities.add(new SimpleGrantedAuthority(""ROLE_"" + role))"
github.com,"spring-projects/spring-security",main,"test/src/main/java/org/springframework/security/test/web/reactive/server/SecurityMockServerConfigurers.java","filters.add(0, new MutatorFilter())"
github.com,"spring-projects/spring-security",main,"test/src/main/java/org/springframework/security/test/web/reactive/server/SecurityMockServerConfigurers.java","filters.add(0, filter)"
github.com,"spring-projects/spring-security",main,"test/src/main/java/org/springframework/security/test/web/reactive/server/SecurityMockServerConfigurers.java","filters.add(0, new SetupMutatorFilter(this.context))"
github.com,"spring-projects/spring-security",main,"test/src/main/java/org/springframework/security/test/web/reactive/server/SecurityMockServerConfigurers.java","filters.add(0, (exchange, chain) -> {
			ServerOAuth2AuthorizedClientRepository authorizedClientRepository = OAuth2ClientServerTestUtils
					.getAuthorizedClientRepository(exchange);
			if (!(authorizedClientRepository instanceof TestOAuth2AuthorizedClientRepository)) {
				authorizedClientRepository = new TestOAuth2AuthorizedClientRepository(authorizedClientRepository);
				OAuth2ClientServerTestUtils.setAuthorizedClientRepository(exchange, authorizedClientRepository);
			}
			TestOAuth2AuthorizedClientRepository.enable(exchange);
			return authorizedClientRepository.saveAuthorizedClient(client, null, exchange)
					.then(chain.filter(exchange));
		})"
github.com,"spring-projects/spring-security",main,"test/src/main/java/org/springframework/security/test/web/servlet/request/SecurityMockMvcRequestPostProcessors.java","authorities.add(new SimpleGrantedAuthority(ROLE_PREFIX + role))"
github.com,"spring-projects/spring-security",main,"test/src/test/java/org/springframework/security/test/context/support/WithSecurityContextTestExcecutionListenerTests.java","listeners.add(otherListener)"
github.com,"spring-projects/spring-security",main,"test/src/test/java/org/springframework/security/test/context/support/WithSecurityContextTestExcecutionListenerTests.java","listeners.add(this.listener)"
github.com,"spring-projects/spring-security",main,"test/src/test/java/org/springframework/security/test/web/reactive/server/SecurityMockServerConfigurersOAuth2ClientTests.java","filters.add((exchange, chain) -> {
						ServerOAuth2AuthorizedClientRepository repository = (ServerOAuth2AuthorizedClientRepository) ReflectionTestUtils
								.getField(this.authorizedClientManager, ""authorizedClientRepository"");
						assertThat(repository).isInstanceOf(TestOAuth2AuthorizedClientRepository.class);
						return repository.loadAuthorizedClient(""registration-id"", null, exchange)
								.switchIfEmpty(Mono.error(new AssertionError(""no authorized client found"")))
								.then(chain.filter(exchange));
					})"
github.com,"spring-projects/spring-security",main,"test/src/test/java/org/springframework/security/test/web/servlet/response/SecurityMockWithAuthoritiesMvcResultMatchersTests.java","grantedAuthorities.add(new SimpleGrantedAuthority(""ROLE_ADMIN""))"
github.com,"spring-projects/spring-security",main,"test/src/test/java/org/springframework/security/test/web/servlet/response/SecurityMockWithAuthoritiesMvcResultMatchersTests.java","grantedAuthorities.add(new SimpleGrantedAuthority(""ROLE_SELLER""))"
github.com,"spring-projects/spring-security",main,"test/src/test/java/org/springframework/security/test/web/servlet/response/SecurityMockWithAuthoritiesMvcResultMatchersTests.java","grantedAuthorities.add(new SimpleGrantedAuthority(""ROLE_ADMIN""))"
github.com,"spring-projects/spring-security",main,build.gradle,"options.compilerArgs.add(""-parameters"")"
github.com,"spring-projects/spring-security",main,"taglibs/src/main/java/org/springframework/security/taglibs/authz/AccessControlListTag.java","parsedPermissions.add(parsedPermission)"
github.com,"spring-projects/spring-security",main,"oauth2/oauth2-core/src/test/java/org/springframework/security/oauth2/core/web/reactive/function/OAuth2BodyExtractorsTests.java","messageReaders.add(new DecoderHttpMessageReader<>(new ByteBufferDecoder()))"
github.com,"spring-projects/spring-security",main,"oauth2/oauth2-core/src/test/java/org/springframework/security/oauth2/core/web/reactive/function/OAuth2BodyExtractorsTests.java","messageReaders.add(new DecoderHttpMessageReader<>(StringDecoder.allMimeTypes()))"
github.com,"spring-projects/spring-security",main,"oauth2/oauth2-core/src/test/java/org/springframework/security/oauth2/core/web/reactive/function/OAuth2BodyExtractorsTests.java","messageReaders.add(new DecoderHttpMessageReader<>(new Jackson2JsonDecoder()))"
github.com,"spring-projects/spring-security",main,"oauth2/oauth2-core/src/test/java/org/springframework/security/oauth2/core/web/reactive/function/OAuth2BodyExtractorsTests.java","messageReaders.add(new FormHttpMessageReader())"
github.com,"spring-projects/spring-security",main,"oauth2/oauth2-core/src/test/java/org/springframework/security/oauth2/core/converter/ClaimConversionServiceTests.java","jsonArray.add(""1"")"
github.com,"spring-projects/spring-security",main,"oauth2/oauth2-core/src/test/java/org/springframework/security/oauth2/core/converter/ClaimConversionServiceTests.java","jsonArray.add(""2"")"
github.com,"spring-projects/spring-security",main,"oauth2/oauth2-core/src/test/java/org/springframework/security/oauth2/core/converter/ClaimConversionServiceTests.java","jsonArray.add(""3"")"
github.com,"spring-projects/spring-security",main,"oauth2/oauth2-core/src/test/java/org/springframework/security/oauth2/core/converter/ClaimConversionServiceTests.java","jsonArray.add(null)"
github.com,"spring-projects/spring-security",main,"oauth2/oauth2-core/src/test/java/org/springframework/security/oauth2/core/converter/ClaimTypeConverterTests.java","jsonArray.add(""1"")"
github.com,"spring-projects/spring-security",main,"config/src/test/java/org/springframework/security/config/MockEventListener.java","this.events.add(event)"
github.com,"spring-projects/spring-security",main,"config/src/test/java/org/springframework/security/config/http/Saml2LoginBeanDefinitionParserTests.java","response.getAssertions().add(assertion)"
github.com,"spring-projects/spring-security",main,"config/src/test/java/org/springframework/security/config/annotation/method/configuration/PrePostMethodSecurityConfigurationTests.java","names.add(""bob"")"
github.com,"spring-projects/spring-security",main,"config/src/test/java/org/springframework/security/config/annotation/method/configuration/PrePostMethodSecurityConfigurationTests.java","names.add(""joe"")"
github.com,"spring-projects/spring-security",main,"config/src/test/java/org/springframework/security/config/annotation/method/configuration/PrePostMethodSecurityConfigurationTests.java","names.add(""sam"")"
github.com,"spring-projects/spring-security",main,"config/src/test/java/org/springframework/security/config/annotation/method/configuration/PrePostMethodSecurityConfigurationTests.java","names.add(""bob"")"
github.com,"spring-projects/spring-security",main,"config/src/test/java/org/springframework/security/config/annotation/method/configuration/PrePostMethodSecurityConfigurationTests.java","names.add(""joe"")"
github.com,"spring-projects/spring-security",main,"config/src/test/java/org/springframework/security/config/annotation/method/configuration/PrePostMethodSecurityConfigurationTests.java","names.add(""sam"")"
github.com,"spring-projects/spring-security",main,"config/src/test/java/org/springframework/security/config/annotation/SecurityConfigurerAdapterClosureTests.java","l.add(""a"")"
github.com,"spring-projects/spring-security",main,"config/src/test/java/org/springframework/security/config/annotation/authentication/configuration/AuthenticationConfigurationTests.java","inits.add(getClass())"
github.com,"spring-projects/spring-security",main,"config/src/test/java/org/springframework/security/config/annotation/authentication/configuration/AuthenticationConfigurationTests.java","configs.add(getClass())"
github.com,"spring-projects/spring-security",main,"config/src/test/java/org/springframework/security/config/annotation/web/configuration/HttpSecurityConfigurationTests.java","EVENTS.add(authentication)"
github.com,"spring-projects/spring-security",main,"config/src/test/java/org/springframework/security/config/annotation/web/configuration/HttpSecurityConfigurationTests.java","EVENTS.add(authentication)"
github.com,"spring-projects/spring-security",main,"config/src/test/java/org/springframework/security/config/annotation/web/configuration/HttpSecurityConfigurationTests.java","EVENTS.add(event)"
github.com,"spring-projects/spring-security",main,"config/src/test/java/org/springframework/security/config/annotation/web/configuration/HttpSecurityConfigurationTests.java","EVENTS.add(event)"
github.com,"spring-projects/spring-security",main,"config/src/test/java/org/springframework/security/config/annotation/web/configurers/NamespaceSessionManagementTests.java","this.events.add(event)"
github.com,"spring-projects/spring-security",main,"config/src/test/java/org/springframework/security/config/annotation/web/configurers/saml2/Saml2LoginConfigurerTests.java","response.getAssertions().add(assertion)"
github.com,"spring-projects/spring-security",main,"config/src/test/java/org/springframework/security/config/annotation/web/configurers/ExpressionUrlAuthorizationConfigurerTests.java","EVENTS.add(event)"
github.com,"spring-projects/spring-security",main,"config/src/test/java/org/springframework/security/config/annotation/web/configurers/oauth2/client/OAuth2LoginConfigurerTests.java","mappedAuthorities.add(new SimpleGrantedAuthority(isOidc ? ""ROLE_OIDC_USER"" : ""ROLE_OAUTH2_USER""))"
github.com,"spring-projects/spring-security",main,"config/src/test/java/org/springframework/security/config/annotation/web/configurers/oauth2/client/OAuth2LoginConfigurerTests.java","EVENTS.add(event)"
github.com,"spring-projects/spring-security",main,"config/src/test/java/org/springframework/security/config/annotation/web/configurers/oauth2/client/OAuth2LoginConfigurerTests.java","EVENTS.add(event)"
github.com,"spring-projects/spring-security",main,"config/src/test/java/org/springframework/security/config/doc/XsdDocumentedTests.java","currentDocAttrNameToElmt.computeIfAbsent(docAttrName, (key) -> new ArrayList<>()).add(elmtId)"
github.com,"spring-projects/spring-security",main,"config/src/test/java/org/springframework/security/config/doc/XsdDocumentedTests.java","currentDocAttrNameToElmt.computeIfAbsent(docAttrName, (key) -> new ArrayList<>()).add(elmtId)"
github.com,"spring-projects/spring-security",main,"config/src/integration-test/java/org/springframework/security/config/annotation/rsocket/RSocketMessageHandlerITests.java","this.payloads.add(p)"
github.com,"spring-projects/spring-security",main,"config/src/integration-test/java/org/springframework/security/config/annotation/rsocket/HelloRSocketITests.java","this.payloads.add(p)"
github.com,"spring-projects/spring-security",main,"config/src/integration-test/java/org/springframework/security/config/annotation/rsocket/SimpleAuthenticationITests.java","this.payloads.add(p)"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/method/GlobalMethodSecurityBeanDefinitionParser.java","delegates.add(new RuntimeBeanReference(metaDataSourceId))"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/method/GlobalMethodSecurityBeanDefinitionParser.java","afterInvocationProviders.add(afterInvocationBldr.getBeanDefinition())"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/method/GlobalMethodSecurityBeanDefinitionParser.java","delegates.add(mds.getBeanDefinition())"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/method/GlobalMethodSecurityBeanDefinitionParser.java","delegates.add(BeanDefinitionBuilder.rootBeanDefinition(SecuredAnnotationSecurityMetadataSource.class)
		.getBeanDefinition())"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/method/GlobalMethodSecurityBeanDefinitionParser.java","delegates.add(jsrMetadataSource)"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/method/GlobalMethodSecurityBeanDefinitionParser.java","delegates.add(ref)"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/method/GlobalMethodSecurityBeanDefinitionParser.java","afterInvocationProviders.add(new RuntimeBeanReference(elt.getAttribute(ATT_REF)))"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/method/GlobalMethodSecurityBeanDefinitionParser.java","voters.add(expressionVoter)"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/method/GlobalMethodSecurityBeanDefinitionParser.java","voters.add(new RootBeanDefinition(RoleVoter.class))"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/method/GlobalMethodSecurityBeanDefinitionParser.java","voters.add(new RootBeanDefinition(AuthenticatedVoter.class))"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/method/GlobalMethodSecurityBeanDefinitionParser.java","voters.add(new RootBeanDefinition(Jsr250Voter.class))"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/method/GlobalMethodSecurityBeanDefinitionParser.java","attributes.add(new SecurityConfig(token))"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/method/MethodConfigUtils.java","defaultVoters.add(new RootBeanDefinition(voter))"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/authentication/UserServiceBeanDefinitionParser.java","users.add(user.getBeanDefinition())"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/authentication/AuthenticationManagerBeanDefinitionParser.java","providers.add(extracted(element, pc, resolver, (Element) node))"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/authentication/AuthenticationManagerBeanDefinitionParser.java","providers.add(new RootBeanDefinition(NullAuthenticationProvider.class))"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/OAuth2ClientWebMvcSecurityPostProcessor.java","argumentResolvers.add(beanDefinitionBuilder.getBeanDefinition())"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/Saml2LoginBeanDefinitionParser.java","this.authenticationProviders.add(
		new RuntimeBeanReference(pc.getReaderContext().registerWithGeneratedName(saml2AuthenticationProvider)))"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/Saml2LoginBeanDefinitionParser.java","this.csrfIgnoreRequestMatchers.add(requestMatcher)"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/OAuth2ResourceServerBeanDefinitionParser.java","this.authenticationProviders.add(new RuntimeBeanReference(
		pc.getReaderContext().registerWithGeneratedName(jwtAuthenticationProvider)))"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/OAuth2ResourceServerBeanDefinitionParser.java","this.authenticationProviders.add(new RuntimeBeanReference(
		pc.getReaderContext().registerWithGeneratedName(opaqueTokenAuthenticationProvider)))"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/OAuth2ResourceServerBeanDefinitionParser.java","this.ignoreCsrfRequestMatchers.add(requestMatcher)"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/Saml2LogoutBeanDefinitionParser.java","handlers.add(BeanDefinitionBuilder.rootBeanDefinition(SecurityContextLogoutHandler.class).getBeanDefinition())"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/Saml2LogoutBeanDefinitionParser.java","handlers.add(BeanDefinitionBuilder.rootBeanDefinition(LogoutSuccessEventPublishingLogoutHandler.class)
		.getBeanDefinition())"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/HeadersBeanDefinitionParser.java","this.headerWriters.add(headersWriter.getBeanDefinition())"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/HeadersBeanDefinitionParser.java","this.headerWriters.add(headersWriter.getBeanDefinition())"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/HeadersBeanDefinitionParser.java","this.headerWriters.add(headersWriter.getBeanDefinition())"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/HeadersBeanDefinitionParser.java","this.headerWriters.add(headersWriter.getBeanDefinition())"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/HeadersBeanDefinitionParser.java","this.headerWriters.add(headersWriter.getBeanDefinition())"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/HeadersBeanDefinitionParser.java","this.headerWriters.add(headersWriter.getBeanDefinition())"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/HeadersBeanDefinitionParser.java","this.headerWriters.add(headersWriter.getBeanDefinition())"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/HeadersBeanDefinitionParser.java","this.headerWriters.add(builder.getBeanDefinition())"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/HeadersBeanDefinitionParser.java","this.headerWriters.add(builder.getBeanDefinition())"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/HeadersBeanDefinitionParser.java","this.headerWriters.add(builder.getBeanDefinition())"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/HeadersBeanDefinitionParser.java","this.headerWriters.add(new RuntimeBeanReference(headerFactoryRef))"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/HeadersBeanDefinitionParser.java","this.headerWriters.add(builder.getBeanDefinition())"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/HeadersBeanDefinitionParser.java","this.headerWriters.add(builder.getBeanDefinition())"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/HeadersBeanDefinitionParser.java","this.headerWriters.add(builder.getBeanDefinition())"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/HeadersBeanDefinitionParser.java","this.headerWriters.add(builder.getBeanDefinition())"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/HeadersBeanDefinitionParser.java","this.headerWriters.add(builder.getBeanDefinition())"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/FilterChainMapBeanDefinitionDecorator.java","securityFilterChains.add(createSecurityFilterChain(matcher, new ManagedList(0)))"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/FilterChainMapBeanDefinitionDecorator.java","filterChain.add(new RuntimeBeanReference(name))"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/FilterChainMapBeanDefinitionDecorator.java","securityFilterChains.add(createSecurityFilterChain(matcher, filterChain))"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/LogoutBeanDefinitionParser.java","this.logoutHandlers.add(csrfLogoutHandler)"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/LogoutBeanDefinitionParser.java","this.logoutHandlers.add(sclh)"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/LogoutBeanDefinitionParser.java","this.logoutHandlers.add(new RuntimeBeanReference(this.rememberMeServices))"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/LogoutBeanDefinitionParser.java","this.logoutHandlers.add(cookieDeleter)"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/LogoutBeanDefinitionParser.java","this.logoutHandlers.add(new RootBeanDefinition(LogoutSuccessEventPublishingLogoutHandler.class))"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/HttpConfigurationBuilder.java","delegateSessionStrategies.add(this.csrfAuthStrategy)"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/HttpConfigurationBuilder.java","delegateSessionStrategies.add(concurrentSessionStrategy.getBeanDefinition())"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/HttpConfigurationBuilder.java","delegateSessionStrategies.add(sessionFixationStrategy.getBeanDefinition())"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/HttpConfigurationBuilder.java","delegateSessionStrategies.add(new RuntimeBeanReference(sessionAuthStratRef))"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/HttpConfigurationBuilder.java","delegateSessionStrategies.add(registerSessionStrategy.getBeanDefinition())"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/HttpConfigurationBuilder.java","channelProcessors.add(secureChannelProcessor)"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/HttpConfigurationBuilder.java","channelProcessors.add(inSecureChannelProcessor)"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/HttpConfigurationBuilder.java","voters.add(expressionVoter.getBeanDefinition())"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/HttpConfigurationBuilder.java","voters.add(GrantedAuthorityDefaultsParserUtils.registerWithDefaultRolePrefix(this.pc,
		RoleVoterBeanFactory.class))"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/HttpConfigurationBuilder.java","voters.add(new RootBeanDefinition(AuthenticatedVoter.class))"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/HttpConfigurationBuilder.java","filters.add(new OrderDecorator(this.forceEagerSessionCreationFilter,
		SecurityFilters.FORCE_EAGER_SESSION_FILTER))"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/HttpConfigurationBuilder.java","filters.add(new OrderDecorator(this.disableUrlRewriteFilter, SecurityFilters.DISABLE_ENCODE_URL_FILTER))"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/HttpConfigurationBuilder.java","filters.add(new OrderDecorator(this.cpf, SecurityFilters.CHANNEL_FILTER))"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/HttpConfigurationBuilder.java","filters.add(new OrderDecorator(this.concurrentSessionFilter, SecurityFilters.CONCURRENT_SESSION_FILTER))"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/HttpConfigurationBuilder.java","filters.add(new OrderDecorator(this.webAsyncManagerFilter, SecurityFilters.WEB_ASYNC_MANAGER_FILTER))"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/HttpConfigurationBuilder.java","filters.add(new OrderDecorator(this.securityContextPersistenceFilter, SecurityFilters.SECURITY_CONTEXT_FILTER))"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/HttpConfigurationBuilder.java","filters.add(new OrderDecorator(this.servApiFilter, SecurityFilters.SERVLET_API_SUPPORT_FILTER))"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/HttpConfigurationBuilder.java","filters.add(new OrderDecorator(this.jaasApiFilter, SecurityFilters.JAAS_API_SUPPORT_FILTER))"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/HttpConfigurationBuilder.java","filters.add(new OrderDecorator(this.sfpf, SecurityFilters.SESSION_MANAGEMENT_FILTER))"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/HttpConfigurationBuilder.java","filters.add(new OrderDecorator(this.fsi, SecurityFilters.FILTER_SECURITY_INTERCEPTOR))"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/HttpConfigurationBuilder.java","filters.add(new OrderDecorator(this.requestCacheAwareFilter, SecurityFilters.REQUEST_CACHE_FILTER))"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/HttpConfigurationBuilder.java","filters.add(new OrderDecorator(this.corsFilter, SecurityFilters.CORS_FILTER))"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/HttpConfigurationBuilder.java","filters.add(new OrderDecorator(this.addHeadersFilter, SecurityFilters.HEADERS_FILTER))"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/HttpConfigurationBuilder.java","filters.add(new OrderDecorator(this.csrfFilter, SecurityFilters.CSRF_FILTER))"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/HttpConfigurationBuilder.java","filters.add(new OrderDecorator(this.wellKnownChangePasswordRedirectFilter,
		SecurityFilters.WELL_KNOWN_CHANGE_PASSWORD_REDIRECT_FILTER))"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/CsrfBeanDefinitionParser.java","compositeList.add(denied)"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/CsrfBeanDefinitionParser.java","compositeList.add(observing)"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/CsrfBeanDefinitionParser.java","ands.add(requestMatcher)"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/CsrfBeanDefinitionParser.java","ands.add(negated.getBeanDefinition())"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/HttpSecurityBeanDefinitionParser.java","filterChains.add(createFilterChain(element, pc))"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/HttpSecurityBeanDefinitionParser.java","filterChain.add(od.bean)"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/HttpSecurityBeanDefinitionParser.java","customFilters.add(new OrderDecorator(bean, SecurityFilters.valueOf(position)))"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/HttpSecurityBeanDefinitionParser.java","customFilters.add(new OrderDecorator(bean, SecurityFilters.LAST))"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/HttpSecurityBeanDefinitionParser.java","customFilters.add(new OrderDecorator(bean, order.getOrder() + 1))"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/HttpSecurityBeanDefinitionParser.java","customFilters.add(new OrderDecorator(bean, SecurityFilters.FIRST))"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/HttpSecurityBeanDefinitionParser.java","customFilters.add(new OrderDecorator(bean, order.getOrder() - 1))"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/FilterChainBeanDefinitionParser.java","filterChain.add(new RuntimeBeanReference(name))"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/AuthenticationConfigBuilder.java","this.logoutHandlers.add(this.csrfLogoutHandler)"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/AuthenticationConfigBuilder.java","this.logoutHandlers.add(new RuntimeBeanReference(this.rememberMeServicesId))"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/AuthenticationConfigBuilder.java","this.logoutHandlers.add(new RootBeanDefinition(SecurityContextLogoutHandler.class))"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/AuthenticationConfigBuilder.java","filters.add(new OrderDecorator(this.anonymousFilter, SecurityFilters.ANONYMOUS_FILTER))"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/AuthenticationConfigBuilder.java","filters.add(new OrderDecorator(this.rememberMeFilter, SecurityFilters.REMEMBER_ME_FILTER))"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/AuthenticationConfigBuilder.java","filters.add(new OrderDecorator(this.logoutFilter, SecurityFilters.LOGOUT_FILTER))"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/AuthenticationConfigBuilder.java","filters.add(new OrderDecorator(this.x509Filter, SecurityFilters.X509_FILTER))"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/AuthenticationConfigBuilder.java","filters.add(new OrderDecorator(this.jeeFilter, SecurityFilters.PRE_AUTH_FILTER))"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/AuthenticationConfigBuilder.java","filters.add(
		new OrderDecorator(new RuntimeBeanReference(this.formFilterId), SecurityFilters.FORM_LOGIN_FILTER))"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/AuthenticationConfigBuilder.java","filters.add(new OrderDecorator(new RuntimeBeanReference(this.oauth2LoginFilterId),
		SecurityFilters.OAUTH2_LOGIN_FILTER))"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/AuthenticationConfigBuilder.java","filters.add(new OrderDecorator(this.oauth2AuthorizationRequestRedirectFilter,
		SecurityFilters.OAUTH2_AUTHORIZATION_REQUEST_FILTER))"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/AuthenticationConfigBuilder.java","filters.add(new OrderDecorator(this.loginPageGenerationFilter, SecurityFilters.LOGIN_PAGE_FILTER))"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/AuthenticationConfigBuilder.java","filters.add(new OrderDecorator(this.logoutPageGenerationFilter, SecurityFilters.LOGOUT_PAGE_FILTER))"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/AuthenticationConfigBuilder.java","filters.add(new OrderDecorator(this.basicFilter, SecurityFilters.BASIC_AUTH_FILTER))"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/AuthenticationConfigBuilder.java","filters.add(
		new OrderDecorator(this.bearerTokenAuthenticationFilter, SecurityFilters.BEARER_TOKEN_AUTH_FILTER))"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/AuthenticationConfigBuilder.java","filters.add(new OrderDecorator(this.authorizationRequestRedirectFilter,
		SecurityFilters.OAUTH2_AUTHORIZATION_REQUEST_FILTER.getOrder() + 1))"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/AuthenticationConfigBuilder.java","filters.add(new OrderDecorator(this.authorizationCodeGrantFilter,
		SecurityFilters.OAUTH2_AUTHORIZATION_CODE_GRANT_FILTER))"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/AuthenticationConfigBuilder.java","filters.add(new OrderDecorator(new RuntimeBeanReference(this.saml2AuthenticationFilterId),
		SecurityFilters.SAML2_AUTHENTICATION_FILTER))"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/AuthenticationConfigBuilder.java","filters.add(new OrderDecorator(new RuntimeBeanReference(this.saml2AuthenticationRequestFilterId),
		SecurityFilters.SAML2_AUTHENTICATION_REQUEST_FILTER))"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/AuthenticationConfigBuilder.java","filters.add(new OrderDecorator(new RuntimeBeanReference(this.saml2LogoutFilterId),
		SecurityFilters.SAML2_LOGOUT_FILTER))"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/AuthenticationConfigBuilder.java","filters.add(new OrderDecorator(new RuntimeBeanReference(this.saml2LogoutRequestFilterId),
		SecurityFilters.SAML2_LOGOUT_REQUEST_FILTER))"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/AuthenticationConfigBuilder.java","filters.add(new OrderDecorator(new RuntimeBeanReference(this.saml2LogoutResponseFilterId),
		SecurityFilters.SAML2_LOGOUT_RESPONSE_FILTER))"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/AuthenticationConfigBuilder.java","filters.add(new OrderDecorator(this.etf, SecurityFilters.EXCEPTION_TRANSLATION_FILTER))"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/AuthenticationConfigBuilder.java","providers.add(this.anonymousProviderRef)"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/AuthenticationConfigBuilder.java","providers.add(this.rememberMeProviderRef)"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/AuthenticationConfigBuilder.java","providers.add(this.x509ProviderRef)"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/AuthenticationConfigBuilder.java","providers.add(this.jeeProviderRef)"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/AuthenticationConfigBuilder.java","providers.add(this.oauth2LoginAuthenticationProviderRef)"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/AuthenticationConfigBuilder.java","providers.add(this.oauth2LoginOidcAuthenticationProviderRef)"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/http/AuthenticationConfigBuilder.java","providers.add(this.authorizationCodeAuthenticationProviderRef)"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/saml2/RelyingPartyRegistrationsBeanDefinitionParser.java","verificationCredentials.add(getSaml2VerificationCredential(certificateLocation))"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/saml2/RelyingPartyRegistrationsBeanDefinitionParser.java","encryptionCredentials.add(getSaml2EncryptionCredential(certificateLocation))"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/saml2/RelyingPartyRegistrationsBeanDefinitionParser.java","verificationCertificateLocations.add(certificateLocation)"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/saml2/RelyingPartyRegistrationsBeanDefinitionParser.java","encryptionCertificateLocations.add(certificateLocation)"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/saml2/RelyingPartyRegistrationsBeanDefinitionParser.java","relyingPartyRegistrations.add(builder.build())"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/annotation/method/configuration/GlobalMethodSecuritySelector.java","classNames.add(MethodSecurityMetadataSourceAdvisorRegistrar.class.getName())"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/annotation/method/configuration/GlobalMethodSecuritySelector.java","classNames.add(autoProxyClassName)"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/annotation/method/configuration/GlobalMethodSecuritySelector.java","classNames.add(GlobalMethodSecurityConfiguration.class.getName())"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/annotation/method/configuration/GlobalMethodSecuritySelector.java","classNames.add(Jsr250MetadataSourceConfiguration.class.getName())"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/annotation/method/configuration/GlobalMethodSecurityConfiguration.java","afterInvocationProviders.add(postInvocationAdviceProvider)"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/annotation/method/configuration/GlobalMethodSecurityConfiguration.java","decisionVoters.add(new PreInvocationAuthorizationAdviceVoter(expressionAdvice))"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/annotation/method/configuration/GlobalMethodSecurityConfiguration.java","decisionVoters.add(new Jsr250Voter())"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/annotation/method/configuration/GlobalMethodSecurityConfiguration.java","decisionVoters.add(roleVoter)"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/annotation/method/configuration/GlobalMethodSecurityConfiguration.java","decisionVoters.add(new AuthenticatedVoter())"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/annotation/method/configuration/GlobalMethodSecurityConfiguration.java","sources.add(customMethodSecurityMetadataSource)"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/annotation/method/configuration/GlobalMethodSecurityConfiguration.java","sources.add(new PrePostAnnotationSecurityMetadataSource(attributeFactory))"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/annotation/method/configuration/GlobalMethodSecurityConfiguration.java","sources.add(new SecuredAnnotationSecurityMetadataSource())"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/annotation/method/configuration/GlobalMethodSecurityConfiguration.java","sources.add(jsr250MethodSecurityMetadataSource)"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/annotation/method/configuration/ReactiveMethodSecuritySelector.java","imports.add(ReactiveAuthorizationManagerMethodSecurityConfiguration.class.getName())"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/annotation/method/configuration/ReactiveMethodSecuritySelector.java","imports.add(ReactiveMethodSecurityConfiguration.class.getName())"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/annotation/method/configuration/MethodSecuritySelector.java","imports.add(PrePostMethodSecurityConfiguration.class.getName())"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/annotation/method/configuration/MethodSecuritySelector.java","imports.add(SecuredMethodSecurityConfiguration.class.getName())"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/annotation/method/configuration/MethodSecuritySelector.java","imports.add(Jsr250MethodSecurityConfiguration.class.getName())"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/annotation/configuration/AutowireBeanFactoryObjectPostProcessor.java","this.disposableBeans.add((DisposableBean) result)"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/annotation/configuration/AutowireBeanFactoryObjectPostProcessor.java","this.smartSingletons.add((SmartInitializingSingleton) result)"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/annotation/authentication/configuration/AuthenticationConfiguration.java","list.add(beanName)"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/annotation/authentication/configurers/provisioning/UserDetailsManagerConfigurer.java","this.users.add(userDetails)"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/annotation/authentication/configurers/provisioning/UserDetailsManagerConfigurer.java","this.users.add(userBuilder.build())"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/annotation/authentication/configurers/provisioning/UserDetailsManagerConfigurer.java","this.userBuilders.add(userBuilder)"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/annotation/authentication/configurers/provisioning/JdbcUserDetailsManagerConfigurer.java","this.initScripts.add(new ClassPathResource(""org/springframework/security/core/userdetails/jdbc/users.ddl""))"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/annotation/authentication/builders/AuthenticationManagerBuilder.java","this.authenticationProviders.add(authenticationProvider)"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/annotation/rsocket/RSocketSecurity.java","this.payloadInterceptors.add(interceptor)"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/annotation/rsocket/RSocketSecurity.java","result.add(this.basicAuthSpec.build())"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/annotation/rsocket/RSocketSecurity.java","result.add(this.simpleAuthSpec.build())"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/annotation/rsocket/RSocketSecurity.java","result.add(anonymous())"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/annotation/rsocket/RSocketSecurity.java","result.add(this.authorizePayload.build())"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/annotation/SecurityConfigurerAdapter.java","this.postProcessors.add(objectPostProcessor)"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/annotation/web/configuration/AutowiredWebSecurityConfigurersIgnoreParents.java","webSecurityConfigurers.add(entry.getValue())"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/annotation/web/configuration/WebMvcSecurityConfiguration.java","argumentResolvers.add(authenticationPrincipalResolver)"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/annotation/web/configuration/WebMvcSecurityConfiguration.java","argumentResolvers
		.add(new org.springframework.security.web.bind.support.AuthenticationPrincipalArgumentResolver())"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/annotation/web/configuration/WebMvcSecurityConfiguration.java","argumentResolvers.add(currentSecurityContextArgumentResolver)"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/annotation/web/configuration/WebMvcSecurityConfiguration.java","argumentResolvers.add(new CsrfTokenArgumentResolver())"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/annotation/web/configuration/OAuth2ClientConfiguration.java","argumentResolvers.add(resolver)"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/annotation/web/socket/AbstractSecurityWebSocketMessageBrokerConfigurer.java","argumentResolvers.add(new AuthenticationPrincipalArgumentResolver())"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/annotation/web/socket/AbstractSecurityWebSocketMessageBrokerConfigurer.java","voters.add(voter)"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/annotation/web/socket/AbstractSecurityWebSocketMessageBrokerConfigurer.java","interceptorsToSet.add(new CsrfTokenHandshakeInterceptor())"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/annotation/web/socket/AbstractSecurityWebSocketMessageBrokerConfigurer.java","interceptorsToSet.add(new CsrfTokenHandshakeInterceptor())"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/annotation/web/socket/WebSocketMessageBrokerSecurityConfiguration.java","argumentResolvers.add(resolver)"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/annotation/web/socket/WebSocketMessageBrokerSecurityConfiguration.java","interceptorsToSet.add(new CsrfTokenHandshakeInterceptor())"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/annotation/web/socket/WebSocketMessageBrokerSecurityConfiguration.java","interceptorsToSet.add(new CsrfTokenHandshakeInterceptor())"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/annotation/web/configurers/RequestCacheConfigurer.java","matchers.add(0, getRequests)"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/annotation/web/configurers/RequestCacheConfigurer.java","matchers.add(notFavIcon)"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/annotation/web/configurers/RequestCacheConfigurer.java","matchers.add(notMatchingMediaType(http, MediaType.APPLICATION_JSON))"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/annotation/web/configurers/RequestCacheConfigurer.java","matchers.add(notXRequestedWith)"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/annotation/web/configurers/RequestCacheConfigurer.java","matchers.add(notMatchingMediaType(http, MediaType.MULTIPART_FORM_DATA))"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/annotation/web/configurers/RequestCacheConfigurer.java","matchers.add(notMatchingMediaType(http, MediaType.TEXT_EVENT_STREAM))"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/annotation/web/configurers/HeadersConfigurer.java","this.headerWriters.add(headerWriter)"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/annotation/web/configurers/HeadersConfigurer.java","values.add(value)"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/annotation/web/configurers/LogoutConfigurer.java","this.logoutHandlers.add(logoutHandler)"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/annotation/web/configurers/LogoutConfigurer.java","this.logoutHandlers.add(this.contextLogoutHandler)"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/annotation/web/configurers/LogoutConfigurer.java","this.logoutHandlers.add(postProcess(new LogoutSuccessEventPublishingLogoutHandler()))"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/annotation/web/configurers/AuthorizeHttpRequestsConfigurer.java","m.add(0, new RequestMatcherEntry<>(matcher, manager))"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/annotation/web/configurers/ExpressionUrlAuthorizationConfigurer.java","decisionVoters.add(expressionVoter)"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/annotation/web/configurers/saml2/Saml2LogoutConfigurer.java","this.logoutHandlers.add(new SecurityContextLogoutHandler())"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/annotation/web/configurers/saml2/Saml2LogoutConfigurer.java","this.logoutHandlers.add(new LogoutSuccessEventPublishingLogoutHandler())"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/annotation/web/configurers/AbstractConfigAttributeRequestMatcherRegistry.java","this.urlMappings.add(urlMapping)"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/annotation/web/configurers/AbstractConfigAttributeRequestMatcherRegistry.java","this.urlMappings.add(index, urlMapping)"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/annotation/web/configurers/SessionManagementConfigurer.java","this.sessionAuthenticationStrategies.add(sessionAuthenticationStrategy)"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/annotation/web/configurers/SessionManagementConfigurer.java","delegateStrategies.add(defaultSessionAuthenticationStrategy)"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/annotation/web/configurers/UrlAuthorizationConfigurer.java","decisionVoters.add(new RoleVoter())"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/annotation/web/configurers/UrlAuthorizationConfigurer.java","decisionVoters.add(new AuthenticatedVoter())"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/annotation/web/builders/HttpSecurity.java","sortedFilters.add(((OrderedFilter) filter).filter)"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/annotation/web/builders/HttpSecurity.java","this.filters.add(new OrderedFilter(filter, order))"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/annotation/web/builders/HttpSecurity.java","this.filters.add(new OrderedFilter(filter, order))"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/annotation/web/builders/HttpSecurity.java","matchers.add(new AntPathRequestMatcher(pattern))"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/annotation/web/builders/HttpSecurity.java","matchers.add(matcher)"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/annotation/web/builders/WebSecurity.java","this.securityFilterChainBuilders.add(securityFilterChainBuilder)"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/annotation/web/builders/WebSecurity.java","securityFilterChains.add(securityFilterChain)"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/annotation/web/builders/WebSecurity.java","requestMatcherPrivilegeEvaluatorsEntries
		.add(getRequestMatcherPrivilegeEvaluatorsEntry(securityFilterChain))"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/annotation/web/builders/WebSecurity.java","securityFilterChains.add(securityFilterChain)"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/annotation/web/builders/WebSecurity.java","requestMatcherPrivilegeEvaluatorsEntries
		.add(getRequestMatcherPrivilegeEvaluatorsEntry(securityFilterChain))"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/annotation/web/builders/WebSecurity.java","privilegeEvaluators.add(defaultWebInvocationPrivilegeEvaluator)"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/annotation/web/builders/WebSecurity.java","privilegeEvaluators.add(evaluator)"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/annotation/web/messaging/MessageSecurityMetadataSourceRegistry.java","matchers.add(new PathMatcherMessageMatcherBuilder(pattern, type))"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/annotation/web/messaging/MessageSecurityMetadataSourceRegistry.java","builders.add(new PreBuiltMatcherBuilder(matcher))"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/annotation/web/AbstractRequestMatcherRegistry.java","matchers.add(matcher)"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/annotation/web/AbstractRequestMatcherRegistry.java","matchers.add(new DispatcherTypeRequestMatcher(dispatcherType, method))"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/annotation/web/AbstractRequestMatcherRegistry.java","matchers.add(new RegexRequestMatcher(pattern, method))"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/annotation/web/servlet/configuration/WebMvcSecurityConfiguration.java","argumentResolvers.add(new AuthenticationPrincipalArgumentResolver())"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/annotation/web/servlet/configuration/WebMvcSecurityConfiguration.java","argumentResolvers
		.add(new org.springframework.security.web.bind.support.AuthenticationPrincipalArgumentResolver())"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/annotation/AbstractConfiguredSecurityBuilder.java","configs.add(configurer)"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/annotation/AbstractConfiguredSecurityBuilder.java","this.configurersAddedInInitializing.add(configurer)"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/web/server/ServerHttpSecurity.java","this.webFilters.add(new OrderedWebFilter(webFilter, order.getOrder()))"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/web/server/ServerHttpSecurity.java","this.webFilters.add(new OrderedWebFilter(webFilter, order.getOrder() - 1))"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/web/server/ServerHttpSecurity.java","this.webFilters.add(new OrderedWebFilter(webFilter, order.getOrder() + 1))"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/web/server/ServerHttpSecurity.java","this.webFilters.add(securityContextRepositoryWebFilter)"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/web/server/ServerHttpSecurity.java","sortedWebFilters.add(f)"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/web/server/ServerHttpSecurity.java","sortedWebFilters.add(0, new ServerWebExchangeReactorContextWebFilter())"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/web/server/ServerHttpSecurity.java","entryPoints
		.add(new DelegateEntry(this.xhrMatcher, new HttpStatusServerEntryPoint(HttpStatus.UNAUTHORIZED)))"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/web/server/ServerHttpSecurity.java","ServerHttpSecurity.this.defaultEntryPoints.add(new DelegateEntry(preferredMatcher, this.entryPoint))"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/web/server/ServerHttpSecurity.java","ServerHttpSecurity.this.defaultEntryPoints.add(0,
		new DelegateEntry(htmlMatcher, this.authenticationEntryPoint))"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/web/server/ServerHttpSecurity.java","this.writers.add(serverHttpHeadersWriter)"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/web/server/ServerHttpSecurity.java","this.logoutHandlers.add(logoutHandler)"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/web/server/ServerHttpSecurity.java","http.defaultEntryPoints.add(new DelegateEntry(matcher, entryPoint))"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/web/server/ServerHttpSecurity.java","http.defaultEntryPoints.add(new DelegateEntry(defaultEntryPointMatcher, defaultEntryPoint))"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/web/server/ServerHttpSecurity.java","http.defaultAccessDeniedHandlers
		.add(new ServerWebExchangeDelegatingServerAccessDeniedHandler.DelegateEntry(
				this.authenticationConverterServerWebExchangeMatcher,
				OAuth2ResourceServerSpec.this.accessDeniedHandler))"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/web/server/ServerHttpSecurity.java","http.defaultEntryPoints.add(new DelegateEntry(this.authenticationConverterServerWebExchangeMatcher,
		OAuth2ResourceServerSpec.this.entryPoint))"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/web/server/AbstractServerWebExchangeMatcherRegistry.java","pathPatterns.add(pathPattern)"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/oauth2/client/ClientRegistrationsBeanDefinitionParser.java","clientRegistrations.add(builder.build())"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/websocket/WebSocketMessageBrokerSecurityBeanDefinitionParser.java","voters.add(messageExpressionVoterBldr.getBeanDefinition())"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/websocket/WebSocketMessageBrokerSecurityBeanDefinitionParser.java","argResolvers.add(new RootBeanDefinition(AuthenticationPrincipalArgumentResolver.class))"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/websocket/WebSocketMessageBrokerSecurityBeanDefinitionParser.java","interceptors.add(new RootBeanDefinition(SecurityContextChannelInterceptor.class))"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/websocket/WebSocketMessageBrokerSecurityBeanDefinitionParser.java","interceptors.add(new RootBeanDefinition(CsrfChannelInterceptor.class))"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/websocket/WebSocketMessageBrokerSecurityBeanDefinitionParser.java","interceptors.add(registry.getBeanDefinition(this.inboundSecurityInterceptorId))"
github.com,"spring-projects/spring-security",main,"config/src/main/java/org/springframework/security/config/websocket/WebSocketMessageBrokerSecurityBeanDefinitionParser.java","interceptors.add(new RootBeanDefinition(CsrfTokenHandshakeInterceptor.class))"
github.com,"spring-projects/spring-security",main,"config/src/test/java/org/springframework/security/test/support/ModifiedClassPathClassLoader.java","extractedUrls.add(url)"
github.com,"spring-projects/spring-security",main,"config/src/test/java/org/springframework/security/test/support/ModifiedClassPathClassLoader.java","urls.add(new URL(entry))"
github.com,"spring-projects/spring-security",main,"config/src/test/java/org/springframework/security/test/support/ModifiedClassPathClassLoader.java","processedUrls.add(url)"
github.com,"spring-projects/spring-security",main,"config/src/test/java/org/springframework/security/test/support/ModifiedClassPathClassLoader.java","resolvedArtifacts.add(artifact.getArtifact().getFile().toURI().toURL())"
github.com,"spring-projects/spring-security",main,"config/src/test/java/org/springframework/security/test/support/ModifiedClassPathClassLoader.java","dependencies.add(new Dependency(new DefaultArtifact(coordinate), null))"
github.com,"spring-projects/spring-security",main,"config/src/test/java/org/springframework/security/htmlunit/server/MockWebResponseBuilder.java","result.add(new NameValuePair(headerName, headerValue))"
github.com,"spring-projects/spring-security",main,"config/src/test/java/org/springframework/security/config/test/SpringTestContext.java","this.postProcessors.add(contextConsumer)"
github.com,"spring-projects/spring-security",main,"config/src/test/java/org/springframework/security/config/test/SpringTestContext.java","this.filters.add(filter)"
github.com,"spring-projects/spring-security",main,"config/src/test/java/org/springframework/security/config/test/SpringTestContext.java","this.filters.add(filter)"
github.com,"spring-projects/spring-security",main,"config/src/test/java/org/springframework/security/config/test/SpringTestContextExtension.java","result.add((SpringTestContext) field.get(test))"
github.com,"spring-projects/spring-security",main,"config/src/test/java/org/springframework/security/config/test/SpringTestParentApplicationContextExecutionListener.java","result.add((SpringTestContext) field.get(test))"
github.com,"spring-projects/spring-security",main,"config/src/test/java/org/springframework/security/config/method/MethodSecurityBeanDefinitionParserTests.java","names.add(""bob"")"
github.com,"spring-projects/spring-security",main,"config/src/test/java/org/springframework/security/config/method/MethodSecurityBeanDefinitionParserTests.java","names.add(""joe"")"
github.com,"spring-projects/spring-security",main,"config/src/test/java/org/springframework/security/config/method/MethodSecurityBeanDefinitionParserTests.java","names.add(""sam"")"
github.com,"spring-projects/spring-security",main,"config/src/test/java/org/springframework/security/config/method/MethodSecurityBeanDefinitionParserTests.java","names.add(""bob"")"
github.com,"spring-projects/spring-security",main,"config/src/test/java/org/springframework/security/config/method/MethodSecurityBeanDefinitionParserTests.java","names.add(""joe"")"
github.com,"spring-projects/spring-security",main,"config/src/test/java/org/springframework/security/config/method/MethodSecurityBeanDefinitionParserTests.java","names.add(""sam"")"
github.com,"spring-projects/spring-security",main,"config/src/test/java/org/springframework/security/config/method/GlobalMethodSecurityBeanDefinitionParserTests.java","arg.add(""joe"")"
github.com,"spring-projects/spring-security",main,"config/src/test/java/org/springframework/security/config/method/GlobalMethodSecurityBeanDefinitionParserTests.java","arg.add(""bob"")"
github.com,"spring-projects/spring-security",main,"config/src/test/java/org/springframework/security/config/method/GlobalMethodSecurityBeanDefinitionParserTests.java","arg.add(""sam"")"
github.com,"spring-projects/spring-security",main,"config/src/test/java/org/springframework/security/config/authentication/AuthenticationManagerBeanDefinitionParserTests.java","this.events.add(event)"
github.com,"spring-projects/spring-security",main,"oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/web/reactive/function/client/MockExchangeFunction.java","this.requests.add(request)"
github.com,"spring-projects/spring-security",main,"oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/web/reactive/function/client/ServerOAuth2AuthorizedClientExchangeFilterFunctionTests.java","messageWriters.add(new EncoderHttpMessageWriter<>(new ByteBufferEncoder()))"
github.com,"spring-projects/spring-security",main,"oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/web/reactive/function/client/ServerOAuth2AuthorizedClientExchangeFilterFunctionTests.java","messageWriters.add(new EncoderHttpMessageWriter<>(CharSequenceEncoder.textPlainOnly()))"
github.com,"spring-projects/spring-security",main,"oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/web/reactive/function/client/ServerOAuth2AuthorizedClientExchangeFilterFunctionTests.java","messageWriters.add(new ResourceHttpMessageWriter())"
github.com,"spring-projects/spring-security",main,"oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/web/reactive/function/client/ServerOAuth2AuthorizedClientExchangeFilterFunctionTests.java","messageWriters.add(new EncoderHttpMessageWriter<>(jsonEncoder))"
github.com,"spring-projects/spring-security",main,"oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/web/reactive/function/client/ServerOAuth2AuthorizedClientExchangeFilterFunctionTests.java","messageWriters.add(new ServerSentEventHttpMessageWriter(jsonEncoder))"
github.com,"spring-projects/spring-security",main,"oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/web/reactive/function/client/ServerOAuth2AuthorizedClientExchangeFilterFunctionTests.java","messageWriters.add(new FormHttpMessageWriter())"
github.com,"spring-projects/spring-security",main,"oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/web/reactive/function/client/ServerOAuth2AuthorizedClientExchangeFilterFunctionTests.java","messageWriters.add(new EncoderHttpMessageWriter<>(CharSequenceEncoder.allMimeTypes()))"
github.com,"spring-projects/spring-security",main,"oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/web/reactive/function/client/ServerOAuth2AuthorizedClientExchangeFilterFunctionTests.java","messageWriters.add(new MultipartHttpMessageWriter(messageWriters))"
github.com,"spring-projects/spring-security",main,"oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/web/reactive/function/client/ServletOAuth2AuthorizedClientExchangeFilterFunctionTests.java","messageWriters.add(new EncoderHttpMessageWriter<>(new ByteBufferEncoder()))"
github.com,"spring-projects/spring-security",main,"oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/web/reactive/function/client/ServletOAuth2AuthorizedClientExchangeFilterFunctionTests.java","messageWriters.add(new EncoderHttpMessageWriter<>(CharSequenceEncoder.textPlainOnly()))"
github.com,"spring-projects/spring-security",main,"oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/web/reactive/function/client/ServletOAuth2AuthorizedClientExchangeFilterFunctionTests.java","messageWriters.add(new ResourceHttpMessageWriter())"
github.com,"spring-projects/spring-security",main,"oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/web/reactive/function/client/ServletOAuth2AuthorizedClientExchangeFilterFunctionTests.java","messageWriters.add(new EncoderHttpMessageWriter<>(jsonEncoder))"
github.com,"spring-projects/spring-security",main,"oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/web/reactive/function/client/ServletOAuth2AuthorizedClientExchangeFilterFunctionTests.java","messageWriters.add(new ServerSentEventHttpMessageWriter(jsonEncoder))"
github.com,"spring-projects/spring-security",main,"oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/web/reactive/function/client/ServletOAuth2AuthorizedClientExchangeFilterFunctionTests.java","messageWriters.add(new FormHttpMessageWriter())"
github.com,"spring-projects/spring-security",main,"oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/web/reactive/function/client/ServletOAuth2AuthorizedClientExchangeFilterFunctionTests.java","messageWriters.add(new EncoderHttpMessageWriter<>(CharSequenceEncoder.allMimeTypes()))"
github.com,"spring-projects/spring-security",main,"oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/web/reactive/function/client/ServletOAuth2AuthorizedClientExchangeFilterFunctionTests.java","messageWriters.add(new MultipartHttpMessageWriter(messageWriters))"
github.com,"spring-projects/spring-security",main,"oauth2/oauth2-client/src/main/java/org/springframework/security/oauth2/client/OAuth2AuthorizedClientProviderBuilder.java","authorizedClientProviders.add(builder.build())"
github.com,"spring-projects/spring-security",main,"oauth2/oauth2-client/src/main/java/org/springframework/security/oauth2/client/JdbcOAuth2AuthorizedClientService.java","parameters.add(clientRegistrationIdParameter)"
github.com,"spring-projects/spring-security",main,"oauth2/oauth2-client/src/main/java/org/springframework/security/oauth2/client/JdbcOAuth2AuthorizedClientService.java","parameters.add(principalNameParameter)"
github.com,"spring-projects/spring-security",main,"oauth2/oauth2-client/src/main/java/org/springframework/security/oauth2/client/JdbcOAuth2AuthorizedClientService.java","parameters.add(new SqlParameterValue(Types.VARCHAR, clientRegistration.getRegistrationId()))"
github.com,"spring-projects/spring-security",main,"oauth2/oauth2-client/src/main/java/org/springframework/security/oauth2/client/JdbcOAuth2AuthorizedClientService.java","parameters.add(new SqlParameterValue(Types.VARCHAR, principal.getName()))"
github.com,"spring-projects/spring-security",main,"oauth2/oauth2-client/src/main/java/org/springframework/security/oauth2/client/JdbcOAuth2AuthorizedClientService.java","parameters.add(new SqlParameterValue(Types.VARCHAR, accessToken.getTokenType().getValue()))"
github.com,"spring-projects/spring-security",main,"oauth2/oauth2-client/src/main/java/org/springframework/security/oauth2/client/JdbcOAuth2AuthorizedClientService.java","parameters.add(
		new SqlParameterValue(Types.BLOB, accessToken.getTokenValue().getBytes(StandardCharsets.UTF_8)))"
github.com,"spring-projects/spring-security",main,"oauth2/oauth2-client/src/main/java/org/springframework/security/oauth2/client/JdbcOAuth2AuthorizedClientService.java","parameters.add(new SqlParameterValue(Types.TIMESTAMP, Timestamp.from(accessToken.getIssuedAt())))"
github.com,"spring-projects/spring-security",main,"oauth2/oauth2-client/src/main/java/org/springframework/security/oauth2/client/JdbcOAuth2AuthorizedClientService.java","parameters.add(new SqlParameterValue(Types.TIMESTAMP, Timestamp.from(accessToken.getExpiresAt())))"
github.com,"spring-projects/spring-security",main,"oauth2/oauth2-client/src/main/java/org/springframework/security/oauth2/client/JdbcOAuth2AuthorizedClientService.java","parameters.add(new SqlParameterValue(Types.VARCHAR, accessTokenScopes))"
github.com,"spring-projects/spring-security",main,"oauth2/oauth2-client/src/main/java/org/springframework/security/oauth2/client/JdbcOAuth2AuthorizedClientService.java","parameters.add(new SqlParameterValue(Types.BLOB, refreshTokenValue))"
github.com,"spring-projects/spring-security",main,"oauth2/oauth2-client/src/main/java/org/springframework/security/oauth2/client/JdbcOAuth2AuthorizedClientService.java","parameters.add(new SqlParameterValue(Types.TIMESTAMP, refreshTokenIssuedAt))"
github.com,"spring-projects/spring-security",main,"oauth2/oauth2-client/src/test/java/org/springframework/security/oauth2/client/jackson2/OAuth2AuthenticationTokenMixinTests.java","simpleAuthorities.add((SimpleGrantedAuthority) authority)"
github.com,"spring-projects/spring-security",main,"oauth2/oauth2-resource-server/src/main/java/org/springframework/security/oauth2/server/resource/introspection/NimbusReactiveOpaqueTokenIntrospector.java","audiences.add(audience.getValue())"
github.com,"spring-projects/spring-security",main,"oauth2/oauth2-resource-server/src/main/java/org/springframework/security/oauth2/server/resource/introspection/SpringOpaqueTokenIntrospector.java","restTemplate.getInterceptors().add(new BasicAuthenticationInterceptor(clientId, clientSecret))"
github.com,"spring-projects/spring-security",main,"oauth2/oauth2-resource-server/src/main/java/org/springframework/security/oauth2/server/resource/introspection/NimbusOpaqueTokenIntrospector.java","restTemplate.getInterceptors().add(new BasicAuthenticationInterceptor(clientId, clientSecret))"
github.com,"spring-projects/spring-security",main,"oauth2/oauth2-resource-server/src/main/java/org/springframework/security/oauth2/server/resource/introspection/NimbusOpaqueTokenIntrospector.java","audiences.add(audience.getValue())"
github.com,"spring-projects/spring-security",main,"oauth2/oauth2-resource-server/src/test/java/org/springframework/security/oauth2/server/resource/web/MockExchangeFunction.java","this.requests.add(request)"
github.com,"spring-projects/spring-security",main,"messaging/src/main/java/org/springframework/security/messaging/access/intercept/MessageMatcherDelegatingAuthorizationManager.java","matchers.add(matcher)"
github.com,"spring-projects/spring-security",main,"messaging/src/main/java/org/springframework/security/messaging/access/intercept/MessageMatcherDelegatingAuthorizationManager.java","builders.add(matcher)"
github.com,"spring-projects/spring-security",main,"messaging/src/main/java/org/springframework/security/messaging/access/intercept/MessageMatcherDelegatingAuthorizationManager.java","Builder.this.mappings.add(new Entry<>(messageMatcher, authorizationManager))"
github.com,"spring-projects/spring-security",main,"messaging/src/test/java/org/springframework/security/messaging/handler/invocation/ResolvableMethod.java","this.filters.add(new LabeledPredicate<>(message, filter))"
github.com,"spring-projects/spring-security",main,"messaging/src/test/java/org/springframework/security/messaging/handler/invocation/ResolvableMethod.java","this.filters.add((param) -> Arrays.stream(annotationTypes).allMatch(param::hasParameterAnnotation))"
github.com,"spring-projects/spring-security",main,"messaging/src/test/java/org/springframework/security/messaging/handler/invocation/ResolvableMethod.java","this.filters.add((param) -> (annotationTypes.length > 0)
		? Arrays.stream(annotationTypes).noneMatch(param::hasParameterAnnotation)
		: param.getParameterAnnotations().length == 0)"
github.com,"spring-projects/spring-security",main,"messaging/src/test/java/org/springframework/security/messaging/handler/invocation/ResolvableMethod.java","this.filters.add((p) -> type.toString().equals(ResolvableType.forMethodParameter(p).toString()))"
github.com,"spring-projects/spring-security",main,"messaging/src/test/java/org/springframework/security/messaging/handler/invocation/ResolvableMethod.java","matches.add(param)"
github.com,"spring-projects/spring-security",main,"acl/src/main/java/org/springframework/security/acls/jdbc/BasicLookupStrategy.java","acesNew.add(ace)"
github.com,"spring-projects/spring-security",main,"acl/src/main/java/org/springframework/security/acls/jdbc/BasicLookupStrategy.java","aces.add(ace)"
github.com,"spring-projects/spring-security",main,"acl/src/main/java/org/springframework/security/acls/AclPermissionCacheOptimizer.java","oidsToCache.add(oid)"
github.com,"spring-projects/spring-security",main,"acl/src/main/java/org/springframework/security/acls/domain/SidRetrievalStrategyImpl.java","sids.add(new PrincipalSid(authentication))"
github.com,"spring-projects/spring-security",main,"acl/src/main/java/org/springframework/security/acls/domain/SidRetrievalStrategyImpl.java","sids.add(new GrantedAuthoritySid(authority))"
github.com,"spring-projects/spring-security",main,"acl/src/main/java/org/springframework/security/acls/domain/DefaultPermissionFactory.java","permissions.add(buildFromName(name))"
github.com,"spring-projects/spring-security",main,"acl/src/main/java/org/springframework/security/acls/domain/AclImpl.java","this.aces.add(atIndexLocation, ace)"
github.com,"spring-projects/spring-security",main,"acl/src/test/java/org/springframework/security/acls/jdbc/AbstractBasicLookupStrategyTests.java","this.cacheNames.add(name)"
github.com,"spring-projects/spring-security",main,"acl/src/test/java/org/springframework/security/acls/jdbc/JdbcAclServiceTests.java","result.add(new ObjectIdentityImpl(Object.class, ""5577""))"
github.com,"spring-projects/spring-security",main,"acl/src/test/java/org/springframework/security/acls/domain/AclImplTests.java","aces.add(ace)"
github.com,"spring-projects/spring-security",main,"acl/src/test/java/org/springframework/security/acls/domain/AclImplTests.java","// Just give an ID to all this acl's aces, rest of the fields are just
// copied
newAces.add(new AccessControlEntryImpl((i + 1), ac.getAcl(), ac.getSid(), ac.getPermission(),
		ac.isGranting(), ((AuditableAccessControlEntry) ac).isAuditSuccess(),
		((AuditableAccessControlEntry) ac).isAuditFailure()))"
github.com,"spring-projects/spring-security",main,"cas/src/main/java/org/springframework/security/cas/userdetails/GrantedAuthorityFromAssertionAttributesUserDetailsService.java","grantedAuthorities.add(createSimpleGrantedAuthority(o))"
github.com,"spring-projects/spring-security",main,"cas/src/main/java/org/springframework/security/cas/userdetails/GrantedAuthorityFromAssertionAttributesUserDetailsService.java","grantedAuthorities.add(createSimpleGrantedAuthority(value))"
github.com,"spring-projects/spring-security",main,"cas/src/test/java/org/springframework/security/cas/authentication/AbstractStatelessTicketCacheTests.java","proxyList.add(""https://localhost/newPortal/login/cas"")"
github.com,"spring-projects/spring-security",main,"web/src/main/java/org/springframework/security/web/util/ThrowableAnalyzer.java","chain.add(currentThrowable)"
github.com,"spring-projects/spring-security",main,"web/src/main/java/org/springframework/security/web/authentication/RequestMatcherDelegatingAuthenticationManagerResolver.java","this.entries.add(new RequestMatcherEntry<>(matcher, manager))"
github.com,"spring-projects/spring-security",main,"web/src/main/java/org/springframework/security/web/authentication/preauth/j2ee/WebXmlMappableAttributesRetriever.java","roleNames.add(roleName)"
github.com,"spring-projects/spring-security",main,"web/src/main/java/org/springframework/security/web/authentication/preauth/j2ee/J2eeBasedPreAuthenticatedWebAuthenticationDetailsSource.java","j2eeUserRolesList.add(role)"
github.com,"spring-projects/spring-security",main,"web/src/main/java/org/springframework/security/web/authentication/switchuser/SwitchUserFilter.java","newAuths.add(switchAuthority)"
github.com,"spring-projects/spring-security",main,"web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java","list.add(str.substring(start, i))"
github.com,"spring-projects/spring-security",main,"web/src/main/java/org/springframework/security/web/authentication/www/DigestAuthUtils.java","list.add(str.substring(start, i))"
github.com,"spring-projects/spring-security",main,"web/src/main/java/org/springframework/security/web/authentication/logout/CookieClearingLogoutHandler.java","cookieList.add((request) -> {
	Cookie cookie = new Cookie(cookieName, null);
	String contextPath = request.getContextPath();
	String cookiePath = StringUtils.hasText(contextPath) ? contextPath : ""/"";
	cookie.setPath(cookiePath);
	cookie.setMaxAge(0);
	cookie.setSecure(request.isSecure());
	return cookie;
})"
github.com,"spring-projects/spring-security",main,"web/src/main/java/org/springframework/security/web/authentication/logout/CookieClearingLogoutHandler.java","cookieList.add((request) -> cookie)"
github.com,"spring-projects/spring-security",main,"web/src/test/java/org/springframework/security/web/server/ObservationWebFilterChainDecoratorTests.java","this.contexts.add(new Event(""start"", context))"
github.com,"spring-projects/spring-security",main,"web/src/test/java/org/springframework/security/web/server/ObservationWebFilterChainDecoratorTests.java","this.contexts.add(new Event(""error"", context))"
github.com,"spring-projects/spring-security",main,"web/src/test/java/org/springframework/security/web/server/ObservationWebFilterChainDecoratorTests.java","this.contexts.add(new Event(""event"", context))"
github.com,"spring-projects/spring-security",main,"web/src/test/java/org/springframework/security/web/server/ObservationWebFilterChainDecoratorTests.java","this.contexts.add(new Event(""opened"", context))"
github.com,"spring-projects/spring-security",main,"web/src/test/java/org/springframework/security/web/server/ObservationWebFilterChainDecoratorTests.java","this.contexts.add(new Event(""closed"", context))"
github.com,"spring-projects/spring-security",main,"web/src/test/java/org/springframework/security/web/server/ObservationWebFilterChainDecoratorTests.java","this.contexts.add(new Event(""reset"", context))"
github.com,"spring-projects/spring-security",main,"web/src/test/java/org/springframework/security/web/server/ObservationWebFilterChainDecoratorTests.java","this.contexts.add(new Event(""stop"", context))"
github.com,"spring-projects/spring-security",main,"web/src/test/java/org/springframework/security/web/server/authorization/ServerWebExchangeDelegatingServerAccessDeniedHandlerTests.java","this.entries.add(new DelegateEntry(matcher, handler))"
github.com,"spring-projects/spring-security",main,"web/src/test/java/org/springframework/security/web/server/authorization/ServerWebExchangeDelegatingServerAccessDeniedHandlerTests.java","this.entries.add(new DelegateEntry(firstMatcher, firstHandler))"
github.com,"spring-projects/spring-security",main,"web/src/test/java/org/springframework/security/web/server/authorization/ServerWebExchangeDelegatingServerAccessDeniedHandlerTests.java","this.entries.add(new DelegateEntry(secondMatcher, secondHandler))"
github.com,"spring-projects/spring-security",main,"web/src/test/java/org/springframework/security/web/server/authorization/ServerWebExchangeDelegatingServerAccessDeniedHandlerTests.java","this.entries.add(new DelegateEntry(firstMatcher, firstHandler))"
github.com,"spring-projects/spring-security",main,"web/src/test/java/org/springframework/security/web/server/authorization/ServerWebExchangeDelegatingServerAccessDeniedHandlerTests.java","this.entries.add(new DelegateEntry(secondMatcher, secondHandler))"
github.com,"spring-projects/spring-security",main,"web/src/test/java/org/springframework/security/web/header/writers/frameoptions/WhiteListedAllowFromStrategyTests.java","allowed.add(""https://www.test.com"")"
github.com,"spring-projects/spring-security",main,"web/src/test/java/org/springframework/security/web/header/writers/frameoptions/WhiteListedAllowFromStrategyTests.java","allowed.add(""https://www.test.com"")"
github.com,"spring-projects/spring-security",main,"web/src/test/java/org/springframework/security/web/header/writers/frameoptions/WhiteListedAllowFromStrategyTests.java","allowed.add(""https://www.springsource.org"")"
github.com,"spring-projects/spring-security",main,"web/src/test/java/org/springframework/security/web/header/writers/frameoptions/WhiteListedAllowFromStrategyTests.java","allowed.add(""https://www.test.com"")"
github.com,"spring-projects/spring-security",main,"web/src/test/java/org/springframework/security/web/header/writers/frameoptions/WhiteListedAllowFromStrategyTests.java","allowed.add(""https://www.test.com"")"
github.com,"spring-projects/spring-security",main,"web/src/test/java/org/springframework/security/web/header/HeaderWriterFilterTests.java","headerWriters.add(this.writer1)"
github.com,"spring-projects/spring-security",main,"web/src/test/java/org/springframework/security/web/header/HeaderWriterFilterTests.java","headerWriters.add(this.writer2)"
github.com,"spring-projects/spring-security",main,"web/src/main/java/org/springframework/security/web/access/expression/ExpressionBasedFilterInvocationSecurityMetadataSource.java","processed.add(new WebExpressionConfigAttribute(parser.parseExpression(expression), postProcessor))"
github.com,"spring-projects/spring-security",main,"web/src/main/java/org/springframework/security/web/access/intercept/RequestMatcherDelegatingAuthorizationManager.java","this.mappings.add(new RequestMatcherEntry<>(matcher, manager))"
github.com,"spring-projects/spring-security",main,"web/src/main/java/org/springframework/security/web/access/intercept/RequestMatcherDelegatingAuthorizationManager.java","Builder.this.mappings.add(new RequestMatcherEntry<>(matcher, manager))"
github.com,"spring-projects/spring-security",main,"web/src/main/java/org/springframework/security/web/access/channel/ChannelDecisionManagerImpl.java","this.channelProcessors.add((ChannelProcessor) currentObject)"
github.com,"spring-projects/spring-security",main,"web/src/main/java/org/springframework/security/web/savedrequest/DefaultSavedRequest.java","this.cookies.add(new SavedCookie(cookie))"
github.com,"spring-projects/spring-security",main,"web/src/main/java/org/springframework/security/web/savedrequest/DefaultSavedRequest.java","values.add(value)"
github.com,"spring-projects/spring-security",main,"web/src/main/java/org/springframework/security/web/savedrequest/DefaultSavedRequest.java","this.locales.add(locale)"
github.com,"spring-projects/spring-security",main,"web/src/main/java/org/springframework/security/web/savedrequest/DefaultSavedRequest.java","cookieList.add(savedCookie.getCookie())"
github.com,"spring-projects/spring-security",main,"web/src/main/java/org/springframework/security/web/savedrequest/SavedRequestAwareWrapper.java","locales.add(Locale.getDefault())"
github.com,"spring-projects/spring-security",main,"web/src/main/java/org/springframework/security/web/savedrequest/SavedRequestAwareWrapper.java","combinedParams.add(savedRequestParam)"
github.com,"spring-projects/spring-security",main,"web/src/main/java/org/springframework/security/web/savedrequest/Enumerator.java","list.add(iterator.next())"
github.com,"spring-projects/spring-security",main,"web/src/main/java/org/springframework/security/web/server/util/matcher/ServerWebExchangeMatchers.java","matchers.add(new PathPatternParserServerWebExchangeMatcher(pattern, method))"
github.com,"spring-projects/spring-security",main,"web/src/main/java/org/springframework/security/web/server/util/matcher/ServerWebExchangeMatchers.java","matchers.add(new PathPatternParserServerWebExchangeMatcher(pathPattern, method))"
github.com,"spring-projects/spring-security",main,"web/src/main/java/org/springframework/security/web/server/authentication/ServerWebExchangeDelegatingReactiveAuthenticationManagerResolver.java","this.entries.add(new ServerWebExchangeMatcherEntry<>(matcher, manager))"
github.com,"spring-projects/spring-security",main,"web/src/main/java/org/springframework/security/web/server/authentication/SwitchUserWebFilter.java","extendedTargetUserAuthorities.add(switchAuthority)"
github.com,"spring-projects/spring-security",main,"web/src/main/java/org/springframework/security/web/server/authorization/DelegatingReactiveAuthorizationManager.java","this.mappings.add(entry)"
github.com,"spring-projects/spring-security",main,"web/src/main/java/org/springframework/security/web/server/ObservationWebFilterChainDecorator.java","observableFilters.add(new ObservationWebFilter(this.registry, filter, position, size))"
github.com,"spring-projects/spring-security",main,"web/src/main/java/org/springframework/security/web/session/HttpSessionDestroyedEvent.java","contexts.add((SecurityContext) attributeValue)"
github.com,"spring-projects/spring-security",main,"web/src/main/java/org/springframework/security/web/ObservationFilterChainDecorator.java","observableFilters.add(new ObservationFilter(this.registry, filter, position, size))"
github.com,"spring-projects/spring-security",main,"web/src/main/java/org/springframework/security/web/header/writers/CacheControlHeadersWriter.java","headers.add(new Header(CACHE_CONTROL, ""no-cache, no-store, max-age=0, must-revalidate""))"
github.com,"spring-projects/spring-security",main,"web/src/main/java/org/springframework/security/web/header/writers/CacheControlHeadersWriter.java","headers.add(new Header(PRAGMA, ""no-cache""))"
github.com,"spring-projects/spring-security",main,"web/src/main/java/org/springframework/security/web/header/writers/CacheControlHeadersWriter.java","headers.add(new Header(EXPIRES, ""0""))"
github.com,"spring-projects/spring-security",main,"web/src/test/java/org/springframework/security/web/jackson2/SavedCookieMixinTests.java","savedCookies.add(new SavedCookie(new Cookie(""SESSION"", ""123456789"")))"
github.com,"spring-projects/spring-security",main,"web/src/test/java/org/springframework/security/web/method/ResolvableMethod.java","this.filters.add(new LabeledPredicate<>(message, filter))"
github.com,"spring-projects/spring-security",main,"web/src/test/java/org/springframework/security/web/method/ResolvableMethod.java","this.filters.add((param) -> Arrays.stream(annotationTypes).allMatch(param::hasParameterAnnotation))"
github.com,"spring-projects/spring-security",main,"web/src/test/java/org/springframework/security/web/method/ResolvableMethod.java","this.filters.add((param) -> (annotationTypes.length != 0)
		? Arrays.stream(annotationTypes).noneMatch(param::hasParameterAnnotation)
		: param.getParameterAnnotations().length == 0)"
github.com,"spring-projects/spring-security",main,"web/src/test/java/org/springframework/security/web/method/ResolvableMethod.java","this.filters.add((p) -> type.toString().equals(ResolvableType.forMethodParameter(p).toString()))"
github.com,"spring-projects/spring-security",main,"web/src/test/java/org/springframework/security/web/method/ResolvableMethod.java","matches.add(param)"
github.com,"spring-projects/spring-security",main,"web/src/test/java/org/springframework/security/web/authentication/switchuser/SwitchUserFilterTests.java","adminAuths.add(new SwitchUserGrantedAuthority(""PREVIOUS_ADMINISTRATOR"", source))"
github.com,"spring-projects/spring-security",main,"web/src/test/java/org/springframework/security/web/authentication/switchuser/SwitchUserFilterTests.java","auths.add(new SimpleGrantedAuthority(""ROLE_NEW""))"
github.com,"spring-projects/spring-security",main,"web/src/test/java/org/springframework/security/web/authentication/switchuser/SwitchUserFilterTests.java","adminAuths.add(new SwitchUserGrantedAuthority(""PREVIOUS_ADMINISTRATOR"", source))"
github.com,"spring-projects/spring-security",main,"web/src/test/java/org/springframework/security/web/context/DelegatingSecurityContextRepositoryTests.java","delegates.add(repository)"
github.com,"spring-projects/spring-security",main,"web/src/test/java/org/springframework/security/web/context/DelegatingSecurityContextRepositoryTests.java","delegates.add(repository)"
github.com,"spring-projects/spring-security",main,"web/src/test/java/org/springframework/security/web/context/DelegatingSecurityContextRepositoryTests.java","delegates.add(repository)"
github.com,"spring-projects/spring-security",main,"web/src/test/java/org/springframework/security/web/context/DelegatingSecurityContextRepositoryTests.java","delegates.add(repository)"
github.com,"spring-projects/spring-security",main,"web/src/test/java/org/springframework/security/web/access/expression/WebExpressionVoterTests.java","attributes.add(weca)"
github.com,"spring-cloud/spring-cloud-contract",main,"spring-cloud-contract-verifier/src/main/java/org/springframework/cloud/contract/verifier/file/ContractFileScanner.java","converters.add(ContractVerifierDslConverter.INSTANCE)"
github.com,"spring-projects/spring-security",main,"web/src/test/java/org/springframework/security/web/access/intercept/RequestMatcherDelegatingAuthorizationManagerTests.java","m.add(new RequestMatcherEntry<>(new MvcRequestMatcher(null, ""/grant""),
		(a, o) -> new AuthorizationDecision(true)))"
github.com,"spring-projects/spring-security",main,"web/src/test/java/org/springframework/security/web/access/intercept/RequestMatcherDelegatingAuthorizationManagerTests.java","m.add(new RequestMatcherEntry<>(AnyRequestMatcher.INSTANCE,
		AuthorityAuthorizationManager.hasRole(""ADMIN"")))"
github.com,"spring-cloud/spring-cloud-contract",main,"spring-cloud-contract-verifier/src/main/java/org/springframework/cloud/contract/verifier/file/ContractFileScanner.java","converters.add(YamlContractConverter.INSTANCE)"
github.com,"spring-cloud/spring-cloud-contract",main,"spring-cloud-contract-verifier/src/main/java/org/springframework/cloud/contract/verifier/converter/ContractsToYaml.java","yamlContractRequest.matchers.multipart.named.add(multipartNamedStubMatcher)"
github.com,"spring-projects/spring-security",main,"web/src/test/java/org/springframework/security/web/access/intercept/RequestMatcherDelegatingAuthorizationManagerTests.java","m.add(new RequestMatcherEntry<>(new MvcRequestMatcher(null, ""/afterAny""),
		(a, o) -> new AuthorizationDecision(true)))"
github.com,"spring-cloud/spring-cloud-contract",main,"spring-cloud-contract-verifier/src/main/java/org/springframework/cloud/contract/verifier/converter/ContractsToYaml.java","yamlContractRequest.matchers.multipart.params.add(keyValueMatcher)"
github.com,"spring-projects/spring-security",main,"web/src/test/java/org/springframework/security/web/access/intercept/RequestMatcherDelegatingAuthorizationManagerTests.java","m.add(new RequestMatcherEntry<>(AnyRequestMatcher.INSTANCE,
							AuthenticatedAuthorizationManager.authenticated()))"
github.com,"spring-cloud/spring-cloud-contract",main,"spring-cloud-contract-verifier/src/main/java/org/springframework/cloud/contract/verifier/converter/ContractsToYaml.java","yamlContractRequest.matchers.body.add(bodyStubMatcher)"
github.com,"spring-projects/spring-security",main,"web/src/test/java/org/springframework/security/web/access/channel/ChannelDecisionManagerImplTests.java","list.add(""THIS IS NOT A CHANNELPROCESSOR"")"
github.com,"spring-cloud/spring-cloud-contract",main,"spring-cloud-contract-verifier/src/main/java/org/springframework/cloud/contract/verifier/converter/ContractsToYaml.java","yamlContractRequest.multipart.named.add(named)"
github.com,"spring-projects/spring-security",main,"web/src/test/java/org/springframework/security/web/access/channel/ChannelDecisionManagerImplTests.java","list.add(cpXyz)"
github.com,"spring-cloud/spring-cloud-contract",main,"spring-cloud-contract-verifier/src/main/java/org/springframework/cloud/contract/verifier/converter/ContractsToYaml.java","yamlContract.outputMessage.matchers.body.add(bodyTestMatcher)"
github.com,"spring-cloud/spring-cloud-contract",main,"spring-cloud-contract-verifier/src/main/java/org/springframework/cloud/contract/verifier/converter/ContractsToYaml.java","bodyMatchers.add(bodyStubMatcher)"
github.com,"spring-projects/spring-security",main,"web/src/test/java/org/springframework/security/web/access/channel/ChannelDecisionManagerImplTests.java","list.add(cpAbc)"
github.com,"spring-cloud/spring-cloud-contract",main,"spring-cloud-contract-verifier/src/main/java/org/springframework/cloud/contract/verifier/converter/ContractsToYaml.java","response.matchers.body.add(bodyTestMatcher)"
github.com,"spring-projects/spring-security",main,"web/src/test/java/org/springframework/security/web/access/channel/ChannelDecisionManagerImplTests.java","list.add(cpAbc)"
github.com,"spring-cloud/spring-cloud-contract",main,"spring-cloud-contract-verifier/src/main/java/org/springframework/cloud/contract/verifier/converter/ContractsToYaml.java","bodyMatchers.add(bodyTestMatcher)"
github.com,"spring-projects/spring-security",main,"web/src/test/java/org/springframework/security/web/access/channel/ChannelDecisionManagerImplTests.java","list.add(cpXyz)"
github.com,"spring-cloud/spring-cloud-contract",main,"spring-cloud-contract-verifier/src/main/java/org/springframework/cloud/contract/verifier/converter/ContractsToYaml.java","bodyMatchers.add(bodyTestMatcher)"
github.com,"spring-projects/spring-security",main,"web/src/test/java/org/springframework/security/web/access/channel/ChannelDecisionManagerImplTests.java","list.add(cpAbc)"
github.com,"spring-projects/spring-security",main,"web/src/test/java/org/springframework/security/web/access/channel/ChannelDecisionManagerImplTests.java","list.add(cpXyz)"
github.com,"spring-cloud/spring-cloud-contract",main,"spring-cloud-contract-verifier/src/main/java/org/springframework/cloud/contract/verifier/converter/ContractsToYaml.java","headerMatchers.add(keyValueMatcher)"
github.com,"spring-projects/spring-security",main,"web/src/test/java/org/springframework/security/web/access/channel/ChannelDecisionManagerImplTests.java","list.add(cpAbc)"
github.com,"spring-cloud/spring-cloud-contract",main,"spring-cloud-contract-verifier/src/main/java/org/springframework/cloud/contract/verifier/converter/ContractsToYaml.java","headerMatchers.add(testHeaderMatcher)"
github.com,"spring-projects/spring-security",main,"web/src/test/java/org/springframework/security/web/access/channel/ChannelDecisionManagerImplTests.java","list.add(cpXyz)"
github.com,"spring-cloud/spring-cloud-contract",main,"spring-cloud-contract-verifier/src/main/java/org/springframework/cloud/contract/verifier/converter/ContractsToYaml.java","headerMatchers.add(testHeaderMatcher)"
github.com,"spring-projects/spring-security",main,"web/src/test/java/org/springframework/security/web/access/channel/ChannelDecisionManagerImplTests.java","list.add(cpAbc)"
github.com,"spring-cloud/spring-cloud-contract",main,"spring-cloud-contract-verifier/src/main/java/org/springframework/cloud/contract/verifier/converter/ContractsToYaml.java","headerMatchers.add(testHeaderMatcher)"
github.com,"spring-projects/spring-security",main,"rsocket/src/main/java/org/springframework/security/rsocket/authorization/PayloadExchangeMatcherReactiveAuthorizationManager.java","this.mappings.add(entry)"
github.com,"spring-cloud/spring-cloud-contract",main,"spring-cloud-contract-verifier/src/main/java/org/springframework/cloud/contract/verifier/converter/YamlToContracts.java","contracts.add(contract)"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/main/java/org/springframework/security/saml2/provider/service/authentication/OpenSaml4AuthenticationProvider.java","attributeValues.add(attributeValue)"
github.com,"spring-cloud/spring-cloud-contract",main,"spring-cloud-contract-verifier/src/main/java/org/springframework/cloud/contract/verifier/converter/ToYamlConverter.java","converters.add(YamlContractConverter.INSTANCE)"
github.com,"spring-cloud/spring-cloud-contract",main,"spring-cloud-contract-verifier/src/main/java/org/springframework/cloud/contract/verifier/converter/ToYamlConverter.java","converters.add(ContractVerifierDslConverter.INSTANCE)"
github.com,"spring-cloud/spring-cloud-contract",main,"spring-cloud-contract-verifier/src/test/java/org/springframework/cloud/contract/verifier/assertion/CollectionAssertTests.java","list.add(""a"")"
github.com,"spring-cloud/spring-cloud-contract",main,"spring-cloud-contract-verifier/src/test/java/org/springframework/cloud/contract/verifier/assertion/CollectionAssertTests.java","list.add(""b"")"
github.com,"spring-cloud/spring-cloud-contract",main,"spring-cloud-contract-verifier/src/test/java/org/springframework/cloud/contract/verifier/assertion/CollectionAssertTests.java","list.add(""c"")"
github.com,"spring-cloud/spring-cloud-contract",main,"spring-cloud-contract-verifier/src/test/java/org/springframework/cloud/contract/verifier/assertion/CollectionAssertTests.java","list.add(null)"
github.com,"spring-cloud/spring-cloud-contract",main,"spring-cloud-contract-verifier/src/test/java/org/springframework/cloud/contract/verifier/assertion/CollectionAssertTests.java","list.add(list1)"
github.com,"spring-cloud/spring-cloud-contract",main,"spring-cloud-contract-verifier/src/test/java/org/springframework/cloud/contract/verifier/assertion/CollectionAssertTests.java","list.add(list2)"
github.com,"spring-cloud/spring-cloud-contract",main,"spring-cloud-contract-verifier/src/test/java/org/springframework/cloud/contract/verifier/assertion/CollectionAssertTests.java","list.add(list3)"
github.com,"spring-cloud/spring-cloud-contract",main,"spring-cloud-contract-verifier/src/test/java/org/springframework/cloud/contract/verifier/assertion/CollectionAssertTests.java","list1.add(map1)"
github.com,"spring-cloud/spring-cloud-contract",main,"spring-cloud-contract-verifier/src/test/java/org/springframework/cloud/contract/verifier/assertion/CollectionAssertTests.java","list2.add(map2)"
github.com,"spring-cloud/spring-cloud-contract",main,"spring-cloud-contract-verifier/src/test/java/org/springframework/cloud/contract/verifier/assertion/CollectionAssertTests.java","list3.add(innerList)"
github.com,"spring-cloud/spring-cloud-contract",main,"spring-cloud-contract-verifier/src/main/java/org/springframework/cloud/contract/verifier/util/xml/XmlAsserter.java","list.add(""concat("")"
github.com,"spring-cloud/spring-cloud-contract",main,"spring-cloud-contract-verifier/src/main/java/org/springframework/cloud/contract/verifier/util/xml/XmlAsserter.java","list.add(""'"" + splitString + ""'"")"
github.com,"spring-cloud/spring-cloud-contract",main,"spring-cloud-contract-verifier/src/main/java/org/springframework/cloud/contract/verifier/util/xml/XmlAsserter.java","list.add("","")"
github.com,"spring-cloud/spring-cloud-contract",main,"spring-cloud-contract-verifier/src/main/java/org/springframework/cloud/contract/verifier/util/xml/XmlAsserter.java","list.add(""\""'\"""")"
github.com,"spring-cloud/spring-cloud-contract",main,"spring-cloud-contract-verifier/src/main/java/org/springframework/cloud/contract/verifier/util/xml/XmlAsserter.java","list.add("","")"
github.com,"spring-cloud/spring-cloud-contract",main,"spring-cloud-contract-verifier/src/main/java/org/springframework/cloud/contract/verifier/util/xml/XmlAsserter.java","list.add("")"")"
github.com,"spring-cloud/spring-cloud-contract",main,"spring-cloud-contract-verifier/src/main/java/org/springframework/cloud/contract/verifier/util/xml/ArrayValueAssertion.java","verifiable.specialCaseXPathBuffer.add(xPath)"
github.com,"spring-cloud/spring-cloud-contract",main,"spring-cloud-contract-verifier/src/main/java/org/springframework/cloud/contract/verifier/util/ToFileContractsTransformer.java","files.add(outputFile)"
github.com,"spring-cloud/spring-cloud-contract",main,"spring-cloud-contract-verifier/src/main/java/org/springframework/cloud/contract/verifier/http/Request.java","this.queryParameters.add(new AbstractMap.SimpleEntry<>(name, value))"
github.com,"spring-cloud/spring-cloud-contract",main,"spring-cloud-contract-verifier/src/main/java/org/springframework/cloud/contract/verifier/dsl/wiremock/BaseWireMockStubStrategy.java","result.add(MapConverter.getStubSideValues(l))"
github.com,"spring-cloud/spring-cloud-contract",main,"spring-cloud-contract-verifier/src/main/java/org/springframework/cloud/contract/verifier/dsl/wiremock/BaseWireMockStubStrategy.java","result.add(parseBody((List<?>) l, contentType))"
github.com,"spring-cloud/spring-cloud-contract",main,"spring-cloud-contract-verifier/src/main/java/org/springframework/cloud/contract/verifier/dsl/wiremock/BaseWireMockStubStrategy.java","result.add(parseBody((Boolean) l, contentType))"
github.com,"spring-cloud/spring-cloud-contract",main,"spring-cloud-contract-verifier/src/main/java/org/springframework/cloud/contract/verifier/dsl/wiremock/BaseWireMockStubStrategy.java","result.add(parseBody((Number) l, contentType))"
github.com,"spring-cloud/spring-cloud-contract",main,"spring-cloud-contract-verifier/src/main/java/org/springframework/cloud/contract/verifier/dsl/wiremock/BaseWireMockStubStrategy.java","result.add(null)"
github.com,"spring-cloud/spring-cloud-contract",main,"spring-cloud-contract-verifier/src/main/java/org/springframework/cloud/contract/verifier/dsl/wiremock/BaseWireMockStubStrategy.java","result.add(parseBody(l, contentType))"
github.com,"spring-cloud/spring-cloud-contract",main,"spring-cloud-contract-verifier/src/main/java/org/springframework/cloud/contract/verifier/builder/GeneratedTestClassBuilder.java","this.metaData.add(metaData)"
github.com,"spring-cloud/spring-cloud-contract",main,"spring-cloud-contract-verifier/src/main/java/org/springframework/cloud/contract/verifier/builder/GeneratedTestClassBuilder.java","this.imports.add(imports)"
github.com,"spring-cloud/spring-cloud-contract",main,"spring-cloud-contract-verifier/src/main/java/org/springframework/cloud/contract/verifier/builder/GeneratedTestClassBuilder.java","this.staticImports.add(imports)"
github.com,"spring-cloud/spring-cloud-contract",main,"spring-cloud-contract-verifier/src/main/java/org/springframework/cloud/contract/verifier/builder/ClassBodyBuilder.java","this.fields.add(field)"
github.com,"spring-cloud/spring-cloud-contract",main,"spring-cloud-contract-verifier/src/main/java/org/springframework/cloud/contract/verifier/builder/SingleMethodBuilder.java","this.methodAnnotations.add(methodAnnotations)"
github.com,"spring-cloud/spring-cloud-contract",main,"spring-cloud-contract-verifier/src/main/java/org/springframework/cloud/contract/verifier/builder/SingleMethodBuilder.java","this.methodPreProcessors.add(methodPreProcessor)"
github.com,"spring-cloud/spring-cloud-contract",main,"spring-cloud-contract-verifier/src/main/java/org/springframework/cloud/contract/verifier/builder/SingleMethodBuilder.java","this.methodPostProcessors.add(methodPostProcessor)"
github.com,"spring-cloud/spring-cloud-contract",main,"spring-cloud-contract-stub-runner/src/main/java/org/springframework/cloud/contract/stubrunner/util/ZipCategory.java","unzippedFiles.add(destinationFile)"
github.com,"spring-cloud/spring-cloud-contract",main,"spring-cloud-contract-stub-runner/src/main/java/org/springframework/cloud/contract/stubrunner/util/ZipCategory.java","unzippedFiles.add(dir)"
github.com,"spring-cloud/spring-cloud-contract",main,"spring-cloud-contract-stub-runner/src/main/java/org/springframework/cloud/contract/stubrunner/util/StubsParser.java","stubs.add(StubSpecification.parse(config, defaultClassifier).stub)"
github.com,"spring-cloud/spring-cloud-contract",main,"spring-cloud-contract-stub-runner/src/main/java/org/springframework/cloud/contract/stubrunner/StubRepository.java","mappingDescriptors.add(file)"
github.com,"spring-cloud/spring-cloud-contract",main,"spring-cloud-contract-stub-runner/src/main/java/org/springframework/cloud/contract/stubrunner/spring/cloud/zookeeper/ZookeeperStubsRegistrar.java","this.discoveryList.add(serviceDiscovery)"
github.com,"spring-cloud/spring-cloud-contract",main,"spring-cloud-contract-stub-runner/src/main/java/org/springframework/cloud/contract/stubrunner/spring/cloud/consul/ConsulStubsRegistrar.java","this.services.add(newService)"
github.com,"spring-cloud/spring-cloud-contract",main,"spring-cloud-contract-stub-runner/src/main/java/org/springframework/cloud/contract/stubrunner/spring/cloud/eureka/EurekaStubsRegistrar.java","this.registrations.add(registration)"
github.com,"spring-cloud/spring-cloud-contract",main,"spring-cloud-contract-stub-runner/src/main/java/org/springframework/cloud/contract/stubrunner/ResourceResolvingStubDownloader.java","list.add(repoRoot.fullPath)"
github.com,"spring-cloud/spring-cloud-contract",main,"spring-cloud-contract-stub-runner/src/main/java/org/springframework/cloud/contract/stubrunner/StubRunnerFactory.java","httpServerStubs.add(new WireMockHttpServerStub())"
github.com,"spring-cloud/spring-cloud-contract",main,"spring-cloud-contract-stub-runner/src/main/java/org/springframework/cloud/contract/stubrunner/StubRunnerOptionsBuilder.java","this.stubs.add(StubsParser.ivyFromStringWithPort(notation))"
github.com,"spring-cloud/spring-cloud-contract",main,"spring-cloud-contract-stub-runner/src/main/java/org/springframework/cloud/contract/stubrunner/StubRunnerOptionsBuilder.java","this.stubs.add(notation)"
github.com,"spring-cloud/spring-cloud-contract",main,"spring-cloud-contract-stub-runner/src/main/java/org/springframework/cloud/contract/stubrunner/provider/wiremock/WireMockHttpServerStub.java","stubMappings.add(registerDescriptor(wireMock, mappingDescriptor))"
github.com,"spring-cloud/spring-cloud-contract",main,"spring-cloud-contract-stub-runner/src/main/java/org/springframework/cloud/contract/stubrunner/AetherStubDownloader.java","remoteRepos.add(builder.build())"
github.com,"spring-cloud/spring-cloud-contract",main,"spring-cloud-contract-wiremock/src/main/java/org/springframework/cloud/contract/wiremock/WireMockConfiguration.java","resources.add(resource)"
github.com,"spring-cloud/spring-cloud-contract",main,"spring-cloud-contract-wiremock/src/main/java/org/springframework/cloud/contract/wiremock/WireMockRestServiceServer.java","mappings.add(mapping)"
github.com,"spring-cloud/spring-cloud-contract",main,"spring-cloud-contract-wiremock/src/main/java/org/springframework/cloud/contract/wiremock/file/ResourcesFileSource.java","childSources.add(child)"
github.com,"spring-cloud/spring-cloud-contract",main,"spring-cloud-contract-wiremock/src/main/java/org/springframework/cloud/contract/wiremock/restdocs/ContractResultHandler.java","headers.add(new HttpHeader(key, value))"
github.com,"spring-cloud/spring-cloud-contract",main,"spring-cloud-contract-wiremock/src/main/java/org/springframework/cloud/contract/wiremock/restdocs/ContractResultHandler.java","headers.add(new HttpHeader(headerName, getHeader(headerName).values()))"
github.com,"spring-cloud/spring-cloud-contract",main,"spring-cloud-contract-wiremock/src/main/java/org/springframework/cloud/contract/wiremock/restdocs/ContractExchangeHandler.java","values.add("""")"
github.com,"spring-cloud/spring-cloud-contract",main,"spring-cloud-contract-wiremock/src/main/java/org/springframework/cloud/contract/wiremock/restdocs/ContractExchangeHandler.java","values.add(name.substring(name.indexOf(""="") + 1))"
github.com,"spring-cloud/spring-cloud-contract",main,"spring-cloud-contract-wiremock/src/test/java/org/springframework/cloud/contract/wiremock/issues/issue399/SpringContractWiremockIssueDemoApplication.java","restTemplate.getInterceptors().add(emptyInterceptor)"
github.com,"spring-cloud/spring-cloud-contract",main,"spring-cloud-contract-wiremock/src/test/java/org/springframework/cloud/contract/wiremock/issues/issue399/SpringContractWiremockIssueDemoApplication.java","restTemplate.getInterceptors().add(emptyInterceptor)"
github.com,"spring-cloud/spring-cloud-contract",main,"spring-cloud-contract-wiremock/src/test/java/org/springframework/cloud/contract/wiremock/issues/issue399/SpringContractWiremockIssueDemoApplication.java","restTemplate.getInterceptors().add(emptyInterceptor)"
github.com,"spring-cloud/spring-cloud-contract",main,"tests/samples-messaging-amqp/src/main/java/com/example/RabbitManager.java","this.books.add(book)"
github.com,"spring-cloud/spring-cloud-contract",main,"docs/src/main/java/org/springframework/cloud/contract/docs/Main.java","additionalClasses.add(metadatum)"
github.com,"spring-cloud/spring-cloud-contract",main,"docs/src/main/java/org/springframework/cloud/contract/docs/Main.java","metadata.add(Class.forName(beanClassName))"
github.com,"spring-cloud/spring-cloud-contract",main,"docker/spring-cloud-contract-docker/project/buildSrc/src/main/java/contracts/DocsFromSources.java","envVars.add(new EnvVar(name, description, defaultValue))"
github.com,"spring-cloud/spring-cloud-contract",main,"spring-cloud-contract-tools/spring-cloud-contract-converters/src/main/java/org/springframework/cloud/contract/verifier/wiremock/WireMockToDslConverter.java","requestBodyObjectNodes::add"
github.com,"spring-cloud/spring-cloud-contract",main,"specs/spring-cloud-contract-spec-java/src/main/java/org/springframework/cloud/contract/spec/internal/QueryParameters.java","parameters.add(QueryParameter.build(first.getKey(), first.getValue()))"
github.com,"spring-cloud/spring-cloud-contract",main,"specs/spring-cloud-contract-spec-java/src/main/java/org/springframework/cloud/contract/spec/internal/QueryParameters.java","parameters.add(QueryParameter.build(parameterName, parameterValue))"
github.com,"spring-cloud/spring-cloud-contract",main,"specs/spring-cloud-contract-spec-java/src/main/java/org/springframework/cloud/contract/spec/internal/BodyMatchers.java","this.matchers.add(new PathBodyMatcher(path, matchingType))"
github.com,"spring-cloud/spring-cloud-contract",main,"specs/spring-cloud-contract-spec-java/src/main/java/org/springframework/cloud/contract/spec/internal/BodyMatchers.java","this.matchers.add(new PathBodyMatcher(xPath, matchingTypeValue))"
github.com,"spring-cloud/spring-cloud-contract",main,"specs/spring-cloud-contract-spec-java/src/test/groovy/repackaged/nl/flotsam/xeger/XegerTest.java","regexList.add(generator.generate())"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/main/java/org/springframework/security/saml2/provider/service/authentication/OpenSaml4AuthenticationProvider.java","sessionIndexes.add(statement.getSessionIndex())"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/main/java/org/springframework/security/saml2/provider/service/authentication/OpenSamlSigningUtils.java","credentials.add(credential)"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/main/java/org/springframework/security/saml2/provider/service/authentication/OpenSamlDecryptionUtils.java","response.getAssertions().add(assertion)"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/main/java/org/springframework/security/saml2/provider/service/authentication/OpenSamlDecryptionUtils.java","statement.getAttributes().add(attribute)"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/main/java/org/springframework/security/saml2/provider/service/metadata/OpenSamlMetadataResolver.java","entityDescriptor.getRoleDescriptors(SPSSODescriptor.DEFAULT_ELEMENT_NAME).add(spSsoDescriptor)"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/main/java/org/springframework/security/saml2/provider/service/metadata/OpenSamlMetadataResolver.java","spSsoDescriptor.getAssertionConsumerServices().add(buildAssertionConsumerService(registration))"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/main/java/org/springframework/security/saml2/provider/service/metadata/OpenSamlMetadataResolver.java","spSsoDescriptor.getSingleLogoutServices().add(buildSingleLogoutService(registration, binding))"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/main/java/org/springframework/security/saml2/provider/service/metadata/OpenSamlMetadataResolver.java","spSsoDescriptor.getNameIDFormats().add(buildNameIDFormat(registration))"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/main/java/org/springframework/security/saml2/provider/service/metadata/OpenSamlMetadataResolver.java","list.add(keyDescriptor)"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/main/java/org/springframework/security/saml2/provider/service/metadata/OpenSamlMetadataResolver.java","x509Data.getX509Certificates().add(x509Certificate)"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/main/java/org/springframework/security/saml2/provider/service/metadata/OpenSamlMetadataResolver.java","keyInfo.getX509Datas().add(x509Data)"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/main/java/org/springframework/security/saml2/provider/service/registration/OpenSamlMetadataRelyingPartyRegistrationConverter.java","verification.add(Saml2X509Credential.verification(certificate))"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/main/java/org/springframework/security/saml2/provider/service/registration/OpenSamlMetadataRelyingPartyRegistrationConverter.java","encryption.add(Saml2X509Credential.encryption(certificate))"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/main/java/org/springframework/security/saml2/provider/service/registration/OpenSamlMetadataRelyingPartyRegistrationConverter.java","verification.add(Saml2X509Credential.verification(certificate))"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/main/java/org/springframework/security/saml2/provider/service/registration/OpenSamlMetadataRelyingPartyRegistrationConverter.java","encryption.add(Saml2X509Credential.encryption(certificate))"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/main/java/org/springframework/security/saml2/provider/service/registration/OpenSamlMetadataRelyingPartyRegistrationConverter.java","algorithms.add(method.getAlgorithm())"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/main/java/org/springframework/security/saml2/provider/service/registration/OpenSamlMetadataRelyingPartyRegistrationConverter.java","builders.add(convert(descriptor))"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/main/java/org/springframework/security/saml2/provider/service/web/authentication/OpenSamlSigningUtils.java","credentials.add(credential)"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/main/java/org/springframework/security/saml2/provider/service/web/authentication/logout/OpenSamlSigningUtils.java","credentials.add(credential)"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/main/java/org/springframework/security/saml2/provider/service/web/authentication/logout/OpenSamlLogoutRequestResolver.java","logoutRequest.getSessionIndexes().add(sessionIndex)"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/test/java/org/springframework/security/saml2/provider/service/authentication/TestCustomOpenSamlObjects.java","samlObject.getUnknownXMLObjects().add(street)"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/test/java/org/springframework/security/saml2/provider/service/authentication/TestCustomOpenSamlObjects.java","samlObject.getUnknownXMLObjects().add(streetNumber)"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/test/java/org/springframework/security/saml2/provider/service/authentication/TestCustomOpenSamlObjects.java","samlObject.getUnknownXMLObjects().add(zip)"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/test/java/org/springframework/security/saml2/provider/service/authentication/TestCustomOpenSamlObjects.java","samlObject.getUnknownXMLObjects().add(city)"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/test/java/org/springframework/security/saml2/provider/service/authentication/TestCustomOpenSamlObjects.java","customSamlObject.getUnknownXMLObjects().add(childXMLObject)"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/test/java/org/springframework/security/saml2/provider/service/authentication/OpenSaml4AuthenticationProviderTests.java","response.getAssertions().add(assertion())"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/test/java/org/springframework/security/saml2/provider/service/authentication/OpenSaml4AuthenticationProviderTests.java","response.getAssertions().add(assertion())"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/test/java/org/springframework/security/saml2/provider/service/authentication/OpenSaml4AuthenticationProviderTests.java","response.getAssertions().add(signed(assertion))"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/test/java/org/springframework/security/saml2/provider/service/authentication/OpenSaml4AuthenticationProviderTests.java","response.getAssertions().add(signed(assertion))"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/test/java/org/springframework/security/saml2/provider/service/authentication/OpenSaml4AuthenticationProviderTests.java","response.getAssertions().add(signed(assertion))"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/test/java/org/springframework/security/saml2/provider/service/authentication/OpenSaml4AuthenticationProviderTests.java","response.getAssertions().add(signed(assertion))"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/test/java/org/springframework/security/saml2/provider/service/authentication/OpenSaml4AuthenticationProviderTests.java","response.getAssertions().add(signed(assertion(""SAML2"")))"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/test/java/org/springframework/security/saml2/provider/service/authentication/OpenSaml4AuthenticationProviderTests.java","response.getAssertions().add(signed(assertion(""SAML2"")))"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/test/java/org/springframework/security/saml2/provider/service/authentication/OpenSaml4AuthenticationProviderTests.java","response.getAssertions().add(signed(assertion()))"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/test/java/org/springframework/security/saml2/provider/service/authentication/OpenSaml4AuthenticationProviderTests.java","response.getAssertions().add(signed(assertion(""SAML2"")))"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/test/java/org/springframework/security/saml2/provider/service/authentication/OpenSaml4AuthenticationProviderTests.java","response.getAssertions().add(signed(assertion(""SAML2"")))"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/test/java/org/springframework/security/saml2/provider/service/authentication/OpenSaml4AuthenticationProviderTests.java","response.getAssertions().add(signed(assertion(""BAD"")))"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/test/java/org/springframework/security/saml2/provider/service/authentication/OpenSaml4AuthenticationProviderTests.java","response.getAssertions().add(signed(assertion()))"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/test/java/org/springframework/security/saml2/provider/service/authentication/OpenSaml4AuthenticationProviderTests.java","response.getAssertions().add(signed(assertion(""BAD"")))"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/test/java/org/springframework/security/saml2/provider/service/authentication/OpenSaml4AuthenticationProviderTests.java","response.getAssertions().add(signed(assertion(""SAML2"")))"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/test/java/org/springframework/security/saml2/provider/service/authentication/OpenSaml4AuthenticationProviderTests.java","response.getAssertions().add(signed(assertion(""SAML2"")))"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/test/java/org/springframework/security/saml2/provider/service/authentication/OpenSaml4AuthenticationProviderTests.java","response.getAssertions().add(signed(assertion()))"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/test/java/org/springframework/security/saml2/provider/service/authentication/OpenSaml4AuthenticationProviderTests.java","response.getAssertions().add(signed(assertion))"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/test/java/org/springframework/security/saml2/provider/service/authentication/OpenSaml4AuthenticationProviderTests.java","response.getAssertions().add(signed(assertion))"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/test/java/org/springframework/security/saml2/provider/service/authentication/OpenSaml4AuthenticationProviderTests.java","assertion.getAttributeStatements().add(attribute)"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/test/java/org/springframework/security/saml2/provider/service/authentication/OpenSaml4AuthenticationProviderTests.java","response.getAssertions().add(signed(assertion))"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/test/java/org/springframework/security/saml2/provider/service/authentication/OpenSaml4AuthenticationProviderTests.java","response.getEncryptedAssertions().add(encryptedAssertion)"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/test/java/org/springframework/security/saml2/provider/service/authentication/OpenSaml4AuthenticationProviderTests.java","response.getEncryptedAssertions().add(encryptedAssertion)"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/test/java/org/springframework/security/saml2/provider/service/authentication/OpenSaml4AuthenticationProviderTests.java","response.getEncryptedAssertions().add(encryptedAssertion)"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/test/java/org/springframework/security/saml2/provider/service/authentication/OpenSaml4AuthenticationProviderTests.java","response.getAssertions().add(signed(assertion))"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/test/java/org/springframework/security/saml2/provider/service/authentication/OpenSaml4AuthenticationProviderTests.java","statement.getEncryptedAttributes().add(attribute)"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/test/java/org/springframework/security/saml2/provider/service/authentication/OpenSaml4AuthenticationProviderTests.java","assertion.getAttributeStatements().add(statement)"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/test/java/org/springframework/security/saml2/provider/service/authentication/OpenSaml4AuthenticationProviderTests.java","response.getAssertions().add(assertion)"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/test/java/org/springframework/security/saml2/provider/service/authentication/OpenSaml4AuthenticationProviderTests.java","response.getEncryptedAssertions().add(encryptedAssertion)"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/test/java/org/springframework/security/saml2/provider/service/authentication/OpenSaml4AuthenticationProviderTests.java","response.getEncryptedAssertions().add(encryptedAssertion)"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/test/java/org/springframework/security/saml2/provider/service/authentication/OpenSaml4AuthenticationProviderTests.java","response.getAssertions().add(signed(assertion))"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/test/java/org/springframework/security/saml2/provider/service/authentication/OpenSaml4AuthenticationProviderTests.java","response.getEncryptedAssertions().add(encryptedAssertion)"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/test/java/org/springframework/security/saml2/provider/service/authentication/OpenSaml4AuthenticationProviderTests.java","assertion.getConditions().getConditions().add(oneTimeUse)"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/test/java/org/springframework/security/saml2/provider/service/authentication/OpenSaml4AuthenticationProviderTests.java","response.getAssertions().add(assertion)"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/test/java/org/springframework/security/saml2/provider/service/authentication/OpenSaml4AuthenticationProviderTests.java","assertion.getConditions().getConditions().add(oneTimeUse)"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/test/java/org/springframework/security/saml2/provider/service/authentication/OpenSaml4AuthenticationProviderTests.java","response.getAssertions().add(assertion)"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/test/java/org/springframework/security/saml2/provider/service/authentication/OpenSaml4AuthenticationProviderTests.java","response.getAssertions().add(assertion)"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/test/java/org/springframework/security/saml2/provider/service/authentication/OpenSaml4AuthenticationProviderTests.java","// broken
	// signature
	response.getAssertions().add(assertion)"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/test/java/org/springframework/security/saml2/provider/service/authentication/OpenSaml4AuthenticationProviderTests.java","response.getAssertions().add(signed(assertion))"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/test/java/org/springframework/security/saml2/provider/service/authentication/OpenSaml4AuthenticationProviderTests.java","response.getAssertions().add(assertion)"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/test/java/org/springframework/security/saml2/provider/service/authentication/OpenSaml4AuthenticationProviderTests.java","response.getEncryptedAssertions().add(new EncryptedAssertionBuilder().buildObject())"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/test/java/org/springframework/security/saml2/provider/service/authentication/OpenSaml4AuthenticationProviderTests.java","tuple.getResponse().getAssertions().add(signed(assertion))"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/test/java/org/springframework/security/saml2/provider/service/authentication/OpenSaml4AuthenticationProviderTests.java","response.getAssertions().add(signed(assertion))"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/test/java/org/springframework/security/saml2/provider/service/authentication/OpenSaml4AuthenticationProviderTests.java","response.getAssertions().add(assertion)"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/test/java/org/springframework/security/saml2/provider/service/authentication/OpenSaml4AuthenticationProviderTests.java","response.getAssertions().add(assertion)"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/test/java/org/springframework/security/saml2/provider/service/authentication/OpenSaml4AuthenticationProviderTests.java","registeredDateAttr.getAttributeValues().add(registeredDate)"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/test/java/org/springframework/security/saml2/provider/service/authentication/OpenSaml4AuthenticationProviderTests.java","attributeStatements.iterator().next().getAttributes().add(registeredDateAttr)"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/test/java/org/springframework/security/saml2/provider/service/authentication/TestOpenSamlObjects.java","response.getAssertions().add(assertion())"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/test/java/org/springframework/security/saml2/provider/service/authentication/TestOpenSamlObjects.java","assertion.getSubject().getSubjectConfirmations().add(subjectConfirmation)"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/test/java/org/springframework/security/saml2/provider/service/authentication/TestOpenSamlObjects.java","assertion.getAuthnStatements().add(statement)"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/test/java/org/springframework/security/saml2/provider/service/authentication/TestOpenSamlObjects.java","attribute.getAttributeValues().add(xsValue)"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/test/java/org/springframework/security/saml2/provider/service/authentication/TestOpenSamlObjects.java","attribute.getAttributeValues().add(customAttributeValue)"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/test/java/org/springframework/security/saml2/provider/service/authentication/TestOpenSamlObjects.java","attributeStatement.getAttributes().add(attribute)"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/test/java/org/springframework/security/saml2/provider/service/authentication/TestOpenSamlObjects.java","emailAttr.getAttributeValues().add(email1)"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/test/java/org/springframework/security/saml2/provider/service/authentication/TestOpenSamlObjects.java","emailAttr.getAttributeValues().add(email2)"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/test/java/org/springframework/security/saml2/provider/service/authentication/TestOpenSamlObjects.java","attrStmt1.getAttributes().add(emailAttr)"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/test/java/org/springframework/security/saml2/provider/service/authentication/TestOpenSamlObjects.java","nameAttr.getAttributeValues().add(name)"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/test/java/org/springframework/security/saml2/provider/service/authentication/TestOpenSamlObjects.java","attrStmt1.getAttributes().add(nameAttr)"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/test/java/org/springframework/security/saml2/provider/service/authentication/TestOpenSamlObjects.java","roleOneAttr.getAttributeValues().add(roleOne)"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/test/java/org/springframework/security/saml2/provider/service/authentication/TestOpenSamlObjects.java","attrStmt1.getAttributes().add(roleOneAttr)"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/test/java/org/springframework/security/saml2/provider/service/authentication/TestOpenSamlObjects.java","roleTwoAttr.getAttributeValues().add(roleTwo)"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/test/java/org/springframework/security/saml2/provider/service/authentication/TestOpenSamlObjects.java","attrStmt1.getAttributes().add(roleTwoAttr)"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/test/java/org/springframework/security/saml2/provider/service/authentication/TestOpenSamlObjects.java","ageAttr.getAttributeValues().add(age)"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/test/java/org/springframework/security/saml2/provider/service/authentication/TestOpenSamlObjects.java","attrStmt1.getAttributes().add(ageAttr)"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/test/java/org/springframework/security/saml2/provider/service/authentication/TestOpenSamlObjects.java","attributeStatements.add(attrStmt1)"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/test/java/org/springframework/security/saml2/provider/service/authentication/TestOpenSamlObjects.java","websiteAttr.getAttributeValues().add(uri)"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/test/java/org/springframework/security/saml2/provider/service/authentication/TestOpenSamlObjects.java","attrStmt2.getAttributes().add(websiteAttr)"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/test/java/org/springframework/security/saml2/provider/service/authentication/TestOpenSamlObjects.java","registeredAttr.getAttributeValues().add(registered)"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/test/java/org/springframework/security/saml2/provider/service/authentication/TestOpenSamlObjects.java","attrStmt2.getAttributes().add(registeredAttr)"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/test/java/org/springframework/security/saml2/provider/service/authentication/TestOpenSamlObjects.java","attributeStatements.add(attrStmt2)"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/test/java/org/springframework/security/saml2/provider/service/authentication/logout/OpenSamlSigningUtils.java","credentials.add(credential)"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/test/java/org/springframework/security/saml2/provider/service/registration/RelyingPartyRegistrationTests.java","algs.add(""alg"")"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/test/java/org/springframework/security/saml2/provider/service/registration/RelyingPartyRegistrationTests.java","algs.add(""alg"")"
github.com,"spring-projects/spring-security",main,"saml2/saml2-service-provider/src/test/java/org/springframework/security/saml2/provider/service/web/authentication/OpenSamlAuthenticationRequestResolverTests.java","algs.add(SignatureConstants.ALGO_ID_SIGNATURE_RSA_SHA1)"
github.com,"spring-projects/spring-security",main,"ldap/src/integration-test/java/org/springframework/security/ldap/server/UnboundIdContainerTests.java","connections.add(socket)"
github.com,"spring-projects/spring-security",main,"ldap/src/integration-test/java/org/springframework/security/ldap/server/UnboundIdContainerTests.java","availablePorts.add(socket.getLocalPort())"
github.com,"spring-projects/spring-security",main,"ldap/src/integration-test/java/org/springframework/security/ldap/server/ApacheDSContainerTests.java","connections.add(socket)"
github.com,"spring-projects/spring-security",main,"ldap/src/integration-test/java/org/springframework/security/ldap/server/ApacheDSContainerTests.java","availablePorts.add(socket.getLocalPort())"
github.com,"spring-projects/spring-security",main,"ldap/src/integration-test/java/org/springframework/security/ldap/DefaultSpringSecurityContextSourceTests.java","serverUrls.add(""ldap://foo:789"")"
github.com,"spring-projects/spring-security",main,"ldap/src/integration-test/java/org/springframework/security/ldap/DefaultSpringSecurityContextSourceTests.java","serverUrls.add(""ldap://bar:389"")"
github.com,"spring-projects/spring-security",main,"ldap/src/integration-test/java/org/springframework/security/ldap/DefaultSpringSecurityContextSourceTests.java","serverUrls.add(""ldaps://blah:636"")"
github.com,"spring-projects/spring-security",main,"ldap/src/integration-test/java/org/springframework/security/ldap/DefaultSpringSecurityContextSourceTests.java","serverUrls.add(""ldap://foo:789"")"
github.com,"spring-projects/spring-security",main,"ldap/src/integration-test/java/org/springframework/security/ldap/DefaultSpringSecurityContextSourceTests.java","serverUrls.add(""ldap://bar:389"")"
github.com,"spring-projects/spring-security",main,"ldap/src/integration-test/java/org/springframework/security/ldap/DefaultSpringSecurityContextSourceTests.java","serverUrls.add(""ldaps://blah:636"")"
github.com,"spring-projects/spring-security",main,"ldap/src/integration-test/java/org/springframework/security/ldap/DefaultSpringSecurityContextSourceTests.java","serverUrls.add(""ldap://ad1.example.org:789"")"
github.com,"spring-projects/spring-security",main,"ldap/src/integration-test/java/org/springframework/security/ldap/DefaultSpringSecurityContextSourceTests.java","serverUrls.add(""ldap://ad2.example.org:389"")"
github.com,"spring-projects/spring-security",main,"ldap/src/integration-test/java/org/springframework/security/ldap/DefaultSpringSecurityContextSourceTests.java","serverUrls.add(""ldaps://ad3.example.org:636"")"
github.com,"spring-projects/spring-security",main,"ldap/src/integration-test/java/org/springframework/security/ldap/DefaultSpringSecurityContextSourceTests.java","// a simple trailing slash should be ok
serverUrls.add(""ldaps://blah:636/"")"
github.com,"spring-projects/spring-security",main,"ldap/src/integration-test/java/org/springframework/security/ldap/DefaultSpringSecurityContextSourceTests.java","// this url should be rejected because the root DN goes into a separate parameter
serverUrls.add(""ldap://bar:389/dc=foobar,dc=org"")"
github.com,"spring-projects/spring-security",main,"ldap/src/main/java/org/springframework/security/ldap/authentication/AbstractLdapAuthenticator.java","userDns.add(formatter.format(args))"
github.com,"spring-projects/spring-security",main,"ldap/src/main/java/org/springframework/security/ldap/authentication/ad/ActiveDirectoryLdapAuthenticationProvider.java","authorities.add(new SimpleGrantedAuthority(new DistinguishedName(group).removeLast().getValue()))"
github.com,"spring-projects/spring-security",main,"ldap/src/main/java/org/springframework/security/ldap/server/ApacheDSContainer.java","list.add(new NormalizationInterceptor())"
github.com,"spring-projects/spring-security",main,"ldap/src/main/java/org/springframework/security/ldap/server/ApacheDSContainer.java","list.add(new AuthenticationInterceptor())"
github.com,"spring-projects/spring-security",main,"ldap/src/main/java/org/springframework/security/ldap/server/ApacheDSContainer.java","list.add(new ReferralInterceptor())"
github.com,"spring-projects/spring-security",main,"ldap/src/main/java/org/springframework/security/ldap/server/ApacheDSContainer.java","list.add(new ExceptionInterceptor())"
github.com,"spring-projects/spring-security",main,"ldap/src/main/java/org/springframework/security/ldap/server/ApacheDSContainer.java","list.add(new OperationalAttributeInterceptor())"
github.com,"spring-projects/spring-security",main,"ldap/src/main/java/org/springframework/security/ldap/server/ApacheDSContainer.java","list.add(new SubentryInterceptor())"
github.com,"spring-projects/spring-security",main,"ldap/src/main/java/org/springframework/security/ldap/DefaultSpringSecurityContextSource.java","urls.add(url.substring(0, url.lastIndexOf(urlRootDn)))"
github.com,"spring-projects/spring-security",main,"ldap/src/main/java/org/springframework/security/ldap/userdetails/Person.java","((Person) this.instance).cn.add(value)"
github.com,"spring-projects/spring-security",main,"ldap/src/main/java/org/springframework/security/ldap/userdetails/LdapUserDetailsImpl.java","this.mutableAuthorities.add(a)"
github.com,"spring-projects/spring-security",main,"ldap/src/main/java/org/springframework/security/ldap/SpringSecurityLdapTemplate.java","stringValues.add((String) value)"
github.com,"spring-projects/spring-security",main,"ldap/src/main/java/org/springframework/security/ldap/SpringSecurityLdapTemplate.java","stringValues.add(value.toString())"
github.com,"spring-projects/spring-hateoas",main,"src/main/java/org/springframework/hateoas/PagedModel.java","resources.add((T) EntityModel.of(element))"
github.com,"spring-projects/spring-hateoas",main,"src/main/java/org/springframework/hateoas/CollectionModel.java","resources.add((T) EntityModel.of(element))"
github.com,"spring-projects/spring-hateoas",main,"src/main/java/org/springframework/hateoas/Link.java","newAffordances.add(affordance)"
github.com,"spring-projects/spring-hateoas",main,"src/main/java/org/springframework/hateoas/TemplateVariables.java","
processed.add(isRequestParameter && requestParameterFound
		? variable.withType(REQUEST_PARAM_CONTINUED)
		: variable)"
github.com,"spring-projects/spring-hateoas",main,"src/main/java/org/springframework/hateoas/TemplateVariables.java","result.add(otherVariable)"
github.com,"spring-projects/spring-hateoas",main,"src/main/java/org/springframework/hateoas/server/core/AnnotationMappingDiscoverer.java","requestMethodNames.add(HttpMethod.valueOf(requestMethod.toString()))"
github.com,"spring-projects/spring-hateoas",main,"src/main/java/org/springframework/hateoas/server/core/MethodParameters.java",originalAnnotations::add
github.com,"spring-projects/spring-hateoas",main,"src/main/java/org/springframework/hateoas/server/core/WebHandler.java","optionalEmptyParameters.add(parameter.getVariableName())"
github.com,"spring-projects/spring-hateoas",main,"src/main/java/org/springframework/hateoas/server/core/WebHandler.java","result.add(parameter)"
github.com,"spring-projects/spring-hateoas",main,"src/main/java/org/springframework/hateoas/server/core/WebHandler.java","prepared.add(prepareValue(element, factory, elementTypeDescriptor))"
github.com,"spring-projects/spring-hateoas",main,"src/main/java/org/springframework/hateoas/server/mvc/RepresentationModelProcessorInvoker.java","this.processors.add(new EntityModelProcessorWrapper(processor))"
github.com,"spring-projects/spring-hateoas",main,"src/main/java/org/springframework/hateoas/server/mvc/RepresentationModelProcessorInvoker.java","this.processors.add(new CollectionModelProcessorWrapper(processor))"
github.com,"spring-projects/spring-hateoas",main,"src/main/java/org/springframework/hateoas/server/mvc/RepresentationModelProcessorInvoker.java","this.processors.add(new DefaultProcessorWrapper(processor))"
github.com,"spring-projects/spring-hateoas",main,"src/main/java/org/springframework/hateoas/server/mvc/RepresentationModelProcessorInvoker.java","
result.add(invokeProcessorsFor(element, elementTargetType))"
github.com,"spring-projects/spring-hateoas",main,"src/main/java/org/springframework/hateoas/server/mvc/RepresentationModelAssemblerSupport.java","result.add(this.resourceAssembler.toModel(entity))"
github.com,"spring-projects/spring-hateoas",main,"src/main/java/org/springframework/hateoas/server/SimpleRepresentationModelAssembler.java","resourceList.add(toModel(entity))"
github.com,"spring-projects/spring-hateoas",main,"src/main/java/org/springframework/hateoas/support/WebStack.java","configurations.add(this.serverConfiguration)"
github.com,"spring-projects/spring-hateoas",main,"src/main/java/org/springframework/hateoas/support/WebStack.java","configurations.add(this.clientConfiguration)"
github.com,"spring-projects/spring-hateoas",main,"src/main/java/org/springframework/hateoas/client/Traverson.java",this.rels::add
github.com,"spring-projects/spring-hateoas",main,"src/main/java/org/springframework/hateoas/client/Traverson.java","
this.rels.add(hop)"
github.com,"spring-projects/spring-hateoas",main,"src/main/java/org/springframework/hateoas/UriTemplate.java","
variableGroup.add(variable)"
github.com,"spring-projects/spring-hateoas",main,"src/main/java/org/springframework/hateoas/UriTemplate.java","variables.add(variable)"
github.com,"spring-projects/spring-hateoas",main,"src/main/java/org/springframework/hateoas/UriTemplate.java","
expandGroups.add(new ExpandGroup(variableGroup))"
github.com,"spring-projects/spring-hateoas",main,"src/main/java/org/springframework/hateoas/UriTemplate.java","
result.add(variable)"
github.com,"spring-projects/spring-hateoas",main,"src/main/java/org/springframework/hateoas/UriTemplate.java","
foo.add(group)"
github.com,"spring-projects/spring-hateoas",main,"src/main/java/org/springframework/hateoas/UriTemplate.java","foo.add(merged)"
github.com,"spring-projects/spring-hateoas",main,"src/main/java/org/springframework/hateoas/mediatype/vnderrors/VndErrors.java","this.errors.add(error)"
github.com,"spring-projects/spring-hateoas",main,"src/main/java/org/springframework/hateoas/mediatype/vnderrors/VndErrors.java","
this.errors.add(error)"
github.com,"spring-projects/spring-hateoas",main,"src/main/java/org/springframework/hateoas/mediatype/hal/Jackson2HalModule.java","links.add(link)"
github.com,"spring-projects/spring-hateoas",main,"src/main/java/org/springframework/hateoas/mediatype/hal/Jackson2HalModule.java","result.add(jp.readValueAs(Link.class).withRel(relation))"
github.com,"spring-projects/spring-hateoas",main,"src/main/java/org/springframework/hateoas/mediatype/hal/Jackson2HalModule.java","result.add(jp.readValueAs(Link.class).withRel(relation))"
github.com,"spring-projects/spring-hateoas",main,"src/main/java/org/springframework/hateoas/mediatype/hal/Jackson2HalModule.java","result.add(object)"
github.com,"spring-projects/spring-hateoas",main,"src/main/java/org/springframework/hateoas/mediatype/hal/Jackson2HalModule.java","result.add(object)"
github.com,"spring-projects/spring-hateoas",main,"src/main/java/org/springframework/hateoas/mediatype/hal/HalModelBuilder.java","
this.embeddeds.add(wrappers.wrap(entity, linkRelation))"
github.com,"spring-projects/spring-hateoas",main,"src/main/java/org/springframework/hateoas/mediatype/hal/HalModelBuilder.java","
this.embeddeds.add(wrappers.wrap(entity))"
github.com,"spring-projects/spring-hateoas",main,"src/main/java/org/springframework/hateoas/mediatype/hal/HalTraversonDefaults.java","converters.add(new StringHttpMessageConverter(StandardCharsets.UTF_8))"
github.com,"spring-projects/spring-hateoas",main,"src/main/java/org/springframework/hateoas/mediatype/hal/HalTraversonDefaults.java","converters.add(getHalConverter(halFlavors))"
github.com,"spring-projects/spring-hateoas",main,"src/main/java/org/springframework/hateoas/mediatype/hal/forms/HalFormsTemplate.java","properties.add(property)"
github.com,"spring-projects/spring-hateoas",main,"src/main/java/org/springframework/hateoas/mediatype/hal/forms/HalFormsDeserializers.java","result.add(object)"
github.com,"spring-projects/spring-hateoas",main,"src/main/java/org/springframework/hateoas/mediatype/hal/forms/HalFormsDeserializers.java","result.add(object)"
github.com,"spring-projects/spring-hateoas",main,"src/main/java/org/springframework/hateoas/mediatype/hal/forms/HalFormsConfiguration.java","newMediaTypes.add(mediaTypes.size() - 1, mediaType)"
github.com,"spring-projects/spring-hateoas",main,"src/main/java/org/springframework/hateoas/mediatype/hal/forms/HalFormsPropertyFactory.java",codes::add
github.com,"spring-projects/spring-hateoas",main,"src/main/java/org/springframework/hateoas/mediatype/hal/forms/HalFormsPropertyFactory.java","
codes.add(globalCode)"
github.com,"spring-projects/spring-hateoas",main,"src/main/java/org/springframework/hateoas/mediatype/hal/HalConfiguration.java","newMediaTypes.add(mediaTypes.size() - 1, mediaType)"
github.com,"spring-projects/spring-hateoas",main,"src/main/java/org/springframework/hateoas/mediatype/uber/Jackson2UberModule.java","content.add(resource)"
github.com,"spring-projects/spring-hateoas",main,"src/main/java/org/springframework/hateoas/mediatype/uber/UberData.java",data::add
github.com,"spring-projects/spring-hateoas",main,"src/main/java/org/springframework/hateoas/mediatype/uber/UberData.java",data::add
github.com,"spring-projects/spring-hateoas",main,"src/main/java/org/springframework/hateoas/mediatype/uber/UberData.java","
collectionOfResources.add(new UberData().withName(""page"")
		.withData(Arrays.asList(new UberData().withName(""number"").withValue(resources.getMetadata().getNumber()),
				new UberData().withName(""size"").withValue(resources.getMetadata().getSize()),
				new UberData().withName(""totalElements"").withValue(resources.getMetadata().getTotalElements()),
				new UberData().withName(""totalPages"").withValue(resources.getMetadata().getTotalPages()))))"
github.com,"spring-projects/spring-hateoas",main,"src/main/java/org/springframework/hateoas/mediatype/uber/UberData.java","linkAndRels.getRels().add(link.getRel())"
github.com,"spring-projects/spring-hateoas",main,"src/main/java/org/springframework/hateoas/RepresentationModel.java","this.links.add(initialLink)"
github.com,"spring-projects/spring-hateoas",main,"src/main/java/org/springframework/hateoas/RepresentationModel.java","this.links.add(link)"
github.com,"spring-projects/spring-hateoas",main,"src/main/java/org/springframework/hateoas/RepresentationModel.java","
this.links.add(link)"
github.com,"spring-projects/spring-hateoas",main,"src/main/java/org/springframework/hateoas/RepresentationModel.java","links.add(mapper.apply(it))"
github.com,"spring-projects/spring-hateoas",main,"src/main/java/org/springframework/hateoas/Links.java","links.add(link)"
github.com,"spring-projects/spring-hateoas",main,"src/main/java/org/springframework/hateoas/Links.java",newLinks::add
github.com,"spring-projects/spring-hateoas",main,"src/main/java/org/springframework/hateoas/Links.java","newLinks.add(it)"
github.com,"spring-projects/spring-hateoas",main,"src/main/java/org/springframework/hateoas/Links.java","newLinks.add(it)"
github.com,"spring-projects/spring-hateoas",main,"src/main/java/org/springframework/hateoas/Links.java","newLinks.add(it)"
github.com,"spring-projects/spring-hateoas",main,"src/main/java/org/springframework/hateoas/SlicedModel.java","resources.add((T) EntityModel.of(element))"
github.com,"spring-projects/spring-hateoas",main,"src/test/java/org/springframework/hateoas/server/mvc/ResourceProcessorHandlerMethodReturnValueHandlerUnitTest.java","
resourceProcessors.add(StringResourceProcessor.INSTANCE)"
github.com,"spring-projects/spring-hateoas",main,"src/test/java/org/springframework/hateoas/server/mvc/ResourceProcessorHandlerMethodReturnValueHandlerUnitTest.java","resourceProcessors.add(LongResourceProcessor.INSTANCE)"
github.com,"spring-projects/spring-hateoas",main,"src/test/java/org/springframework/hateoas/server/mvc/ResourceProcessorHandlerMethodReturnValueHandlerUnitTest.java","
resourceProcessors.add(StringResourceProcessor.INSTANCE)"
github.com,"spring-projects/spring-hateoas",main,"src/test/java/org/springframework/hateoas/server/mvc/ResourceProcessorHandlerMethodReturnValueHandlerUnitTest.java","resourceProcessors.add(LongResourceProcessor.INSTANCE)"
github.com,"spring-projects/spring-hateoas",main,"src/test/java/org/springframework/hateoas/server/mvc/ResourceProcessorHandlerMethodReturnValueHandlerUnitTest.java","
resourceProcessors.add(StringResourceProcessor.INSTANCE)"
github.com,"spring-projects/spring-hateoas",main,"src/test/java/org/springframework/hateoas/server/mvc/ResourceProcessorHandlerMethodReturnValueHandlerUnitTest.java","resourceProcessors.add(LongResourceProcessor.INSTANCE)"
github.com,"spring-projects/spring-hateoas",main,"src/test/java/org/springframework/hateoas/server/mvc/ResourceProcessorHandlerMethodReturnValueHandlerUnitTest.java","
resourceProcessors.add(StringResourcesProcessor.INSTANCE)"
github.com,"spring-projects/spring-hateoas",main,"src/test/java/org/springframework/hateoas/server/mvc/ResourceProcessorHandlerMethodReturnValueHandlerUnitTest.java","resourceProcessors.add(LongResourceProcessor.INSTANCE)"
github.com,"spring-projects/spring-hateoas",main,"src/test/java/org/springframework/hateoas/server/mvc/ResourceProcessorHandlerMethodReturnValueHandlerUnitTest.java","
resourceProcessors.add(SpecializedStringResourceProcessor.INSTANCE)"
github.com,"spring-projects/spring-hateoas",main,"src/test/java/org/springframework/hateoas/server/mvc/ResourceProcessorHandlerMethodReturnValueHandlerUnitTest.java","resourceProcessors.add(LongResourceProcessor.INSTANCE)"
github.com,"spring-projects/spring-hateoas",main,"src/test/java/org/springframework/hateoas/server/mvc/ResourceProcessorHandlerMethodReturnValueHandlerUnitTest.java","
resourceProcessors.add(StringResourceProcessor.INSTANCE)"
github.com,"spring-projects/spring-hateoas",main,"src/test/java/org/springframework/hateoas/server/mvc/ResourceProcessorHandlerMethodReturnValueHandlerUnitTest.java","resourceProcessors.add(LongResourceProcessor.INSTANCE)"
github.com,"spring-projects/spring-hateoas",main,"src/test/java/org/springframework/hateoas/server/mvc/ResourceProcessorHandlerMethodReturnValueHandlerUnitTest.java","
resourceProcessors.add(StringResourceProcessor.INSTANCE)"
github.com,"spring-projects/spring-hateoas",main,"src/test/java/org/springframework/hateoas/server/mvc/ResourceProcessorHandlerMethodReturnValueHandlerUnitTest.java","resourceProcessors.add(LongResourceProcessor.INSTANCE)"
github.com,"spring-projects/spring-hateoas",main,"src/test/java/org/springframework/hateoas/server/mvc/ResourceProcessorHandlerMethodReturnValueHandlerUnitTest.java","
resourceProcessors.add(StringResourceProcessor.INSTANCE)"
github.com,"spring-projects/spring-hateoas",main,"src/test/java/org/springframework/hateoas/server/mvc/ResourceProcessorHandlerMethodReturnValueHandlerUnitTest.java","resourceProcessors.add(SpecializedLongResourceProcessor.INSTANCE)"
github.com,"spring-projects/spring-hateoas",main,"src/test/java/org/springframework/hateoas/server/mvc/ResourceProcessorHandlerMethodReturnValueHandlerUnitTest.java","
resourceProcessors.add(StringResourceProcessor.INSTANCE)"
github.com,"spring-projects/spring-hateoas",main,"src/test/java/org/springframework/hateoas/server/mvc/ResourceProcessorHandlerMethodReturnValueHandlerUnitTest.java","resourceProcessors.add(SpecializedLongResourceProcessor.INSTANCE)"
github.com,"spring-projects/spring-hateoas",main,"src/test/java/org/springframework/hateoas/server/mvc/ResourceProcessorHandlerMethodReturnValueHandlerUnitTest.java","
resourceProcessors.add(StringResourceProcessor.INSTANCE)"
github.com,"spring-projects/spring-hateoas",main,"src/test/java/org/springframework/hateoas/server/mvc/ResourceProcessorHandlerMethodReturnValueHandlerUnitTest.java","resourceProcessors.add(LongResourceProcessor.INSTANCE)"
github.com,"spring-projects/spring-hateoas",main,"src/test/java/org/springframework/hateoas/server/mvc/ResourceProcessorHandlerMethodReturnValueHandlerUnitTest.java","
resourceProcessors.add((RepresentationModelProcessor<?>) factory.getProxy())"
github.com,"spring-projects/spring-hateoas",main,"src/test/java/org/springframework/hateoas/server/mvc/ResourceProcessorHandlerMethodReturnValueHandlerUnitTest.java","
resourceProcessors.add(StringResourceProcessor.INSTANCE)"
github.com,"spring-projects/spring-hateoas",main,"src/test/java/org/springframework/hateoas/server/mvc/MultiMediaTypeWebMvcIntegrationTest.java","employees.add(findOne(i))"
github.com,"spring-projects/spring-hateoas",main,"src/test/java/org/springframework/hateoas/server/mvc/MultiMediaTypeWebMvcIntegrationTest.java","employees.add(employeeResource)"
github.com,"spring-projects/spring-hateoas",main,"src/test/java/org/springframework/hateoas/support/WebMvcEmployeeController.java","employees.add(employeeResource)"
github.com,"spring-projects/spring-hateoas",main,"src/test/java/org/springframework/hateoas/mediatype/collectionjson/Jackson2CollectionJsonIntegrationTest.java","content.add(""first"")"
github.com,"spring-projects/spring-hateoas",main,"src/test/java/org/springframework/hateoas/mediatype/collectionjson/Jackson2CollectionJsonIntegrationTest.java","content.add(""second"")"
github.com,"spring-projects/spring-hateoas",main,"src/test/java/org/springframework/hateoas/mediatype/collectionjson/Jackson2CollectionJsonIntegrationTest.java","content.add(""first"")"
github.com,"spring-projects/spring-hateoas",main,"src/test/java/org/springframework/hateoas/mediatype/collectionjson/Jackson2CollectionJsonIntegrationTest.java","content.add(""second"")"
github.com,"spring-projects/spring-hateoas",main,"src/test/java/org/springframework/hateoas/mediatype/collectionjson/Jackson2CollectionJsonIntegrationTest.java","data.add(EntityModel.of(""first"", Link.of(""localhost""), Link.of(""orders"").withRel(""orders"")))"
github.com,"spring-projects/spring-hateoas",main,"src/test/java/org/springframework/hateoas/mediatype/collectionjson/Jackson2CollectionJsonIntegrationTest.java","data.add(EntityModel.of(""second"", Link.of(""remotehost""), Link.of(""order"").withRel(""orders"")))"
github.com,"spring-projects/spring-hateoas",main,"src/test/java/org/springframework/hateoas/mediatype/collectionjson/Jackson2CollectionJsonIntegrationTest.java","data.add(EntityModel.of(""first"", Link.of(""localhost""), Link.of(""orders"").withRel(""orders"")))"
github.com,"spring-projects/spring-hateoas",main,"src/test/java/org/springframework/hateoas/mediatype/collectionjson/Jackson2CollectionJsonIntegrationTest.java","data.add(EntityModel.of(""second"", Link.of(""remotehost""), Link.of(""order"").withRel(""orders"")))"
github.com,"spring-projects/spring-hateoas",main,"src/test/java/org/springframework/hateoas/mediatype/collectionjson/CollectionJsonWebMvcIntegrationTest.java","employees.add(findOne(i))"
github.com,"spring-projects/spring-hateoas",main,"src/test/java/org/springframework/hateoas/mediatype/collectionjson/CollectionJsonWebMvcIntegrationTest.java","employees.add(employeeResource)"
github.com,"spring-projects/spring-hateoas",main,"src/test/java/org/springframework/hateoas/mediatype/hal/Jackson2HalIntegrationTest.java","content.add(""first"")"
github.com,"spring-projects/spring-hateoas",main,"src/test/java/org/springframework/hateoas/mediatype/hal/Jackson2HalIntegrationTest.java","content.add(""second"")"
github.com,"spring-projects/spring-hateoas",main,"src/test/java/org/springframework/hateoas/mediatype/hal/Jackson2HalIntegrationTest.java","content.add(""first"")"
github.com,"spring-projects/spring-hateoas",main,"src/test/java/org/springframework/hateoas/mediatype/hal/Jackson2HalIntegrationTest.java","content.add(""second"")"
github.com,"spring-projects/spring-hateoas",main,"src/test/java/org/springframework/hateoas/mediatype/hal/Jackson2HalIntegrationTest.java","content.add(EntityModel.of(new SimpleAnnotatedPojo(""test1"", 1), Link.of(""localhost"")))"
github.com,"spring-projects/spring-hateoas",main,"src/test/java/org/springframework/hateoas/mediatype/hal/Jackson2HalIntegrationTest.java","content.add(EntityModel.of(new SimpleAnnotatedPojo(""test1"", 1), Link.of(""localhost"")))"
github.com,"spring-projects/spring-hateoas",main,"src/test/java/org/springframework/hateoas/mediatype/hal/Jackson2HalIntegrationTest.java","values.add(wrappers.emptyCollectionOf(SimpleAnnotatedPojo.class))"
github.com,"spring-projects/spring-hateoas",main,"src/test/java/org/springframework/hateoas/mediatype/hal/Jackson2HalIntegrationTest.java","content.add(EntityModel.of(new SimpleAnnotatedPojo(""test1"", 1), Link.of(""localhost"")))"
github.com,"spring-projects/spring-hateoas",main,"src/test/java/org/springframework/hateoas/mediatype/hal/Jackson2HalIntegrationTest.java","content.add(EntityModel.of(new SimpleAnnotatedPojo(""test2"", 2), Link.of(""localhost"")))"
github.com,"spring-projects/spring-hateoas",main,"src/test/java/org/springframework/hateoas/mediatype/hal/Jackson2HalIntegrationTest.java","content.add(EntityModel.of(new SimpleAnnotatedPojo(""test1"", 1), Link.of(""localhost"")))"
github.com,"spring-projects/spring-hateoas",main,"src/test/java/org/springframework/hateoas/mediatype/hal/Jackson2HalIntegrationTest.java","content.add(EntityModel.of(new SimpleAnnotatedPojo(""test2"", 2), Link.of(""localhost"")))"
github.com,"spring-projects/spring-hateoas",main,"src/test/java/org/springframework/hateoas/mediatype/hal/RenderHypermediaForDefaultAcceptHeadersTest.java","employees.add(findOne(i))"
github.com,"spring-projects/spring-hateoas",main,"src/test/java/org/springframework/hateoas/mediatype/hal/forms/Jackson2HalFormsIntegrationTest.java","content.add(""first"")"
github.com,"spring-projects/spring-hateoas",main,"src/test/java/org/springframework/hateoas/mediatype/hal/forms/Jackson2HalFormsIntegrationTest.java","content.add(""second"")"
github.com,"spring-projects/spring-hateoas",main,"src/test/java/org/springframework/hateoas/mediatype/hal/forms/Jackson2HalFormsIntegrationTest.java","content.add(""first"")"
github.com,"spring-projects/spring-hateoas",main,"src/test/java/org/springframework/hateoas/mediatype/hal/forms/Jackson2HalFormsIntegrationTest.java","content.add(""second"")"
github.com,"spring-projects/spring-hateoas",main,"src/test/java/org/springframework/hateoas/mediatype/hal/forms/Jackson2HalFormsIntegrationTest.java","content.add(EntityModel.of(new SimpleAnnotatedPojo(""test1"", 1), Link.of(""localhost"")))"
github.com,"spring-projects/spring-hateoas",main,"src/test/java/org/springframework/hateoas/mediatype/hal/forms/Jackson2HalFormsIntegrationTest.java","content.add(EntityModel.of(new SimpleAnnotatedPojo(""test1"", 1), Link.of(""localhost"")))"
github.com,"spring-projects/spring-hateoas",main,"src/test/java/org/springframework/hateoas/mediatype/hal/forms/Jackson2HalFormsIntegrationTest.java","values.add(wrappers.emptyCollectionOf(SimpleAnnotatedPojo.class))"
github.com,"spring-projects/spring-hateoas",main,"src/test/java/org/springframework/hateoas/mediatype/hal/forms/Jackson2HalFormsIntegrationTest.java","content.add(EntityModel.of(new SimpleAnnotatedPojo(""test1"", 1), Link.of(""localhost"")))"
github.com,"spring-projects/spring-hateoas",main,"src/test/java/org/springframework/hateoas/mediatype/hal/forms/Jackson2HalFormsIntegrationTest.java","content.add(EntityModel.of(new SimpleAnnotatedPojo(""test2"", 2), Link.of(""localhost"")))"
github.com,"spring-projects/spring-hateoas",main,"src/test/java/org/springframework/hateoas/mediatype/hal/forms/Jackson2HalFormsIntegrationTest.java","content.add(EntityModel.of(new SimpleAnnotatedPojo(""test1"", 1), Link.of(""localhost"")))"
github.com,"spring-projects/spring-hateoas",main,"src/test/java/org/springframework/hateoas/mediatype/hal/forms/Jackson2HalFormsIntegrationTest.java","content.add(EntityModel.of(new SimpleAnnotatedPojo(""test2"", 2), Link.of(""localhost"")))"
github.com,"spring-projects/spring-hateoas",main,"src/test/java/org/springframework/hateoas/mediatype/uber/Jackson2UberIntegrationTest.java","content.add(""first"")"
github.com,"spring-projects/spring-hateoas",main,"src/test/java/org/springframework/hateoas/mediatype/uber/Jackson2UberIntegrationTest.java","content.add(""second"")"
github.com,"spring-projects/spring-hateoas",main,"src/test/java/org/springframework/hateoas/mediatype/uber/Jackson2UberIntegrationTest.java","content.add(""first"")"
github.com,"spring-projects/spring-hateoas",main,"src/test/java/org/springframework/hateoas/mediatype/uber/Jackson2UberIntegrationTest.java","content.add(""second"")"
github.com,"spring-projects/spring-hateoas",main,"src/test/java/org/springframework/hateoas/mediatype/uber/Jackson2UberIntegrationTest.java","content.add(EntityModel.of(""first""))"
github.com,"spring-projects/spring-hateoas",main,"src/test/java/org/springframework/hateoas/mediatype/uber/Jackson2UberIntegrationTest.java","content.add(EntityModel.of(""second""))"
github.com,"spring-projects/spring-hateoas",main,"src/test/java/org/springframework/hateoas/mediatype/uber/Jackson2UberIntegrationTest.java","data.add(EntityModel.of(""first"", Link.of(""localhost""), Link.of(""orders"").withRel(""orders"")))"
github.com,"spring-projects/spring-hateoas",main,"src/test/java/org/springframework/hateoas/mediatype/uber/Jackson2UberIntegrationTest.java","data.add(EntityModel.of(""second"", Link.of(""remotehost""), Link.of(""order"").withRel(""orders"")))"
github.com,"spring-projects/spring-hateoas",main,"src/test/java/org/springframework/hateoas/mediatype/uber/Jackson2UberIntegrationTest.java","data.add(EntityModel.of(""first"", Link.of(""localhost""), Link.of(""orders"").withRel(""orders"")))"
github.com,"spring-projects/spring-hateoas",main,"src/test/java/org/springframework/hateoas/mediatype/uber/Jackson2UberIntegrationTest.java","data.add(EntityModel.of(""second"", Link.of(""remotehost""), Link.of(""order"").withRel(""orders"")))"
github.com,"spring-projects/spring-hateoas",main,"src/test/java/org/springframework/hateoas/mediatype/uber/Jackson2UberIntegrationTest.java","data.add(EntityModel.of("""", Link.of(""localhost""), Link.of(""orders"").withRel(""orders"")))"
github.com,"spring-projects/spring-hateoas",main,"src/test/java/org/springframework/hateoas/mediatype/uber/Jackson2UberIntegrationTest.java","data.add(EntityModel.of(""second"", Link.of(""remotehost""), Link.of(""order"").withRel(""orders"")))"
github.com,"spring-projects/spring-hateoas",main,"src/test/java/org/springframework/hateoas/mediatype/uber/Jackson2UberIntegrationTest.java","data.add(EntityModel.of(""first"", Link.of(""localhost""), Link.of(""orders"").withRel(""orders"")))"
github.com,"spring-projects/spring-hateoas",main,"src/test/java/org/springframework/hateoas/mediatype/uber/Jackson2UberIntegrationTest.java","data.add(EntityModel.of(""second"", Link.of(""remotehost""), Link.of(""order"").withRel(""orders"")))"
github.com,"spring-projects/spring-hateoas",main,"src/test/java/org/springframework/hateoas/mediatype/uber/Jackson2UberIntegrationTest.java","data.add(EntityModel.of(""first"", Link.of(""localhost""), Link.of(""orders"").withRel(""orders"")))"
github.com,"spring-projects/spring-hateoas",main,"src/test/java/org/springframework/hateoas/mediatype/uber/Jackson2UberIntegrationTest.java","data.add(EntityModel.of(""second"", Link.of(""remotehost""), Link.of(""order"").withRel(""orders"")))"
github.com,"spring-projects/spring-hateoas",main,"src/test/java/org/springframework/hateoas/mediatype/uber/Jackson2UberIntegrationTest.java","data.add(""first"")"
github.com,"spring-projects/spring-hateoas",main,"src/test/java/org/springframework/hateoas/mediatype/uber/Jackson2UberIntegrationTest.java","data.add(""second"")"
github.com,"spring-projects/spring-hateoas",main,"src/test/java/org/springframework/hateoas/mediatype/uber/Jackson2UberIntegrationTest.java","content.add(employeeResource)"
github.com,"spring-projects/spring-hateoas",main,"src/test/java/org/springframework/hateoas/config/HypermediaWebFluxConfigurerTest.java","
this.employees.add(newEmployee)"
github.com,"spring-projects/spring-hateoas",main,"src/test/java/org/springframework/hateoas/config/HypermediaWebFluxConfigurerTest.java","
this.employees.add(newEmployee)"
github.com,"spring-projects/spring-hateoas",main,"src/test/java/org/springframework/hateoas/config/HypermediaWebFluxConfigurerTest.java","employees.add(employee)"
github.com,"spring-projects/spring-hateoas",main,"src/test/java/org/springframework/hateoas/config/HypermediaWebMvcConfigurerTest.java","
this.employees.add(newEmployee)"
github.com,"spring-projects/spring-hateoas",main,"src/test/java/org/springframework/hateoas/config/HypermediaWebMvcConfigurerTest.java","
this.employees.add(newEmployee)"
github.com,"spring-projects/spring-hateoas",main,"src/docs/java/org/springframework/hateoas/EmployeeController.java","employees.add(employeeResource)"
github.com,"spring-projects/spring-boot-data-geode",main,"spring-geode-project/spring-geode-autoconfigure/src/main/java/org/springframework/geode/boot/autoconfigure/condition/OnMissingPropertyCondition.java","annotationAttributesList.add(newAnnotationAttributes)"
github.com,"spring-projects/spring-boot-data-geode",main,"spring-geode-project/spring-geode-autoconfigure/src/main/java/org/springframework/geode/boot/autoconfigure/support/HttpBasicAuthenticationSecurityConfiguration.java","
restTemplate.getInterceptors().add(clientHttpRequestInterceptor)"
github.com,"spring-projects/spring-boot-data-geode",main,"spring-geode-project/spring-geode-autoconfigure/src/test/java/example/geode/query/cq/event/TemperatureReadingsContinuousQueriesHandler.java","
this.boilingTemperatureReadings.add(temperatureReading)"
github.com,"spring-projects/spring-boot-data-geode",main,"spring-geode-project/spring-geode-autoconfigure/src/test/java/example/geode/query/cq/event/TemperatureReadingsContinuousQueriesHandler.java","
this.freezingTemperatureReadings.add(temperatureReading)"
github.com,"spring-projects/spring-boot-data-geode",main,"spring-geode-project/spring-geode/src/main/java/org/springframework/geode/data/json/converter/support/JacksonJsonToPdxConverter.java","pdxList.add(converter.convert(object.toString()))"
github.com,"spring-projects/spring-boot-data-geode",main,"spring-geode-project/spring-geode/src/main/java/org/springframework/geode/data/json/converter/support/JacksonJsonToPdxConverter.java","
pdxList.add(getJsonToPdxConverter().convert(objectNode.toString()))"
github.com,"spring-projects/spring-boot-data-geode",main,"spring-geode-project/spring-geode/src/main/java/org/springframework/geode/config/annotation/ClusterAwareConfiguration.java","new ConnectionEndpointList(getDefaultConnectionEndpoints(environment))
				.add(getConfiguredConnectionEndpoints(environment))"
github.com,"spring-projects/spring-boot-data-geode",main,"spring-geode-project/spring-geode/src/main/java/org/springframework/geode/config/annotation/ClusterAwareConfiguration.java","new ConnectionEndpointList(getDefaultConnectionEndpoints(environment))
			.add(getConfiguredConnectionEndpoints(environment))
			.add(getPooledConnectionEndpoints(environment))"
github.com,"spring-projects/spring-boot-data-geode",main,"spring-geode-project/spring-geode/src/main/java/org/springframework/geode/config/annotation/ClusterAwareConfiguration.java",list::add
github.com,"spring-projects/spring-boot-data-geode",main,"spring-geode-project/spring-geode/src/main/java/org/springframework/geode/cache/RepositoryAsyncEventListener.java","getRepositoryFunctions().add(0, repositoryFunction)"
github.com,"spring-projects/spring-boot-data-geode",main,"spring-geode-project/spring-geode/src/main/java/org/springframework/geode/cache/InlineCachingRegionConfigurer.java","
this.regionConfigurers.add(newRepositoryCacheLoaderRegionConfigurer(repository, regionBeanName))"
github.com,"spring-projects/spring-boot-data-geode",main,"spring-geode-project/spring-geode/src/main/java/org/springframework/geode/cache/InlineCachingRegionConfigurer.java","this.regionConfigurers.add(newRepositoryCacheWriterRegionConfigurer(repository, regionBeanName))"
github.com,"spring-projects/spring-boot-data-geode",main,"spring-geode-project/spring-geode/src/test/java/example/app/pos/model/PurchaseOrder.java","
this.lineItems.add(lineItem)"
github.com,"spring-projects/spring-boot-data-geode",main,"spring-geode-project/spring-geode-actuator/src/test/java/org/springframework/geode/boot/actuate/GeodeCacheServersHealthIndicatorUnitTests.java","
mockCacheServers.add(CacheServerMockObjects.mockCacheServer(""10.11.111.1"", null,
	""Mailbox"", 15000L, mockServerLoadProbe, 100, 500,
	8, 20000, 30000, 41414, true, 16384,
	true))"
github.com,"spring-projects/spring-boot-data-geode",main,"spring-geode-project/spring-geode-actuator/src/test/java/org/springframework/geode/boot/actuate/GeodeCacheServersHealthIndicatorUnitTests.java","
mockCacheServers.add(CacheServerMockObjects.mockCacheServer(""10.12.120.2"", null,
	""Skullbox"", 10000L, mockServerLoadProbe, 250, 50,
	16, 5000, 15000, 42424, false, 8192,
	false))"
github.com,"spring-projects/spring-boot-data-geode",main,"buildSrc/src/main/groovy/io/spring/gradle/convention/SpringDependencyManagementConventionsPlugin.groovy","dependencyManagementFiles.add(new File(dir, DEPENDENCY_MANAGEMENT_RESOURCE))"
github.com,"spring-projects/spring-boot-data-geode",main,"spring-geode-samples/caching/inline-async/src/main/java/example/app/caching/inline/async/client/model/GolfTournament.java","this.pairings.add(Pairing.of(playersToPair.get(index), playersToPair.get(index + 1)))"
github.com,"spring-projects/spring-boot-data-geode",main,"spring-geode-samples/caching/inline-async/src/main/java/example/app/caching/inline/async/client/model/GolfCourse.java","
this.parForHole.add(indexForHole(holeNumber), par)"
github.com,"spring-projects/spring-boot-data-geode",main,"spring-geode-project/apache-geode-jetty11/src/main/java/org/springframework/geode/cache/service/Jetty11HttpService.java",connectionFactories::add
github.com,"spring-projects/spring-boot-data-geode",main,"spring-geode-project/apache-geode-jetty11/src/main/java/org/springframework/geode/cache/service/Jetty11HttpService.java","
connectionFactories.add(httpConnectionFactory)"
github.com,"spring-projects/spring-boot-data-geode",main,"spring-geode-project/apache-geode-jetty11/src/main/java/org/springframework/geode/cache/service/Jetty11HttpService.java","
this.webApplications.add(webApplication)"
github.com,"spring-projects/spring-boot-data-geode",main,"spring-geode-project/apache-geode-jetty11/src/main/java/org/springframework/geode/cache/service/Jetty11HttpService.java","resolvedArguments.add(resolvedArgument)"
github.com,"spring-cloud/spring-cloud-deployer-cloudfoundry",main,"src/main/java/org/springframework/cloud/deployer/spi/cloudfoundry/CfEnvAwareResource.java","urls.add(a.getUrl())"
github.com,"spring-cloud/spring-cloud-deployer-cloudfoundry",main,"src/main/java/org/springframework/cloud/deployer/spi/cloudfoundry/ServiceParser.java","serviceInstances.add(val)"
github.com,"spring-cloud/spring-cloud-deployer-cloudfoundry",main,"src/main/java/org/springframework/cloud/deployer/spi/cloudfoundry/ServiceParser.java","serviceInstances.add(s)"
github.com,"spring-cloud/spring-cloud-deployer-cloudfoundry",main,"src/test/java/org/springframework/cloud/deployer/spi/cloudfoundry/CloudFoundryTaskLauncherTests.java","args.add(""test-command-arg-1"")"
github.com,"spring-cloud/spring-cloud-deployer-cloudfoundry",main,"src/test/java/org/springframework/cloud/deployer/spi/cloudfoundry/CloudFoundryTaskLauncherTests.java","args.add(""a=b"")"
github.com,"spring-cloud/spring-cloud-deployer-cloudfoundry",main,"src/test/java/org/springframework/cloud/deployer/spi/cloudfoundry/CloudFoundryTaskLauncherTests.java","args.add(""run.id=1"")"
github.com,"spring-cloud/spring-cloud-deployer-cloudfoundry",main,"src/test/java/org/springframework/cloud/deployer/spi/cloudfoundry/CloudFoundryTaskLauncherTests.java","args.add(""run.id(long)=1"")"
github.com,"spring-cloud/spring-cloud-deployer-cloudfoundry",main,"src/test/java/org/springframework/cloud/deployer/spi/cloudfoundry/CloudFoundryTaskLauncherTests.java","args.add(""run.id(long=1"")"
github.com,"spring-cloud/spring-cloud-deployer-cloudfoundry",main,"src/test/java/org/springframework/cloud/deployer/spi/cloudfoundry/CloudFoundryTaskLauncherTests.java","args.add(""run.id)=1"")"
github.com,"spring-cloud/spring-cloud-deployer-cloudfoundry",main,"src/test/java/org/springframework/cloud/deployer/spi/cloudfoundry/CloudFoundryTaskLauncherTests.java","taskResources.add(TaskResource.builder()
	.name(""task-"" + i)
	.dropletId(UUID.randomUUID().toString())
	.id(UUID.randomUUID().toString())
	.diskInMb(2048)
	.sequenceId(i)
	.state(TaskState.RUNNING)
	.memoryInMb(2048)
	.createdAt(LocalDateTime.now().format(DateTimeFormatter.ofPattern(""yyyy-MM-dd HH:mm:ss"")))
	.build())"
github.com,"spring-cloud/spring-cloud-deployer-cloudfoundry",main,"src/test/java/org/springframework/cloud/deployer/spi/cloudfoundry/CloudFoundryTaskLauncherCachingTests.java","taskResources.add(TaskResource.builder()
	.name(""task-"" + i)
	.dropletId(UUID.randomUUID().toString())
	.id(UUID.randomUUID().toString())
	.diskInMb(2048)
	.sequenceId(i)
	.state(TaskState.RUNNING)
	.memoryInMb(2048)
	.createdAt(LocalDateTime.now().format(DateTimeFormatter.ofPattern(""yyyy-MM-dd HH:mm:ss"")))
	.build())"
github.com,"spring-cloud/spring-cloud-deployer-cloudfoundry",main,"src/test/java/org/springframework/cloud/deployer/spi/scheduler/cloudfoundry/CloudFoundryAppSchedulerTests.java","this.jobResources.add(Job.builder().applicationId(request.getApplicationId())
		.command(request.getCommand())
		.id(""test-job-1"")
		.name(request.getName())
		.build())"
github.com,"spring-cloud/spring-cloud-deployer-cloudfoundry",main,"src/test/java/org/springframework/cloud/deployer/spi/scheduler/cloudfoundry/CloudFoundryAppSchedulerTests.java","localJobs.jobResources.add(Job.builder().applicationId(""test-application-id-1"")
		.command(""test-command"")
		.id(""test-job-1"")
		.name(""test-job-name-1"")
		.build())"
github.com,"spring-cloud/spring-cloud-deployer-cloudfoundry",main,"src/test/java/org/springframework/cloud/deployer/spi/scheduler/cloudfoundry/CloudFoundryAppSchedulerTests.java","localJobs.jobResources.add(Job.builder().applicationId(""test-application-id-2"")
		.command(""test-command"")
		.id(""test-job-2"")
		.name(""test-job-name-2"")
		.build())"
github.com,"spring-cloud/spring-cloud-deployer-cloudfoundry",main,"src/test/java/org/springframework/cloud/deployer/spi/scheduler/cloudfoundry/CloudFoundryAppSchedulerTests.java","localJobs.jobResources.add(Job.builder().applicationId(""test-application-id-1"")
		.command(""test-command"")
		.id(""test-job-1"")
		.name(""test-job-name-1"")
		.jobSchedules(createJobScheduleList(""test-job-1"", ""test-schedule-1""))
		.build())"
github.com,"spring-cloud/spring-cloud-deployer-cloudfoundry",main,"src/test/java/org/springframework/cloud/deployer/spi/scheduler/cloudfoundry/CloudFoundryAppSchedulerTests.java","localJobs.jobResources.add(Job.builder().applicationId(""test-application-id-2"")
		.command(""test-command"")
		.id(""test-job-2"")
		.name(""test-job-name-2"")
		.jobSchedules(createJobScheduleList(""test-job-2"", ""test-schedule-2""))
		.build())"
github.com,"spring-cloud/spring-cloud-deployer-cloudfoundry",main,"src/test/java/org/springframework/cloud/deployer/spi/scheduler/cloudfoundry/CloudFoundryAppSchedulerTests.java","jobSchedules.add(JobSchedule.builder()
		.enabled(true)
		.expression(DEFAULT_CRON_EXPRESSION)
		.expressionType(ExpressionType.CRON)
		.id(scheduleId)
		.jobId(jobId)
		.build())"
github.com,"spring-projects/spring-authorization-server",main,"docs/modules/ROOT/examples/samples/demo-authorizationserver/src/test/java/sample/DemoAuthorizationServerConsentTests.java","scopes.add((HtmlCheckBoxInput) scope)"
github.com,"spring-projects/spring-authorization-server",main,"docs/modules/ROOT/examples/samples/demo-authorizationserver/src/test/java/sample/DemoAuthorizationServerConsentTests.java","scopeIds.add(scope.getId())"
github.com,"spring-projects/spring-authorization-server",main,"docs/modules/ROOT/examples/samples/default-authorizationserver/src/test/java/sample/DefaultAuthorizationServerConsentTests.java","scopes.add((HtmlCheckBoxInput) scope)"
github.com,"spring-projects/spring-authorization-server",main,"docs/modules/ROOT/examples/samples/default-authorizationserver/src/test/java/sample/DefaultAuthorizationServerConsentTests.java","scopeIds.add(scope.getId())"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/authentication/OAuth2AuthorizationCodeAuthenticationProviderTests.java","sessions.add(new SessionInformation(principal.getPrincipal(),
		""session3"", Date.from(Instant.now())))"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/authentication/OAuth2AuthorizationCodeAuthenticationProviderTests.java","sessions.add(new SessionInformation(principal.getPrincipal(),
		""session2"", Date.from(Instant.now().minus(1, ChronoUnit.HOURS))))"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/authentication/OAuth2AuthorizationCodeAuthenticationProviderTests.java","sessions.add(new SessionInformation(principal.getPrincipal(),
		""session1"", Date.from(Instant.now().minus(2, ChronoUnit.HOURS))))"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/JdbcOAuth2AuthorizationServiceTests.java","parameters.add(new SqlParameterValue(Types.VARCHAR, authorization.getId()))"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/JdbcOAuth2AuthorizationServiceTests.java","parameters.add(new SqlParameterValue(Types.VARCHAR, authorization.getRegisteredClientId()))"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/JdbcOAuth2AuthorizationServiceTests.java","parameters.add(new SqlParameterValue(Types.VARCHAR, authorization.getPrincipalName()))"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/JdbcOAuth2AuthorizationServiceTests.java","parameters.add(new SqlParameterValue(Types.VARCHAR, authorization.getAuthorizationGrantType().getValue()))"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/JdbcOAuth2AuthorizationServiceTests.java","parameters.add(new SqlParameterValue(Types.VARCHAR, authorizedScopes))"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/JdbcOAuth2AuthorizationServiceTests.java","parameters.add(new SqlParameterValue(Types.VARCHAR, attributes))"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/JdbcOAuth2AuthorizationServiceTests.java","parameters.add(new SqlParameterValue(Types.VARCHAR, state))"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/JdbcOAuth2AuthorizationServiceTests.java","parameters.add(new SqlParameterValue(Types.VARCHAR, accessTokenType))"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/JdbcOAuth2AuthorizationServiceTests.java","parameters.add(new SqlParameterValue(Types.VARCHAR, accessTokenScopes))"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/JdbcOAuth2AuthorizationServiceTests.java","parameters.add(new SqlParameterValue(Types.VARCHAR, tokenValue))"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/JdbcOAuth2AuthorizationServiceTests.java","parameters.add(new SqlParameterValue(Types.TIMESTAMP, tokenIssuedAt))"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/JdbcOAuth2AuthorizationServiceTests.java","parameters.add(new SqlParameterValue(Types.TIMESTAMP, tokenExpiresAt))"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/JdbcOAuth2AuthorizationServiceTests.java","parameters.add(new SqlParameterValue(Types.VARCHAR, metadata))"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/OAuth2AuthorizationServerMetadataTests.java","newGrantTypes.add(""authorization_code"")"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/OAuth2AuthorizationServerMetadataTests.java","newGrantTypes.add(""custom_grant"")"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/OAuth2AuthorizationServerMetadataTests.java","authMethods.add(""some-authentication-method"")"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/OAuth2AuthorizationServerMetadataTests.java","scopes.add(""some-scope"")"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/OAuth2AuthorizationServerMetadataTests.java","responseTypes.add(""some-response-type"")"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/OAuth2AuthorizationServerMetadataTests.java","responseTypes.add(""some-response-type"")"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/OAuth2AuthorizationServerMetadataTests.java","grantTypes.add(""some-grant-type"")"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/OAuth2AuthorizationServerMetadataTests.java","authMethods.add(""some-authentication-method"")"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/OAuth2AuthorizationServerMetadataTests.java","authMethods.add(""some-authentication-method"")"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/OAuth2AuthorizationServerMetadataTests.java","codeChallengeMethods.add(""some-authentication-method"")"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/web/NimbusJwkSetEndpointFilterTests.java","this.jwkList.add(rsaJwk)"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/web/NimbusJwkSetEndpointFilterTests.java","this.jwkList.add(ecJwk)"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/web/NimbusJwkSetEndpointFilterTests.java","this.jwkList.add(secretJwk)"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/OAuth2TokenIntrospection.java","((List<String>) this.claims.get(name)).add(value)"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/oidc/authentication/RegisteredClientOidcClientRegistrationConverter.java","grantTypes.add(authorizationGrantType.getValue())"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/oidc/OidcProviderConfiguration.java","((List<String>) getClaims().get(name)).add(value)"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/oidc/OidcClientRegistration.java","((List<String>) this.claims.get(name)).add(value)"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/oidc/web/OidcProviderConfigurationEndpointFilter.java","authenticationMethods.add(ClientAuthenticationMethod.CLIENT_SECRET_BASIC.getValue())"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/oidc/web/OidcProviderConfigurationEndpointFilter.java","authenticationMethods.add(ClientAuthenticationMethod.CLIENT_SECRET_POST.getValue())"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/oidc/web/OidcProviderConfigurationEndpointFilter.java","authenticationMethods.add(ClientAuthenticationMethod.CLIENT_SECRET_JWT.getValue())"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/oidc/web/OidcProviderConfigurationEndpointFilter.java","authenticationMethods.add(ClientAuthenticationMethod.PRIVATE_KEY_JWT.getValue())"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/authentication/JwtClientAssertionDecoderFactory.java","audience.add(authorizationServerContext.getIssuer())"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/authentication/JwtClientAssertionDecoderFactory.java","audience.add(asUrl(authorizationServerContext.getIssuer(), authorizationServerSettings.getTokenEndpoint()))"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/authentication/JwtClientAssertionDecoderFactory.java","audience.add(asUrl(authorizationServerContext.getIssuer(), authorizationServerSettings.getTokenIntrospectionEndpoint()))"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/authentication/JwtClientAssertionDecoderFactory.java","audience.add(asUrl(authorizationServerContext.getIssuer(), authorizationServerSettings.getTokenRevocationEndpoint()))"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/JdbcOAuth2AuthorizationConsentService.java","parameters.add(registeredClientId)"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/JdbcOAuth2AuthorizationConsentService.java","parameters.add(principalName)"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/JdbcOAuth2AuthorizationConsentService.java","parameters.add(new SqlParameterValue(Types.VARCHAR, authorizationConsent.getRegisteredClientId()))"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/JdbcOAuth2AuthorizationConsentService.java","parameters.add(new SqlParameterValue(Types.VARCHAR, authorizationConsent.getPrincipalName()))"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/JdbcOAuth2AuthorizationConsentService.java","parameters.add(new SqlParameterValue(Types.VARCHAR, StringUtils.collectionToDelimitedString(authorities, "","")))"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/AbstractOAuth2AuthorizationServerMetadata.java","((List<String>) getClaims().get(name)).add(value)"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/JdbcOAuth2AuthorizationService.java","parameters.add(id)"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/JdbcOAuth2AuthorizationService.java","parameters.add(new SqlParameterValue(Types.VARCHAR, id))"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/JdbcOAuth2AuthorizationService.java","parameters.add(new SqlParameterValue(Types.VARCHAR, token))"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/JdbcOAuth2AuthorizationService.java","parameters.add(mapToSqlParameter(""authorization_code_value"", token))"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/JdbcOAuth2AuthorizationService.java","parameters.add(mapToSqlParameter(""access_token_value"", token))"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/JdbcOAuth2AuthorizationService.java","parameters.add(mapToSqlParameter(""oidc_id_token_value"", token))"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/JdbcOAuth2AuthorizationService.java","parameters.add(mapToSqlParameter(""refresh_token_value"", token))"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/JdbcOAuth2AuthorizationService.java","parameters.add(mapToSqlParameter(""user_code_value"", token))"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/JdbcOAuth2AuthorizationService.java","parameters.add(mapToSqlParameter(""device_code_value"", token))"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/JdbcOAuth2AuthorizationService.java","parameters.add(new SqlParameterValue(Types.VARCHAR, token))"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/JdbcOAuth2AuthorizationService.java","parameters.add(mapToSqlParameter(""authorization_code_value"", token))"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/JdbcOAuth2AuthorizationService.java","parameters.add(mapToSqlParameter(""access_token_value"", token))"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/JdbcOAuth2AuthorizationService.java","parameters.add(mapToSqlParameter(""oidc_id_token_value"", token))"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/JdbcOAuth2AuthorizationService.java","parameters.add(mapToSqlParameter(""refresh_token_value"", token))"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/JdbcOAuth2AuthorizationService.java","parameters.add(mapToSqlParameter(""user_code_value"", token))"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/JdbcOAuth2AuthorizationService.java","parameters.add(mapToSqlParameter(""device_code_value"", token))"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/JdbcOAuth2AuthorizationService.java","parameters.add(new SqlParameterValue(Types.VARCHAR, authorization.getId()))"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/JdbcOAuth2AuthorizationService.java","parameters.add(new SqlParameterValue(Types.VARCHAR, authorization.getRegisteredClientId()))"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/JdbcOAuth2AuthorizationService.java","parameters.add(new SqlParameterValue(Types.VARCHAR, authorization.getPrincipalName()))"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/JdbcOAuth2AuthorizationService.java","parameters.add(new SqlParameterValue(Types.VARCHAR, authorization.getAuthorizationGrantType().getValue()))"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/JdbcOAuth2AuthorizationService.java","parameters.add(new SqlParameterValue(Types.VARCHAR, authorizedScopes))"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/JdbcOAuth2AuthorizationService.java","parameters.add(mapToSqlParameter(""attributes"", attributes))"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/JdbcOAuth2AuthorizationService.java","parameters.add(new SqlParameterValue(Types.VARCHAR, state))"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/JdbcOAuth2AuthorizationService.java","parameters.add(new SqlParameterValue(Types.VARCHAR, accessTokenType))"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/JdbcOAuth2AuthorizationService.java","parameters.add(new SqlParameterValue(Types.VARCHAR, accessTokenScopes))"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/JdbcOAuth2AuthorizationService.java","
parameters.add(mapToSqlParameter(tokenColumnName, tokenValue))"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/JdbcOAuth2AuthorizationService.java","parameters.add(new SqlParameterValue(Types.TIMESTAMP, tokenIssuedAt))"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/JdbcOAuth2AuthorizationService.java","parameters.add(new SqlParameterValue(Types.TIMESTAMP, tokenExpiresAt))"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/JdbcOAuth2AuthorizationService.java","parameters.add(mapToSqlParameter(tokenMetadataColumnName, metadata))"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/client/JdbcRegisteredClientRepository.java","// remove client_id_issued_at
	parameters.add(id)"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/client/JdbcRegisteredClientRepository.java","clientAuthenticationMethods.add(clientAuthenticationMethod.getValue())"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/client/JdbcRegisteredClientRepository.java","authorizationGrantTypes.add(authorizationGrantType.getValue())"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/token/DelegatingOAuth2TokenGenerator.java","tokenGeneratorList.add((OAuth2TokenGenerator<OAuth2Token>) tokenGenerator)"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/web/OAuth2AuthorizationServerMetadataEndpointFilter.java","authenticationMethods.add(ClientAuthenticationMethod.CLIENT_SECRET_BASIC.getValue())"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/web/OAuth2AuthorizationServerMetadataEndpointFilter.java","authenticationMethods.add(ClientAuthenticationMethod.CLIENT_SECRET_POST.getValue())"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/web/OAuth2AuthorizationServerMetadataEndpointFilter.java","authenticationMethods.add(ClientAuthenticationMethod.CLIENT_SECRET_JWT.getValue())"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/web/OAuth2AuthorizationServerMetadataEndpointFilter.java","authenticationMethods.add(ClientAuthenticationMethod.PRIVATE_KEY_JWT.getValue())"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configuration/RegisterMissingBeanPostProcessor.java","this.beanDefinitions.add(new RootBeanDefinition(beanClass, beanSupplier))"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configurers/OidcClientRegistrationEndpointConfigurer.java","this.clientRegistrationRequestConverters.add(clientRegistrationRequestConverter)"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configurers/OidcClientRegistrationEndpointConfigurer.java","this.authenticationProviders.add(authenticationProvider)"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configurers/OidcClientRegistrationEndpointConfigurer.java","
authenticationConverters.add(new OidcClientRegistrationAuthenticationConverter())"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configurers/OidcClientRegistrationEndpointConfigurer.java","authenticationProviders.add(oidcClientRegistrationAuthenticationProvider)"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configurers/OidcClientRegistrationEndpointConfigurer.java","authenticationProviders.add(oidcClientConfigurationAuthenticationProvider)"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configurers/OAuth2AuthorizationServerConfigurer.java","requestMatchers.add(configurer.getRequestMatcher())"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configurers/OAuth2AuthorizationServerConfigurer.java","requestMatchers.add(new AntPathRequestMatcher(
		authorizationServerSettings.getJwkSetEndpoint(), HttpMethod.GET.name()))"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configurers/OAuth2TokenRevocationEndpointConfigurer.java","this.revocationRequestConverters.add(revocationRequestConverter)"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configurers/OAuth2TokenRevocationEndpointConfigurer.java","this.authenticationProviders.add(authenticationProvider)"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configurers/OAuth2TokenRevocationEndpointConfigurer.java","
authenticationConverters.add(new OAuth2TokenRevocationAuthenticationConverter())"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configurers/OAuth2TokenRevocationEndpointConfigurer.java","authenticationProviders.add(tokenRevocationAuthenticationProvider)"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configurers/OAuth2DeviceVerificationEndpointConfigurer.java","this.deviceVerificationRequestConverters.add(deviceVerificationRequestConverter)"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configurers/OAuth2DeviceVerificationEndpointConfigurer.java","this.authenticationProviders.add(authenticationProvider)"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configurers/OAuth2DeviceVerificationEndpointConfigurer.java","
authenticationConverters.add(new OAuth2DeviceVerificationAuthenticationConverter())"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configurers/OAuth2DeviceVerificationEndpointConfigurer.java","authenticationConverters.add(new OAuth2DeviceAuthorizationConsentAuthenticationConverter())"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configurers/OAuth2DeviceVerificationEndpointConfigurer.java","// @formatter:on
authenticationProviders.add(deviceVerificationAuthenticationProvider)"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configurers/OAuth2DeviceVerificationEndpointConfigurer.java","// @formatter:on
authenticationProviders.add(deviceAuthorizationConsentAuthenticationProvider)"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configurers/OidcUserInfoEndpointConfigurer.java","this.userInfoRequestConverters.add(userInfoRequestConverter)"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configurers/OidcUserInfoEndpointConfigurer.java","this.authenticationProviders.add(authenticationProvider)"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configurers/OidcUserInfoEndpointConfigurer.java","
authenticationConverters.add(
		(request) -> {
			Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
			return new OidcUserInfoAuthenticationToken(authentication);
		}
)"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configurers/OidcUserInfoEndpointConfigurer.java","authenticationProviders.add(oidcUserInfoAuthenticationProvider)"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configurers/OidcLogoutEndpointConfigurer.java","this.logoutRequestConverters.add(logoutRequestConverter)"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configurers/OidcLogoutEndpointConfigurer.java","this.authenticationProviders.add(authenticationProvider)"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configurers/OidcLogoutEndpointConfigurer.java","
authenticationConverters.add(new OidcLogoutAuthenticationConverter())"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configurers/OidcLogoutEndpointConfigurer.java","authenticationProviders.add(oidcLogoutAuthenticationProvider)"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configurers/OidcConfigurer.java","requestMatchers.add(configurer.getRequestMatcher())"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configurers/OAuth2TokenIntrospectionEndpointConfigurer.java","this.introspectionRequestConverters.add(introspectionRequestConverter)"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configurers/OAuth2TokenIntrospectionEndpointConfigurer.java","this.authenticationProviders.add(authenticationProvider)"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configurers/OAuth2TokenIntrospectionEndpointConfigurer.java","
authenticationConverters.add(new OAuth2TokenIntrospectionAuthenticationConverter())"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configurers/OAuth2TokenIntrospectionEndpointConfigurer.java","authenticationProviders.add(tokenIntrospectionAuthenticationProvider)"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configurers/OAuth2ClientAuthenticationConfigurer.java","this.authenticationConverters.add(authenticationConverter)"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configurers/OAuth2ClientAuthenticationConfigurer.java","this.authenticationProviders.add(authenticationProvider)"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configurers/OAuth2ClientAuthenticationConfigurer.java","
authenticationConverters.add(new JwtClientAssertionAuthenticationConverter())"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configurers/OAuth2ClientAuthenticationConfigurer.java","authenticationConverters.add(new ClientSecretBasicAuthenticationConverter())"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configurers/OAuth2ClientAuthenticationConfigurer.java","authenticationConverters.add(new ClientSecretPostAuthenticationConverter())"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configurers/OAuth2ClientAuthenticationConfigurer.java","authenticationConverters.add(new PublicClientAuthenticationConverter())"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configurers/OAuth2ClientAuthenticationConfigurer.java","authenticationProviders.add(jwtClientAssertionAuthenticationProvider)"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configurers/OAuth2ClientAuthenticationConfigurer.java","authenticationProviders.add(clientSecretAuthenticationProvider)"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configurers/OAuth2ClientAuthenticationConfigurer.java","authenticationProviders.add(publicClientAuthenticationProvider)"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configurers/OAuth2AuthorizationEndpointConfigurer.java","this.authorizationRequestConverters.add(authorizationRequestConverter)"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configurers/OAuth2AuthorizationEndpointConfigurer.java","this.authenticationProviders.add(authenticationProvider)"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configurers/OAuth2AuthorizationEndpointConfigurer.java","
authenticationConverters.add(new OAuth2AuthorizationCodeRequestAuthenticationConverter())"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configurers/OAuth2AuthorizationEndpointConfigurer.java","authenticationConverters.add(new OAuth2AuthorizationConsentAuthenticationConverter())"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configurers/OAuth2AuthorizationEndpointConfigurer.java","authenticationProviders.add(authorizationCodeRequestAuthenticationProvider)"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configurers/OAuth2AuthorizationEndpointConfigurer.java","authenticationProviders.add(authorizationConsentAuthenticationProvider)"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configurers/OAuth2DeviceAuthorizationEndpointConfigurer.java","this.deviceAuthorizationRequestConverters.add(deviceAuthorizationRequestConverter)"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configurers/OAuth2DeviceAuthorizationEndpointConfigurer.java","this.authenticationProviders.add(authenticationProvider)"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configurers/OAuth2DeviceAuthorizationEndpointConfigurer.java","authenticationConverters.add(new OAuth2DeviceAuthorizationRequestAuthenticationConverter())"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configurers/OAuth2DeviceAuthorizationEndpointConfigurer.java","authenticationProviders.add(deviceAuthorizationRequestAuthenticationProvider)"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configurers/OAuth2TokenEndpointConfigurer.java","this.accessTokenRequestConverters.add(accessTokenRequestConverter)"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configurers/OAuth2TokenEndpointConfigurer.java","this.authenticationProviders.add(authenticationProvider)"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configurers/OAuth2TokenEndpointConfigurer.java","
authenticationConverters.add(new OAuth2AuthorizationCodeAuthenticationConverter())"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configurers/OAuth2TokenEndpointConfigurer.java","authenticationConverters.add(new OAuth2RefreshTokenAuthenticationConverter())"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configurers/OAuth2TokenEndpointConfigurer.java","authenticationConverters.add(new OAuth2ClientCredentialsAuthenticationConverter())"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configurers/OAuth2TokenEndpointConfigurer.java","authenticationConverters.add(new OAuth2DeviceCodeAuthenticationConverter())"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configurers/OAuth2TokenEndpointConfigurer.java","authenticationProviders.add(authorizationCodeAuthenticationProvider)"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configurers/OAuth2TokenEndpointConfigurer.java","authenticationProviders.add(refreshTokenAuthenticationProvider)"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configurers/OAuth2TokenEndpointConfigurer.java","authenticationProviders.add(clientCredentialsAuthenticationProvider)"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configurers/OAuth2TokenEndpointConfigurer.java","authenticationProviders.add(deviceCodeAuthenticationProvider)"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/test/SpringTestContext.java","this.filters.add(filter)"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/test/SpringTestContextExtension.java","result.add((SpringTestContext) field.get(test))"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/oidc/authentication/OidcClientConfigurationAuthenticationProviderTests.java","grantTypes.add(authorizationGrantType.getValue())"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/oidc/authentication/OidcClientRegistrationAuthenticationProviderTests.java","grantTypes.add(authorizationGrantType.getValue())"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/oidc/OidcClientRegistrationTests.java","redirectUris.add(""https://client2.example.com"")"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/oidc/OidcClientRegistrationTests.java","postLogoutRedirectUris.add(""https://client2.example.com/oidc-post-logout"")"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/oidc/OidcClientRegistrationTests.java","grantTypes.add(""client_credentials"")"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/oidc/OidcClientRegistrationTests.java","responseTypes.add(""code"")"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/oidc/OidcClientRegistrationTests.java","scopes.add(""scope1"")"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/oidc/OidcProviderConfigurationTests.java","newGrantTypes.add(""authorization_code"")"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/oidc/OidcProviderConfigurationTests.java","newGrantTypes.add(""custom_grant"")"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/oidc/OidcProviderConfigurationTests.java","responseTypes.add(""some-response-type"")"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/oidc/OidcProviderConfigurationTests.java","responseTypes.add(""some-response-type"")"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/oidc/OidcProviderConfigurationTests.java","subjectTypes.add(""some-subject-type"")"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/oidc/OidcProviderConfigurationTests.java","signingAlgorithms.add(""ES256"")"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/oidc/OidcProviderConfigurationTests.java","scopes.add(""some-scope"")"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/oidc/OidcProviderConfigurationTests.java","grantTypes.add(""some-grant-type"")"
github.com,"spring-projects/spring-authorization-server",main,"oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/oidc/OidcProviderConfigurationTests.java","authMethods.add(""some-authentication-method"")"
github.com,"spring-projects/spring-authorization-server",main,"docs/src/main/java/sample/jpa/service/client/JpaRegisteredClientRepository.java","clientAuthenticationMethods.add(clientAuthenticationMethod.getValue())"
github.com,"spring-projects/spring-authorization-server",main,"docs/src/main/java/sample/jpa/service/client/JpaRegisteredClientRepository.java","authorizationGrantTypes.add(authorizationGrantType.getValue())"
github.com,"spring-projects/spring-authorization-server",main,"docs/src/test/java/sample/test/SpringTestContext.java","this.filters.add(filter)"
github.com,"spring-projects/spring-authorization-server",main,"docs/src/test/java/sample/test/SpringTestContextExtension.java","result.add((SpringTestContext) field.get(test))"
github.com,"spring-cloud/spring-cloud-app-broker",main,"spring-cloud-app-broker-deployer/src/main/java/org/springframework/cloud/appbroker/deployer/DeployApplicationRequest.java","this.services.add(service)"
github.com,"spring-cloud/spring-cloud-app-broker",main,"spring-cloud-app-broker-deployer/src/main/java/org/springframework/cloud/appbroker/deployer/UpdateApplicationRequest.java","this.services.add(service)"
github.com,"spring-cloud/spring-cloud-app-broker",main,"spring-cloud-app-broker-deployer/src/main/java/org/springframework/cloud/appbroker/deployer/GetApplicationResponse.java","this.services.add(service)"
github.com,"spring-cloud/spring-cloud-app-broker",main,"spring-cloud-app-broker-core/src/main/java/org/springframework/cloud/appbroker/deployer/BrokeredServices.java","this.brokeredServices.add(brokeredService)"
github.com,"spring-cloud/spring-cloud-app-broker",main,"spring-cloud-app-broker-core/src/main/java/org/springframework/cloud/appbroker/deployer/BackingApplications.java","this.backingApplications.add(backingApplication)"
github.com,"spring-cloud/spring-cloud-app-broker",main,"spring-cloud-app-broker-core/src/main/java/org/springframework/cloud/appbroker/deployer/BackingServices.java","this.backingServices.add(backingService)"
github.com,"spring-cloud/spring-cloud-app-broker",main,"spring-cloud-app-broker-core/src/test/java/org/springframework/cloud/appbroker/deployer/DefaultBackingServicesProvisionServiceTest.java","expectedValues.add(""si1"")"
github.com,"spring-cloud/spring-cloud-app-broker",main,"spring-cloud-app-broker-core/src/test/java/org/springframework/cloud/appbroker/deployer/DefaultBackingServicesProvisionServiceTest.java","expectedValues.add(""si2"")"
github.com,"spring-cloud/spring-cloud-app-broker",main,"spring-cloud-app-broker-core/src/test/java/org/springframework/cloud/appbroker/deployer/DefaultBackingServicesProvisionServiceTest.java","expectedValues.add(""updated1"")"
github.com,"spring-cloud/spring-cloud-app-broker",main,"spring-cloud-app-broker-core/src/test/java/org/springframework/cloud/appbroker/deployer/DefaultBackingServicesProvisionServiceTest.java","expectedValues.add(""updated2"")"
github.com,"spring-cloud/spring-cloud-app-broker",main,"spring-cloud-app-broker-core/src/test/java/org/springframework/cloud/appbroker/deployer/DefaultBackingServicesProvisionServiceTest.java","expectedValues.add(""deleted1"")"
github.com,"spring-cloud/spring-cloud-app-broker",main,"spring-cloud-app-broker-core/src/test/java/org/springframework/cloud/appbroker/deployer/DefaultBackingServicesProvisionServiceTest.java","expectedValues.add(""deleted2"")"
github.com,"spring-cloud/spring-cloud-app-broker",main,"spring-cloud-app-broker-core/src/test/java/org/springframework/cloud/appbroker/deployer/DefaultBackingAppDeploymentServiceTest.java","expectedValues.add(""app1"")"
github.com,"spring-cloud/spring-cloud-app-broker",main,"spring-cloud-app-broker-core/src/test/java/org/springframework/cloud/appbroker/deployer/DefaultBackingAppDeploymentServiceTest.java","expectedValues.add(""app2"")"
github.com,"spring-cloud/spring-cloud-app-broker",main,"spring-cloud-app-broker-core/src/test/java/org/springframework/cloud/appbroker/deployer/DefaultBackingAppDeploymentServiceTest.java","expectedValues.add(""app1"")"
github.com,"spring-cloud/spring-cloud-app-broker",main,"spring-cloud-app-broker-core/src/test/java/org/springframework/cloud/appbroker/deployer/DefaultBackingAppDeploymentServiceTest.java","expectedValues.add(""app2"")"
github.com,"spring-cloud/spring-cloud-app-broker",main,"spring-cloud-app-broker-core/src/test/java/org/springframework/cloud/appbroker/deployer/DefaultBackingAppDeploymentServiceTest.java","expectedValues.add(""app1"")"
github.com,"spring-cloud/spring-cloud-app-broker",main,"spring-cloud-app-broker-core/src/test/java/org/springframework/cloud/appbroker/deployer/DefaultBackingAppDeploymentServiceTest.java","expectedValues.add(""app2"")"
github.com,"spring-cloud/spring-cloud-app-broker",main,"spring-cloud-app-broker-core/src/test/java/org/springframework/cloud/appbroker/deployer/DefaultBackingAppDeploymentServiceTest.java","expectedValues.add(""deleted1"")"
github.com,"spring-cloud/spring-cloud-app-broker",main,"spring-cloud-app-broker-core/src/test/java/org/springframework/cloud/appbroker/deployer/DefaultBackingAppDeploymentServiceTest.java","expectedValues.add(""deleted2"")"
github.com,"spring-cloud/spring-cloud-app-broker",main,"spring-cloud-app-broker-core/src/test/java/org/springframework/cloud/appbroker/deployer/DefaultBackingSpaceManagementServiceTest.java","expectedValues.add(""returned-space-1"")"
github.com,"spring-cloud/spring-cloud-app-broker",main,"spring-cloud-app-broker-core/src/test/java/org/springframework/cloud/appbroker/deployer/DefaultBackingSpaceManagementServiceTest.java","expectedValues.add(""returned-space-2"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/data/RepositoryItemReaderTests.java","result.add(new TestItem(i))"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/support/CompositeItemWriterTests.java","
writers.add(writer)"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/support/CompositeItemWriterTests.java","writers.add(writer)"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/support/TransactionAwareListItemReaderTests.java","taken.add(reader.read())"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/support/TransactionAwareListItemReaderTests.java","taken.add(next)"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/support/TransactionAwareListItemReaderTests.java","taken.add(next)"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/support/TransactionAwareListItemReaderTests.java","taken.add(reader.read())"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/support/TransactionAwareListItemReaderTests.java","taken.add(next)"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/support/builder/CompositeItemWriterBuilderTests.java","writers.add(writer)"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/support/builder/CompositeItemWriterBuilderTests.java","writers.add(writer1)"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/support/builder/CompositeItemWriterBuilderTests.java","writers.add(writer2)"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/support/builder/CompositeItemWriterBuilderTests.java","writers.add(writer)"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/support/builder/CompositeItemProcessorBuilderTests.java","this.processors.add(processor1)"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/support/builder/CompositeItemProcessorBuilderTests.java","this.processors.add(processor2)"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/support/CompositeItemStreamTests.java","list.add(""bar"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/support/CompositeItemStreamTests.java","list.add(""bar"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/support/CompositeItemStreamTests.java","list.add(""bar"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/support/CompositeItemStreamTests.java","list.add(""bar"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/support/CompositeItemStreamTests.java","list.add(""bar"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/xml/Jaxb2NamespaceUnmarshallingTests.java","results.add(result)"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/xml/StaxEventItemReaderTests.java","events.add(eventReader.nextEvent())"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/xml/stax/UnopenedElementClosingEventWriterTests.java","unopenedElements.add(unopenedA)"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/xml/stax/UnopenedElementClosingEventWriterTests.java","unopenedElements.add(unopenedB)"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/xml/AbstractStaxEventReaderItemReaderTests.java","results.add(result)"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/xml/AbstractStaxEventReaderItemReaderTests.java","results.add(result)"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/avro/support/AvroItemReaderTestSupport.java","users.add(user)"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/avro/support/AvroItemWriterTestSupport.java","records.add(record)"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/mapping/BeanWrapperFieldSetMapperTests.java","nestedC.add(new TestNestedC())"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/mapping/BeanWrapperFieldSetMapperTests.java","nestedC.add(new TestNestedC())"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/mapping/BeanWrapperFieldSetMapperTests.java","nestedC.add(new TestNestedC())"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/file/builder/FlatFileItemReaderBuilderTests.java",skippedLines::add
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/JdbcPagingItemReaderAsyncTests.java","throwables.add(e)"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/JdbcPagingItemReaderAsyncTests.java","list.add(next)"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/JpaPagingItemReaderAsyncTests.java","throwables.add(e)"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/JpaPagingItemReaderAsyncTests.java","list.add(next)"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/JdbcBatchItemWriterClassicTests.java","list.add(sql)"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/JdbcBatchItemWriterClassicTests.java","list.add(item)"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/JdbcBatchItemWriterClassicTests.java","list.add(item)"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/JdbcBatchItemWriterClassicTests.java","list.add(item)"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/support/HibernateNativeQueryProviderIntegrationTests.java","
expectedFoos.add(new Foo(1, ""bar1"", 1))"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/support/HibernateNativeQueryProviderIntegrationTests.java","expectedFoos.add(new Foo(2, ""bar2"", 2))"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/support/HibernateNativeQueryProviderIntegrationTests.java","expectedFoos.add(new Foo(3, ""bar3"", 3))"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/support/HibernateNativeQueryProviderIntegrationTests.java","expectedFoos.add(new Foo(4, ""bar4"", 4))"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/support/HibernateNativeQueryProviderIntegrationTests.java","expectedFoos.add(new Foo(5, ""bar5"", 5))"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/JpaNativeQueryProviderIntegrationTests.java","
expectedFoos.add(new Foo(1, ""bar1"", 1))"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/JpaNativeQueryProviderIntegrationTests.java","expectedFoos.add(new Foo(2, ""bar2"", 2))"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/JpaNativeQueryProviderIntegrationTests.java","expectedFoos.add(new Foo(3, ""bar3"", 3))"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/JpaNativeQueryProviderIntegrationTests.java","expectedFoos.add(new Foo(4, ""bar4"", 4))"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/JpaNativeQueryProviderIntegrationTests.java","expectedFoos.add(new Foo(5, ""bar5"", 5))"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/JpaNativeQueryProviderIntegrationTests.java","
expectedFoos.add(new Foo(3, ""bar3"", 3))"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/JpaNativeQueryProviderIntegrationTests.java","expectedFoos.add(new Foo(4, ""bar4"", 4))"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/JpaNativeQueryProviderIntegrationTests.java","expectedFoos.add(new Foo(5, ""bar5"", 5))"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/builder/JpaCursorItemReaderBuilderTests.java","foos.add(foo)"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/builder/JpaPagingItemReaderBuilderTests.java","foos.add(foo)"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/JdbcPagingQueryIntegrationTests.java","parameterList.add(keys.get(j).getValue())"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/database/JdbcPagingQueryIntegrationTests.java","
parameterList.add(keys.get(i).getValue())"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/context/RepeatContextSupportTests.java","list.add(""bar"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/context/RepeatContextSupportTests.java","list.add(""bar"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/context/RepeatContextSupportTests.java","list.add(""spam"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/context/RepeatContextSupportTests.java","list.add(""bar"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/listener/CompositeRepeatListenerTests.java","list.add(""fail"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/listener/CompositeRepeatListenerTests.java","list.add(""continue"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/listener/CompositeRepeatListenerTests.java","list.add(""fail"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/listener/CompositeRepeatListenerTests.java","list.add(""foo"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/listener/CompositeRepeatListenerTests.java","list.add(e)"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/listener/RepeatListenerTests.java","calls.add(""1"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/listener/RepeatListenerTests.java","calls.add(""2"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/listener/RepeatListenerTests.java","calls.add(""1"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/listener/RepeatListenerTests.java","calls.add(""1"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/listener/RepeatListenerTests.java","calls.add(""2"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/listener/RepeatListenerTests.java","calls.add(""1"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/listener/RepeatListenerTests.java","calls.add(""2"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/listener/RepeatListenerTests.java","calls.add(""1"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/listener/RepeatListenerTests.java","calls.add(""1"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/listener/RepeatListenerTests.java","calls.add(""2"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/listener/RepeatListenerTests.java","calls.add(""1"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/listener/RepeatListenerTests.java","calls.add(""2"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/listener/RepeatListenerTests.java","calls.add(""1"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/listener/RepeatListenerTests.java","calls.add(""2"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/listener/RepeatListenerTests.java","calls.add(""1"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/listener/RepeatListenerTests.java","calls.add(""2"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/listener/RepeatListenerTests.java","fails.add(""2"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/support/SimpleRepeatTemplateTests.java","list.add(""close"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/support/SimpleRepeatTemplateTests.java","list.add(""close"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/support/SimpleRepeatTemplateTests.java","list.add(throwable)"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/support/TaskExecutorRepeatTemplateAsynchronousTests.java","items.add(String.valueOf(item))"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/support/TaskExecutorRepeatTemplateBulkAsynchronousTests.java","items.add(item)"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/interceptor/RepeatOperationsInterceptorTests.java","calls.add(result)"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/interceptor/RepeatOperationsInterceptorTests.java","calls.add(null)"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/interceptor/RepeatOperationsInterceptorTests.java","list.add(""chain"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/jms/AsynchronousTests.java","list.add(message.toString())"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/jms/AsynchronousTests.java","list.add(message.toString())"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/jms/AsynchronousTests.java","msgs.add(text)"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/jms/SynchronousTests.java","list.add(text)"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/jms/SynchronousTests.java","list.add(text)"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/jms/SynchronousTests.java","msgs.add(text)"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/jms/SynchronousTests.java","list.add(text)"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/jms/SynchronousTests.java","msgs.add(text)"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/exception/SimpleLimitExceptionHandlerTests.java","add(new RuntimeException(""below exception limit""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/exception/SimpleLimitExceptionHandlerTests.java","add(new RuntimeException(""below exception limit""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/exception/SimpleLimitExceptionHandlerTests.java","
throwables.add(new RuntimeException(""above exception limit""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/exception/CompositeExceptionHandlerTests.java","list.add(""1"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/repeat/exception/CompositeExceptionHandlerTests.java","list.add(""2"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/support/transaction/ConcurrentTransactionAwareProxyTests.java","list.add(value)"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/support/transaction/ConcurrentTransactionAwareProxyTests.java","result.add(value)"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/support/transaction/ConcurrentTransactionAwareProxyTests.java","list.add(value)"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/support/transaction/ConcurrentTransactionAwareProxyTests.java","list.add(saveInMapAndAssert(map, id, value).get(""foo""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/support/transaction/ConcurrentTransactionAwareProxyTests.java","list.add(value)"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/support/transaction/TransactionAwareListFactoryTests.java","list.add(""bucket"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/support/transaction/TransactionAwareProxyFactoryTests.java","list.add(""foo"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/jms/ExternalRetryInBatchTests.java","list.add(text)"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/jms/ExternalRetryInBatchTests.java","recovered.add(item)"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/jms/ExternalRetryInBatchTests.java","msgs.add(next)"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/config/MessagingTests.java","msgs.add(next)"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/retry/jms/ExternalRetryTests.java","list.add(text)"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/retry/jms/ExternalRetryTests.java","recovered.add(item)"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/retry/jms/ExternalRetryTests.java","msgs.add(next)"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/retry/jms/SynchronousTests.java","
list.add(text)"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/retry/jms/SynchronousTests.java","
list.add(item)"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/retry/jms/SynchronousTests.java","
list.add(text)"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/retry/jms/SynchronousTests.java","list.add(text)"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/retry/jms/SynchronousTests.java","list.add(text)"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/retry/jms/SynchronousTests.java","msgs.add(next)"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/main/java/org/springframework/batch/item/Chunk.java","items.add(item)"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/main/java/org/springframework/batch/item/Chunk.java","errors.add(e)"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/main/java/org/springframework/batch/item/Chunk.java","skips.add(new SkipWrapper<>(next, e))"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/main/java/org/springframework/batch/item/kafka/KafkaItemReader.java","this.topicPartitions.add(new TopicPartition(topicName, partition))"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/main/java/org/springframework/batch/item/kafka/KafkaItemWriter.java","this.completableFutures.add(this.kafkaTemplate.sendDefault(key, null))"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/main/java/org/springframework/batch/item/kafka/KafkaItemWriter.java","this.completableFutures.add(this.kafkaTemplate.sendDefault(key, value))"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/main/java/org/springframework/batch/item/data/MongoItemReader.java","sortValues.add(new Sort.Order(curSort.getValue(), curSort.getKey()))"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/main/java/org/springframework/batch/item/data/RepositoryItemReader.java","
parameters.add(pageRequest)"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/main/java/org/springframework/batch/item/data/RepositoryItemReader.java","sortValues.add(new Sort.Order(curSort.getValue(), curSort.getKey()))"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/main/java/org/springframework/batch/item/support/CompositeItemStream.java","streams.add(stream)"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/main/java/org/springframework/batch/item/xml/StaxEventItemReader.java","this.fragmentRootElementNames.add(parseFragmentRootElementName(fragmentRootElementName))"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/main/java/org/springframework/batch/item/file/mapping/PropertyMatches.java","candidates.add(possibleAlternative)"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/main/java/org/springframework/batch/item/file/builder/FlatFileItemReaderBuilder.java","this.comments.add(comment)"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/main/java/org/springframework/batch/item/file/builder/FlatFileItemReaderBuilder.java","this.includedFields.add(field)"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/main/java/org/springframework/batch/item/file/builder/FlatFileItemReaderBuilder.java","this.ranges.add(range)"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/main/java/org/springframework/batch/item/file/builder/FlatFileItemReaderBuilder.java","this.ranges.add(index, range)"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/main/java/org/springframework/batch/item/file/transform/FixedLengthTokenizer.java","
tokens.add(token)"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/main/java/org/springframework/batch/item/file/transform/BeanWrapperFieldExtractor.java","values.add(bw.getPropertyValue(propertyName))"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/main/java/org/springframework/batch/item/file/transform/DelimitedLineTokenizer.java","tokens.add(value)"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/main/java/org/springframework/batch/item/file/transform/DelimitedLineTokenizer.java","tokens.add("""")"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/main/java/org/springframework/batch/item/file/transform/RegexLineTokenizer.java","tokens.add(matcher.group(i))"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/main/java/org/springframework/batch/item/file/transform/RecordFieldExtractor.java","values.add(value)"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/main/java/org/springframework/batch/item/file/transform/AbstractLineTokenizer.java","tokens.add(emptyToken)"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/main/java/org/springframework/batch/item/database/JpaPagingItemReader.java","results.add(entity)"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/main/java/org/springframework/batch/item/database/support/SqlPagingQueryUtils.java","
clauses.add(clause.toString())"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/main/java/org/springframework/batch/item/database/support/DefaultDataFieldMaxValueIncrementerFactory.java","types.add(type.name())"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/main/java/org/springframework/batch/item/database/JdbcPagingItemReader.java","parameterList.add(keys.get(j).getValue())"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/main/java/org/springframework/batch/item/database/JdbcPagingItemReader.java","
parameterList.add(keys.get(i).getValue())"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/main/java/org/springframework/batch/repeat/context/RepeatContextSupport.java","errors.add(t)"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/main/java/org/springframework/batch/repeat/listener/CompositeRepeatListener.java","listeners.add(listener)"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/main/java/org/springframework/batch/repeat/support/RepeatTemplate.java","list.add(listener)"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/main/java/org/springframework/batch/repeat/policy/CompositeCompletionPolicy.java","list.add(policy.start(context))"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/main/java/org/springframework/batch/support/transaction/ResourcelessTransactionManager.java","resources.add(transaction)"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/main/java/org/springframework/batch/support/PropertiesConverter.java","keyValuePairs.add(entry.getKey() + ""="" + entry.getValue())"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/adapter/AbstractDelegatorTests.java","processedFooNameValuePairs.add(new Foo(name, value))"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/adapter/AbstractDelegatorTests.java","processedFooNameValuePairs.add(new Foo(name, Integer.parseInt(value)))"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/adapter/ItemReaderAdapterTests.java","returnedItems.add(item)"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/sample/FooService.java","generatedFoos.add(foo)"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/sample/FooService.java","processedFoos.add(foo)"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/sample/FooService.java","processedFoos.add(foo)"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/sample/FooService.java","processedFooNameValuePairs.add(new Foo(0, name, value))"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/kafka/KafkaItemReaderIntegrationTests.java","futures.add(this.template.sendDefault(""val0""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/kafka/KafkaItemReaderIntegrationTests.java","futures.add(this.template.sendDefault(""val1""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/kafka/KafkaItemReaderIntegrationTests.java","futures.add(this.template.sendDefault(""val2""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/kafka/KafkaItemReaderIntegrationTests.java","futures.add(this.template.sendDefault(""val3""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/kafka/KafkaItemReaderIntegrationTests.java","futures.add(this.template.sendDefault(""val0""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/kafka/KafkaItemReaderIntegrationTests.java","// <-- offset 0
	futures.add(this.template.sendDefault(""val1""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/kafka/KafkaItemReaderIntegrationTests.java","// <-- offset 1
	futures.add(this.template.sendDefault(""val2""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/kafka/KafkaItemReaderIntegrationTests.java","// <-- offset 2
	futures.add(this.template.sendDefault(""val3""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/kafka/KafkaItemReaderIntegrationTests.java","futures.add(this.template.sendDefault(""val0""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/kafka/KafkaItemReaderIntegrationTests.java","// <-- offset 0
	futures.add(this.template.sendDefault(""val1""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/kafka/KafkaItemReaderIntegrationTests.java","futures.add(this.template.sendDefault(""val0""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/kafka/KafkaItemReaderIntegrationTests.java","futures.add(this.template.sendDefault(""val1""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/kafka/KafkaItemReaderIntegrationTests.java","futures.add(this.template.sendDefault(""val2""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/kafka/KafkaItemReaderIntegrationTests.java","futures.add(this.template.sendDefault(""val3""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/kafka/KafkaItemReaderIntegrationTests.java","items.add(this.reader.read())"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/kafka/KafkaItemReaderIntegrationTests.java","items.add(this.reader.read())"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/kafka/KafkaItemReaderIntegrationTests.java","items.add(this.reader.read())"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/kafka/KafkaItemReaderIntegrationTests.java","items.add(this.reader.read())"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/kafka/KafkaItemReaderIntegrationTests.java","futures.add(this.template.sendDefault(""val0""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/kafka/KafkaItemReaderIntegrationTests.java","futures.add(this.template.sendDefault(""val1""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/kafka/KafkaItemReaderIntegrationTests.java","futures.add(this.template.sendDefault(""val2""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/kafka/KafkaItemReaderIntegrationTests.java","futures.add(this.template.sendDefault(""val3""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/kafka/KafkaItemReaderIntegrationTests.java","futures.add(this.template.sendDefault(""val4""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/kafka/KafkaItemReaderIntegrationTests.java","items.add(this.reader.read())"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/kafka/KafkaItemReaderIntegrationTests.java","items.add(this.reader.read())"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/kafka/KafkaItemReaderIntegrationTests.java","items.add(this.reader.read())"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/kafka/KafkaItemReaderIntegrationTests.java","futures.add(this.template.send(""topic4"", 0, null, ""val0""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/kafka/KafkaItemReaderIntegrationTests.java","futures.add(this.template.send(""topic4"", 0, null, ""val2""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/kafka/KafkaItemReaderIntegrationTests.java","futures.add(this.template.send(""topic4"", 0, null, ""val4""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/kafka/KafkaItemReaderIntegrationTests.java","futures.add(this.template.send(""topic4"", 0, null, ""val6""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/kafka/KafkaItemReaderIntegrationTests.java","futures.add(this.template.send(""topic4"", 1, null, ""val1""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/kafka/KafkaItemReaderIntegrationTests.java","futures.add(this.template.send(""topic4"", 1, null, ""val3""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/kafka/KafkaItemReaderIntegrationTests.java","futures.add(this.template.send(""topic4"", 1, null, ""val5""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/kafka/KafkaItemReaderIntegrationTests.java","futures.add(this.template.send(""topic4"", 1, null, ""val7""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/kafka/KafkaItemReaderIntegrationTests.java","items.add(this.reader.read())"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/kafka/KafkaItemReaderIntegrationTests.java","items.add(this.reader.read())"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/kafka/KafkaItemReaderIntegrationTests.java","items.add(this.reader.read())"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/data/MongoItemWriterTests.java","
writers.add(i, new MongoItemWriter<>())"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/data/builder/RepositoryItemReaderBuilderTests.java","testResult.add(TEST_CONTENT)"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/data/builder/RepositoryItemReaderBuilderTests.java","args.add(ARG1)"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/data/builder/RepositoryItemReaderBuilderTests.java","args.add(ARG2)"
github.com,"spring-projects/spring-batch",main,"spring-batch-infrastructure/src/test/java/org/springframework/batch/item/data/builder/RepositoryItemReaderBuilderTests.java","args.add(ARG3)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/main/java/org/springframework/batch/core/launch/support/CommandLineJobRunner.java","executions.add(jobExecution)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/main/java/org/springframework/batch/core/launch/support/CommandLineJobRunner.java","result.add(jobExecution)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/main/java/org/springframework/batch/core/launch/support/CommandLineJobRunner.java","result.add(jobExecution)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/main/java/org/springframework/batch/core/launch/support/CommandLineJobRunner.java","newargs.add(line)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/main/java/org/springframework/batch/core/launch/support/CommandLineJobRunner.java","params.add(arg)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/main/java/org/springframework/batch/core/launch/support/SimpleJobOperator.java","list.add(jobExecution.getId())"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/main/java/org/springframework/batch/core/launch/support/SimpleJobOperator.java","list.add(jobInstance.getId())"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/main/java/org/springframework/batch/core/launch/support/JobRegistryBackgroundJobRunner.java","errors.add(e)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/main/java/org/springframework/batch/core/JobParameters.java","parameters.add(String.format(""'%s':'%s'"", entry.getKey(), entry.getValue()))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/main/java/org/springframework/batch/core/configuration/support/GenericApplicationContextFactory.java","types.add(resource.getClass())"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/main/java/org/springframework/batch/core/configuration/support/GenericApplicationContextFactory.java","uris.add(resource.getURI().toString())"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/main/java/org/springframework/batch/core/configuration/support/GenericApplicationContextFactory.java","names.add(type.getName())"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/main/java/org/springframework/batch/core/configuration/support/ClasspathXmlApplicationContextsFactoryBean.java","applicationContextFactories.add(factory)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/main/java/org/springframework/batch/core/configuration/xml/AbstractFlowParser.java","patterns.add(onAttribute)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/main/java/org/springframework/batch/core/configuration/xml/AbstractListenerParser.java","methodNameAttributes.add(metaData.getPropertyName())"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/main/java/org/springframework/batch/core/configuration/xml/JobParser.java","listeners.add(jobListenerParser.parse(listenerElement, parserContext))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/main/java/org/springframework/batch/core/configuration/xml/ChunkElementParser.java","beans.add(AbstractListenerParser.parseListenerElement(listenerElement, parserContext, enclosing))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/main/java/org/springframework/batch/core/configuration/xml/ChunkElementParser.java","streamBeans.add(new RuntimeBeanReference(streamRef))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/main/java/org/springframework/batch/core/configuration/xml/SimpleFlowFactoryBean.java","updatedTransitions.add(StateTransition.switchOriginAndDestination(stateTransition, state,
		getNext(stateTransition.getNext())))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/main/java/org/springframework/batch/core/configuration/xml/TaskletParser.java","list.add(new TypedStringValue(className, Class.class))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/main/java/org/springframework/batch/core/configuration/xml/StepListenerParser.java","listenerBeans.add(parse(listenerElement, parserContext))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/main/java/org/springframework/batch/core/scope/context/JobContext.java","errors.add(t)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/main/java/org/springframework/batch/core/scope/context/StepContext.java","errors.add(t)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/main/java/org/springframework/batch/core/listener/OrderedComposite.java","ordered.add(item)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/main/java/org/springframework/batch/core/listener/OrderedComposite.java","ordered.add(item)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/main/java/org/springframework/batch/core/listener/OrderedComposite.java","unordered.add(item)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/main/java/org/springframework/batch/core/StepExecution.java","this.failureExceptions.add(throwable)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/main/java/org/springframework/batch/core/step/item/BatchRetryTemplate.java","states.add(new DefaultRetryState(key))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/main/java/org/springframework/batch/core/step/item/BatchRetryTemplate.java","states.add(new DefaultRetryState(key, classifier))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/main/java/org/springframework/batch/core/step/item/FaultTolerantChunkProcessor.java","keys.add(keyGenerator.getKey(item))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/main/java/org/springframework/batch/core/step/builder/FaultTolerantStepBuilder.java","exceptions.add(fatal)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/main/java/org/springframework/batch/core/step/builder/FaultTolerantStepBuilder.java","exceptions.add(fatal)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/main/java/org/springframework/batch/core/step/builder/StepBuilderHelper.java","this.stepExecutionListeners.add(stepExecutionListener)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/main/java/org/springframework/batch/core/step/factory/BatchListenerFactoryHelper.java","list.add(listener)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/main/java/org/springframework/batch/core/repository/dao/JdbcStepExecutionDao.java","parameters.add(0, Arrays.copyOf(parameterValues, parameterValues.length))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/main/java/org/springframework/batch/core/repository/dao/JdbcStepExecutionDao.java","parameters.add(1, Arrays.copyOf(parameterTypes, parameterTypes.length))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/main/java/org/springframework/batch/core/repository/dao/JdbcJobInstanceDao.java","list.add(rowMapper.mapRow(rs, rowNum))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/main/java/org/springframework/batch/core/repository/dao/JdbcJobInstanceDao.java","list.add(rowMapper.mapRow(rs, rowNum))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/main/java/org/springframework/batch/core/JobExecution.java","this.failureExceptions.add(t)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/main/java/org/springframework/batch/core/job/flow/support/state/StepState.java","
names.add(step.getName())"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/main/java/org/springframework/batch/core/job/builder/SimpleJobBuilder.java","steps.add(step)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/main/java/org/springframework/batch/core/job/builder/SimpleJobBuilder.java","steps.add(step)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/main/java/org/springframework/batch/core/job/builder/FlowBuilder.java","transitions.add(StateTransition.createStateTransition(currentState, pattern, next.getName()))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/main/java/org/springframework/batch/core/job/builder/FlowBuilder.java","transitions.add(StateTransition.createEndStateTransition(failedState))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/main/java/org/springframework/batch/core/job/builder/FlowBuilder.java","transitions.add(StateTransition.createEndStateTransition(completedState))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/main/java/org/springframework/batch/core/job/builder/FlowBuilder.java","transitions.add(StateTransition.createEndStateTransition(stoppedState))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/main/java/org/springframework/batch/core/job/builder/FlowBuilder.java","transitions.add(StateTransition.createEndStateTransition(next))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/main/java/org/springframework/batch/core/job/SimpleJob.java","names.add(step.getName())"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/main/java/org/springframework/batch/core/job/SimpleJob.java","this.steps.add(step)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/launch/TaskExecutorJobLauncherTests.java","list.add(""execute"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/launch/TaskExecutorJobLauncherTests.java","list.add(""execute"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/launch/EmptyItemWriter.java","list.add(data)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/explore/support/SimpleJobExplorerIntegrationTests.java","transitions.add(StateTransition.createStateTransition(new StepState(dummyStep()), ""end0""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/explore/support/SimpleJobExplorerIntegrationTests.java","transitions
	.add(StateTransition.createEndStateTransition(new EndState(FlowExecutionStatus.COMPLETED, ""end0"")))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/test/step/FaultTolerantStepFactoryBeanIntegrationTests.java","written.add(item)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/test/step/FaultTolerantStepFactoryBeanIntegrationTests.java","processed.add(item)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/test/step/FaultTolerantStepFactoryBeanRollbackIntegrationTests.java","written.add(item)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/test/step/FaultTolerantStepFactoryBeanRollbackIntegrationTests.java","processed.add(item)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/test/step/FaultTolerantStepIntegrationTests.java","items.add(i)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/test/repository/JdbcJobRepositoryTests.java","list.add(execution)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/test/repository/JdbcJobRepositoryTests.java","list.add(e)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/test/repository/JobSupport.java","this.steps.add(step)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/NameStoringTasklet.java","stepNamesList.add(stepName)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/BranchStepJobParserTests.java","names.add(stepExecution.getStepName())"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/PartitionStepWithFlowParserTests.java","list.add(stepExecution.getStepName())"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/StepNameTests.java","list.add(Arguments.of(resource))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/PartitionStepParserTests.java","list.add(stepExecution.getStepName())"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/StepParserTests.java","unwrappedList.add(listener)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/JobStepParserTests.java","list.add(stepExecution.getStepName())"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/FlowStepParserTests.java","list.add(stepExecution.getStepName())"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/StepListenerInStepParserTests.java","r.add(listener)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/StepListenerInStepParserTests.java","r.add(listener)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/StepListenerInStepParserTests.java","r.add(listener)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/TestReader.java","l.add(""Item *** 1 ***"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/TestReader.java","l.add(""Item *** 2 ***"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/StepListenerParserTests.java","r.add(listener)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/StepListenerParserTests.java","r.add(listener)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/StepListenerParserTests.java","r.add(listener)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/StepListenerMethodAttributeParserTests.java","r.add(listener)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/PartitionStepWithLateBindingParserTests.java","list.add(stepExecution.getStepName())"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/FlowJobParserTests.java","list.add(stepExecution.getStepName())"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/configuration/xml/JobParserParentAttributeTests.java","listeners.add(listener)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/support/SimpleFlowTests.java","list.add(result)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobFailureTests.java","transitions.add(StateTransition.createStateTransition(step, ExitStatus.FAILED.getExitCode(), ""end0""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobFailureTests.java","transitions.add(StateTransition.createStateTransition(step, ExitStatus.COMPLETED.getExitCode(), ""end1""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobFailureTests.java","transitions.add(StateTransition.createEndStateTransition(new EndState(FlowExecutionStatus.FAILED, ""end0"")))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobFailureTests.java","transitions.add(StateTransition.createEndStateTransition(new EndState(FlowExecutionStatus.COMPLETED, ""end1"")))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobFailureTests.java","transitions.add(StateTransition.createStateTransition(step, ExitStatus.FAILED.getExitCode(), ""end0""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobFailureTests.java","transitions.add(StateTransition.createStateTransition(step, ""*"", ""end1""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobFailureTests.java","transitions.add(StateTransition.createEndStateTransition(new EndState(FlowExecutionStatus.FAILED, ""end0"")))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobFailureTests.java","transitions.add(StateTransition.createEndStateTransition(new EndState(FlowExecutionStatus.COMPLETED, ""end1"")))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowStepTests.java","transitions.add(StateTransition.createStateTransition(new StepState(new StubStep(""step1"")), ""step2""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowStepTests.java","transitions.add(StateTransition.createStateTransition(step2, ExitStatus.FAILED.getExitCode(), ""end0""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowStepTests.java","transitions.add(StateTransition.createStateTransition(step2, ExitStatus.COMPLETED.getExitCode(), ""end1""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowStepTests.java","transitions.add(StateTransition.createEndStateTransition(new EndState(FlowExecutionStatus.FAILED, ""end0"")))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowStepTests.java","transitions.add(StateTransition.createEndStateTransition(new EndState(FlowExecutionStatus.COMPLETED, ""end1"")))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowStepTests.java","transitions.add(StateTransition.createStateTransition(new StepState(new StubStep(""step1"")), ""step2""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowStepTests.java","transitions.add(StateTransition.createStateTransition(step2, ExitStatus.FAILED.getExitCode(), ""end0""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowStepTests.java","transitions.add(StateTransition.createStateTransition(step2, ExitStatus.COMPLETED.getExitCode(), ""end1""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowStepTests.java","transitions.add(StateTransition.createEndStateTransition(new EndState(FlowExecutionStatus.FAILED, ""end0"")))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowStepTests.java","transitions.add(StateTransition.createEndStateTransition(new EndState(FlowExecutionStatus.COMPLETED, ""end1"")))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowStepTests.java","transitions.add(StateTransition.createStateTransition(new StepState(new StubStep(""step1"")), ""end0""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowStepTests.java","transitions.add(StateTransition.createEndStateTransition(new EndState(FlowExecutionStatus.COMPLETED, ""end0"")))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/scope/context/StepContextTests.java","list.add(""bar"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/scope/context/StepContextTests.java","list.add(""bar"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/scope/context/StepContextTests.java","list.add(""spam"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/scope/context/StepContextTests.java","list.add(""bar"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/scope/context/JobContextTests.java","list.add(""bar"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/scope/context/JobContextTests.java","list.add(""bar"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/scope/context/JobContextTests.java","list.add(""spam"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/scope/context/JobContextTests.java","list.add(""bar"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/scope/context/JobSynchronizationManagerTests.java","list.add(""foo"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/scope/context/JobSynchronizationManagerTests.java","list.add(""foo"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/scope/context/StepSynchronizationManagerTests.java","list.add(""foo"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/scope/context/StepSynchronizationManagerTests.java","list.add(""foo"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/scope/TestAdvice.java","names.add(name)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/scope/AsyncJobScopeIntegrationTests.java","tasks.add(task)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/scope/AsyncJobScopeIntegrationTests.java","tasks.add(task)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/scope/AsyncStepScopeIntegrationTests.java","tasks.add(task)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/scope/AsyncStepScopeIntegrationTests.java","tasks.add(task)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/scope/StepScopeTests.java","list.add(""foo"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/scope/StepScopeTests.java","list.add(""foo"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/scope/StepScopeTests.java","list.add(""bar"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/scope/JobScopeTests.java","list.add(""foo"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/scope/JobScopeTests.java","list.add(""foo"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/scope/JobScopeTests.java","list.add(""bar"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/listener/CompositeStepExecutionListenerTests.java","list.add(""fail"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/listener/CompositeStepExecutionListenerTests.java","list.add(""continue"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/listener/CompositeStepExecutionListenerTests.java","list.add(""fail"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/listener/CompositeStepExecutionListenerTests.java","list.add(""foo"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/listener/CompositeItemReadListenerTests.java","add(listener)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/listener/CompositeJobExecutionListenerTests.java","list.add(""fail"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/listener/CompositeJobExecutionListenerTests.java","list.add(""continue"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/listener/CompositeJobExecutionListenerTests.java","list.add(""fail"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/listener/CompositeJobExecutionListenerTests.java","list.add(""foo"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/listener/CompositeItemWriteListenerTests.java","add(listener)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/step/item/SkipReaderStub.java","read.add(item)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/step/item/SimpleStepFactoryBeanTests.java","listened.add(ex)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/step/item/SimpleStepFactoryBeanTests.java","listened.add(ex)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/step/item/SimpleStepFactoryBeanTests.java","listenerCalls.add(""read"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/step/item/SimpleStepFactoryBeanTests.java","listenerCalls.add(""write"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/step/item/SimpleStepFactoryBeanTests.java","listenerCalls.add(""process"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/step/item/SimpleStepFactoryBeanTests.java","listenerCalls.add(""chunk"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/step/item/SimpleStepFactoryBeanTests.java","listenerCalls.add(""write"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/step/item/FaultTolerantExceptionClassesTests.java","stepsToExecute.add((Step) applicationContext.getBean(stepName))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/step/item/FaultTolerantChunkProcessorTests.java","processedItems.add(item)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/step/item/FaultTolerantChunkProcessorTests.java","processedItems.add(item)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/step/item/ExceptionThrowingTaskletStub.java","committed.add(1)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/step/item/SkipWriterStub.java","written.add(item)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/step/item/SkipWriterStub.java","committed.add(item)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/step/item/RepeatOperationsStepFactoryBeanTests.java","list.add(""foo"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/step/item/SkipProcessorStub.java","processed.add(item)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/step/item/SkipProcessorStub.java","committed.add(item)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/step/item/FaultTolerantStepFactoryBeanNonBufferingTests.java","written.add(item)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/step/item/BatchRetryTemplateTests.java","recovered.add(""r:"" + item)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/step/item/FaultTolerantStepFactoryBeanRetryTests.java","written.add(item)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/step/item/FaultTolerantStepFactoryBeanRetryTests.java","processed.add(item)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/step/item/FaultTolerantStepFactoryBeanRetryTests.java","written.add(item)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/step/item/FaultTolerantStepFactoryBeanRetryTests.java","processed.add(item)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/step/item/FaultTolerantStepFactoryBeanRetryTests.java","written.add(item)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/step/item/FaultTolerantStepFactoryBeanRetryTests.java","processed.add(item)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/step/item/FaultTolerantStepFactoryBeanRetryTests.java","provided.add(item)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/step/item/FaultTolerantStepFactoryBeanRetryTests.java","recovered.add(item)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/step/item/FaultTolerantStepFactoryBeanRetryTests.java","provided.add(item)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/step/item/FaultTolerantStepFactoryBeanRetryTests.java","recovered.add(item)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/step/item/FaultTolerantStepFactoryBeanRetryTests.java","provided.add(item)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/step/item/FaultTolerantStepFactoryBeanRetryTests.java","provided.add(item)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/step/item/FaultTolerantStepFactoryBeanRetryTests.java","provided.add(item)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/step/item/FaultTolerantStepFactoryBeanRetryTests.java","provided.add(item)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/step/item/FaultTolerantStepFactoryBeanRetryTests.java","provided.add(item)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/step/item/FaultTolerantStepFactoryBeanTests.java","listenerCalls.add(t)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/step/item/FaultTolerantStepFactoryBeanTests.java","listenerCalls.add(1)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/step/item/FaultTolerantStepFactoryBeanTests.java","listenerCalls.add(2)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/step/item/FaultTolerantStepFactoryBeanTests.java","listenerCalls.add(3)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/step/item/FaultTolerantStepFactoryBeanTests.java","listenerCalls.add(4)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/step/item/FaultTolerantStepFactoryBeanTests.java","listenerCalls.add(6)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/step/item/FaultTolerantStepFactoryBeanTests.java","listenerCalls.add(5)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/step/tasklet/AsyncTaskletStepTests.java","processed.add(item)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/step/tasklet/TaskletStepTests.java","list.add(stepExecution)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/step/tasklet/TaskletStepTests.java","list.add(""foo"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/step/tasklet/TaskletStepTests.java","list.add(""bar"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/step/tasklet/TaskletStepTests.java","list.add(""foo"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/step/tasklet/TaskletStepTests.java","list.add(""afterStepCalled"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/step/tasklet/TaskletStepTests.java","list.add(""exception"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/step/NonAbstractStepTests.java","events.add(""open"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/step/NonAbstractStepTests.java","events.add(""doExecute"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/step/NonAbstractStepTests.java","events.add(""close"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/step/NonAbstractStepTests.java","events.add(getEvent(""afterStep("" + stepExecution.getExitStatus().getExitCode() + "")""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/step/NonAbstractStepTests.java","events.add(getEvent(""beforeStep""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/repository/support/SimpleJobRepositoryTests.java","stepConfigurations.add(stepConfiguration1)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/repository/support/SimpleJobRepositoryTests.java","stepConfigurations.add(stepConfiguration2)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/repository/support/SimpleJobRepositoryTests.java","steps.add(databaseStep1)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/repository/support/SimpleJobRepositoryTests.java","steps.add(databaseStep2)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/repository/support/SimpleJobRepositoryTests.java","stepExecutions.add(stepExecution)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/repository/dao/AbstractJobExecutionDaoTests.java","execs.add(exec)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/repository/dao/JdbcJobDaoQueryTests.java","list.add(sql)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/repository/dao/AbstractStepExecutionDaoTests.java","stepExecutions.add(se)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/repository/dao/AbstractExecutionContextDaoTests.java","stepExecutions.add(se)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/resource/JdbcCursorItemReaderPreparedStatementIntegrationTests.java","parameters.add(1L)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/resource/JdbcCursorItemReaderPreparedStatementIntegrationTests.java","parameters.add(4L)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/JobParametersBuilderTests.java","this.jobInstanceList.add(new JobInstance(1L, ""simpleJobInstance""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/JobParametersBuilderTests.java","this.jobExecutionList.add(getJobExecution(this.jobInstanceList.get(0), null))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/JobParametersBuilderTests.java","this.jobInstanceList.add(new JobInstance(1L, ""simpleJobInstance""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/JobParametersBuilderTests.java","this.jobExecutionList.add(getJobExecution(this.jobInstanceList.get(0), BatchStatus.FAILED))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/JobParametersBuilderTests.java","this.jobInstanceList.add(new JobInstance(1L, ""simpleJobInstance""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/SimpleJobTests.java","list.add(""default"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/SimpleJobTests.java","list.add(""default"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/SimpleJobTests.java","steps.add(step1)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/SimpleJobTests.java","steps.add(step2)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/SimpleJobTests.java","steps.add(testStep)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/SimpleJobTests.java","list.add(""before"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/SimpleJobTests.java","list.add(""after"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/SimpleJobTests.java","list.add(""afterJob"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/SimpleJobTests.java","steps.add(step1)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/SimpleJobTests.java","steps.add(step2)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/SimpleJobTests.java","// Two steps with the same name should both be executed, since
// the user might actually want it to happen twice. On a restart
// it would be executed twice again, even if it failed on the
// second execution. This seems reasonable.
steps.add(step2)"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createStateTransition(new StepState(new StubStep(""step1"")), ""step2""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createStateTransition(new StepState(new StubStep(""step2"")), ""end0""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createEndStateTransition(new EndState(FlowExecutionStatus.COMPLETED, ""end0"")))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createStateTransition(new StepState(new StubStep(""step1"")), ""step2""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createStateTransition(step2, ExitStatus.FAILED.getExitCode(), ""end0""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createStateTransition(step2, ExitStatus.COMPLETED.getExitCode(), ""end1""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createEndStateTransition(new EndState(FlowExecutionStatus.FAILED, ""end0"")))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createEndStateTransition(new EndState(FlowExecutionStatus.COMPLETED, ""end1"")))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions
	.add(StateTransition.createStateTransition(new StateSupport(""step1"", FlowExecutionStatus.FAILED), ""step2""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createStateTransition(step2, ExitStatus.FAILED.getExitCode(), ""end0""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createStateTransition(step2, ExitStatus.COMPLETED.getExitCode(), ""end1""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createEndStateTransition(new EndState(FlowExecutionStatus.FAILED, ""end0"")))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createEndStateTransition(new EndState(FlowExecutionStatus.COMPLETED, ""end1"")))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createStateTransition(new StepState(new StubStep(""step1"")), ""step2""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createStateTransition(step2State, ExitStatus.COMPLETED.getExitCode(), ""end0""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createStateTransition(step2State, ExitStatus.FAILED.getExitCode(), ""end1""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createEndStateTransition(new EndState(FlowExecutionStatus.COMPLETED, ""end0"")))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createEndStateTransition(new EndState(FlowExecutionStatus.FAILED, ""end1"")))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createStateTransition(new StepState(new StubStep(""step1"")), ""step2""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createStateTransition(state2, ExitStatus.FAILED.getExitCode(), ""end0""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createStateTransition(state2, ExitStatus.COMPLETED.getExitCode(), ""end1""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions
	.add(StateTransition.createStateTransition(new EndState(FlowExecutionStatus.STOPPED, ""end0""), ""step3""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createEndStateTransition(new EndState(FlowExecutionStatus.COMPLETED, ""end1"")))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createStateTransition(new StepState(new StubStep(""step3"")), ""end2""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createEndStateTransition(new EndState(FlowExecutionStatus.COMPLETED, ""end2"")))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createStateTransition(new StepState(new StubStep(""step1"") {
	@Override
	public void execute(StepExecution stepExecution) throws JobInterruptedException {
		stepExecution.setStatus(BatchStatus.STOPPING);
		jobRepository.update(stepExecution);
	}
}), ""end0""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createEndStateTransition(new EndState(FlowExecutionStatus.COMPLETED, ""end0"")))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createStateTransition(new StepState(new StubStep(""step1"") {
	@Override
	public void execute(StepExecution stepExecution) throws JobInterruptedException {
		stepExecution.setStatus(BatchStatus.UNKNOWN);
		stepExecution.setTerminateOnly();
		jobRepository.update(stepExecution);
	}
}), ""step2""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createStateTransition(new StepState(new StubStep(""step2"")), ""end0""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createEndStateTransition(new EndState(FlowExecutionStatus.COMPLETED, ""end0"")))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createStateTransition(new StepState(new StubStep(""step1"") {
	@Override
	public void execute(StepExecution stepExecution) throws JobInterruptedException {
		if (!stepExecution.getJobExecution().getExecutionContext().containsKey(""STOPPED"")) {
			stepExecution.getJobExecution().getExecutionContext().put(""STOPPED"", true);
			stepExecution.setStatus(BatchStatus.STOPPED);
			jobRepository.update(stepExecution);
		}
		else {
			fail(""The Job should have stopped by now"");
		}
	}
}), ""end0""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createEndStateTransition(new EndState(FlowExecutionStatus.COMPLETED, ""end0"")))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition
	.createStateTransition(new SplitState(Arrays.<Flow>asList(flow1, flow2), ""split""), ""end0""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createEndStateTransition(new EndState(FlowExecutionStatus.COMPLETED, ""end0"")))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createStateTransition(new StepState(new StubStep(""step1"") {
	@Override
	public void execute(StepExecution stepExecution) throws JobInterruptedException {
		throw new JobInterruptedException(""Stopped"");
	}
}), ""end0""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createEndStateTransition(new EndState(FlowExecutionStatus.COMPLETED, ""end0"")))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createStateTransition(new StepState(new StubStep(""step1"") {
	@Override
	public void execute(StepExecution stepExecution) throws JobInterruptedException {
		throw new JobInterruptedException(""Stopped"");
	}
}), ""end0""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createEndStateTransition(new EndState(FlowExecutionStatus.COMPLETED, ""end0"")))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition
	.createStateTransition(new SplitState(Arrays.<Flow>asList(flow1, flow2), ""split""), ""end0""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createEndStateTransition(new EndState(FlowExecutionStatus.COMPLETED, ""end0"")))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createStateTransition(new StepState(new StubStep(""step1"")), ""end""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions
	.add(StateTransition.createStateTransition(new EndState(FlowExecutionStatus.STOPPED, ""end""), ""step2""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createStateTransition(step2, ExitStatus.FAILED.getExitCode(), ""end0""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createStateTransition(step2, ExitStatus.COMPLETED.getExitCode(), ""end1""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createEndStateTransition(new EndState(FlowExecutionStatus.FAILED, ""end0"")))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createEndStateTransition(new EndState(FlowExecutionStatus.COMPLETED, ""end1"")))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createStateTransition(new StepState(new StubStep(""step1"")), ""end""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions
	.add(StateTransition.createStateTransition(new EndState(FlowExecutionStatus.FAILED, ""end""), ""step2""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createStateTransition(new StepState(new StubStep(""step2"")),
		ExitStatus.FAILED.getExitCode(), ""end0""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createStateTransition(new StepState(new StubStep(""step2"")),
		ExitStatus.COMPLETED.getExitCode(), ""end1""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createEndStateTransition(new EndState(FlowExecutionStatus.FAILED, ""end0"")))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createEndStateTransition(new EndState(FlowExecutionStatus.COMPLETED, ""end1"")))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createStateTransition(new StepState(new StubStep(""step1"")), ""end""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions
	.add(StateTransition.createStateTransition(new EndState(FlowExecutionStatus.STOPPED, ""end""), ""step2""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createStateTransition(step2, ExitStatus.COMPLETED.getExitCode(), ""end0""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createStateTransition(step2, ExitStatus.FAILED.getExitCode(), ""end1""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createEndStateTransition(new EndState(FlowExecutionStatus.COMPLETED, ""end0"")))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createEndStateTransition(new EndState(FlowExecutionStatus.FAILED, ""end1"")))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createStateTransition(step1, ""step2""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createStateTransition(step1, ""COMPLETED"", ""step3""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createStateTransition(step2, ExitStatus.COMPLETED.getExitCode(), ""end0""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createStateTransition(step2, ExitStatus.FAILED.getExitCode(), ""end1""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createEndStateTransition(new EndState(FlowExecutionStatus.COMPLETED, ""end0"")))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createEndStateTransition(new EndState(FlowExecutionStatus.FAILED, ""end1"")))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createStateTransition(step3, ExitStatus.FAILED.getExitCode(), ""end2""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createStateTransition(step3, ExitStatus.COMPLETED.getExitCode(), ""end3""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createEndStateTransition(new EndState(FlowExecutionStatus.FAILED, ""end2"")))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createEndStateTransition(new EndState(FlowExecutionStatus.COMPLETED, ""end3"")))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createStateTransition(new StepState(new StubStep(""step"")), ""end0""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createEndStateTransition(new EndState(FlowExecutionStatus.COMPLETED, ""end0"")))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createStateTransition(new StepState(new StubStep(""step1"")), ""decision""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createStateTransition(decision, ""step2""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createStateTransition(decision, ""SWITCH"", ""step3""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createStateTransition(step2, ExitStatus.COMPLETED.getExitCode(), ""end0""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createStateTransition(step2, ExitStatus.FAILED.getExitCode(), ""end1""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createEndStateTransition(new EndState(FlowExecutionStatus.COMPLETED, ""end0"")))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createEndStateTransition(new EndState(FlowExecutionStatus.FAILED, ""end1"")))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createStateTransition(step3, ExitStatus.FAILED.getExitCode(), ""end2""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createStateTransition(step3, ExitStatus.COMPLETED.getExitCode(), ""end3""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createEndStateTransition(new EndState(FlowExecutionStatus.FAILED, ""end2"")))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createEndStateTransition(new EndState(FlowExecutionStatus.COMPLETED, ""end3"")))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createStateTransition(new StepState(new StubStep(""step1"")), ""decision""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createStateTransition(decision, ""step2""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createStateTransition(decision, ""SWITCH"", ""step3""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createStateTransition(step2, ExitStatus.COMPLETED.getExitCode(), ""end0""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createStateTransition(step2, ExitStatus.FAILED.getExitCode(), ""end1""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createEndStateTransition(new EndState(FlowExecutionStatus.COMPLETED, ""end0"")))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createEndStateTransition(new EndState(FlowExecutionStatus.FAILED, ""end1"")))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createStateTransition(step3, ExitStatus.FAILED.getExitCode(), ""end2""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createStateTransition(step3, ExitStatus.COMPLETED.getExitCode(), ""end3""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createEndStateTransition(new EndState(FlowExecutionStatus.FAILED, ""end2"")))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createEndStateTransition(new EndState(FlowExecutionStatus.COMPLETED, ""end3"")))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createStateTransition(new StepState(new StubStep(""step1"")), ""step2""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createStateTransition(new StepState(new StubStep(""step2"")), ""end0""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createEndStateTransition(new EndState(FlowExecutionStatus.COMPLETED, ""end0"")))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createStateTransition(new StepState(""job.step"", new StubStep(""step"")), ""end0""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createEndStateTransition(new EndState(FlowExecutionStatus.COMPLETED, ""end0"")))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createStateTransition(new StepState(""job.step"", new StubStep(""step"")), ""end0""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createEndStateTransition(new EndState(FlowExecutionStatus.COMPLETED, ""end0"")))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createStateTransition(new StepState(new StubStep(""step1"")), ""step2""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createStateTransition(new StepState(new StubStep(""step2"")), ""end0""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createEndStateTransition(new EndState(FlowExecutionStatus.COMPLETED, ""end0"")))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createStateTransition(new StepState(new StubStep(""step1"")), ""step2""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createStateTransition(new StepState(new StubStep(""step2"")), ""end0""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createEndStateTransition(new EndState(FlowExecutionStatus.COMPLETED, ""end0"")))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createStateTransition(new StepState(new StubStep(""step2"")), ""end1""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createEndStateTransition(new EndState(FlowExecutionStatus.COMPLETED, ""end1"")))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createStateTransition(new StepState(new StubStep(""step1"")), ""nested""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createStateTransition(new FlowState(nested, ""nested""), ""end0""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createEndStateTransition(new EndState(FlowExecutionStatus.COMPLETED, ""end0"")))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createStateTransition(new StepState(new StubStep(""step1"")), ""end0""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createEndStateTransition(new EndState(FlowExecutionStatus.COMPLETED, ""end0"")))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createStateTransition(new StepState(new StubStep(""step2"")), ""end1""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createEndStateTransition(new EndState(FlowExecutionStatus.COMPLETED, ""end1"")))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition
	.createStateTransition(new SplitState(Arrays.<Flow>asList(flow1, flow2), ""split""), ""end2""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-core/src/test/java/org/springframework/batch/core/job/flow/FlowJobTests.java","transitions.add(StateTransition.createEndStateTransition(new EndState(FlowExecutionStatus.COMPLETED, ""end2"")))"
github.com,"spring-projects/spring-batch",main,"spring-batch-test/src/main/java/org/springframework/batch/test/ExecutionContextTestUtils.java","stepNames.add(name)"
github.com,"spring-projects/spring-batch",main,"spring-batch-test/src/main/java/org/springframework/batch/test/StepRunner.java","stepsToExecute.add(step)"
github.com,"spring-projects/spring-batch",main,"spring-batch-test/src/main/java/org/springframework/batch/test/JobRepositoryTestUtils.java","list.add(jobExecution)"
github.com,"spring-projects/spring-batch",main,"spring-batch-test/src/test/java/org/springframework/batch/test/JobRepositoryTestUtilsTests.java","list.add(jobExecution)"
github.com,"spring-projects/spring-batch",main,"spring-batch-test/src/test/java/org/springframework/batch/test/JobRepositoryTestUtilsTests.java","list.add(jobExecution)"
github.com,"spring-projects/spring-batch",main,"spring-batch-test/src/test/java/org/springframework/batch/test/StepScopeAnnotatedListenerIntegrationTests.java","this.list.add(""some stateful reading information"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-integration/src/main/java/org/springframework/batch/integration/chunk/ChunkMessageChannelItemWriter.java","contributions.add(contribution)"
github.com,"spring-projects/spring-batch",main,"spring-batch-integration/src/main/java/org/springframework/batch/integration/async/AsyncItemWriter.java","list.add(future.get())"
github.com,"spring-projects/spring-batch",main,"spring-batch-integration/src/test/java/org/springframework/batch/integration/launch/JobLaunchingMessageHandlerTests.java","jobs.add(job)"
github.com,"spring-projects/spring-batch",main,"spring-batch-integration/src/test/java/org/springframework/batch/integration/launch/JobLaunchingMessageHandlerTests.java","parameters.add(jobParameters)"
github.com,"spring-projects/spring-batch",main,"spring-batch-integration/src/test/java/org/springframework/batch/integration/async/AsyncItemProcessorTests.java","list.add(processor.process(""foo"" + count))"
github.com,"spring-projects/spring-batch",main,"spring-batch-integration/src/test/java/org/springframework/batch/integration/async/PollingAsyncItemProcessorMessagingGatewayTests.java","list.add(processor.process(""foo"" + count))"
github.com,"spring-projects/spring-batch",main,"spring-batch-integration/src/test/java/org/springframework/batch/integration/async/AsyncItemProcessorMessagingGatewayTests.java","list.add(processor.process(""foo"" + count))"
github.com,"spring-projects/spring-batch",main,"spring-batch-integration/src/test/java/org/springframework/batch/integration/retry/SimpleService.java","processed.add(message)"
github.com,"spring-projects/spring-batch",main,"spring-batch-integration/src/test/java/org/springframework/batch/integration/retry/RepeatTransactionalPollingIntegrationTests.java","processed.add(message)"
github.com,"spring-projects/spring-batch",main,"spring-batch-integration/src/test/java/org/springframework/batch/integration/retry/RepeatTransactionalPollingIntegrationTests.java","handled.add(message)"
github.com,"spring-projects/spring-batch",main,"spring-batch-integration/src/test/java/org/springframework/batch/integration/retry/SimpleRecoverer.java","recovered.add(payload)"
github.com,"spring-projects/spring-batch",main,"spring-batch-integration/src/test/java/org/springframework/batch/integration/retry/TransactionalPollingIntegrationTests.java","processed.add(message)"
github.com,"spring-projects/spring-batch",main,"spring-batch-integration/src/test/java/org/springframework/batch/integration/retry/TransactionalPollingIntegrationTests.java","handled.add(message)"
github.com,"spring-projects/spring-batch",main,"spring-batch-samples/src/test/java/org/springframework/batch/sample/launch/RemoteLauncherTests.java","errors.add(e)"
github.com,"spring-projects/spring-batch",main,"spring-batch-samples/src/test/java/org/springframework/batch/sample/quartz/JobLauncherDetailsTests.java","list.add(jobParameters)"
github.com,"spring-projects/spring-batch",main,"spring-batch-samples/src/test/java/org/springframework/batch/sample/quartz/JobLauncherDetailsTests.java","list.add(name)"
github.com,"spring-projects/spring-batch",main,"spring-batch-samples/src/test/java/org/springframework/batch/sample/CompositeItemWriterSampleFunctionalTests.java","add(new Trade(""UK21341EAH41"", 211, new BigDecimal(""31.11""), ""customer1""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-samples/src/test/java/org/springframework/batch/sample/CompositeItemWriterSampleFunctionalTests.java","add(new Trade(""UK21341EAH42"", 212, new BigDecimal(""32.11""), ""customer2""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-samples/src/test/java/org/springframework/batch/sample/CompositeItemWriterSampleFunctionalTests.java","add(new Trade(""UK21341EAH43"", 213, new BigDecimal(""33.11""), ""customer3""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-samples/src/test/java/org/springframework/batch/sample/CompositeItemWriterSampleFunctionalTests.java","add(new Trade(""UK21341EAH44"", 214, new BigDecimal(""34.11""), ""customer4""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-samples/src/test/java/org/springframework/batch/sample/CompositeItemWriterSampleFunctionalTests.java","add(new Trade(""UK21341EAH45"", 215, new BigDecimal(""35.11""), ""customer5""))"
github.com,"spring-projects/spring-batch",main,"spring-batch-samples/src/test/java/org/springframework/batch/sample/HibernateFailureJobFunctionalTests.java","matches.add(rs.getBigDecimal(ID_COLUMN))"
github.com,"spring-projects/spring-batch",main,"spring-batch-samples/src/test/java/org/springframework/batch/sample/domain/order/internal/validator/OrderValidatorTests.java","items.add(new LineItem())"
github.com,"spring-projects/spring-batch",main,"spring-batch-samples/src/test/java/org/springframework/batch/sample/domain/order/internal/validator/OrderValidatorTests.java","items.add(new LineItem())"
github.com,"spring-projects/spring-batch",main,"spring-batch-samples/src/test/java/org/springframework/batch/sample/domain/order/internal/validator/OrderValidatorTests.java","lineItems.add(buildLineItem(-5, 5.00, 0, 0, 2, 3, 3, 30))"
github.com,"spring-projects/spring-batch",main,"spring-batch-samples/src/test/java/org/springframework/batch/sample/domain/order/internal/validator/OrderValidatorTests.java","lineItems.add(buildLineItem(Long.MAX_VALUE, 5.00, 0, 0, 2, 3, 3, 30))"
github.com,"spring-projects/spring-batch",main,"spring-batch-samples/src/test/java/org/springframework/batch/sample/domain/order/internal/validator/OrderValidatorTests.java","lineItems.add(buildLineItem(6, -5.00, 0, 0, 2, 3, 3, 0))"
github.com,"spring-projects/spring-batch",main,"spring-batch-samples/src/test/java/org/springframework/batch/sample/domain/order/internal/validator/OrderValidatorTests.java","lineItems.add(buildLineItem(6, Integer.MAX_VALUE, 0, 0, 2, 3, 3, 30))"
github.com,"spring-projects/spring-batch",main,"spring-batch-samples/src/test/java/org/springframework/batch/sample/domain/order/internal/validator/OrderValidatorTests.java","lineItems.add(buildLineItem(6, 5.00, 900, 0, 2, 3, 3, 30))"
github.com,"spring-projects/spring-batch",main,"spring-batch-samples/src/test/java/org/springframework/batch/sample/domain/order/internal/validator/OrderValidatorTests.java","lineItems.add(buildLineItem(6, 5.00, -90, 0, 2, 3, 3, 30))"
github.com,"spring-projects/spring-batch",main,"spring-batch-samples/src/test/java/org/springframework/batch/sample/domain/order/internal/validator/OrderValidatorTests.java","lineItems.add(buildLineItem(6, 5.00, 10, 20, 2, 3, 3, 30))"
github.com,"spring-projects/spring-batch",main,"spring-batch-samples/src/test/java/org/springframework/batch/sample/domain/order/internal/validator/OrderValidatorTests.java","lineItems.add(buildLineItem(6, 5.00, 0, -10, 2, 3, 3, 30))"
github.com,"spring-projects/spring-batch",main,"spring-batch-samples/src/test/java/org/springframework/batch/sample/domain/order/internal/validator/OrderValidatorTests.java","lineItems.add(buildLineItem(6, 5.00, 0, 50, 2, 3, 3, 30))"
github.com,"spring-projects/spring-batch",main,"spring-batch-samples/src/test/java/org/springframework/batch/sample/domain/order/internal/validator/OrderValidatorTests.java","lineItems.add(buildLineItem(6, 5.00, 0, 0, -2, 3, 3, 30))"
github.com,"spring-projects/spring-batch",main,"spring-batch-samples/src/test/java/org/springframework/batch/sample/domain/order/internal/validator/OrderValidatorTests.java","lineItems.add(buildLineItem(6, 5.00, 0, 0, Long.MAX_VALUE, 3, 3, 30))"
github.com,"spring-projects/spring-batch",main,"spring-batch-samples/src/test/java/org/springframework/batch/sample/domain/order/internal/validator/OrderValidatorTests.java","lineItems.add(buildLineItem(6, 5.00, 0, 0, 2, -3, 3, 30))"
github.com,"spring-projects/spring-batch",main,"spring-batch-samples/src/test/java/org/springframework/batch/sample/domain/order/internal/validator/OrderValidatorTests.java","lineItems.add(buildLineItem(6, 5.00, 0, 0, 2, Long.MAX_VALUE, 3, 30))"
github.com,"spring-projects/spring-batch",main,"spring-batch-samples/src/test/java/org/springframework/batch/sample/domain/order/internal/validator/OrderValidatorTests.java","lineItems.add(buildLineItem(6, 5.00, 0, 0, 2, 3, -3, 30))"
github.com,"spring-projects/spring-batch",main,"spring-batch-samples/src/test/java/org/springframework/batch/sample/domain/order/internal/validator/OrderValidatorTests.java","lineItems.add(buildLineItem(6, 5.00, 0, 0, 2, 3, Integer.MAX_VALUE, 30))"
github.com,"spring-projects/spring-batch",main,"spring-batch-samples/src/test/java/org/springframework/batch/sample/domain/order/internal/validator/OrderValidatorTests.java","lineItems.add(buildLineItem(6, 5.00, 0, 0, 2, 3, 3, -5))"
github.com,"spring-projects/spring-batch",main,"spring-batch-samples/src/test/java/org/springframework/batch/sample/domain/order/internal/validator/OrderValidatorTests.java","lineItems.add(buildLineItem(6, 5.00, 0, 0, 2, 3, 3, Integer.MAX_VALUE))"
github.com,"spring-projects/spring-batch",main,"spring-batch-samples/src/test/java/org/springframework/batch/sample/domain/trade/internal/ItemTrackingTradeItemWriter.java","
newItems.add(t)"
github.com,"spring-projects/spring-batch",main,"spring-batch-samples/src/test/java/org/springframework/batch/sample/iosample/AbstractIoSampleTests.java","result.add(credit)"
github.com,"spring-projects/spring-batch",main,"spring-batch-samples/src/test/java/org/springframework/batch/sample/common/CustomItemReaderTests.java","items.add(""1"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-samples/src/test/java/org/springframework/batch/sample/common/CustomItemReaderTests.java","items.add(""2"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-samples/src/test/java/org/springframework/batch/sample/common/CustomItemReaderTests.java","items.add(""3"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-samples/src/test/java/org/springframework/batch/sample/common/CustomItemReaderTests.java","items.add(""1"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-samples/src/test/java/org/springframework/batch/sample/common/CustomItemReaderTests.java","items.add(""2"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-samples/src/test/java/org/springframework/batch/sample/common/CustomItemReaderTests.java","items.add(""3"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-samples/src/test/java/org/springframework/batch/sample/jmx/JobExecutionNotificationPublisherTests.java",list::add
github.com,"spring-projects/spring-batch",main,"spring-batch-samples/src/main/java/org/springframework/batch/sample/metrics/Job2Configuration.java","items.add(i)"
github.com,"spring-projects/spring-batch",main,"spring-batch-samples/src/main/java/org/springframework/batch/sample/domain/order/internal/validator/OrderValidator.java","CARD_TYPES.add(""VISA"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-samples/src/main/java/org/springframework/batch/sample/domain/order/internal/validator/OrderValidator.java","CARD_TYPES.add(""AMEX"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-samples/src/main/java/org/springframework/batch/sample/domain/order/internal/validator/OrderValidator.java","CARD_TYPES.add(""ECMC"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-samples/src/main/java/org/springframework/batch/sample/domain/order/internal/validator/OrderValidator.java","CARD_TYPES.add(""DCIN"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-samples/src/main/java/org/springframework/batch/sample/domain/order/internal/validator/OrderValidator.java","CARD_TYPES.add(""PAYP"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-samples/src/main/java/org/springframework/batch/sample/domain/order/internal/validator/OrderValidator.java","
SHIPPER_IDS.add(""FEDX"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-samples/src/main/java/org/springframework/batch/sample/domain/order/internal/validator/OrderValidator.java","SHIPPER_IDS.add(""UPS"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-samples/src/main/java/org/springframework/batch/sample/domain/order/internal/validator/OrderValidator.java","SHIPPER_IDS.add(""DHL"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-samples/src/main/java/org/springframework/batch/sample/domain/order/internal/validator/OrderValidator.java","SHIPPER_IDS.add(""DPD"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-samples/src/main/java/org/springframework/batch/sample/domain/order/internal/validator/OrderValidator.java","
SHIPPER_TYPES.add(""STD"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-samples/src/main/java/org/springframework/batch/sample/domain/order/internal/validator/OrderValidator.java","SHIPPER_TYPES.add(""EXP"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-samples/src/main/java/org/springframework/batch/sample/domain/order/internal/validator/OrderValidator.java","SHIPPER_TYPES.add(""AMS"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-samples/src/main/java/org/springframework/batch/sample/domain/order/internal/validator/OrderValidator.java","SHIPPER_TYPES.add(""AME"")"
github.com,"spring-projects/spring-batch",main,"spring-batch-samples/src/main/java/org/springframework/batch/sample/domain/order/internal/OrderItemReader.java","order.getLineItems().add(itemMapper.mapFieldSet(fieldSet))"
github.com,"spring-projects/spring-batch",main,"spring-batch-samples/src/main/java/org/springframework/batch/sample/domain/trade/internal/HibernateCreditDao.java","errors.add(e)"
github.com,"spring-projects/spring-batch",main,"spring-batch-samples/src/main/java/org/springframework/batch/sample/domain/multiline/AggregateItemReader.java","records.add(record)"
github.com,"spring-projects/spring-batch",main,"spring-batch-samples/src/main/java/org/springframework/batch/sample/domain/mail/internal/TestMailSender.java","received.add(simpleMessage)"
github.com,"spring-projects/spring-batch",main,"spring-batch-samples/src/main/java/org/springframework/batch/sample/domain/mail/internal/TestMailErrorHandler.java","this.failedMessages.add(failedMessage)"
github.com,"spring-projects/spring-batch",main,"spring-batch-samples/src/main/java/org/springframework/batch/sample/domain/person/Person.java","children.add(new Child())"
github.com,"spring-projects/spring-batch",main,"spring-batch-samples/src/main/java/org/springframework/batch/sample/domain/person/Person.java","children.add(new Child())"
github.com,"spring-projects/spring-batch",main,"spring-batch-samples/src/main/java/org/springframework/batch/sample/domain/person/PersonService.java","
children.add(child)"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/integration/imperative/ProjectionIT.java","packages.add(DepartmentEntity.class.getPackage().getName())"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/integration/imperative/ProjectionIT.java","packages.add(WidgetEntity.class.getPackage().getName())"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/integration/imperative/ImmutableAssignedIdsIT.java","onboardedBy.add(person1)"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/integration/imperative/ImmutableAssignedIdsIT.java","onboardedBy.add(person2)"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/integration/imperative/ImmutableGeneratedIdsIT.java","onboardedBy.add(person1)"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/integration/imperative/ImmutableGeneratedIdsIT.java","onboardedBy.add(person2)"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/integration/imperative/DynamicRelationshipsIT.java","pets.get(TypeOfPet.CATS).add(new Pet(""Delilah""))"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/integration/imperative/DynamicRelationshipsIT.java","monsters.add(new Pet(""Godzilla""))"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/integration/imperative/DynamicRelationshipsIT.java","monsters.add(new Pet(""King Kong""))"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/integration/imperative/DynamicRelationshipsIT.java","fish.add(new Pet(""Nemo""))"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/integration/imperative/DynamicRelationshipsIT.java","hobbyRelationships.add(hobbyRelationship)"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/integration/imperative/DynamicRelationshipsIT.java","
hobbyRelationships.add(hobbyRelationship2)"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/integration/imperative/ScrollingIT.java","content.add(next)"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/integration/imperative/StringlyTypedDynamicRelationshipsIT.java","pets.get(""CATS"").add(new Pet(""Delilah""))"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/integration/imperative/StringlyTypedDynamicRelationshipsIT.java","monsters.add(new Pet(""Godzilla""))"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/integration/imperative/StringlyTypedDynamicRelationshipsIT.java","monsters.add(new Pet(""King Kong""))"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/integration/imperative/StringlyTypedDynamicRelationshipsIT.java","fish.add(new Pet(""Nemo""))"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/integration/imperative/StringlyTypedDynamicRelationshipsIT.java","hobbyRelationships.add(hobbyRelationship1)"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/integration/imperative/StringlyTypedDynamicRelationshipsIT.java","hobbyRelationships.add(hobbyRelationship2)"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/integration/imperative/Neo4jTemplateIT.java","things.add(new X())"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/integration/imperative/Neo4jTemplateIT.java","things.add(new Y())"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/integration/imperative/ImmutableExternallyGeneratedIdsIT.java","onboardedBy.add(person1)"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/integration/imperative/ImmutableExternallyGeneratedIdsIT.java","onboardedBy.add(person2)"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/integration/imperative/OptimisticLockingIT.java","thing1Relationships.add(thing2)"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/integration/imperative/OptimisticLockingIT.java","thing1Relationships.add(thing3)"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/integration/imperative/OptimisticLockingIT.java","thing1Relationships.add(thing4)"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/integration/imperative/RepositoryIT.java","content.add(next)"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/integration/imperative/RepositoryIT.java","hobbies.add(rel1)"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/integration/imperative/RepositoryIT.java","hobbies.add(rel2)"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/integration/imperative/RepositoryIT.java","hobby.getLikedBy().add(liked)"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/integration/imperative/RepositoryIT.java","routes.add(new SameIdProperty.RouteProperties()
		.withPod(new SameIdProperty.PodEntity()
				.withCode(""BEANR"")
		)
		.withTruck(20d))"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/integration/imperative/RepositoryIT.java","
routes.add(new SameIdProperty.RouteProperties()
		.withPod(new SameIdProperty.PodEntity()
				.withCode(""TRMER"") // Here is the duplicated, but for another kind of node.
		)
		.withTruck(20d))"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/integration/imperative/RepositoryIT.java","routes.add(new SameIdProperty.PodEntity().withCode(""BEANR""))"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/integration/imperative/RepositoryIT.java","
routes.add(new SameIdProperty.PodEntity().withCode(""TRMER""))"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/integration/imperative/RepositoryIT.java","
hobby.getLikedBy().add(rel1)"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/integration/imperative/RepositoryIT.java","hobby.getLikedBy().add(rel2)"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/integration/imperative/RepositoryIT.java","labels.add(""ConcreteClassA"")"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/integration/imperative/RepositoryIT.java","labels.add(""ConcreteClassB"")"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/integration/imperative/RepositoryIT.java","things.add(ccA)"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/integration/imperative/RepositoryIT.java","things.add(ccB)"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/integration/imperative/RepositoryIT.java","things.add(ccA)"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/integration/imperative/RepositoryIT.java","things.add(ccB)"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/integration/imperative/RepositoryIT.java","things.add(ccA)"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/integration/imperative/RepositoryIT.java","things.add(ccB)"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/integration/imperative/RepositoryIT.java","things.add(ccA)"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/integration/imperative/RepositoryIT.java","things.add(ccB1)"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/integration/imperative/RepositoryIT.java","
things.add(relCcA)"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/integration/imperative/RepositoryIT.java","things.add(relCcB)"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/integration/imperative/RepositoryIT.java","
things.add(relCcA)"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/integration/imperative/RepositoryIT.java","things.add(relCcB1)"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/integration/imperative/RepositoryIT.java","
things.add(relCcA)"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/integration/imperative/RepositoryIT.java","things.add(relCcB1)"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/documentation/spring_boot/ReactiveTemplateExampleTest.java","movie.getActorsAndRoles().add(role1)"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/documentation/spring_boot/ReactiveTemplateExampleTest.java","movie.getActorsAndRoles().add(role2)"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/documentation/spring_boot/TemplateExampleTest.java","movie.getActorsAndRoles().add(roles1)"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/documentation/spring_boot/TemplateExampleTest.java","movie.getActorsAndRoles().add(roles2)"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/core/mapping/Neo4jMappingContextTest.java","associations.add(a.getInverse().getFieldName())"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/core/mapping/Neo4jMappingContextTest.java","associations.add(a.getInverse())"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/core/mapping/Neo4jMappingContextTest.java","listOfInitialEntities.add(Collections.emptySet())"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/core/mapping/Neo4jMappingContextTest.java","listOfInitialEntities.add(new HashSet<>(Arrays.asList(SomeInterface.class, SomeInterfaceImpl.class)))"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/core/mapping/Neo4jMappingContextTest.java","listOfInitialEntities.add(new HashSet<>(Arrays.asList(SomeInterfaceImpl.class, SomeInterface.class)))"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/core/mapping/Neo4jMappingContextTest.java","listOfInitialEntities.add(Collections.emptySet())"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/core/mapping/Neo4jMappingContextTest.java","listOfInitialEntities.add(new HashSet<>(Arrays.asList(SomeInterface2.class, SomeInterfaceImpl2.class)))"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/core/mapping/Neo4jMappingContextTest.java","listOfInitialEntities.add(new HashSet<>(Arrays.asList(SomeInterfaceImpl2.class, SomeInterface2.class)))"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/core/mapping/Neo4jMappingContextTest.java","listOfInitialEntities.add(Collections.emptySet())"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/core/mapping/Neo4jMappingContextTest.java","listOfInitialEntities.add(new HashSet<>(Arrays.asList(SomeInterface3.class, SomeInterfaceImpl3a.class, SomeInterfaceImpl3b.class)))"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/core/mapping/Neo4jMappingContextTest.java","listOfInitialEntities.add(new HashSet<>(Arrays.asList(SomeInterface3.class, SomeInterfaceImpl3b.class, SomeInterfaceImpl3a.class)))"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/core/mapping/Neo4jMappingContextTest.java","listOfInitialEntities.add(new HashSet<>(Arrays.asList(SomeInterfaceImpl3a.class, SomeInterface3.class, SomeInterfaceImpl3b.class)))"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/core/mapping/Neo4jMappingContextTest.java","listOfInitialEntities.add(new HashSet<>(Arrays.asList(SomeInterfaceImpl3a.class, SomeInterfaceImpl3b.class, SomeInterface3.class)))"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/core/mapping/Neo4jMappingContextTest.java","listOfInitialEntities.add(new HashSet<>(Arrays.asList(SomeInterfaceImpl3b.class, SomeInterface3.class, SomeInterfaceImpl3a.class)))"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/core/mapping/Neo4jMappingContextTest.java","listOfInitialEntities.add(new HashSet<>(Arrays.asList(SomeInterfaceImpl3b.class, SomeInterfaceImpl3a.class, SomeInterface3.class)))"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/repository/query/Neo4jNestedMapEntityWriterTest.java","p.getKnownLanguages().add(knows)"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/repository/query/QueryFragmentsAndParameters.java","args.add(key)"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/repository/query/QueryFragmentsAndParameters.java","args.add(container.property(key))"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/repository/query/QueryFragmentsAndParameters.java","relationshipChain.add((RelationshipPattern) possiblePathWithRelationship.createRelationshipChain(startNode))"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/integration/reactive/ReactiveOptimisticLockingIT.java","thing1Relationships.add(thing2)"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/integration/reactive/ReactiveOptimisticLockingIT.java","thing1Relationships.add(thing3)"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/integration/reactive/ReactiveOptimisticLockingIT.java","thing1Relationships.add(thing4)"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/integration/reactive/ReactiveDynamicRelationshipsIT.java","pets.get(TypeOfPet.CATS).add(new Pet(""Delilah""))"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/integration/reactive/ReactiveDynamicRelationshipsIT.java","monsters.add(new Pet(""Godzilla""))"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/integration/reactive/ReactiveDynamicRelationshipsIT.java","monsters.add(new Pet(""King Kong""))"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/integration/reactive/ReactiveDynamicRelationshipsIT.java","fish.add(new Pet(""Nemo""))"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/integration/reactive/ReactiveDynamicRelationshipsIT.java","hobbyRelationships.add(hobbyRelationship)"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/integration/reactive/ReactiveDynamicRelationshipsIT.java","
hobbyRelationships.add(hobbyRelationship2)"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/integration/reactive/ReactiveImmutableGeneratedIdsIT.java","onboardedBy.add(person1)"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/integration/reactive/ReactiveImmutableGeneratedIdsIT.java","onboardedBy.add(person2)"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/integration/reactive/ReactiveNeo4jTemplateIT.java","things.add(new X())"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/integration/reactive/ReactiveNeo4jTemplateIT.java","things.add(new Y())"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/integration/reactive/ReactiveImmutableExternallyGeneratedIdsIT.java","onboardedBy.add(person1)"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/integration/reactive/ReactiveImmutableExternallyGeneratedIdsIT.java","onboardedBy.add(person2)"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/integration/reactive/ReactiveRepositoryIT.java","hobbies.add(rel1)"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/integration/reactive/ReactiveRepositoryIT.java","hobbies.add(rel2)"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/integration/reactive/ReactiveRepositoryIT.java","
hobby.getLikedBy().add(rel1)"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/integration/reactive/ReactiveRepositoryIT.java","hobby.getLikedBy().add(rel2)"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/integration/reactive/ReactiveImmutableAssignedIdsIT.java","onboardedBy.add(person1)"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/integration/reactive/ReactiveImmutableAssignedIdsIT.java","onboardedBy.add(person2)"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/integration/reactive/ReactiveStringlyTypeDynamicRelationshipsIT.java","pets.get(""CATS"").add(new Pet(""Delilah""))"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/integration/reactive/ReactiveStringlyTypeDynamicRelationshipsIT.java","monsters.add(new Pet(""Godzilla""))"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/integration/reactive/ReactiveStringlyTypeDynamicRelationshipsIT.java","monsters.add(new Pet(""King Kong""))"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/integration/reactive/ReactiveStringlyTypeDynamicRelationshipsIT.java","fish.add(new Pet(""Nemo""))"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/integration/reactive/ReactiveStringlyTypeDynamicRelationshipsIT.java","hobbyRelationships.add(hobbyRelationship1)"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/integration/reactive/ReactiveStringlyTypeDynamicRelationshipsIT.java","hobbyRelationships.add(hobbyRelationship2)"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/integration/shared/conversion/ListPropertyConversionIT.java","result.add(new SomeConvertableClass(
		new BigDecimal(source.get(""A_"" + i).asString()),
		new BigDecimal(source.get(""B_"" + i).asString())
))"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/mapping/DefaultNeo4jEntityConverter.java","primaryLabels.add(rootNodeDescription.getPrimaryLabel())"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/mapping/DefaultNeo4jEntityConverter.java","primaryLabels.add(nodeDescription.getPrimaryLabel())"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/mapping/DefaultNeo4jEntityConverter.java","matchingNodes.add(node)"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/mapping/DefaultNeo4jEntityConverter.java","seenMatchingNodes.add(node)"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/mapping/DefaultNeo4jEntityConverter.java",labels::add
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/mapping/DefaultNeo4jEntityConverter.java","labels.add(label)"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/mapping/DefaultNeo4jEntityConverter.java",labels::add
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/mapping/DefaultNeo4jEntityConverter.java","bucket.add(mappedObject)"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/mapping/DefaultNeo4jEntityConverter.java","value.add(mappedObject)"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/mapping/DefaultNeo4jEntityConverter.java","relationshipsAndProperties.add(relationshipProperties)"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/mapping/DefaultNeo4jEntityConverter.java","
relationshipsAndProperties.add(relationshipProperties)"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/mapping/NodeDescription.java","staticLabels.add(this.getPrimaryLabel())"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/mapping/NestedRelationshipContext.java","relationshipValues.add(oneOfThem)"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/mapping/NestedRelationshipContext.java","relationshipProperties.add(oneOfThem)"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/mapping/CypherGenerator.java","expressions.add(rootNode.getRequiredSymbolicName())"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/mapping/CypherGenerator.java","expressions.add(Functions.id(rootNode).as(Constants.NAME_OF_INTERNAL_ID))"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/mapping/CypherGenerator.java","expressions.add(Functions.elementId(rootNode).as(Constants.NAME_OF_ELEMENT_ID))"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/mapping/CypherGenerator.java","expressions.add(Functions.collect(Functions.elementId(rootNode)).as(Constants.NAME_OF_SYNTHESIZED_ROOT_NODE))"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/mapping/CypherGenerator.java","relationshipTypes.add(constantName.toString())"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/mapping/CypherGenerator.java","relationshipTypes.add(relationshipDescription.getType())"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/mapping/CypherGenerator.java","expressions.add(Functions.collect(Functions.elementId(rootNode)).as(Constants.NAME_OF_SYNTHESIZED_ROOT_NODE))"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/mapping/CypherGenerator.java","expressions.add(Functions.collect(Functions.elementId(targetNode)).as(Constants.NAME_OF_SYNTHESIZED_RELATED_NODES))"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/mapping/CypherGenerator.java","expressions.add(Functions.collect(Functions.elementId(relationship)).as(Constants.NAME_OF_SYNTHESIZED_RELATIONS))"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/mapping/CypherGenerator.java","expressions.add(Functions.elementId(rootNode).as(Constants.NAME_OF_ELEMENT_ID))"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/mapping/CypherGenerator.java","expressions.add(rootNode.property(nameOfIdProperty).as(Constants.NAME_OF_ID))"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/mapping/CypherGenerator.java","result.add(Functions.id(relationshipFragment).as(Constants.NAME_OF_INTERNAL_ID))"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/mapping/CypherGenerator.java","result.add(Functions.elementId(relationshipFragment).as(Constants.NAME_OF_ELEMENT_ID))"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/mapping/CypherGenerator.java","returnExpressions.add(Cypher.name(Constants.NAME_OF_SYNTHESIZED_ROOT_NODE))"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/mapping/CypherGenerator.java","returnExpressions.add(Cypher.name(Constants.NAME_OF_SYNTHESIZED_RELATED_NODES))"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/mapping/CypherGenerator.java","returnExpressions.add(Cypher.name(Constants.NAME_OF_SYNTHESIZED_RELATIONS))"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/mapping/CypherGenerator.java","nodePropertiesProjection.add(graphProperty.getPropertyName())"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/mapping/CypherGenerator.java","nodePropertiesProjection.add(Constants.NAME_OF_ALL_PROPERTIES)"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/mapping/CypherGenerator.java","nodePropertiesProjection.add(node.project(Cypher.asterisk()))"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/mapping/CypherGenerator.java","
nodePropertiesProjection.add(Constants.NAME_OF_LABELS)"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/mapping/CypherGenerator.java","nodePropertiesProjection.add(Functions.labels(node))"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/mapping/CypherGenerator.java","nodePropertiesProjection.add(Constants.NAME_OF_INTERNAL_ID)"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/mapping/CypherGenerator.java","nodePropertiesProjection.add(Functions.id(node))"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/mapping/CypherGenerator.java","nodePropertiesProjection.add(Constants.NAME_OF_ELEMENT_ID)"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/mapping/CypherGenerator.java","nodePropertiesProjection.add(Functions.elementId(node))"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/mapping/CypherGenerator.java","
processedRelationships.add(relationshipDescription)"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/mapping/CypherGenerator.java","projectionList.add(name)"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/mapping/CypherGenerator.java","projectionList.add(projection)"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/mapping/DefaultNeo4jPersistentEntity.java","result.add(anInterface.getSimpleName())"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/mapping/DefaultNeo4jPersistentEntity.java","result.add(nodeAnnotation.primaryLabel())"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/mapping/DefaultNeo4jPersistentEntity.java","
parentLabels.add(parentNodeDescriptionCalculated.getPrimaryLabel())"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/mapping/DefaultNeo4jPersistentEntity.java","relationships.add((RelationshipDescription) association)"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/mapping/DefaultNeo4jPersistentEntity.java","computedGraphProperties::add"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/mapping/DefaultNeo4jPersistentEntity.java","childNodes.add(grantChildNodeDescription)"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/mapping/Neo4jMappingContext.java","relationshipRows.add(propMap)"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/mapping/NodeDescriptionStore.java","matchingLabels.add(staticLabel)"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/NamedParameters.java","newEntityList.add(newEntity)"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/NamedParameters.java","newEntityList.add(entity)"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/ReactiveNeo4jTemplate.java","entities.add(instance)"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/ReactiveNeo4jTemplate.java","knownRelationshipsIds.add(id)"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/ReactiveNeo4jTemplate.java","
relationshipDeleteMonos.add(
		neo4jClient.query(renderer.render(relationshipRemoveQuery))
				.bind(convertIdValues(sourceEntity.getIdProperty(), fromId)) //
					.to(Constants.FROM_ID_PARAMETER_NAME) //
				.bind(knownRelationshipsIds) //
					.to(Constants.NAME_OF_KNOWN_RELATIONSHIPS_PARAM) //
				.run().checkpoint(""delete relationships"").then())"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/ReactiveNeo4jTemplate.java","rows.add(properties)"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/ReactiveNeo4jTemplate.java","relationshipCreationCreations.add(relationshipCreation)"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/convert/CypherTypes.java","hlp.add(ConverterBuilder.reading(Value.class, Void.class, v -> null).andWriting(v -> Values.NULL))"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/convert/CypherTypes.java","hlp.add(ConverterBuilder.reading(Value.class, void.class, v -> null).andWriting(v -> Values.NULL))"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/convert/CypherTypes.java","hlp.add(ConverterBuilder.reading(Value.class, Boolean.class, Value::asBoolean).andWriting(Values::value))"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/convert/CypherTypes.java","hlp.add(ConverterBuilder.reading(Value.class, boolean.class, Value::asBoolean).andWriting(Values::value))"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/convert/CypherTypes.java","hlp.add(ConverterBuilder.reading(Value.class, Long.class, Value::asLong).andWriting(Values::value))"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/convert/CypherTypes.java","hlp.add(ConverterBuilder.reading(Value.class, long.class, Value::asLong).andWriting(Values::value))"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/convert/CypherTypes.java","hlp.add(ConverterBuilder.reading(Value.class, Double.class, Value::asDouble).andWriting(Values::value))"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/convert/CypherTypes.java","hlp.add(ConverterBuilder.reading(Value.class, double.class, Value::asDouble).andWriting(Values::value))"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/convert/CypherTypes.java","hlp.add(ConverterBuilder.reading(Value.class, String.class, Value::asString).andWriting(Values::value))"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/convert/CypherTypes.java","hlp.add(ConverterBuilder.reading(Value.class, byte[].class, Value::asByteArray).andWriting(Values::value))"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/convert/CypherTypes.java","hlp.add(ConverterBuilder.reading(Value.class, LocalDate.class, Value::asLocalDate).andWriting(Values::value))"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/convert/CypherTypes.java","hlp.add(ConverterBuilder.reading(Value.class, OffsetTime.class, Value::asOffsetTime).andWriting(Values::value))"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/convert/CypherTypes.java","hlp.add(ConverterBuilder.reading(Value.class, OffsetDateTime.class, Value::asOffsetDateTime).andWriting(Values::value))"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/convert/CypherTypes.java","hlp.add(ConverterBuilder.reading(Value.class, LocalTime.class, Value::asLocalTime).andWriting(Values::value))"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/convert/CypherTypes.java","hlp.add(ConverterBuilder.reading(Value.class, ZonedDateTime.class, Value::asZonedDateTime).andWriting(Values::value))"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/convert/CypherTypes.java","hlp.add(ConverterBuilder.reading(Value.class, LocalDateTime.class, Value::asLocalDateTime).andWriting(Values::value))"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/convert/CypherTypes.java","hlp.add(ConverterBuilder.reading(Value.class, IsoDuration.class, Value::asIsoDuration).andWriting(Values::value))"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/convert/CypherTypes.java","hlp.add(ConverterBuilder.reading(Value.class, Point.class, Value::asPoint).andWriting(Values::value))"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/convert/AdditionalTypes.java","hlp.add(ConverterBuilder.reading(Value.class, boolean[].class, AdditionalTypes::asBooleanArray).andWriting(Values::value))"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/convert/AdditionalTypes.java","hlp.add(ConverterBuilder.reading(Value.class, Byte.class, AdditionalTypes::asByte).andWriting(AdditionalTypes::value))"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/convert/AdditionalTypes.java","hlp.add(ConverterBuilder.reading(Value.class, byte.class, AdditionalTypes::asByte).andWriting(AdditionalTypes::value))"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/convert/AdditionalTypes.java","hlp.add(ConverterBuilder.reading(Value.class, Character.class, AdditionalTypes::asCharacter).andWriting(Values::value))"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/convert/AdditionalTypes.java","hlp.add(ConverterBuilder.reading(Value.class, char.class, AdditionalTypes::asCharacter).andWriting(Values::value))"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/convert/AdditionalTypes.java","hlp.add(ConverterBuilder.reading(Value.class, char[].class, AdditionalTypes::asCharArray).andWriting(Values::value))"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/convert/AdditionalTypes.java","hlp.add(ConverterBuilder.reading(Value.class, Date.class, AdditionalTypes::asDate).andWriting(AdditionalTypes::value))"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/convert/AdditionalTypes.java","hlp.add(ConverterBuilder.reading(Value.class, double[].class, AdditionalTypes::asDoubleArray).andWriting(Values::value))"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/convert/AdditionalTypes.java","hlp.add(new EnumConverter())"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/convert/AdditionalTypes.java","hlp.add(ConverterBuilder.reading(Value.class, Float.class, AdditionalTypes::asFloat).andWriting(AdditionalTypes::value))"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/convert/AdditionalTypes.java","hlp.add(ConverterBuilder.reading(Value.class, float.class, AdditionalTypes::asFloat).andWriting(AdditionalTypes::value))"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/convert/AdditionalTypes.java","hlp.add(ConverterBuilder.reading(Value.class, float[].class, AdditionalTypes::asFloatArray).andWriting(AdditionalTypes::value))"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/convert/AdditionalTypes.java","hlp.add(ConverterBuilder.reading(Value.class, Integer.class, Value::asInt).andWriting(Values::value))"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/convert/AdditionalTypes.java","hlp.add(ConverterBuilder.reading(Value.class, int.class, Value::asInt).andWriting(Values::value))"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/convert/AdditionalTypes.java","hlp.add(ConverterBuilder.reading(Value.class, int[].class, AdditionalTypes::asIntArray).andWriting(Values::value))"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/convert/AdditionalTypes.java","hlp.add(ConverterBuilder.reading(Value.class, Locale.class, AdditionalTypes::asLocale).andWriting(AdditionalTypes::value))"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/convert/AdditionalTypes.java","hlp.add(ConverterBuilder.reading(Value.class, long[].class, AdditionalTypes::asLongArray).andWriting(Values::value))"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/convert/AdditionalTypes.java","hlp.add(ConverterBuilder.reading(Value.class, Short.class, AdditionalTypes::asShort).andWriting(AdditionalTypes::value))"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/convert/AdditionalTypes.java","hlp.add(ConverterBuilder.reading(Value.class, short.class, AdditionalTypes::asShort).andWriting(AdditionalTypes::value))"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/convert/AdditionalTypes.java","hlp.add(ConverterBuilder.reading(Value.class, short[].class, AdditionalTypes::asShortArray).andWriting(AdditionalTypes::value))"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/convert/AdditionalTypes.java","hlp.add(ConverterBuilder.reading(Value.class, String[].class, AdditionalTypes::asStringArray).andWriting(Values::value))"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/convert/AdditionalTypes.java","hlp.add(ConverterBuilder.reading(Value.class, BigDecimal.class, AdditionalTypes::asBigDecimal).andWriting(AdditionalTypes::value))"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/convert/AdditionalTypes.java","hlp.add(ConverterBuilder.reading(Value.class, BigInteger.class, AdditionalTypes::asBigInteger).andWriting(AdditionalTypes::value))"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/convert/AdditionalTypes.java","hlp.add(new TemporalAmountConverter())"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/convert/AdditionalTypes.java","hlp.add(ConverterBuilder.reading(Value.class, Instant.class, AdditionalTypes::asInstant).andWriting(AdditionalTypes::value))"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/convert/AdditionalTypes.java","hlp.add(ConverterBuilder.reading(Value.class, UUID.class, AdditionalTypes::asUUID).andWriting(AdditionalTypes::value))"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/convert/AdditionalTypes.java","hlp.add(ConverterBuilder.reading(Value.class, URL.class, AdditionalTypes::asURL).andWriting(AdditionalTypes::value))"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/convert/AdditionalTypes.java","hlp.add(ConverterBuilder.reading(Value.class, URI.class, AdditionalTypes::asURI).andWriting(AdditionalTypes::value))"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/convert/AdditionalTypes.java","hlp.add(ConverterBuilder.reading(Value.class, TimeZone.class, AdditionalTypes::asTimeZone).andWriting(AdditionalTypes::value))"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/convert/AdditionalTypes.java","hlp.add(ConverterBuilder.reading(Value.class, ZoneId.class, AdditionalTypes::asZoneId).andWriting(AdditionalTypes::value))"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/convert/AdditionalTypes.java","hlp.add(ConverterBuilder.reading(Value.class, Entity.class, Value::asEntity))"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/convert/AdditionalTypes.java","hlp.add(ConverterBuilder.reading(Value.class, Node.class, Value::asNode))"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/convert/AdditionalTypes.java","hlp.add(ConverterBuilder.reading(Value.class, Relationship.class, Value::asRelationship))"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/convert/AdditionalTypes.java","hlp.add(ConverterBuilder.reading(Value.class, Map.class, Value::asMap).andWriting(AdditionalTypes::value))"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/convert/SpatialTypes.java","hlp.add(ConverterBuilder.reading(Value.class, Point.class, SpatialTypes::asSpringDataPoint).andWriting(SpatialTypes::value))"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/convert/SpatialTypes.java","hlp.add(ConverterBuilder.reading(Value.class, Point[].class, SpatialTypes::asPointArray).andWriting(SpatialTypes::value))"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/convert/SpatialTypes.java","
hlp.add(ConverterBuilder.reading(Value.class, Neo4jPoint.class, SpatialTypes::asNeo4jPoint).andWriting(SpatialTypes::value))"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/Neo4jTemplate.java","entities.add(instance)"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/Neo4jTemplate.java","knownRelationshipsIds.add(id)"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/Neo4jTemplate.java","newRelationshipPropertiesRows.add(properties)"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/Neo4jTemplate.java","newRelatedValuesToStore.add(relatedValueToStore)"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/Neo4jTemplate.java","
relationshipPropertiesRows.add(properties)"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/Neo4jTemplate.java","// non-dynamic relationship or relationship with properties
plainRelationshipRows.add(properties)"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/core/Neo4jTemplate.java","results.add(convertedBack)"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/repository/query/QueryFragments.java","this.matchOn.add(match)"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/repository/query/Neo4jNestedMapEntityWriter.java","labels.add(entity.getPrimaryLabel())"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/repository/query/CypherQueryCreator.java","relationshipChain.add((RelationshipPattern) possiblePathWithRelationship.createRelationshipChain(startNode))"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/repository/query/CypherQueryCreator.java","
// Also, we cannot filter, but need to sort in the end.
this.sortItems.add(distanceFunction.ascending())"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/repository/query/CypherQueryCreator.java","boundedParameters.add(boundedParameter)"
github.com,"spring-projects/spring-data-neo4j",main,"src/main/java/org/springframework/data/neo4j/repository/query/CypherQueryCreator.java","boundedParameters.add(boundedParameter)"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/integration/versioned_self_references/VersionedExternalIdListBased.java","this.relatedObjects.add(object)"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/integration/versioned_self_references/VersionedExternalIdListBased.java","object.relatedObjects.add(this)"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/integration/versioned_self_references/VersionedInternalIdListBased.java","this.relatedObjects.add(object)"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/integration/versioned_self_references/VersionedInternalIdListBased.java","object.relatedObjects.add(this)"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/integration/conversion_imperative/compose_as_ids/CompositeIdsIT.java","ids.add(id)"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/integration/issues/TestBase.java","app1.getWorkflows().add(wf1)"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/integration/issues/TestBase.java","app2.getWorkflows().add(wf2)"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/integration/issues/gh2639/Company.java","employees.add(person)"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/integration/issues/IssuesIT.java","languageRelationships.add(javaRelationship)"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/integration/issues/IssuesIT.java","languageRelationships.add(perlRelationship)"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/integration/issues/IssuesIT.java","entity.others.add(entity)"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/integration/issues/IssuesIT.java","thirdLevelEntityRelationships.add(thirdLevelRelationship)"
github.com,"spring-projects/spring-data-neo4j",main,"src/test/java/org/springframework/data/neo4j/integration/issues/IssuesIT.java","secondLevelEntityRelationships.add(secondLevelRelationship)"
github.com,"spring-projects/spring-restdocs",main,"spring-restdocs-restassured/src/main/java/org/springframework/restdocs/restassured/RestAssuredResponseConverter.java","cookies.add(new ResponseCookie(cookie.getKey(), cookie.getValue()))"
github.com,"spring-projects/spring-restdocs",main,"spring-restdocs-restassured/src/main/java/org/springframework/restdocs/restassured/RestAssuredRequestConverter.java","parts.add(new OperationRequestPartFactory().create(multiPartSpec.getControlName(),
		multiPartSpec.getFileName(), convertContent(multiPartSpec.getContent()), headers))"
github.com,"spring-projects/spring-restdocs",main,"spring-restdocs-mockmvc/src/main/java/org/springframework/restdocs/mockmvc/MockMvcRequestConverter.java","cookies.add(new RequestCookie(servletCookie.getName(), servletCookie.getValue()))"
github.com,"spring-projects/spring-restdocs",main,"spring-restdocs-mockmvc/src/main/java/org/springframework/restdocs/mockmvc/MockMvcRequestConverter.java","parts.add(createOperationRequestPart(part))"
github.com,"spring-projects/spring-restdocs",main,"spring-restdocs-mockmvc/src/main/java/org/springframework/restdocs/mockmvc/MockMvcRequestConverter.java","parts.add(createOperationRequestPart(file))"
github.com,"spring-projects/spring-restdocs",main,"spring-restdocs-mockmvc/src/main/java/org/springframework/restdocs/mockmvc/MockMvcRequestConverter.java","values.add("""")"
github.com,"spring-projects/spring-restdocs",main,"spring-restdocs-mockmvc/src/main/java/org/springframework/restdocs/mockmvc/MockMvcResponseConverter.java","cookies.add(new ResponseCookie(cookie.getName(), cookie.getValue()))"
github.com,"spring-projects/spring-restdocs",main,"spring-restdocs-core/src/test/java/org/springframework/restdocs/payload/JsonFieldProcessorTests.java","payload.add(bravo)"
github.com,"spring-projects/spring-restdocs",main,"spring-restdocs-core/src/test/java/org/springframework/restdocs/payload/JsonFieldProcessorTests.java","payload.add(bravo)"
github.com,"spring-projects/spring-restdocs",main,"spring-restdocs-core/src/testFixtures/java/org/springframework/restdocs/testfixtures/OperationBuilder.java","parts.add(builder.buildPart())"
github.com,"spring-projects/spring-restdocs",main,"spring-restdocs-core/src/testFixtures/java/org/springframework/restdocs/testfixtures/OperationBuilder.java","this.partBuilders.add(partBuilder)"
github.com,"spring-projects/spring-restdocs",main,"spring-restdocs-core/src/testFixtures/java/org/springframework/restdocs/testfixtures/OutputCapture.java","this.capturedStrings.add(new CapturedString(Type.OUT, string))"
github.com,"spring-projects/spring-restdocs",main,"spring-restdocs-core/src/testFixtures/java/org/springframework/restdocs/testfixtures/OutputCapture.java","this.capturedStrings.add(new CapturedString(Type.ERR, string))"
github.com,"spring-projects/spring-restdocs",main,"spring-restdocs-core/src/testFixtures/java/org/springframework/restdocs/testfixtures/SnippetConditions.java","this.lines.add(line)"
github.com,"spring-projects/spring-restdocs",main,"spring-restdocs-core/src/testFixtures/java/org/springframework/restdocs/testfixtures/SnippetConditions.java","this.lines.add(determineIndex(index), line)"
github.com,"spring-projects/spring-restdocs",main,"spring-restdocs-core/src/testFixtures/java/org/springframework/restdocs/testfixtures/SnippetConditions.java","components.add(dashes.toString())"
github.com,"spring-projects/spring-restdocs",main,"spring-restdocs-core/src/main/java/org/springframework/restdocs/cookies/AbstractCookiesSnippet.java","cookies.add(createModelForDescriptor(descriptor))"
github.com,"spring-projects/spring-restdocs",main,"spring-restdocs-core/src/main/java/org/springframework/restdocs/payload/PayloadDocumentation.java","prefixedDescriptors.add(prefixedDescriptor)"
github.com,"spring-projects/spring-restdocs",main,"spring-restdocs-core/src/main/java/org/springframework/restdocs/payload/PayloadDocumentation.java","attributes.add(Attributes.key(attribute.getKey()).value(attribute.getValue()))"
github.com,"spring-projects/spring-restdocs",main,"spring-restdocs-core/src/main/java/org/springframework/restdocs/payload/AbstractFieldsSnippet.java","descriptorsToDocument.add(copyWithType(descriptor, type))"
github.com,"spring-projects/spring-restdocs",main,"spring-restdocs-core/src/main/java/org/springframework/restdocs/payload/AbstractFieldsSnippet.java","fields.add(createModelForDescriptor(descriptor))"
github.com,"spring-projects/spring-restdocs",main,"spring-restdocs-core/src/main/java/org/springframework/restdocs/payload/AbstractFieldsSnippet.java","paths.add(fieldDescriptor.getPath())"
github.com,"spring-projects/spring-restdocs",main,"spring-restdocs-core/src/main/java/org/springframework/restdocs/payload/AbstractFieldsSnippet.java","attributes.add(Attributes.key(attribute.getKey()).value(attribute.getValue()))"
github.com,"spring-projects/spring-restdocs",main,"spring-restdocs-core/src/main/java/org/springframework/restdocs/payload/JsonFieldProcessor.java","values.add(match.getValue())"
github.com,"spring-projects/spring-restdocs",main,"spring-restdocs-core/src/main/java/org/springframework/restdocs/payload/JsonFieldProcessor.java","values.add(ExtractedField.ABSENT)"
github.com,"spring-projects/spring-restdocs",main,"spring-restdocs-core/src/main/java/org/springframework/restdocs/payload/JsonFieldProcessor.java","values.add(ExtractedField.ABSENT)"
github.com,"spring-projects/spring-restdocs",main,"spring-restdocs-core/src/main/java/org/springframework/restdocs/payload/XmlContentHandler.java","missingFields.add(fieldDescriptor)"
github.com,"spring-projects/spring-restdocs",main,"spring-restdocs-core/src/main/java/org/springframework/restdocs/payload/XmlContentHandler.java","matchedButNotRemoved.add(node)"
github.com,"spring-projects/spring-restdocs",main,"spring-restdocs-core/src/main/java/org/springframework/restdocs/payload/JsonContentHandler.java","missingFields.add(fieldDescriptor)"
github.com,"spring-projects/spring-restdocs",main,"spring-restdocs-core/src/main/java/org/springframework/restdocs/payload/JsonFieldPath.java","segments.add(matcher.group(1))"
github.com,"spring-projects/spring-restdocs",main,"spring-restdocs-core/src/main/java/org/springframework/restdocs/payload/JsonFieldPath.java","segments.add(matcher.group())"
github.com,"spring-projects/spring-restdocs",main,"spring-restdocs-core/src/main/java/org/springframework/restdocs/payload/JsonFieldPath.java","segments.add(segment)"
github.com,"spring-projects/spring-restdocs",main,"spring-restdocs-core/src/main/java/org/springframework/restdocs/headers/AbstractHeadersSnippet.java","headers.add(createModelForDescriptor(descriptor))"
github.com,"spring-projects/spring-restdocs",main,"spring-restdocs-core/src/main/java/org/springframework/restdocs/headers/AbstractHeadersSnippet.java","names.add(headerDescriptor.getName())"
github.com,"spring-projects/spring-restdocs",main,"spring-restdocs-core/src/main/java/org/springframework/restdocs/headers/AbstractHeadersSnippet.java","missingHeaders.add(headerDescriptor)"
github.com,"spring-projects/spring-restdocs",main,"spring-restdocs-core/src/main/java/org/springframework/restdocs/hypermedia/HalLinkExtractor.java","links.add(possibleLink)"
github.com,"spring-projects/spring-restdocs",main,"spring-restdocs-core/src/main/java/org/springframework/restdocs/hypermedia/LinksSnippet.java","model.add(createModelForDescriptor(descriptor))"
github.com,"spring-projects/spring-restdocs",main,"spring-restdocs-core/src/main/java/org/springframework/restdocs/operation/QueryParameters.java","values.add("""")"
github.com,"spring-projects/spring-restdocs",main,"spring-restdocs-core/src/main/java/org/springframework/restdocs/operation/preprocess/HeadersModifyingOperationPreprocessor.java","this.modifications.add(new AddHeaderModification(name, value))"
github.com,"spring-projects/spring-restdocs",main,"spring-restdocs-core/src/main/java/org/springframework/restdocs/operation/preprocess/HeadersModifyingOperationPreprocessor.java","this.modifications.add(new SetHeaderModification(name, Arrays.asList(values)))"
github.com,"spring-projects/spring-restdocs",main,"spring-restdocs-core/src/main/java/org/springframework/restdocs/operation/preprocess/HeadersModifyingOperationPreprocessor.java","this.modifications.add(new RemoveHeaderModification(name))"
github.com,"spring-projects/spring-restdocs",main,"spring-restdocs-core/src/main/java/org/springframework/restdocs/operation/preprocess/HeadersModifyingOperationPreprocessor.java","this.modifications.add(new RemoveValueHeaderModification(name, value))"
github.com,"spring-projects/spring-restdocs",main,"spring-restdocs-core/src/main/java/org/springframework/restdocs/operation/preprocess/HeadersModifyingOperationPreprocessor.java","this.modifications.add(new RemoveHeadersByNamePatternModification(Pattern.compile(namePattern)))"
github.com,"spring-projects/spring-restdocs",main,"spring-restdocs-core/src/main/java/org/springframework/restdocs/operation/preprocess/UriModifyingOperationPreprocessor.java","modifiedParts.add(factory.create(part.getName(), part.getSubmittedFileName(),
		this.contentModifier.modifyContent(part.getContent(), part.getHeaders().getContentType()),
		modify(part.getHeaders())))"
github.com,"spring-projects/spring-restdocs",main,"spring-restdocs-core/src/main/java/org/springframework/restdocs/operation/FormParameters.java","values.add("""")"
github.com,"spring-projects/spring-restdocs",main,"spring-restdocs-core/src/main/java/org/springframework/restdocs/constraints/ConstraintDescriptions.java","descriptions.add(this.descriptionResolver.resolveDescription(constraint))"
github.com,"spring-projects/spring-restdocs",main,"spring-restdocs-core/src/main/java/org/springframework/restdocs/constraints/ValidatorConstraintResolver.java","constraints.add(new Constraint(constraintDescriptor.getAnnotation().annotationType().getName(),
		constraintDescriptor.getAttributes()))"
github.com,"spring-projects/spring-restdocs",main,"spring-restdocs-core/src/main/java/org/springframework/restdocs/request/AbstractParametersSnippet.java","parameters.add(createModelForDescriptor(descriptor))"
github.com,"spring-projects/spring-restdocs",main,"spring-restdocs-core/src/main/java/org/springframework/restdocs/request/RequestPartsSnippet.java","requestParts.add(createModelForDescriptor(descriptor))"
github.com,"spring-projects/spring-restdocs",main,"spring-restdocs-core/src/main/java/org/springframework/restdocs/cli/HttpieRequestSnippet.java","lines.add(String.format(""'%s=%s'"", key, value))"
github.com,"spring-projects/spring-restdocs",main,"spring-restdocs-core/src/main/java/org/springframework/restdocs/cli/HttpieRequestSnippet.java","
lines.add(oneLine.toString())"
github.com,"spring-projects/spring-restdocs",main,"spring-restdocs-core/src/main/java/org/springframework/restdocs/cli/HttpieRequestSnippet.java","lines.add(String.format(""'%s:%s'"", entry.getKey(), header))"
github.com,"spring-projects/spring-restdocs",main,"spring-restdocs-core/src/main/java/org/springframework/restdocs/cli/HttpieRequestSnippet.java","lines.add(String.format(""'Cookie:%s=%s'"", cookie.getName(), cookie.getValue()))"
github.com,"spring-projects/spring-restdocs",main,"spring-restdocs-core/src/main/java/org/springframework/restdocs/cli/CurlRequestSnippet.java","lines.add(String.format(""--cookie '%s'"", cookiesBuilder.toString()))"
github.com,"spring-projects/spring-restdocs",main,"spring-restdocs-core/src/main/java/org/springframework/restdocs/cli/CurlRequestSnippet.java","lines.add(String.format(""-H '%s: %s'"", entry.getKey(), header))"
github.com,"spring-projects/spring-restdocs",main,"spring-restdocs-core/src/main/java/org/springframework/restdocs/cli/CurlRequestSnippet.java","lines.add(oneLine.toString())"
github.com,"spring-projects/spring-restdocs",main,"spring-restdocs-core/src/main/java/org/springframework/restdocs/cli/CurlRequestSnippet.java","lines.add(String.format(""-d '%s'"", content))"
github.com,"spring-projects/spring-restdocs",main,"spring-restdocs-core/src/main/java/org/springframework/restdocs/http/HttpResponseSnippet.java","headers.add(header(header.getKey(), value))"
github.com,"spring-projects/spring-restdocs",main,"spring-restdocs-core/src/main/java/org/springframework/restdocs/http/HttpRequestSnippet.java","headers.add(header(header.getKey(), String.format(""%s; boundary=%s"", value, MULTIPART_BOUNDARY)))"
github.com,"spring-projects/spring-restdocs",main,"spring-restdocs-core/src/main/java/org/springframework/restdocs/http/HttpRequestSnippet.java","headers.add(header(header.getKey(), value))"
github.com,"spring-projects/spring-restdocs",main,"spring-restdocs-core/src/main/java/org/springframework/restdocs/http/HttpRequestSnippet.java","headers.add(header(HttpHeaders.COOKIE, String.format(""%s=%s"", cookie.getName(), cookie.getValue())))"
github.com,"spring-projects/spring-restdocs",main,"spring-restdocs-core/src/main/java/org/springframework/restdocs/http/HttpRequestSnippet.java","headers.add(header(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_FORM_URLENCODED_VALUE))"
github.com,"spring-projects/spring-restdocs",main,"spring-restdocs-core/src/main/java/org/springframework/restdocs/generate/RestDocumentationGenerator.java","preprocessors.add(preprocessor)"
github.com,"spring-projects/spring-restdocs",main,"spring-restdocs-core/src/main/java/org/springframework/restdocs/generate/RestDocumentationGenerator.java","preprocessors.add(defaultResponsePreprocessor)"
github.com,"spring-projects/spring-restdocs",main,"spring-restdocs-asciidoctor/src/test/java/org/springframework/restdocs/asciidoctor/CapturingLogHandler.java","logRecords.add(logRecord)"
github.com,"spring-projects/spring-restdocs",main,"spring-restdocs-asciidoctor/src/test/java/org/springframework/restdocs/asciidoctor/AbstractOperationBlockMacroTests.java","this.strings.add((((COSString) operand).getASCII()))"
github.com,"spring-cloud/spring-cloud-deployer-local",main,"spring-cloud-deployer-local/src/main/java/org/springframework/cloud/deployer/spi/local/JavaCommandBuilder.java","commands.add(bindDeploymentProperties(deploymentProperties).getJavaCmd())"
github.com,"spring-cloud/spring-cloud-deployer-local",main,"spring-cloud-deployer-local/src/main/java/org/springframework/cloud/deployer/spi/local/JavaCommandBuilder.java","commands.add(getJdwpOptions(debugAddress.getSuspend(), debugAddress.getAddress()))"
github.com,"spring-cloud/spring-cloud-deployer-local",main,"spring-cloud-deployer-local/src/main/java/org/springframework/cloud/deployer/spi/local/JavaCommandBuilder.java","commands.add(memory)"
github.com,"spring-cloud/spring-cloud-deployer-local",main,"spring-cloud-deployer-local/src/main/java/org/springframework/cloud/deployer/spi/local/JavaCommandBuilder.java","commands.add(memory)"
github.com,"spring-cloud/spring-cloud-deployer-local",main,"spring-cloud-deployer-local/src/main/java/org/springframework/cloud/deployer/spi/local/JavaCommandBuilder.java","commands.add(""-jar"")"
github.com,"spring-cloud/spring-cloud-deployer-local",main,"spring-cloud-deployer-local/src/main/java/org/springframework/cloud/deployer/spi/local/JavaCommandBuilder.java","commands.add(resource.getFile().getAbsolutePath())"
github.com,"spring-cloud/spring-cloud-deployer-local",main,"spring-cloud-deployer-local/src/main/java/org/springframework/cloud/deployer/spi/local/DockerCommandBuilder.java","commands.add(""docker"")"
github.com,"spring-cloud/spring-cloud-deployer-local",main,"spring-cloud-deployer-local/src/main/java/org/springframework/cloud/deployer/spi/local/DockerCommandBuilder.java","commands.add(""run"")"
github.com,"spring-cloud/spring-cloud-deployer-local",main,"spring-cloud-deployer-local/src/main/java/org/springframework/cloud/deployer/spi/local/DockerCommandBuilder.java","commands.add(""--network"")"
github.com,"spring-cloud/spring-cloud-deployer-local",main,"spring-cloud-deployer-local/src/main/java/org/springframework/cloud/deployer/spi/local/DockerCommandBuilder.java","commands.add(this.dockerNetwork)"
github.com,"spring-cloud/spring-cloud-deployer-local",main,"spring-cloud-deployer-local/src/main/java/org/springframework/cloud/deployer/spi/local/DockerCommandBuilder.java","commands.add(""--rm"")"
github.com,"spring-cloud/spring-cloud-deployer-local",main,"spring-cloud-deployer-local/src/main/java/org/springframework/cloud/deployer/spi/local/DockerCommandBuilder.java","commands.add(""-e"")"
github.com,"spring-cloud/spring-cloud-deployer-local",main,"spring-cloud-deployer-local/src/main/java/org/springframework/cloud/deployer/spi/local/DockerCommandBuilder.java","commands.add(String.format(""%s=%s"", env, appInstanceEnv.get(env)))"
github.com,"spring-cloud/spring-cloud-deployer-local",main,"spring-cloud-deployer-local/src/main/java/org/springframework/cloud/deployer/spi/local/DockerCommandBuilder.java","
commands.add(""-e"")"
github.com,"spring-cloud/spring-cloud-deployer-local",main,"spring-cloud-deployer-local/src/main/java/org/springframework/cloud/deployer/spi/local/DockerCommandBuilder.java","commands.add(""JAVA_TOOL_OPTIONS="" + debugCommand)"
github.com,"spring-cloud/spring-cloud-deployer-local",main,"spring-cloud-deployer-local/src/main/java/org/springframework/cloud/deployer/spi/local/DockerCommandBuilder.java","commands.add(""-p"")"
github.com,"spring-cloud/spring-cloud-deployer-local",main,"spring-cloud-deployer-local/src/main/java/org/springframework/cloud/deployer/spi/local/DockerCommandBuilder.java","commands.add(String.format(""%s:%s"", debugAddress.getPort(), debugAddress.getPort()))"
github.com,"spring-cloud/spring-cloud-deployer-local",main,"spring-cloud-deployer-local/src/main/java/org/springframework/cloud/deployer/spi/local/DockerCommandBuilder.java","commands.add(""-p"")"
github.com,"spring-cloud/spring-cloud-deployer-local",main,"spring-cloud-deployer-local/src/main/java/org/springframework/cloud/deployer/spi/local/DockerCommandBuilder.java","commands.add(String.format(""%s:%s"", port, port))"
github.com,"spring-cloud/spring-cloud-deployer-local",main,"spring-cloud-deployer-local/src/main/java/org/springframework/cloud/deployer/spi/local/DockerCommandBuilder.java","commands.add(String.format(""--name=%s-%d"", request.getDeploymentProperties().get(DOCKER_CONTAINER_NAME_KEY), appInstanceNumber.get()))"
github.com,"spring-cloud/spring-cloud-deployer-local",main,"spring-cloud-deployer-local/src/main/java/org/springframework/cloud/deployer/spi/local/DockerCommandBuilder.java","commands.add(String.format(""--name=%s"", request.getDeploymentProperties().get(DOCKER_CONTAINER_NAME_KEY)))"
github.com,"spring-cloud/spring-cloud-deployer-local",main,"spring-cloud-deployer-local/src/main/java/org/springframework/cloud/deployer/spi/local/DockerCommandBuilder.java","commands.add(String.format(""--name=%s-%d"", deploymentId, index))"
github.com,"spring-cloud/spring-cloud-deployer-local",main,"spring-cloud-deployer-local/src/main/java/org/springframework/cloud/deployer/spi/local/DockerCommandBuilder.java","commands.add(dockerImageURI.substring(""docker:"".length()))"
github.com,"spring-cloud/spring-cloud-deployer-local",main,"spring-cloud-deployer-local/src/main/java/org/springframework/cloud/deployer/spi/local/DockerCommandBuilder.java","commands.add(""-v"")"
github.com,"spring-cloud/spring-cloud-deployer-local",main,"spring-cloud-deployer-local/src/main/java/org/springframework/cloud/deployer/spi/local/DockerCommandBuilder.java","commands.add(v)"
github.com,"spring-cloud/spring-cloud-deployer-local",main,"spring-cloud-deployer-local/src/main/java/org/springframework/cloud/deployer/spi/local/DockerCommandBuilder.java","commands.add(""-p"")"
github.com,"spring-cloud/spring-cloud-deployer-local",main,"spring-cloud-deployer-local/src/main/java/org/springframework/cloud/deployer/spi/local/DockerCommandBuilder.java","commands.add(p)"
github.com,"spring-cloud/spring-cloud-deployer-local",main,"spring-cloud-deployer-local/src/main/java/org/springframework/cloud/deployer/spi/local/LocalAppDeployer.java","processes.add(deployApp(request, workDir, group, deploymentId, index, request.getDeploymentProperties()))"
github.com,"spring-cloud/spring-cloud-deployer-local",main,"spring-cloud-deployer-local/src/main/java/org/springframework/cloud/deployer/spi/local/LocalAppDeployer.java","instances.add(deployApp(request, workDir, group, deploymentId, index, request.getDeploymentProperties()))"
github.com,"spring-cloud/spring-cloud-deployer-local",main,"spring-cloud-deployer-local/src/main/java/org/springframework/cloud/deployer/spi/local/LocalAppDeployer.java","processes.add(instances.remove(index))"
github.com,"spring-cloud/spring-cloud-deployer-local",main,"spring-cloud-deployer-local/src/main/java/org/springframework/cloud/deployer/spi/local/LocalTaskLauncher.java","oldTaskInstanceIds.add(taskLaunchId)"
github.com,"spring-cloud/spring-cloud-deployer-local",main,"spring-cloud-deployer-local/src/test/java/org/springframework/cloud/deployer/spi/local/LocalAppDeployerIntegrationTests.java","beforeDirs.add(customWorkDirRoot)"
github.com,"spring-cloud/spring-cloud-deployer-local",main,"spring-cloud-deployer-local/src/test/java/org/springframework/cloud/deployer/spi/local/LocalDeployerSupportTests.java","
// test adding to command line args, which has higher precedence than application properties
commandLineArgs.add(LocalTaskLauncher.SERVER_PORT_KEY_COMMAND_LINE_ARG  + 9191)"
github.com,"spring-cloud/spring-cloud-deployer-local",main,"spring-cloud-deployer-local/src/test/java/org/springframework/cloud/deployer/spi/local/LocalTaskLauncherIntegrationTests.java","beforeDirs.add(customWorkDirRoot)"
github.com,"spring-cloud/spring-cloud-deployer-local",main,"spring-cloud-deployer-local/src/test/java/org/springframework/cloud/deployer/spi/local/LocalTaskLauncherIntegrationTests.java","// Test to ensure no issues parsing server.port command line arg.
commandLineArgs.add(LocalTaskLauncher.SERVER_PORT_KEY_COMMAND_LINE_ARG + DeployerSocketUtils.findAvailableTcpPort(LocalTaskLauncher.DEFAULT_SERVER_PORT))"
github.com,"spring-projects/spring-data-couchbase",main,"src/main/java/org/springframework/data/couchbase/core/mapping/CouchbaseList.java","
payload.add(value)"
github.com,"spring-projects/spring-data-couchbase",main,"src/main/java/org/springframework/data/couchbase/core/mapping/CouchbaseList.java","toExport.add(elem, ((CouchbaseDocument) entry).export())"
github.com,"spring-projects/spring-data-couchbase",main,"src/main/java/org/springframework/data/couchbase/core/mapping/CouchbaseList.java","toExport.add(elem, ((CouchbaseList) entry).export())"
github.com,"spring-projects/spring-data-couchbase",main,"src/main/java/org/springframework/data/couchbase/core/convert/DateConverters.java","converters.add(DateToStringConverter.INSTANCE)"
github.com,"spring-projects/spring-data-couchbase",main,"src/main/java/org/springframework/data/couchbase/core/convert/DateConverters.java","converters.add(DateToLongConverter.INSTANCE)"
github.com,"spring-projects/spring-data-couchbase",main,"src/main/java/org/springframework/data/couchbase/core/convert/DateConverters.java","
converters.add(SerializedObjectToDateConverter.INSTANCE)"
github.com,"spring-projects/spring-data-couchbase",main,"src/main/java/org/springframework/data/couchbase/core/convert/DateConverters.java","
converters.add(CalendarToLongConverter.INSTANCE)"
github.com,"spring-projects/spring-data-couchbase",main,"src/main/java/org/springframework/data/couchbase/core/convert/DateConverters.java","converters.add(NumberToCalendarConverter.INSTANCE)"
github.com,"spring-projects/spring-data-couchbase",main,"src/main/java/org/springframework/data/couchbase/core/convert/DateConverters.java","converters.add(LocalDateToLongConverter.INSTANCE)"
github.com,"spring-projects/spring-data-couchbase",main,"src/main/java/org/springframework/data/couchbase/core/convert/DateConverters.java","converters.add(LocalDateTimeToLongConverter.INSTANCE)"
github.com,"spring-projects/spring-data-couchbase",main,"src/main/java/org/springframework/data/couchbase/core/convert/DateConverters.java","converters.add(DateTimeToLongConverter.INSTANCE)"
github.com,"spring-projects/spring-data-couchbase",main,"src/main/java/org/springframework/data/couchbase/core/convert/DateConverters.java","converters.add(NumberToLocalDateConverter.INSTANCE)"
github.com,"spring-projects/spring-data-couchbase",main,"src/main/java/org/springframework/data/couchbase/core/convert/DateConverters.java","converters.add(NumberToLocalDateTimeConverter.INSTANCE)"
github.com,"spring-projects/spring-data-couchbase",main,"src/main/java/org/springframework/data/couchbase/core/convert/DateConverters.java","converters.add(NumberToDateTimeConverter.INSTANCE)"
github.com,"spring-projects/spring-data-couchbase",main,"src/main/java/org/springframework/data/couchbase/core/convert/CouchbaseJsr310Converters.java","converters.add(NumberToLocalDateTimeConverter.INSTANCE)"
github.com,"spring-projects/spring-data-couchbase",main,"src/main/java/org/springframework/data/couchbase/core/convert/CouchbaseJsr310Converters.java","converters.add(LocalDateTimeToLongConverter.INSTANCE)"
github.com,"spring-projects/spring-data-couchbase",main,"src/main/java/org/springframework/data/couchbase/core/convert/CouchbaseJsr310Converters.java","converters.add(NumberToLocalDateConverter.INSTANCE)"
github.com,"spring-projects/spring-data-couchbase",main,"src/main/java/org/springframework/data/couchbase/core/convert/CouchbaseJsr310Converters.java","converters.add(LocalDateToLongConverter.INSTANCE)"
github.com,"spring-projects/spring-data-couchbase",main,"src/main/java/org/springframework/data/couchbase/core/convert/CouchbaseJsr310Converters.java","converters.add(NumberToLocalTimeConverter.INSTANCE)"
github.com,"spring-projects/spring-data-couchbase",main,"src/main/java/org/springframework/data/couchbase/core/convert/CouchbaseJsr310Converters.java","converters.add(LocalTimeToLongConverter.INSTANCE)"
github.com,"spring-projects/spring-data-couchbase",main,"src/main/java/org/springframework/data/couchbase/core/convert/CouchbaseJsr310Converters.java","converters.add(NumberToInstantConverter.INSTANCE)"
github.com,"spring-projects/spring-data-couchbase",main,"src/main/java/org/springframework/data/couchbase/core/convert/CouchbaseJsr310Converters.java","converters.add(InstantToLongConverter.INSTANCE)"
github.com,"spring-projects/spring-data-couchbase",main,"src/main/java/org/springframework/data/couchbase/core/convert/CouchbaseJsr310Converters.java","converters.add(ZoneIdToStringConverter.INSTANCE)"
github.com,"spring-projects/spring-data-couchbase",main,"src/main/java/org/springframework/data/couchbase/core/convert/CouchbaseJsr310Converters.java","converters.add(StringToZoneIdConverter.INSTANCE)"
github.com,"spring-projects/spring-data-couchbase",main,"src/main/java/org/springframework/data/couchbase/core/convert/CouchbaseJsr310Converters.java","converters.add(DurationToStringConverter.INSTANCE)"
github.com,"spring-projects/spring-data-couchbase",main,"src/main/java/org/springframework/data/couchbase/core/convert/CouchbaseJsr310Converters.java","converters.add(StringToDurationConverter.INSTANCE)"
github.com,"spring-projects/spring-data-couchbase",main,"src/main/java/org/springframework/data/couchbase/core/convert/CouchbaseJsr310Converters.java","converters.add(PeriodToStringConverter.INSTANCE)"
github.com,"spring-projects/spring-data-couchbase",main,"src/main/java/org/springframework/data/couchbase/core/convert/CouchbaseJsr310Converters.java","converters.add(StringToPeriodConverter.INSTANCE)"
github.com,"spring-projects/spring-data-couchbase",main,"src/main/java/org/springframework/data/couchbase/core/convert/CouchbaseJsr310Converters.java","converters.add(ZonedDateTimeToLongConverter.INSTANCE)"
github.com,"spring-projects/spring-data-couchbase",main,"src/main/java/org/springframework/data/couchbase/core/convert/CouchbaseJsr310Converters.java","converters.add(NumberToZonedDateTimeConverter.INSTANCE)"
github.com,"spring-projects/spring-data-couchbase",main,"src/main/java/org/springframework/data/couchbase/core/convert/OtherConverters.java","
converters.add(UuidToString.INSTANCE)"
github.com,"spring-projects/spring-data-couchbase",main,"src/main/java/org/springframework/data/couchbase/core/convert/OtherConverters.java","converters.add(StringToUuid.INSTANCE)"
github.com,"spring-projects/spring-data-couchbase",main,"src/main/java/org/springframework/data/couchbase/core/convert/OtherConverters.java","converters.add(BigIntegerToString.INSTANCE)"
github.com,"spring-projects/spring-data-couchbase",main,"src/main/java/org/springframework/data/couchbase/core/convert/OtherConverters.java","converters.add(StringToBigInteger.INSTANCE)"
github.com,"spring-projects/spring-data-couchbase",main,"src/main/java/org/springframework/data/couchbase/core/convert/OtherConverters.java","converters.add(BigDecimalToString.INSTANCE)"
github.com,"spring-projects/spring-data-couchbase",main,"src/main/java/org/springframework/data/couchbase/core/convert/OtherConverters.java","converters.add(StringToBigDecimal.INSTANCE)"
github.com,"spring-projects/spring-data-couchbase",main,"src/main/java/org/springframework/data/couchbase/core/convert/OtherConverters.java","converters.add(ByteArrayToString.INSTANCE)"
github.com,"spring-projects/spring-data-couchbase",main,"src/main/java/org/springframework/data/couchbase/core/convert/OtherConverters.java","converters.add(StringToByteArray.INSTANCE)"
github.com,"spring-projects/spring-data-couchbase",main,"src/main/java/org/springframework/data/couchbase/core/convert/OtherConverters.java","converters.add(CharArrayToString.INSTANCE)"
github.com,"spring-projects/spring-data-couchbase",main,"src/main/java/org/springframework/data/couchbase/core/convert/OtherConverters.java","converters.add(StringToCharArray.INSTANCE)"
github.com,"spring-projects/spring-data-couchbase",main,"src/main/java/org/springframework/data/couchbase/core/convert/OtherConverters.java","converters.add(ClassToString.INSTANCE)"
github.com,"spring-projects/spring-data-couchbase",main,"src/main/java/org/springframework/data/couchbase/core/convert/OtherConverters.java","converters.add(StringToClass.INSTANCE)"
github.com,"spring-projects/spring-data-couchbase",main,"src/main/java/org/springframework/data/couchbase/core/convert/OtherConverters.java","converters.add(MapToJsonNode.INSTANCE)"
github.com,"spring-projects/spring-data-couchbase",main,"src/main/java/org/springframework/data/couchbase/core/convert/OtherConverters.java","converters.add(JsonNodeToMap.INSTANCE)"
github.com,"spring-projects/spring-data-couchbase",main,"src/main/java/org/springframework/data/couchbase/core/convert/OtherConverters.java","converters.add(JsonObjectToMap.INSTANCE)"
github.com,"spring-projects/spring-data-couchbase",main,"src/main/java/org/springframework/data/couchbase/core/convert/OtherConverters.java","converters.add(MapToJsonObject.INSTANCE)"
github.com,"spring-projects/spring-data-couchbase",main,"src/main/java/org/springframework/data/couchbase/core/convert/OtherConverters.java","converters.add(JsonArrayToCouchbaseList.INSTANCE)"
github.com,"spring-projects/spring-data-couchbase",main,"src/main/java/org/springframework/data/couchbase/core/convert/OtherConverters.java","converters.add(CouchbaseListToJsonArray.INSTANCE)"
github.com,"spring-projects/spring-data-couchbase",main,"src/main/java/org/springframework/data/couchbase/core/convert/OtherConverters.java","converters.add(YearMonthToStringConverter.INSTANCE)"
github.com,"spring-projects/spring-data-couchbase",main,"src/main/java/org/springframework/data/couchbase/core/convert/OtherConverters.java","converters.add(StringToYearMonthConverter.INSTANCE)"
github.com,"spring-projects/spring-data-couchbase",main,"src/main/java/org/springframework/data/couchbase/core/convert/CouchbaseCustomConversions.java","customConverters.add(converter)"
github.com,"spring-projects/spring-data-couchbase",main,"src/main/java/org/springframework/data/couchbase/core/convert/CouchbaseCustomConversions.java","customConverters.add(converterFactory)"
github.com,"spring-projects/spring-data-couchbase",main,"src/main/java/org/springframework/data/couchbase/core/convert/CouchbaseCustomConversions.java","converters.add(DateToUtcLocalDateConverter.INSTANCE)"
github.com,"spring-projects/spring-data-couchbase",main,"src/main/java/org/springframework/data/couchbase/core/convert/CouchbaseCustomConversions.java","converters.add(DateToUtcLocalTimeConverter.INSTANCE)"
github.com,"spring-projects/spring-data-couchbase",main,"src/main/java/org/springframework/data/couchbase/core/convert/CouchbaseCustomConversions.java","converters.add(DateToUtcLocalDateTimeConverter.INSTANCE)"
github.com,"spring-projects/spring-data-couchbase",main,"src/main/java/org/springframework/data/couchbase/core/query/QueryCriteria.java","this.criteriaChain.add(this)"
github.com,"spring-projects/spring-data-couchbase",main,"src/main/java/org/springframework/data/couchbase/core/query/QueryCriteria.java","criteriaChain.add(this)"
github.com,"spring-projects/spring-data-couchbase",main,"src/main/java/org/springframework/data/couchbase/core/query/QueryCriteria.java","this.criteriaChain.add(this)"
github.com,"spring-projects/spring-data-couchbase",main,"src/main/java/org/springframework/data/couchbase/core/query/QueryCriteria.java","criteria.criteriaChain.add(idx, qc)"
github.com,"spring-projects/spring-data-couchbase",main,"src/main/java/org/springframework/data/couchbase/core/query/QueryCriteria.java","criteria.criteriaChain.add(criteria)"
github.com,"spring-projects/spring-data-couchbase",main,"src/main/java/org/springframework/data/couchbase/core/query/QueryCriteria.java","newThis.criteriaChain.add(qc)"
github.com,"spring-projects/spring-data-couchbase",main,"src/main/java/org/springframework/data/couchbase/core/query/QueryCriteria.java","newThis.criteriaChain.add(qc)"
github.com,"spring-projects/spring-data-couchbase",main,"src/main/java/org/springframework/data/couchbase/core/query/QueryCriteria.java","this.criteriaChain.add(this)"
github.com,"spring-projects/spring-data-couchbase",main,"src/main/java/org/springframework/data/couchbase/core/query/Query.java","this.criteria.add(criteriaDefinition)"
github.com,"spring-projects/spring-data-couchbase",main,"src/main/java/org/springframework/data/couchbase/core/query/Query.java","quotes.add(new int[] { quoteMatcher.start(), quoteMatcher.end() })"
github.com,"spring-projects/spring-data-couchbase",main,"src/main/java/org/springframework/data/couchbase/core/ReactiveMutateInByIdOperationSupport.java","mutations.add(MutateInSpec.remove(path))"
github.com,"spring-projects/spring-data-couchbase",main,"src/main/java/org/springframework/data/couchbase/core/ReactiveMutateInByIdOperationSupport.java","mutations.add(MutateInSpec.upsert(path, getCouchbaseContent(document, path)).createPath())"
github.com,"spring-projects/spring-data-couchbase",main,"src/main/java/org/springframework/data/couchbase/core/ReactiveMutateInByIdOperationSupport.java","mutations.add(MutateInSpec.insert(path, getCouchbaseContent(document, path)).createPath())"
github.com,"spring-projects/spring-data-couchbase",main,"src/main/java/org/springframework/data/couchbase/core/ReactiveMutateInByIdOperationSupport.java","mutations.add(MutateInSpec.replace(path, getCouchbaseContent(document, path)))"
github.com,"spring-projects/spring-data-couchbase",main,"src/test/java/org/springframework/data/couchbase/domain/UserEncrypted.java","this.addresses.add(address)"
github.com,"spring-projects/spring-data-couchbase",main,"src/test/java/org/springframework/data/couchbase/transactions/CouchbaseTransactionalTemplateIntegrationTests.java","threads.add(t)"
github.com,"spring-projects/spring-data-couchbase",main,"src/test/java/org/springframework/data/couchbase/transactions/sdk/SDKReactiveTransactionsPersonIntegrationTests.java","docs.add(doc)"
github.com,"spring-projects/spring-data-couchbase",main,"src/test/java/org/springframework/data/couchbase/transactions/sdk/SDKReactiveTransactionsPersonIntegrationTests.java","docs.add(r)"
github.com,"spring-projects/spring-data-couchbase",main,"src/test/java/org/springframework/data/couchbase/transactions/CouchbaseTransactionalTemplateCollectionIntegrationTests.java","threads.add(t)"
github.com,"spring-projects/spring-data-couchbase",main,"src/test/java/org/springframework/data/couchbase/transactions/CouchbaseTransactionalTemplateCollectionDefaultScopeIntegrationTests.java","threads.add(t)"
github.com,"spring-projects/spring-data-couchbase",main,"src/main/java/org/springframework/data/couchbase/core/index/CouchbasePersistentEntityIndexResolver.java","indices.add(createFieldQueryIndexDefinition(persistentEntity, persistentProperty))"
github.com,"spring-projects/spring-data-couchbase",main,"src/main/java/org/springframework/data/couchbase/core/index/CouchbasePersistentEntityIndexResolver.java","fields.add(fieldName + (index.direction() == QueryIndexDirection.DESCENDING ? "" DESC"" : """"))"
github.com,"spring-projects/spring-data-couchbase",main,"src/main/java/org/springframework/data/couchbase/core/index/CouchbasePersistentEntityIndexResolver.java","indexAnnotations.add(entity.findAnnotation(CompositeQueryIndex.class))"
github.com,"spring-projects/spring-data-couchbase",main,"src/main/java/org/springframework/data/couchbase/transaction/CouchbaseCallbackTransactionManager.java","out.add(v)"
github.com,"spring-projects/spring-data-couchbase",main,"src/main/java/org/springframework/data/couchbase/repository/query/ReactiveCouchbaseParameterAccessor.java","publishers.add(ReactiveWrapperConverters.toWrapper(value, Mono.class) //
		.map(Optional::of) //
		.defaultIfEmpty(Optional.empty()) //
		.doOnNext(it -> holder.put(index, (Optional<?>) it)))"
github.com,"spring-projects/spring-data-couchbase",main,"src/main/java/org/springframework/data/couchbase/repository/query/ReactiveCouchbaseParameterAccessor.java","publishers.add(ReactiveWrapperConverters.toWrapper(value, Flux.class) //
		.collectList() //
		.doOnNext(it -> holder.put(index, Optional.of(it))))"
github.com,"spring-projects/spring-data-couchbase",main,"src/main/java/org/springframework/data/couchbase/repository/query/support/N1qlUtils.java","expList.add(metaId)"
github.com,"spring-projects/spring-data-couchbase",main,"src/main/java/org/springframework/data/couchbase/repository/query/support/N1qlUtils.java","expList.add(metaCas)"
github.com,"spring-projects/spring-data-couchbase",main,"src/main/java/org/springframework/data/couchbase/repository/query/support/N1qlUtils.java","expList.add(path(bucket, i(entity.getRequiredPersistentProperty(property).getFieldName())))"
github.com,"spring-projects/spring-data-couchbase",main,"src/main/java/org/springframework/data/couchbase/repository/query/support/N1qlUtils.java","expList.add(path(bucket, ""*""))"
github.com,"spring-projects/spring-data-couchbase",main,"src/main/java/org/springframework/data/couchbase/repository/query/support/N1qlUtils.java","expList.add(fullEntity)"
github.com,"spring-projects/spring-data-couchbase",main,"src/main/java/org/springframework/data/couchbase/repository/query/support/N1qlUtils.java","expList.add(metaId)"
github.com,"spring-projects/spring-data-couchbase",main,"src/main/java/org/springframework/data/couchbase/repository/query/support/N1qlUtils.java","expList.add(metaCas)"
github.com,"spring-projects/spring-data-couchbase",main,"src/main/java/org/springframework/data/couchbase/repository/query/support/N1qlUtils.java","cbSortList.add(orderFieldName.asc())"
github.com,"spring-projects/spring-data-couchbase",main,"src/main/java/org/springframework/data/couchbase/repository/query/support/N1qlUtils.java","cbSortList.add(orderFieldName.desc())"
github.com,"spring-projects/spring-data-couchbase",main,"src/main/java/org/springframework/data/couchbase/repository/query/support/PointInShapeEvaluator.java","result.add(boxResult)"
github.com,"spring-projects/spring-data-couchbase",main,"src/main/java/org/springframework/data/couchbase/repository/query/support/PointInShapeEvaluator.java","result.add(boxResult)"
github.com,"spring-projects/spring-data-couchbase",main,"src/main/java/org/springframework/data/couchbase/repository/query/support/PointInShapeEvaluator.java","result.add(boxResult)"
github.com,"spring-projects/spring-data-couchbase",main,"src/main/java/org/springframework/data/couchbase/repository/query/support/PointInShapeEvaluator.java","result.add(boxResult)"
github.com,"spring-projects/spring-data-couchbase",main,"src/main/java/org/springframework/data/couchbase/repository/query/StringBasedN1qlQueryParser.java","quotes.add(new int[] { quoteMatcher.start(), quoteMatcher.end() })"
github.com,"spring-projects/spring-data-couchbase",main,"src/main/java/org/springframework/data/couchbase/repository/query/StringBasedN1qlQueryParser.java","params.add(o)"
github.com,"spring-projects/spring-data-couchbase",main,"src/main/java/org/springframework/data/couchbase/repository/query/StringBasedN1qlQueryParser.java","params.add(accessor.getPageable())"
github.com,"spring-projects/spring-data-couchbase",main,"src/main/java/org/springframework/data/couchbase/repository/query/StringBasedN1qlQueryParser.java","params.add(accessor.getSort())"
github.com,"spring-projects/spring-data-couchbase",main,"src/main/java/org/springframework/data/couchbase/config/AbstractCouchbaseConfiguration.java","// The following
newConverters.add(new OtherConverters.EnumToObject(getObjectMapper()))"
github.com,"spring-projects/spring-data-couchbase",main,"src/main/java/org/springframework/data/couchbase/config/AbstractCouchbaseConfiguration.java","newConverters.add(new IntegerToEnumConverterFactory(getObjectMapper()))"
github.com,"spring-projects/spring-data-couchbase",main,"src/main/java/org/springframework/data/couchbase/config/AbstractCouchbaseConfiguration.java","newConverters.add(new StringToEnumConverterFactory(getObjectMapper()))"
github.com,"spring-projects/spring-data-couchbase",main,"src/main/java/org/springframework/data/couchbase/config/AbstractCouchbaseConfiguration.java","newConverters.add(new BooleanToEnumConverterFactory(getObjectMapper()))"
github.com,"spring-projects/spring-data-couchbase",main,"src/main/java/org/springframework/data/couchbase/cache/CouchbaseCacheManager.java","caches.add(createCouchbaseCache(entry.getKey(), entry.getValue()))"
github.com,"spring-projects/spring-data-couchbase",main,"src/test/java/org/springframework/data/couchbase/util/CollectionAwareDefaultScopeIntegrationTests.java","fieldList.add(""parentId"")"
github.com,"spring-projects/spring-data-couchbase",main,"src/test/java/org/springframework/data/couchbase/util/MockTestCluster.java","mechs.add(""PLAIN"")"
github.com,"spring-projects/spring-data-couchbase",main,"src/test/java/org/springframework/data/couchbase/util/MockTestCluster.java","// mock has views on the same http port

			nodeConfigs.add(new TestNodeConfig(server.getHostname(), ports))"
github.com,"spring-projects/spring-data-couchbase",main,"src/test/java/org/springframework/data/couchbase/util/Util.java",unexpected::add
github.com,"spring-projects/spring-data-couchbase",main,"src/test/java/org/springframework/data/couchbase/util/Util.java","missing.add(t)"
github.com,"spring-projects/spring-data-couchbase",main,"src/test/java/org/springframework/data/couchbase/util/Util.java","source.add(result.get())"
github.com,"spring-projects/spring-data-couchbase",main,"src/test/java/org/springframework/data/couchbase/util/Util.java",unexpected::add
github.com,"spring-projects/spring-data-couchbase",main,"src/test/java/org/springframework/data/couchbase/util/Util.java","missing.add(t)"
github.com,"spring-projects/spring-data-couchbase",main,"src/test/java/org/springframework/data/couchbase/util/ClusterAwareIntegrationTests.java","fieldList.add(""parentId"")"
github.com,"spring-projects/spring-data-couchbase",main,"src/test/java/org/springframework/data/couchbase/util/CollectionAwareIntegrationTests.java","fieldList.add(""parentId"")"
github.com,"spring-projects/spring-data-couchbase",main,"src/test/java/org/springframework/data/couchbase/util/TestCluster.java","result.add(new TestNodeConfig(hostname, ports))"
github.com,"spring-projects/spring-data-couchbase",main,"src/test/java/org/springframework/data/couchbase/core/CouchbaseTemplateKeyValueIntegrationTests.java","errorList.add(""\nfound should be non null as it was set to have no expiry "" + user.getId())"
github.com,"spring-projects/spring-data-couchbase",main,"src/test/java/org/springframework/data/couchbase/core/CouchbaseTemplateKeyValueIntegrationTests.java","errorList.add(""\nfound should have been null as document should be expired "" + user.getId())"
github.com,"spring-projects/spring-data-couchbase",main,"src/test/java/org/springframework/data/couchbase/core/mapping/MappingCouchbaseConverterTests.java","
attr0.add(""foo"")"
github.com,"spring-projects/spring-data-couchbase",main,"src/test/java/org/springframework/data/couchbase/core/mapping/MappingCouchbaseConverterTests.java","attr0.add(""bar"")"
github.com,"spring-projects/spring-data-couchbase",main,"src/test/java/org/springframework/data/couchbase/core/mapping/MappingCouchbaseConverterTests.java","attr2.add(attr0)"
github.com,"spring-projects/spring-data-couchbase",main,"src/test/java/org/springframework/data/couchbase/core/mapping/MappingCouchbaseConverterTests.java","listOfEmails.add(addy)"
github.com,"spring-projects/spring-data-couchbase",main,"src/test/java/org/springframework/data/couchbase/core/mapping/MappingCouchbaseConverterTests.java","listOfEmails.add(addy)"
github.com,"spring-projects/spring-data-couchbase",main,"src/test/java/org/springframework/data/couchbase/core/mapping/MappingCouchbaseConverterTests.java","converters.add(ChoiceFormatToStringConverter.INSTANCE)"
github.com,"spring-projects/spring-data-couchbase",main,"src/test/java/org/springframework/data/couchbase/core/mapping/MappingCouchbaseConverterTests.java","converters.add(StringToChoiceFormatConverter.INSTANCE)"
github.com,"spring-projects/spring-data-couchbase",main,"src/test/java/org/springframework/data/couchbase/core/mapping/MappingCouchbaseConverterTests.java","listOfValues.add(value)"
github.com,"spring-projects/spring-data-couchbase",main,"src/test/java/org/springframework/data/couchbase/core/mapping/MappingCouchbaseConverterTests.java","listOfValues.add(value2)"
github.com,"spring-projects/spring-data-couchbase",main,"src/test/java/org/springframework/data/couchbase/core/mapping/MappingCouchbaseConverterTests.java","converters.add(ChoiceFormatToStringConverter.INSTANCE)"
github.com,"spring-projects/spring-data-couchbase",main,"src/test/java/org/springframework/data/couchbase/core/mapping/MappingCouchbaseConverterTests.java","converters.add(StringToChoiceFormatConverter.INSTANCE)"
github.com,"spring-projects/spring-data-couchbase",main,"src/test/java/org/springframework/data/couchbase/core/mapping/MappingCouchbaseConverterTests.java","listOfValues.add(value)"
github.com,"spring-projects/spring-data-couchbase",main,"src/test/java/org/springframework/data/couchbase/core/mapping/MappingCouchbaseConverterTests.java","listOfValues.add(value2)"
github.com,"spring-projects/spring-data-couchbase",main,"src/test/java/org/springframework/data/couchbase/core/mapping/MappingCouchbaseConverterTests.java","converters.add(ChoiceFormatToStringConverter.INSTANCE)"
github.com,"spring-projects/spring-data-couchbase",main,"src/test/java/org/springframework/data/couchbase/core/mapping/MappingCouchbaseConverterTests.java","converters.add(StringToChoiceFormatConverter.INSTANCE)"
github.com,"spring-projects/spring-data-couchbase",main,"src/test/java/org/springframework/data/couchbase/core/mapping/MappingCouchbaseConverterTests.java","listOfObjects.add(addy)"
github.com,"spring-projects/spring-data-couchbase",main,"src/test/java/org/springframework/data/couchbase/core/mapping/CustomConvertersTests.java","converters.add(DateToStringConverter.INSTANCE)"
github.com,"spring-projects/spring-data-couchbase",main,"src/test/java/org/springframework/data/couchbase/core/mapping/CustomConvertersTests.java","converters.add(IntegerToStringConverter.INSTANCE)"
github.com,"spring-projects/spring-data-couchbase",main,"src/test/java/org/springframework/data/couchbase/core/mapping/CustomConvertersTests.java","converters.add(BlogPostToCouchbaseDocumentConverter.INSTANCE)"
github.com,"spring-projects/spring-data-couchbase",main,"src/test/java/org/springframework/data/couchbase/core/mapping/CustomConvertersTests.java","converters.add(CouchbaseDocumentToBlogPostConverter.INSTANCE)"
github.com,"spring-projects/spring-data-couchbase",main,"src/test/java/org/springframework/data/couchbase/core/ReactiveCouchbaseTemplateKeyValueIntegrationTests.java","errorList.add(""\nfound should be non null as it was set to have no expiry "" + user.getId())"
github.com,"spring-projects/spring-data-couchbase",main,"src/test/java/org/springframework/data/couchbase/core/ReactiveCouchbaseTemplateKeyValueIntegrationTests.java","errorList.add(""\nfound should have been null as document should be expired "" + user.getId())"
github.com,"spring-projects/spring-data-couchbase",main,"src/test/java/org/springframework/data/couchbase/repository/CouchbaseRepositoryKeyValueIntegrationTests.java","books.add(""book1"")"
github.com,"spring-projects/spring-data-couchbase",main,"src/test/java/org/springframework/data/couchbase/repository/CouchbaseRepositoryKeyValueIntegrationTests.java","books.add(""book2"")"
github.com,"spring-projects/spring-data-couchbase",main,"src/test/java/org/springframework/data/couchbase/repository/CouchbaseRepositoryQueryIntegrationTests.java",all::add
github.com,"spring-projects/spring-data-couchbase",main,"src/test/java/org/springframework/data/couchbase/repository/query/N1qlQueryCreatorTests.java","list.add(""Oliver"")"
github.com,"spring-projects/spring-data-couchbase",main,"src/test/java/org/springframework/data/couchbase/repository/query/N1qlQueryCreatorTests.java","list.add(""Charles"")"
github.com,"spring-projects/spring-data-couchbase",main,"src/test/java/org/springframework/data/couchbase/domain/CapellaConnectSample.java","clusterIds.add((String) m.get(""id""))"
github.com,"spring-projects/spring-data-couchbase",main,"src/test/java/org/springframework/data/couchbase/domain/FluxIntegrationTests.java","list.add(a.withId(UUID.randomUUID().toString()))"
github.com,"spring-projects/spring-data-couchbase",main,"src/test/java/org/springframework/data/couchbase/domain/FluxIntegrationTests.java","listOfLists.add(list)"
github.com,"spring-projects/spring-data-couchbase",main,"src/test/java/org/springframework/data/couchbase/domain/FluxIntegrationTests.java","list.add(a.withId(UUID.randomUUID().toString()))"
github.com,"spring-cloud/spring-cloud-zookeeper",main,"spring-cloud-zookeeper-discovery/src/main/java/org/springframework/cloud/zookeeper/discovery/ZookeeperServiceInstanceListSupplier.java","filteredInstances.add(serviceInstance)"
github.com,"spring-cloud/spring-cloud-zookeeper",main,"spring-cloud-zookeeper-discovery/src/main/java/org/springframework/cloud/zookeeper/discovery/dependency/ZookeeperDependencies.java","names.add(zookeeperDependencyEntry.getValue().getPath())"
github.com,"spring-cloud/spring-cloud-zookeeper",main,"spring-cloud-zookeeper-discovery/src/main/java/org/springframework/cloud/zookeeper/discovery/dependency/DependencyRestTemplateAutoConfiguration.java","this.restTemplate.getInterceptors().add(new ClientHttpRequestInterceptor() {
	@Override
	public ClientHttpResponse intercept(HttpRequest request, byte[] body,
			ClientHttpRequestExecution execution) throws IOException {
		String clientName = request.getURI().getHost();
		ZookeeperDependency dependencyForAlias = DependencyRestTemplateAutoConfiguration.this.zookeeperDependencies
				.getDependencyForAlias(clientName);
		HttpHeaders headers = getUpdatedHeadersIfPossible(request,
				dependencyForAlias);
		request.getHeaders().putAll(headers);
		return execution.execute(request, body);
	}

	private HttpHeaders getUpdatedHeadersIfPossible(HttpRequest request,
			ZookeeperDependency dependencyForAlias) {
		HttpHeaders httpHeaders = new HttpHeaders();
		if (dependencyForAlias != null) {
			Map<String, Collection<String>> updatedHeaders = dependencyForAlias
					.getUpdatedHeaders(convertHeadersFromListToCollection(
							request.getHeaders()));
			httpHeaders
					.putAll(convertHeadersFromCollectionToList(updatedHeaders));
			return httpHeaders;
		}
		httpHeaders.putAll(request.getHeaders());
		return httpHeaders;
	}

	private Map<String, Collection<String>> convertHeadersFromListToCollection(
			HttpHeaders headers) {
		Map<String, Collection<String>> transformedHeaders = new HashMap<>();
		for (Map.Entry<String, List<String>> entry : headers.entrySet()) {
			transformedHeaders.put(entry.getKey(), entry.getValue());
		}
		return transformedHeaders;
	}

	private Map<String, List<String>> convertHeadersFromCollectionToList(
			Map<String, Collection<String>> headers) {
		Map<String, List<String>> transformedHeaders = new HashMap<>();
		for (Map.Entry<String, Collection<String>> entry : headers.entrySet()) {
			transformedHeaders.put(entry.getKey(),
					new ArrayList<>(entry.getValue()));
		}
		return transformedHeaders;
	}
})"
github.com,"spring-cloud/spring-cloud-zookeeper",main,"spring-cloud-zookeeper-discovery/src/main/java/org/springframework/cloud/zookeeper/discovery/ZookeeperServiceInstances.java","serviceInstances.add(instance)"
github.com,"spring-cloud/spring-cloud-zookeeper",main,"spring-cloud-zookeeper-discovery/src/main/java/org/springframework/cloud/zookeeper/discovery/ZookeeperServiceInstances.java","names.add(sanitize(name))"
github.com,"spring-cloud/spring-cloud-zookeeper",main,"spring-cloud-zookeeper-discovery/src/main/java/org/springframework/cloud/zookeeper/discovery/ZookeeperDiscoveryClient.java","instances.add(createServiceInstance(serviceIdToQuery, instance))"
github.com,"spring-cloud/spring-cloud-zookeeper",main,"spring-cloud-zookeeper-core/src/test/java/org/springframework/cloud/zookeeper/ZookeeperAutoConfigurationTests.java","callOrder.add(1)"
github.com,"spring-cloud/spring-cloud-zookeeper",main,"spring-cloud-zookeeper-core/src/test/java/org/springframework/cloud/zookeeper/ZookeeperAutoConfigurationTests.java","callOrder.add(2)"
github.com,"spring-cloud/spring-cloud-zookeeper",main,"spring-cloud-zookeeper-config/src/main/java/org/springframework/cloud/zookeeper/config/ZookeeperPropertySources.java","contexts.add(new Context(defaultContext))"
github.com,"spring-cloud/spring-cloud-zookeeper",main,"spring-cloud-zookeeper-config/src/main/java/org/springframework/cloud/zookeeper/config/ZookeeperPropertySources.java","contexts.add(new Context(baseContext.toString()))"
github.com,"spring-cloud/spring-cloud-zookeeper",main,"spring-cloud-zookeeper-config/src/main/java/org/springframework/cloud/zookeeper/config/ZookeeperPropertySources.java","contexts.add(new Context(path, profile))"
github.com,"spring-cloud/spring-cloud-zookeeper",main,"spring-cloud-zookeeper-config/src/main/java/org/springframework/cloud/zookeeper/config/ZookeeperConfigDataLoader.java","options.add(ConfigData.Option.IGNORE_IMPORTS)"
github.com,"spring-cloud/spring-cloud-zookeeper",main,"spring-cloud-zookeeper-config/src/main/java/org/springframework/cloud/zookeeper/config/ZookeeperConfigDataLoader.java","options.add(ConfigData.Option.IGNORE_PROFILES)"
github.com,"spring-cloud/spring-cloud-zookeeper",main,"spring-cloud-zookeeper-config/src/main/java/org/springframework/cloud/zookeeper/config/ZookeeperConfigDataLoader.java","options.add(ConfigData.Option.PROFILE_SPECIFIC)"
github.com,"spring-cloud/spring-cloud-zookeeper",main,"spring-cloud-zookeeper-config/src/main/java/org/springframework/cloud/zookeeper/config/ZookeeperConfigDataLocationResolver.java","locations
			.add(new ZookeeperConfigDataResource(propertySourceContext.getPath(), location.isOptional(), propertySourceContext
					.getProfile()))"
github.com,"spring-cloud/spring-cloud-zookeeper",main,"spring-cloud-zookeeper-config/src/main/java/org/springframework/cloud/zookeeper/config/ZookeeperPropertySourceLocator.java","contexts.add(baseContext + this.properties.getProfileSeparator() + profile)"
github.com,"spring-projects/spring-shell",main,"spring-shell-standard/src/main/java/org/springframework/shell/standard/completion/AbstractCompletions.java","commands.add(command)"
github.com,"spring-projects/spring-shell",main,"spring-shell-standard/src/main/java/org/springframework/shell/standard/completion/AbstractCompletions.java","operations.add(operation)"
github.com,"spring-projects/spring-shell",main,"spring-shell-standard/src/main/java/org/springframework/shell/standard/EnumValueProvider.java","result.add(new CompletionProposal(e.name()))"
github.com,"spring-projects/spring-shell",main,"spring-shell-standard/src/main/java/org/springframework/shell/standard/StandardMethodTargetRegistrar.java","longNames.add(stripped)"
github.com,"spring-projects/spring-shell",main,"spring-shell-standard/src/main/java/org/springframework/shell/standard/StandardMethodTargetRegistrar.java","shortNames.add(stripped.charAt(0))"
github.com,"spring-projects/spring-shell",main,"spring-shell-standard/src/main/java/org/springframework/shell/standard/StandardMethodTargetRegistrar.java","longNames.add(stripped)"
github.com,"spring-projects/spring-shell",main,"spring-shell-standard/src/main/java/org/springframework/shell/standard/StandardMethodTargetRegistrar.java","shortNames.add(stripped.charAt(0))"
github.com,"spring-projects/spring-shell",main,"spring-shell-standard/src/main/java/org/springframework/shell/standard/StandardMethodTargetRegistrar.java","longNames.add(longName)"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/jline/ExtendedDefaultParser.java","// End the block; arg could be empty, but that's fine
words.add(current.toString())"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/jline/ExtendedDefaultParser.java","words.add(current.toString())"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/jline/ExtendedDefaultParser.java","words.add(current.toString())"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/test/java/org/springframework/shell/command/CommandCatalogTests.java","regs.add(r1)"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/test/java/org/springframework/shell/command/CommandExecutionTests.java","resolvers.add(new ArgumentHeaderMethodArgumentResolver(conversionService, null))"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/test/java/org/springframework/shell/command/CommandExecutionTests.java","resolvers.add(new CommandContextMethodArgumentResolver())"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/test/java/org/springframework/shell/command/CommandExecutionCustomConversionTests.java","resolvers.add(new ArgumentHeaderMethodArgumentResolver(conversionService, null))"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/test/java/org/springframework/shell/command/CommandExecutionCustomConversionTests.java","resolvers.add(new CommandContextMethodArgumentResolver())"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/completion/RegistrationOptionsCompletionResolver.java",candidates::add
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/completion/RegistrationOptionsCompletionResolver.java",candidates::add
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/result/GenericResultHandlerService.java","hierarchy.add(index, type)"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/command/CommandRegistration.java","this.functions.add(f)"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/command/CommandRegistration.java","this.functions.add(function)"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/command/CommandRegistration.java","this.resolvers.add(resolver)"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/command/CommandRegistration.java","options.add(CommandOption.of(longNames, shortNames, ""help for "" + command,
		ResolvableType.forType(void.class)))"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/command/CommandRegistration.java","optionSpecs.add(spec)"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/command/CommandRegistration.java","this.aliasSpecs.add(spec)"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/command/parser/Lexer.java","ret.add(group)"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/command/parser/Lexer.java","tokenList.add(Token.of(raw, TokenType.DIRECTIVE, 0))"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/command/parser/Lexer.java","errorResults.add(MessageResult.of(ParserMessage.ILLEGAL_CONTENT_BEFORE_COMMANDS, 0, beforeArguments))"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/command/parser/Lexer.java","tokenList.add(Token.of(argument, TokenType.ARGUMENT, i2))"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/command/parser/Lexer.java","tokenList.add(Token.of(argument, TokenType.DOUBLEDASH, i2))"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/command/parser/Lexer.java","tokenList.add(Token.of(argument, TokenType.COMMAND, i2))"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/command/parser/Lexer.java","tokenList.add(Token.of(argument, TokenType.OPTION, i2))"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/command/parser/Lexer.java","tokenList.add(Token.of(argument, TokenType.OPTION, i2))"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/command/parser/Lexer.java","tokenList.add(Token.of(argument, TokenType.ARGUMENT, i2))"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/command/parser/Lexer.java","tokenList.add(Token.of(argument, TokenType.OPTION, i2))"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/command/parser/Lexer.java","tokenList.add(Token.of(argument, TokenType.ARGUMENT, i2))"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/command/parser/Lexer.java","tokenList.add(Token.of(argument, TokenType.ARGUMENT, i2))"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/command/parser/Lexer.java","errorResults.add(MessageResult.of(ParserMessage.ILLEGAL_CONTENT_BEFORE_COMMANDS, 0, arg))"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/command/parser/Ast.java","directiveNodes.add(new DirectiveNode(token, split[0], split.length > 1 ? split[1] : null))"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/command/parser/Ast.java","commandNodes.add(commandNode)"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/command/parser/Ast.java","nonterminalNodes.add(commandNodes.get(0))"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/command/parser/Ast.java","terminalNodes.add(dn)"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/command/parser/Parser.java","optionResults.add(OptionResult.of(o, null))"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/command/parser/Parser.java","optionResults.add(OptionResult.of(o, value))"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/command/parser/Parser.java","optionResults.add(OptionResult.of(o, value))"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/command/parser/Parser.java","directiveResults.add(DirectiveResult.of(node.getName(), node.getValue()))"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/command/parser/Parser.java","resolvedCommmand.add(node.getCommand())"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/command/parser/Parser.java","resolvedCommmand.add(node.getCommand())"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/command/parser/Parser.java","currentOptions.add(option)"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/command/parser/Parser.java","currentOptions.add(option)"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/command/parser/Parser.java","currentOptions.add(option)"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/command/parser/Parser.java","argumentResults.add(ArgumentResult.of(a, commandArgumentPos++))"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/command/parser/Parser.java","commonMessageResults.add(MessageResult.of(ParserMessage.NOT_ENOUGH_OPTION_ARGUMENTS, 0, arg,
		currentOptionArgument.size()))"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/command/parser/Parser.java","commonMessageResults.add(MessageResult.of(ParserMessage.TOO_MANY_OPTION_ARGUMENTS, 0, arg,
		currentOption.getArityMax()))"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/command/parser/Parser.java","commonMessageResults.add(MessageResult.of(ParserMessage.NOT_ENOUGH_OPTION_ARGUMENTS, 0, arg,
		toUse.size()))"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/command/parser/Parser.java","commonMessageResults.add(MessageResult.of(ParserMessage.TOO_MANY_OPTION_ARGUMENTS, 0, arg,
		currentOption.getArityMax()))"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/command/parser/Parser.java","commonMessageResults.add(MessageResult.of(ParserMessage.ILLEGAL_OPTION_VALUE, 0, value, e.getMessage()))"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/command/parser/Parser.java","optionResults.add(new OptionResult(currentOption, value))"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/command/parser/Parser.java","invalidOptionNodes.add(node)"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/command/parser/Parser.java","argumentResults.add(ArgumentResult.of(node.getToken().getValue(), commandArgumentPos++))"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/command/parser/Parser.java","currentOptionArgument.add(node.getValue())"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/command/parser/NonterminalAstNode.java","this.children.add(node)"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/command/invocation/ShellMethodArgumentResolverComposite.java","this.argumentResolvers.add(resolver)"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/command/support/OptionNameModifierSupport.java","matches.add(group)"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/command/CommandParser.java","results.add(CommandParserResult.of(or.option(), or.value()))"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/command/CommandParser.java","errors.add(new CommandParserException(mr.getMessage()))"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/command/CommandParser.java","positional.add(ar.value())"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/command/annotation/ExceptionResolverMethodResolver.java","result.add((Class<? extends Throwable>) paramType)"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/command/annotation/ExceptionResolverMethodResolver.java","matches.add(mappedException)"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/command/annotation/support/CommandRegistrationFactoryBean.java","shortNames.add(so.shortNames()[i])"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/command/annotation/support/CommandRegistrationFactoryBean.java","longNames.add(so.longNames()[i])"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/command/annotation/support/CommandRegistrationFactoryBean.java","longNames.add(longName)"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/command/annotation/MethodCommandExceptionResolver.java","exceptions.add(exToExpose)"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/Utils.java","split.add(list.subList(tail, i))"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/Utils.java","split.add(list.subList(tail, array.length))"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/support/AbstractArgumentMethodArgumentResolver.java","names.add(name)"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/support/search/AbstractSearchMatchAlgorithm.java","positions.add(idx)"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/support/search/FuzzyMatchV2SearchMatchAlgorithm.java","list.add(0)"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/Shell.java","matched.add(o)"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/Shell.java","matched.add(o)"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/Shell.java","matched.add(o)"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/component/flow/BaseMultiItemSelector.java","this.preHandlers.add(handler)"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/component/flow/BaseMultiItemSelector.java","this.postHandlers.add(handler)"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/component/flow/BaseStringInput.java","this.preHandlers.add(handler)"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/component/flow/BaseStringInput.java","this.postHandlers.add(handler)"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/component/flow/BaseSingleItemSelector.java","this.preHandlers.add(handler)"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/component/flow/BaseSingleItemSelector.java","this.postHandlers.add(handler)"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/component/flow/BasePathInput.java","this.preHandlers.add(handler)"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/component/flow/BasePathInput.java","this.postHandlers.add(handler)"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/component/flow/ComponentFlow.java","stringInputs.add(input)"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/component/flow/ComponentFlow.java","pathInputs.add(input)"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/component/flow/ComponentFlow.java","confirmationInputs.add(input)"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/component/flow/ComponentFlow.java","singleItemSelectors.add(input)"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/component/flow/ComponentFlow.java","multiItemSelectors.add(input)"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/component/flow/BaseConfirmationInput.java","this.preHandlers.add(handler)"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/component/flow/BaseConfirmationInput.java","this.postHandlers.add(handler)"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/component/support/AbstractComponent.java","this.preRunHandlers.add(handler)"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/component/support/AbstractComponent.java","this.postRunHandlers.add(handler)"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/component/support/SelectorList.java","projection.add(item)"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/component/PathSearch.java","parts.add(PartText.of(text, false))"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/component/PathSearch.java","parts.add(PartText.of(String.valueOf(text.charAt(0)), true))"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/component/PathSearch.java","parts.add(PartText.of(String.valueOf(text.charAt(0)), true))"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/component/PathSearch.java","parts.add(PartText.of(text.substring(1, text.length()), false))"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/component/PathSearch.java","parts.add(PartText.of(text.substring(0, text.length() - 1), false))"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/component/PathSearch.java","parts.add(PartText.of(String.valueOf(text.charAt(text.length() - 1)), true))"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/component/PathSearch.java","parts.add(PartText.of(text.substring(0, position), false))"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/component/PathSearch.java","parts.add(PartText.of(String.valueOf(text.charAt(position)), true))"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/component/PathSearch.java","parts.add(PartText.of(text.substring(position + 1, text.length()), false))"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/component/view/screen/DefaultScreen.java","newLines.add(builder.toAttributedString())"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/component/view/control/GridView.java","gridItems.add(gridItem)"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/component/view/control/ListView.java","cells.add(c)"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/component/view/event/DefaultEventLoop.java","this.processors.add(new AnimationEventLoopProcessor())"
github.com,"spring-projects/spring-shell",main,"spring-shell-core/src/main/java/org/springframework/shell/component/view/event/DefaultEventLoop.java","this.processors.add(new TaskEventLoopProcessor())"
github.com,"spring-projects/spring-shell",main,"spring-shell-samples/spring-shell-sample-e2e/src/test/java/org/springframework/shell/samples/e2e/E2EArgumentsProvider.java","arguments.add(Arguments.of(String.format(""e2e %s %s"", ""anno"", command), false))"
github.com,"spring-projects/spring-shell",main,"spring-shell-samples/spring-shell-sample-e2e/src/test/java/org/springframework/shell/samples/e2e/E2EArgumentsProvider.java","arguments.add(Arguments.of(String.format(""e2e %s %s"", ""anno"", command), true))"
github.com,"spring-projects/spring-shell",main,"spring-shell-samples/spring-shell-sample-e2e/src/test/java/org/springframework/shell/samples/e2e/E2EArgumentsProvider.java","arguments.add(Arguments.of(String.format(""e2e %s %s"", ""annox"", command), false))"
github.com,"spring-projects/spring-shell",main,"spring-shell-samples/spring-shell-sample-e2e/src/test/java/org/springframework/shell/samples/e2e/E2EArgumentsProvider.java","arguments.add(Arguments.of(String.format(""e2e %s %s"", ""annox"", command), true))"
github.com,"spring-projects/spring-shell",main,"spring-shell-samples/spring-shell-sample-e2e/src/test/java/org/springframework/shell/samples/e2e/E2EArgumentsProvider.java","arguments.add(Arguments.of(String.format(""e2e %s %s"", ""reg"", command), false))"
github.com,"spring-projects/spring-shell",main,"spring-shell-samples/spring-shell-sample-e2e/src/test/java/org/springframework/shell/samples/e2e/E2EArgumentsProvider.java","arguments.add(Arguments.of(String.format(""e2e %s %s"", ""reg"", command), true))"
github.com,"spring-cloud/spring-cloud-deployer-kubernetes",main,"src/main/java/org/springframework/cloud/deployer/spi/kubernetes/KubernetesScheduler.java","
scheduleInfos.add(scheduleInfo)"
github.com,"spring-cloud/spring-cloud-deployer-kubernetes",main,"src/main/java/org/springframework/cloud/deployer/spi/kubernetes/KubernetesScheduler.java","
cronJob.getSpec().getJobTemplate().getSpec().getTemplate().getSpec().getImagePullSecrets()
		.add(localObjectReference)"
github.com,"spring-cloud/spring-cloud-deployer-kubernetes",main,"src/main/java/org/springframework/cloud/deployer/spi/kubernetes/KubernetesAppDeployer.java","
podSpec.getVolumes().add(new VolumeBuilder().withName(""config"").withNewEmptyDir().endEmptyDir().build())"
github.com,"spring-cloud/spring-cloud-deployer-kubernetes",main,"src/main/java/org/springframework/cloud/deployer/spi/kubernetes/KubernetesAppDeployer.java","
podSpec.getContainers().get(0).getVolumeMounts()
        .add(new VolumeMountBuilder().withName(""config"").withMountPath(""/config"").build())"
github.com,"spring-cloud/spring-cloud-deployer-kubernetes",main,"src/main/java/org/springframework/cloud/deployer/spi/kubernetes/KubernetesAppDeployer.java","
podSpec.getInitContainers().add(createStatefulSetInitContainer(podSpec, statefulSetInitContainerImageName))"
github.com,"spring-cloud/spring-cloud-deployer-kubernetes",main,"src/main/java/org/springframework/cloud/deployer/spi/kubernetes/KubernetesAppDeployer.java","
command.add(""sh"")"
github.com,"spring-cloud/spring-cloud-deployer-kubernetes",main,"src/main/java/org/springframework/cloud/deployer/spi/kubernetes/KubernetesAppDeployer.java","command.add(""-c"")"
github.com,"spring-cloud/spring-cloud-deployer-kubernetes",main,"src/main/java/org/springframework/cloud/deployer/spi/kubernetes/KubernetesAppDeployer.java","command.add(commandString)"
github.com,"spring-cloud/spring-cloud-deployer-kubernetes",main,"src/main/java/org/springframework/cloud/deployer/spi/kubernetes/HttpProbeCreator.java","httpHeaders.add(authenticationHeader)"
github.com,"spring-cloud/spring-cloud-deployer-kubernetes",main,"src/main/java/org/springframework/cloud/deployer/spi/kubernetes/support/ArgumentSanitizer.java","sanitizedArguments.add(this.sanitize(argument))"
github.com,"spring-cloud/spring-cloud-deployer-kubernetes",main,"src/main/java/org/springframework/cloud/deployer/spi/kubernetes/DefaultContainerFactory.java","finalAppArgs.add(String.format(""--%s=%s"", k, v))"
github.com,"spring-cloud/spring-cloud-deployer-kubernetes",main,"src/main/java/org/springframework/cloud/deployer/spi/kubernetes/DefaultContainerFactory.java","envVars.add(new EnvVar(e.getKey(), e.getValue(), null))"
github.com,"spring-cloud/spring-cloud-deployer-kubernetes",main,"src/main/java/org/springframework/cloud/deployer/spi/kubernetes/DefaultContainerFactory.java","envVars.add(getGUIDEnvVar())"
github.com,"spring-cloud/spring-cloud-deployer-kubernetes",main,"src/main/java/org/springframework/cloud/deployer/spi/kubernetes/DefaultContainerFactory.java","envVars.add(new EnvVar(""SPRING_CLOUD_APPLICATION_GROUP"",
        request.getDeploymentProperties().get(AppDeployer.GROUP_PROPERTY_KEY), null))"
github.com,"spring-cloud/spring-cloud-deployer-kubernetes",main,"src/main/java/org/springframework/cloud/deployer/spi/kubernetes/DefaultContainerFactory.java","cmdArgs.add(String.format(""--%s=%s"", entry.getKey(), entry.getValue()))"
github.com,"spring-cloud/spring-cloud-deployer-kubernetes",main,"src/main/java/org/springframework/cloud/deployer/spi/kubernetes/DeploymentPropertiesResolver.java","tolerations.add(
			new Toleration(toleration.getEffect(), toleration.getKey(), toleration.getOperator(),
					toleration.getTolerationSeconds(), toleration.getValue()))"
github.com,"spring-cloud/spring-cloud-deployer-kubernetes",main,"src/main/java/org/springframework/cloud/deployer/spi/kubernetes/DeploymentPropertiesResolver.java","tolerations.add(new Toleration(toleration.getEffect(), toleration.getKey(),
					toleration.getOperator(), toleration.getTolerationSeconds(), toleration.getValue()))"
github.com,"spring-cloud/spring-cloud-deployer-kubernetes",main,"src/main/java/org/springframework/cloud/deployer/spi/kubernetes/DeploymentPropertiesResolver.java","envVars.add(new EnvVar(e.getKey(), e.getValue(), null))"
github.com,"spring-cloud/spring-cloud-deployer-kubernetes",main,"src/main/java/org/springframework/cloud/deployer/spi/kubernetes/DeploymentPropertiesResolver.java","containers.add(container)"
github.com,"spring-cloud/spring-cloud-deployer-kubernetes",main,"src/main/java/org/springframework/cloud/deployer/spi/kubernetes/DeploymentPropertiesResolver.java","containers.add(container)"
github.com,"spring-cloud/spring-cloud-deployer-kubernetes",main,"src/main/java/org/springframework/cloud/deployer/spi/kubernetes/DeploymentPropertiesResolver.java","containerPortList.add(port)"
github.com,"spring-cloud/spring-cloud-deployer-kubernetes",main,"src/main/java/org/springframework/cloud/deployer/spi/kubernetes/DeploymentPropertiesResolver.java","vars.add(replacedVar)"
github.com,"spring-cloud/spring-cloud-deployer-kubernetes",main,"src/main/java/org/springframework/cloud/deployer/spi/kubernetes/DeploymentPropertiesResolver.java","configMapKeyRefs.add(buildConfigMapKeyRefEnvVar(configMapKeyRef))"
github.com,"spring-cloud/spring-cloud-deployer-kubernetes",main,"src/main/java/org/springframework/cloud/deployer/spi/kubernetes/DeploymentPropertiesResolver.java","configMapKeyRefs.add(buildConfigMapKeyRefEnvVar(configMapKeyRef))"
github.com,"spring-cloud/spring-cloud-deployer-kubernetes",main,"src/main/java/org/springframework/cloud/deployer/spi/kubernetes/DeploymentPropertiesResolver.java","secretKeyRefs.add(buildSecretKeyRefEnvVar(secretKeyRef))"
github.com,"spring-cloud/spring-cloud-deployer-kubernetes",main,"src/main/java/org/springframework/cloud/deployer/spi/kubernetes/DeploymentPropertiesResolver.java","secretKeyRefs.add(buildSecretKeyRefEnvVar(secretKeyRef))"
github.com,"spring-cloud/spring-cloud-deployer-kubernetes",main,"src/main/java/org/springframework/cloud/deployer/spi/kubernetes/DeploymentPropertiesResolver.java","configMapRefs.add(buildConfigMapRefEnvVar(configMapRef))"
github.com,"spring-cloud/spring-cloud-deployer-kubernetes",main,"src/main/java/org/springframework/cloud/deployer/spi/kubernetes/DeploymentPropertiesResolver.java","configMapRefs.add(buildConfigMapRefEnvVar(configMapRef))"
github.com,"spring-cloud/spring-cloud-deployer-kubernetes",main,"src/main/java/org/springframework/cloud/deployer/spi/kubernetes/DeploymentPropertiesResolver.java","secretRefs.add(buildSecretRefEnvVar(secretRef))"
github.com,"spring-cloud/spring-cloud-deployer-kubernetes",main,"src/main/java/org/springframework/cloud/deployer/spi/kubernetes/DeploymentPropertiesResolver.java","secretRefs.add(buildSecretRefEnvVar(secretRef))"
github.com,"spring-cloud/spring-cloud-deployer-kubernetes",main,"src/main/java/org/springframework/cloud/deployer/spi/kubernetes/KubernetesTaskLauncher.java","ids.add(hasMetadata.getMetadata().getName())"
github.com,"spring-cloud/spring-cloud-deployer-kubernetes",main,"src/test/java/org/springframework/cloud/deployer/spi/kubernetes/DefaultContainerFactoryTests.java","cmdLineArgs.add(""--foo.bar=value1"")"
github.com,"spring-cloud/spring-cloud-deployer-kubernetes",main,"src/test/java/org/springframework/cloud/deployer/spi/kubernetes/DefaultContainerFactoryTests.java","cmdLineArgs.add(""--spring.cloud.task.executionid=1"")"
github.com,"spring-cloud/spring-cloud-deployer-kubernetes",main,"src/test/java/org/springframework/cloud/deployer/spi/kubernetes/DefaultContainerFactoryTests.java","cmdLineArgs.add(""--spring.cloud.data.flow.platformname=platform1"")"
github.com,"spring-cloud/spring-cloud-deployer-kubernetes",main,"src/test/java/org/springframework/cloud/deployer/spi/kubernetes/DefaultContainerFactoryTests.java","cmdLineArgs.add(""--spring.cloud.data.flow.taskappname==a1"")"
github.com,"spring-cloud/spring-cloud-deployer-kubernetes",main,"src/test/java/org/springframework/cloud/deployer/spi/kubernetes/DefaultContainerFactoryTests.java","cmdLineArgs.add(""blah=chacha"")"
github.com,"spring-cloud/spring-cloud-deployer-kubernetes",main,"src/test/java/org/springframework/cloud/deployer/spi/kubernetes/DefaultContainerFactoryTests.java","args.add(""a"")"
github.com,"spring-cloud/spring-cloud-deployer-kubernetes",main,"src/test/java/org/springframework/cloud/deployer/spi/kubernetes/DefaultContainerFactoryTests.java","args.add(""--b = c"")"
github.com,"spring-cloud/spring-cloud-deployer-kubernetes",main,"src/test/java/org/springframework/cloud/deployer/spi/kubernetes/DefaultContainerFactoryTests.java","args.add(""d=e"")"
github.com,"spring-cloud/spring-cloud-deployer-kubernetes",main,"src/test/java/org/springframework/cloud/deployer/spi/kubernetes/DefaultContainerFactoryTests.java","args.add(""f = g"")"
github.com,"spring-cloud/spring-cloud-deployer-kubernetes",main,"src/test/java/org/springframework/cloud/deployer/spi/kubernetes/KubernetesSchedulerIT.java","commandLineArguments.add(""arg1=value1"")"
github.com,"spring-cloud/spring-cloud-deployer-kubernetes",main,"src/test/java/org/springframework/cloud/deployer/spi/kubernetes/KubernetesSchedulerIT.java","commandLineArguments.add(""arg2=value2"")"
github.com,"spring-cloud/spring-cloud-deployer-kubernetes",main,"src/test/java/org/springframework/cloud/deployer/spi/kubernetes/KubernetesTaskLauncherMaximumConcurrentTasksTests.java","items.add(new PodBuilder().withNewMetadata()
		.withName(""task-"" + i).endMetadata()
		.withNewStatus()
		.withPhase(""Running"")
		.endStatus().build())"
github.com,"spring-cloud/spring-cloud-deployer-kubernetes",main,"src/test/java/org/springframework/cloud/deployer/spi/kubernetes/KubernetesAppDeployerIntegrationIT.java","
podSpec.getContainers().add(container)"
github.com,"spring-cloud/spring-cloud-deployer-kubernetes",main,"src/test/java/org/springframework/cloud/deployer/spi/kubernetes/KubernetesAppDeployerIntegrationIT.java","secrets.add(secret1.getMetadata().getName())"
github.com,"spring-cloud/spring-cloud-deployer-kubernetes",main,"src/test/java/org/springframework/cloud/deployer/spi/kubernetes/KubernetesAppDeployerIntegrationIT.java","secrets.add(secret2.getMetadata().getName())"
github.com,"spring-cloud/spring-cloud-deployer-kubernetes",main,"src/test/java/org/springframework/cloud/deployer/spi/kubernetes/KubernetesAppDeployerIntegrationIT.java","configMaps.add(configMap1.getMetadata().getName())"
github.com,"spring-cloud/spring-cloud-deployer-kubernetes",main,"src/test/java/org/springframework/cloud/deployer/spi/kubernetes/KubernetesAppDeployerIntegrationIT.java","configMaps.add(configMap2.getMetadata().getName())"
github.com,"spring-cloud/spring-cloud-deployer-kubernetes",main,"src/test/java/org/springframework/cloud/deployer/spi/kubernetes/KubernetesAppDeployerTests.java","kubernetesDeployerProperties.getTolerations().add(toleration)"
github.com,"spring-cloud/spring-cloud-deployer-kubernetes",main,"src/test/java/org/springframework/cloud/deployer/spi/kubernetes/KubernetesAppDeployerTests.java","kubernetesDeployerProperties.getTolerations().add(toleration)"
github.com,"spring-cloud/spring-cloud-deployer-kubernetes",main,"src/test/java/org/springframework/cloud/deployer/spi/kubernetes/KubernetesAppDeployerTests.java","
kubernetesDeployerProperties.getTolerations().add(toleration1)"
github.com,"spring-cloud/spring-cloud-deployer-kubernetes",main,"src/test/java/org/springframework/cloud/deployer/spi/kubernetes/KubernetesAppDeployerTests.java","
kubernetesDeployerProperties.getTolerations().add(toleration2)"
github.com,"spring-cloud/spring-cloud-deployer-kubernetes",main,"src/test/java/org/springframework/cloud/deployer/spi/kubernetes/KubernetesAppDeployerTests.java","
globalSecretKeyRefs.add(globalSecretKeyRef1)"
github.com,"spring-cloud/spring-cloud-deployer-kubernetes",main,"src/test/java/org/springframework/cloud/deployer/spi/kubernetes/KubernetesAppDeployerTests.java","globalSecretKeyRefs.add(globalSecretKeyRef2)"
github.com,"spring-cloud/spring-cloud-deployer-kubernetes",main,"src/test/java/org/springframework/cloud/deployer/spi/kubernetes/KubernetesAppDeployerTests.java","
globalConfigMapKeyRefs.add(globalConfigMapKeyRef1)"
github.com,"spring-cloud/spring-cloud-deployer-kubernetes",main,"src/test/java/org/springframework/cloud/deployer/spi/kubernetes/KubernetesAppDeployerTests.java","globalConfigMapKeyRefs.add(globalConfigMapKeyRef2)"
github.com,"spring-cloud/spring-cloud-bindings",main,"spring-cloud-bindings/src/main/java/org/springframework/cloud/bindings/boot/pem/PemCertificateParser.java",certs::add
github.com,"spring-cloud/spring-cloud-bindings",main,"spring-cloud-bindings/src/main/java/org/springframework/cloud/bindings/boot/pem/PemPrivateKeyParser.java","parsers.add(new PemParser(PKCS1_HEADER, PKCS1_FOOTER, ""RSA"", PemPrivateKeyParser::createKeySpecForPkcs1))"
github.com,"spring-cloud/spring-cloud-bindings",main,"spring-cloud-bindings/src/main/java/org/springframework/cloud/bindings/boot/pem/PemPrivateKeyParser.java","parsers.add(new PemParser(EC_HEADER, EC_FOOTER, ""EC"", PemPrivateKeyParser::createKeySpecForEc))"
github.com,"spring-cloud/spring-cloud-bindings",main,"spring-cloud-bindings/src/main/java/org/springframework/cloud/bindings/boot/pem/PemPrivateKeyParser.java","parsers.add(new PemParser(PKCS8_HEADER, PKCS8_FOOTER, ""RSA"", PKCS8EncodedKeySpec::new))"
github.com,"spring-cloud/spring-cloud-bindings",main,"spring-cloud-bindings/src/main/java/org/springframework/cloud/bindings/boot/PostgreSqlBindingsPropertiesProcessor.java","dbOptions.add(""-c "" + keyval[0] + ""="" + keyval[1])"
github.com,"spring-cloud/spring-cloud-open-service-broker",main,"spring-cloud-open-service-broker-autoconfigure/src/main/java/org/springframework/cloud/servicebroker/autoconfigure/web/util/MetadataUtils.java","list.add(arrayItem)"
github.com,"spring-cloud/spring-cloud-open-service-broker",main,"spring-cloud-open-service-broker-autoconfigure/src/main/java/org/springframework/cloud/servicebroker/autoconfigure/web/util/MetadataUtils.java","convertedList.add(convertEntry(item))"
github.com,"spring-cloud/spring-cloud-open-service-broker",main,"spring-cloud-open-service-broker-autoconfigure/src/test/java/org/springframework/cloud/servicebroker/autoconfigure/web/fixture/ServiceFixture.java","features.add(""hosting"")"
github.com,"spring-cloud/spring-cloud-open-service-broker",main,"spring-cloud-open-service-broker-autoconfigure/src/test/java/org/springframework/cloud/servicebroker/autoconfigure/web/fixture/ServiceFixture.java","features.add(""scaling"")"
github.com,"spring-cloud/spring-cloud-open-service-broker",main,"spring-cloud-open-service-broker-core/src/main/java/org/springframework/cloud/servicebroker/service/events/EventFlowRegistry.java","this.initializationFlows.add(Mono.just(flow))"
github.com,"spring-cloud/spring-cloud-open-service-broker",main,"spring-cloud-open-service-broker-core/src/main/java/org/springframework/cloud/servicebroker/service/events/EventFlowRegistry.java","this.completionFlows.add(Mono.just(flow))"
github.com,"spring-cloud/spring-cloud-open-service-broker",main,"spring-cloud-open-service-broker-core/src/main/java/org/springframework/cloud/servicebroker/service/events/EventFlowRegistry.java","this.errorFlows.add(Mono.just(flow))"
github.com,"spring-cloud/spring-cloud-open-service-broker",main,"spring-cloud-open-service-broker-core/src/main/java/org/springframework/cloud/servicebroker/service/events/EventFlowRegistry.java","this.initializationFlows.add(Mono.just(flow))"
github.com,"spring-cloud/spring-cloud-open-service-broker",main,"spring-cloud-open-service-broker-core/src/main/java/org/springframework/cloud/servicebroker/service/events/EventFlowRegistry.java","this.completionFlows.add(Mono.just(flow))"
github.com,"spring-cloud/spring-cloud-open-service-broker",main,"spring-cloud-open-service-broker-core/src/main/java/org/springframework/cloud/servicebroker/service/events/EventFlowRegistry.java","this.errorFlows.add(Mono.just(flow))"
github.com,"spring-cloud/spring-cloud-open-service-broker",main,"spring-cloud-open-service-broker-core/src/test/java/org/springframework/cloud/servicebroker/model/catalog/PlanTest.java","costs.add(standardCost)"
github.com,"spring-cloud/spring-cloud-open-service-broker",main,"spring-cloud-open-service-broker-core/src/test/java/org/springframework/cloud/servicebroker/controller/ServiceInstanceBindingControllerResponseCodeTest.java","plans.add(Plan.builder().id(""service-definition-plan-id"").build())"
github.com,"spring-cloud/spring-cloud-open-service-broker",main,"spring-cloud-open-service-broker-core/src/test/java/org/springframework/cloud/servicebroker/controller/ServiceInstanceControllerResponseCodeTest.java","plans.add(Plan.builder().id(""service-definition-plan-id"").build())"
github.com,"spring-projects/spring-vault",main,"spring-vault-core/src/test/java/org/springframework/vault/client/VaultClientsUnitTests.java","restTemplate.getInterceptors().add(VaultClients.createNamespaceInterceptor(""foo/bar""))"
github.com,"spring-projects/spring-vault",main,"spring-vault-core/src/test/java/org/springframework/vault/client/VaultClientsUnitTests.java","restTemplate.getInterceptors().add(VaultClients.createNamespaceInterceptor(""foo/bar""))"
github.com,"spring-projects/spring-vault",main,"spring-vault-core/src/main/java/org/springframework/vault/core/VaultTransformTemplate.java","
batch.add(vaultRequest)"
github.com,"spring-projects/spring-vault",main,"spring-vault-core/src/main/java/org/springframework/vault/core/VaultTransformTemplate.java","
batch.add(vaultRequest)"
github.com,"spring-projects/spring-vault",main,"spring-vault-core/src/main/java/org/springframework/vault/core/VaultTransformTemplate.java","
result.add(encoded)"
github.com,"spring-projects/spring-vault",main,"spring-vault-core/src/main/java/org/springframework/vault/core/VaultTransformTemplate.java","
result.add(encrypted)"
github.com,"spring-projects/spring-vault",main,"spring-vault-core/src/main/java/org/springframework/vault/core/VaultTransitTemplate.java","
batch.add(vaultRequest)"
github.com,"spring-projects/spring-vault",main,"spring-vault-core/src/main/java/org/springframework/vault/core/VaultTransitTemplate.java","
batch.add(vaultRequest)"
github.com,"spring-projects/spring-vault",main,"spring-vault-core/src/main/java/org/springframework/vault/core/VaultTransitTemplate.java","
result.add(encrypted)"
github.com,"spring-projects/spring-vault",main,"spring-vault-core/src/main/java/org/springframework/vault/core/VaultTransitTemplate.java","
result.add(encrypted)"
github.com,"spring-projects/spring-vault",main,"spring-vault-core/src/main/java/org/springframework/vault/core/VaultTemplate.java","this.sessionTemplate.getInterceptors().add(getSessionInterceptor())"
github.com,"spring-projects/spring-vault",main,"spring-vault-core/src/main/java/org/springframework/vault/core/VaultTemplate.java","restTemplate.getInterceptors().add(getSessionInterceptor())"
github.com,"spring-projects/spring-vault",main,"spring-vault-core/src/main/java/org/springframework/vault/core/lease/SecretLeaseContainer.java","
this.requestedSecrets.add(requestedSecret)"
github.com,"spring-projects/spring-vault",main,"spring-vault-core/src/main/java/org/springframework/vault/authentication/AuthenticationSteps.java","steps.add((Node<?>) current)"
github.com,"spring-projects/spring-vault",main,"spring-vault-core/src/main/java/org/springframework/vault/support/CertificateBundle.java","certificates.add(getX509Certificate())"
github.com,"spring-projects/spring-vault",main,"spring-vault-core/src/main/java/org/springframework/vault/support/CertificateBundle.java","certificates.add(getX509IssuerCertificate())"
github.com,"spring-projects/spring-vault",main,"spring-vault-core/src/main/java/org/springframework/vault/support/Certificate.java","result.add(pemObject.getCertificate())"
github.com,"spring-projects/spring-vault",main,"spring-vault-core/src/main/java/org/springframework/vault/support/VaultCertificateRequest.java","
this.altNames.add(altName)"
github.com,"spring-projects/spring-vault",main,"spring-vault-core/src/main/java/org/springframework/vault/support/VaultCertificateRequest.java","
this.ipSubjectAltNames.add(ipSubjectAltName)"
github.com,"spring-projects/spring-vault",main,"spring-vault-core/src/main/java/org/springframework/vault/support/VaultCertificateRequest.java","
this.uriSubjectAltNames.add(uriSubjectAltName)"
github.com,"spring-projects/spring-vault",main,"spring-vault-core/src/main/java/org/springframework/vault/support/VaultCertificateRequest.java","
this.otherSans.add(otherSans)"
github.com,"spring-projects/spring-vault",main,"spring-vault-core/src/main/java/org/springframework/vault/support/VaultCertificateRequest.java","list.add(item)"
github.com,"spring-projects/spring-vault",main,"spring-vault-core/src/main/java/org/springframework/vault/support/PemObject.java","objects.add(object)"
github.com,"spring-projects/spring-vault",main,"spring-vault-core/src/main/java/org/springframework/vault/support/KeystoreUtil.java","x509Certificates.add((X509Certificate) cert)"
github.com,"spring-projects/spring-vault",main,"spring-vault-core/src/main/java/org/springframework/vault/support/VaultTokenRequest.java","
this.policies.add(policy)"
github.com,"spring-projects/spring-vault",main,"spring-vault-core/src/main/java/org/springframework/vault/support/VaultTokenRequest.java","list.add(item)"
github.com,"spring-projects/spring-vault",main,"spring-vault-core/src/main/java/org/springframework/vault/client/VaultClients.java","messageConverters.add(new ByteArrayHttpMessageConverter())"
github.com,"spring-projects/spring-vault",main,"spring-vault-core/src/main/java/org/springframework/vault/client/VaultClients.java","messageConverters.add(new StringHttpMessageConverter())"
github.com,"spring-projects/spring-vault",main,"spring-vault-core/src/main/java/org/springframework/vault/client/VaultClients.java","messageConverters.add(new MappingJackson2HttpMessageConverter())"
github.com,"spring-projects/spring-vault",main,"spring-vault-core/src/main/java/org/springframework/vault/client/VaultClients.java","
restTemplate.getInterceptors().add((request, body, execution) -> execution.execute(request, body))"
github.com,"spring-projects/spring-vault",main,"spring-vault-core/src/main/java/org/springframework/vault/client/RestTemplateBuilder.java","
restTemplate.getInterceptors().add((httpRequest, bytes, clientHttpRequestExecution) -> {

	HttpHeaders headers = httpRequest.getHeaders();
	defaultHeaders.forEach((key, value) -> {
		if (!headers.containsKey(key)) {
			headers.add(key, value);
		}
	});

	return clientHttpRequestExecution.execute(httpRequest, bytes);
})"
github.com,"spring-projects/spring-vault",main,"spring-vault-core/src/main/java/org/springframework/vault/repository/core/VaultKeyValueAdapter.java","items.add(object)"
github.com,"spring-projects/spring-vault",main,"spring-vault-core/src/main/java/org/springframework/vault/repository/convert/MappingVaultConverter.java","sink.add(getPotentiallyConvertedSimpleWrite(element, elementType == null ? Object.class : elementType))"
github.com,"spring-projects/spring-vault",main,"spring-vault-core/src/main/java/org/springframework/vault/repository/convert/MappingVaultConverter.java","sink.add(writeCollectionInternal(asCollection(element), componentType, new ArrayList<>()))"
github.com,"spring-projects/spring-vault",main,"spring-vault-core/src/main/java/org/springframework/vault/repository/convert/MappingVaultConverter.java","sink.add(accessor.getBody())"
github.com,"spring-projects/spring-vault",main,"spring-vault-core/src/main/java/org/springframework/vault/repository/convert/VaultCustomConversions.java","
converters.add(CustomToStringConverter.INSTANCE)"
github.com,"spring-projects/spring-vault",main,"spring-vault-core/src/main/java/org/springframework/vault/repository/support/VaultRevisionRepository.java","revisions.add(Revision.of(new VaultRevisionMetadata(versioned), entity))"
github.com,"spring-projects/spring-vault",main,"spring-vault-core/src/test/java/org/springframework/vault/util/Version.java","digits.add(this.major)"
github.com,"spring-projects/spring-vault",main,"spring-vault-core/src/test/java/org/springframework/vault/util/Version.java","digits.add(this.minor)"
github.com,"spring-projects/spring-vault",main,"spring-vault-core/src/test/java/org/springframework/vault/util/Version.java","digits.add(this.bugfix)"
github.com,"spring-projects/spring-vault",main,"spring-vault-core/src/test/java/org/springframework/vault/util/Version.java","digits.add(this.build)"
github.com,"spring-projects/spring-vault",main,"spring-vault-core/src/test/java/org/springframework/vault/core/VaultNamespaceSecretIntegrationTests.java","restTemplate.getInterceptors().add(VaultClients.createNamespaceInterceptor(""dev""))"
github.com,"spring-projects/spring-vault",main,"spring-vault-core/src/test/java/org/springframework/vault/core/lease/SecretLeaseContainerUnitTests.java","events.add(leaseEvent)"
github.com,"spring-projects/spring-vault",main,"spring-vault-core/src/test/java/org/springframework/vault/core/env/LeaseAwareVaultPropertySourceUnitTests.java","listeners.add(invocation.getArgument(0))"
github.com,"spring-projects/spring-vault",main,"spring-vault-core/src/test/java/org/springframework/vault/core/env/LeaseAwareVaultPropertySourceUnitTests.java","listeners.add(invocation.getArgument(0))"
github.com,"spring-projects/spring-vault",main,"spring-vault-core/src/test/java/org/springframework/vault/core/env/LeaseAwareVaultPropertySourceUnitTests.java","listeners.add(invocation.getArgument(0))"
github.com,"spring-projects/spring-vault",main,"spring-vault-core/src/test/java/org/springframework/vault/core/env/LeaseAwareVaultPropertySourceUnitTests.java","errorListeners.add(invocation.getArgument(0))"
github.com,"spring-projects/spring-vault",main,"spring-vault-core/src/test/java/org/springframework/vault/core/env/LeaseAwareVaultPropertySourceUnitTests.java","errorListeners.add(invocation.getArgument(0))"
github.com,"spring-projects/spring-vault",main,"spring-vault-core/src/test/java/org/springframework/vault/core/VaultPkiTemplateIntegrationTests.java","fixtures.add(new KeyFixture(format, privateKeyFormat, keyType))"
github.com,"spring-projects/spring-vault",main,"spring-vault-core/src/test/java/org/springframework/vault/authentication/ClientCertificateNamespaceIntegrationTests.java","restTemplate.getInterceptors().add(VaultClients.createNamespaceInterceptor(""dev""))"
github.com,"spring-projects/spring-vault",main,"spring-vault-core/src/test/java/org/springframework/vault/client/ClientHttpConnectorFactoryIntegrationTests.java","enabledCipherSuites.add(""TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384"")"
github.com,"spring-projects/spring-vault",main,"spring-vault-core/src/test/java/org/springframework/vault/client/ClientHttpConnectorFactoryIntegrationTests.java","enabledCipherSuites.add(""TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256"")"
github.com,"spring-projects/spring-vault",main,"spring-vault-core/src/test/java/org/springframework/vault/client/ClientHttpConnectorFactoryIntegrationTests.java","enabledProtocols.add(""TLSv1.2"")"
github.com,"spring-projects/spring-vault",main,"spring-vault-core/src/test/java/org/springframework/vault/client/ClientHttpConnectorFactoryIntegrationTests.java","enabledCipherSuites.add(""TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384"")"
github.com,"spring-projects/spring-vault",main,"spring-vault-core/src/test/java/org/springframework/vault/client/ClientHttpConnectorFactoryIntegrationTests.java","enabledCipherSuites.add(""TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256"")"
github.com,"spring-projects/spring-vault",main,"spring-vault-core/src/test/java/org/springframework/vault/client/ClientHttpConnectorFactoryIntegrationTests.java","enabledCipherSuites.add(""TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384"")"
github.com,"spring-projects/spring-vault",main,"spring-vault-core/src/test/java/org/springframework/vault/client/ClientHttpConnectorFactoryIntegrationTests.java","enabledCipherSuites.add(""TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256"")"
github.com,"spring-projects/spring-vault",main,"spring-vault-core/src/test/java/org/springframework/vault/client/ClientHttpConnectorFactoryIntegrationTests.java","enabledProtocols.add(""TLSv1.2"")"
github.com,"spring-projects/spring-vault",main,"spring-vault-core/src/test/java/org/springframework/vault/client/ClientHttpRequestFactoryFactoryIntegrationTests.java","enabledCipherSuites.add(""TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384"")"
github.com,"spring-projects/spring-vault",main,"spring-vault-core/src/test/java/org/springframework/vault/client/ClientHttpRequestFactoryFactoryIntegrationTests.java","enabledCipherSuites.add(""TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256"")"
github.com,"spring-projects/spring-vault",main,"spring-vault-core/src/test/java/org/springframework/vault/client/ClientHttpRequestFactoryFactoryIntegrationTests.java","enabledProtocols.add(""TLSv1.2"")"
github.com,"spring-projects/spring-vault",main,"spring-vault-core/src/test/java/org/springframework/vault/client/ClientHttpRequestFactoryFactoryIntegrationTests.java","enabledCipherSuites.add(""TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384"")"
github.com,"spring-projects/spring-vault",main,"spring-vault-core/src/test/java/org/springframework/vault/client/ClientHttpRequestFactoryFactoryIntegrationTests.java","enabledCipherSuites.add(""TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256"")"
github.com,"spring-projects/spring-vault",main,"spring-vault-core/src/test/java/org/springframework/vault/client/ClientHttpRequestFactoryFactoryIntegrationTests.java","enabledProtocols.add(""TLSv1.2"")"
github.com,"spring-cloud/spring-cloud-common-security-config",main,"spring-cloud-common-security-config-web/src/main/java/org/springframework/cloud/common/security/OAuthSecurityConfiguration.java","
this.authorizationProperties.getAuthenticatedPaths().add(""/"")"
github.com,"spring-cloud/spring-cloud-common-security-config",main,"spring-cloud-common-security-config-web/src/main/java/org/springframework/cloud/common/security/OAuthSecurityConfiguration.java","this.authorizationProperties.getAuthenticatedPaths()
		.add(dashboard(authorizationProperties, ""/**""))"
github.com,"spring-cloud/spring-cloud-common-security-config",main,"spring-cloud-common-security-config-web/src/main/java/org/springframework/cloud/common/security/OAuthSecurityConfiguration.java","this.authorizationProperties.getAuthenticatedPaths()
		.add(this.authorizationProperties.getDashboardUrl())"
github.com,"spring-cloud/spring-cloud-common-security-config",main,"spring-cloud-common-security-config-web/src/main/java/org/springframework/cloud/common/security/OAuthSecurityConfiguration.java","this.authorizationProperties.getPermitAllPaths()
		.add(this.authorizationProperties.getDashboardUrl())"
github.com,"spring-cloud/spring-cloud-common-security-config",main,"spring-cloud-common-security-config-web/src/main/java/org/springframework/cloud/common/security/OAuthSecurityConfiguration.java","this.authorizationProperties.getPermitAllPaths()
		.add(dashboard(authorizationProperties, ""/**""))"
github.com,"spring-cloud/spring-cloud-common-security-config",main,"spring-cloud-common-security-config-web/src/main/java/org/springframework/cloud/common/security/OAuthSecurityConfiguration.java","providers.add(authenticationProvider)"
github.com,"spring-cloud/spring-cloud-common-security-config",main,"spring-cloud-common-security-config-web/src/main/java/org/springframework/cloud/common/security/support/DefaultAuthoritiesMapper.java","rolesAsStrings.add(oauthRoleAuthority.getAuthority())"
github.com,"spring-cloud/spring-cloud-common-security-config",main,"spring-cloud-common-security-config-web/src/main/java/org/springframework/cloud/common/security/support/DefaultAuthoritiesMapper.java","rolesAsStrings.add(role.getKey())"
github.com,"spring-cloud/spring-cloud-common-security-config",main,"spring-cloud-common-security-config-web/src/main/java/org/springframework/cloud/common/security/support/DefaultAuthoritiesMapper.java","rolesAsStrings.add(oauthRoleAuthority.getAuthority())"
github.com,"spring-cloud/spring-cloud-common-security-config",main,"spring-cloud-common-security-config-web/src/main/java/org/springframework/cloud/common/security/ProviderRoleMapping.java","unmappedRoles.add(coreRole)"
github.com,"spring-cloud/spring-cloud-common-security-config",main,"spring-cloud-common-security-config-web/src/main/java/org/springframework/cloud/common/security/ProviderRoleMapping.java","unmappedRoles.add(coreRole)"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-serverless-web/src/main/java/org/springframework/cloud/function/serverless/web/ProxyAsyncContext.java","this.dispatchHandlers.add(handler)"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-serverless-web/src/main/java/org/springframework/cloud/function/serverless/web/ProxyAsyncContext.java","this.listeners.add(listener)"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-serverless-web/src/main/java/org/springframework/cloud/function/serverless/web/ProxyAsyncContext.java","this.listeners.add(listener)"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-serverless-web/src/main/java/org/springframework/cloud/function/serverless/web/ProxyHttpServletRequest.java","this.locales.add(Locale.ENGLISH)"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-serverless-web/src/main/java/org/springframework/cloud/function/serverless/web/ServerlessWebApplication.java","aotInitializers.add(AotApplicationContextInitializer.forInitializerClasses(initializerClassName))"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-serverless-web/src/main/java/org/springframework/cloud/function/serverless/web/ProxyMvc.java","filters.add(((ProxyFilterRegistration) fr).getFilter())"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-serverless-web/src/test/java/org/springframework/cloud/function/test/app/PetData.java","breeds.add(""Afghan Hound"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-serverless-web/src/test/java/org/springframework/cloud/function/test/app/PetData.java","breeds.add(""Beagle"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-serverless-web/src/test/java/org/springframework/cloud/function/test/app/PetData.java","breeds.add(""Bernese Mountain Dog"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-serverless-web/src/test/java/org/springframework/cloud/function/test/app/PetData.java","breeds.add(""Bloodhound"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-serverless-web/src/test/java/org/springframework/cloud/function/test/app/PetData.java","breeds.add(""Dalmatian"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-serverless-web/src/test/java/org/springframework/cloud/function/test/app/PetData.java","breeds.add(""Jack Russell Terrier"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-serverless-web/src/test/java/org/springframework/cloud/function/test/app/PetData.java","breeds.add(""Norwegian Elkhound"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-serverless-web/src/test/java/org/springframework/cloud/function/test/app/PetData.java","names.add(""Bailey"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-serverless-web/src/test/java/org/springframework/cloud/function/test/app/PetData.java","names.add(""Bella"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-serverless-web/src/test/java/org/springframework/cloud/function/test/app/PetData.java","names.add(""Max"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-serverless-web/src/test/java/org/springframework/cloud/function/test/app/PetData.java","names.add(""Lucy"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-serverless-web/src/test/java/org/springframework/cloud/function/test/app/PetData.java","names.add(""Charlie"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-serverless-web/src/test/java/org/springframework/cloud/function/test/app/PetData.java","names.add(""Molly"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-serverless-web/src/test/java/org/springframework/cloud/function/test/app/PetData.java","names.add(""Buddy"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-serverless-web/src/test/java/org/springframework/cloud/function/test/app/PetData.java","names.add(""Daisy"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-serverless-web/src/test/java/org/springframework/cloud/function/test/app/PetData.java","names.add(""Rocky"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-serverless-web/src/test/java/org/springframework/cloud/function/test/app/PetData.java","names.add(""Maggie"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-serverless-web/src/test/java/org/springframework/cloud/function/test/app/PetData.java","names.add(""Jake"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-serverless-web/src/test/java/org/springframework/cloud/function/test/app/PetData.java","names.add(""Sophie"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-serverless-web/src/test/java/org/springframework/cloud/function/test/app/PetData.java","names.add(""Jack"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-serverless-web/src/test/java/org/springframework/cloud/function/test/app/PetData.java","names.add(""Sadie"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-serverless-web/src/test/java/org/springframework/cloud/function/test/app/PetData.java","names.add(""Toby"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-serverless-web/src/test/java/org/springframework/cloud/function/test/app/PetData.java","names.add(""Chloe"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-serverless-web/src/test/java/org/springframework/cloud/function/test/app/PetData.java","names.add(""Cody"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-serverless-web/src/test/java/org/springframework/cloud/function/test/app/PetData.java","names.add(""Bailey"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-serverless-web/src/test/java/org/springframework/cloud/function/test/app/PetData.java","names.add(""Buster"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-serverless-web/src/test/java/org/springframework/cloud/function/test/app/PetData.java","names.add(""Lola"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-serverless-web/src/test/java/org/springframework/cloud/function/test/app/PetData.java","names.add(""Duke"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-serverless-web/src/test/java/org/springframework/cloud/function/test/app/PetData.java","names.add(""Zoe"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-serverless-web/src/test/java/org/springframework/cloud/function/test/app/PetData.java","names.add(""Cooper"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-serverless-web/src/test/java/org/springframework/cloud/function/test/app/PetData.java","names.add(""Abby"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-serverless-web/src/test/java/org/springframework/cloud/function/test/app/PetData.java","names.add(""Riley"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-serverless-web/src/test/java/org/springframework/cloud/function/test/app/PetData.java","names.add(""Ginger"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-serverless-web/src/test/java/org/springframework/cloud/function/test/app/PetData.java","names.add(""Harley"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-serverless-web/src/test/java/org/springframework/cloud/function/test/app/PetData.java","names.add(""Roxy"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-serverless-web/src/test/java/org/springframework/cloud/function/test/app/PetData.java","names.add(""Bear"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-serverless-web/src/test/java/org/springframework/cloud/function/test/app/PetData.java","names.add(""Gracie"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-serverless-web/src/test/java/org/springframework/cloud/function/test/app/PetData.java","names.add(""Tucker"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-serverless-web/src/test/java/org/springframework/cloud/function/test/app/PetData.java","names.add(""Coco"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-serverless-web/src/test/java/org/springframework/cloud/function/test/app/PetData.java","names.add(""Murphy"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-serverless-web/src/test/java/org/springframework/cloud/function/test/app/PetData.java","names.add(""Sasha"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-serverless-web/src/test/java/org/springframework/cloud/function/test/app/PetData.java","names.add(""Lucky"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-serverless-web/src/test/java/org/springframework/cloud/function/test/app/PetData.java","names.add(""Lily"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-serverless-web/src/test/java/org/springframework/cloud/function/test/app/PetData.java","names.add(""Oliver"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-serverless-web/src/test/java/org/springframework/cloud/function/test/app/PetData.java","names.add(""Angel"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-serverless-web/src/test/java/org/springframework/cloud/function/test/app/PetData.java","names.add(""Sam"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-serverless-web/src/test/java/org/springframework/cloud/function/test/app/PetData.java","names.add(""Princess"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-serverless-web/src/test/java/org/springframework/cloud/function/test/app/PetData.java","names.add(""Oscar"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-serverless-web/src/test/java/org/springframework/cloud/function/test/app/PetData.java","names.add(""Emma"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-serverless-web/src/test/java/org/springframework/cloud/function/test/app/PetData.java","names.add(""Teddy"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-serverless-web/src/test/java/org/springframework/cloud/function/test/app/PetData.java","names.add(""Annie"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-serverless-web/src/test/java/org/springframework/cloud/function/test/app/PetData.java","names.add(""Winston"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-serverless-web/src/test/java/org/springframework/cloud/function/test/app/PetData.java","names.add(""Rosie"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-context/src/main/java/org/springframework/cloud/function/context/catalog/FunctionTypeUtils.java","methods.add(method)"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-context/src/main/java/org/springframework/cloud/function/context/config/SmartCompositeMessageConverter.java","resultList.add(null)"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-context/src/main/java/org/springframework/cloud/function/context/config/SmartCompositeMessageConverter.java","resultList.add(conversionResult)"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-context/src/main/java/org/springframework/cloud/function/context/config/ContextFunctionCatalogAutoConfiguration.java","mcList.add(mc)"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-context/src/main/java/org/springframework/cloud/function/context/config/ContextFunctionCatalogAutoConfiguration.java","
mcList.add(new JsonMessageConverter(jsonMapper))"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-context/src/main/java/org/springframework/cloud/function/context/config/ContextFunctionCatalogAutoConfiguration.java","mcList.add(new ByteArrayMessageConverter())"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-context/src/main/java/org/springframework/cloud/function/context/config/ContextFunctionCatalogAutoConfiguration.java","mcList.add(new StringMessageConverter())"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-context/src/main/java/org/springframework/cloud/function/context/config/ContextFunctionCatalogAutoConfiguration.java","mcList.add(new PrimitiveTypesFromStringMessageConverter(conversionService))"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-context/src/main/java/org/springframework/cloud/function/context/config/ContextFunctionCatalogInitializer.java","messageConverters.add(new JsonMessageConverter(jsonMapper))"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-context/src/main/java/org/springframework/cloud/function/context/config/ContextFunctionCatalogInitializer.java","messageConverters.add(new ByteArrayMessageConverter())"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-context/src/main/java/org/springframework/cloud/function/context/config/ContextFunctionCatalogInitializer.java","messageConverters.add(new StringMessageConverter())"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-context/src/main/java/org/springframework/cloud/function/context/config/ContextFunctionCatalogInitializer.java","messageConverters.add(new PrimitiveTypesFromStringMessageConverter(new DefaultConversionService()))"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-context/src/main/java/org/springframework/cloud/function/context/config/FunctionContextUtils.java","params.add(ClassUtils.resolveClassName(holder.getType(), null))"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-context/src/test/java/org/springframework/cloud/function/userissues/UserIssuesTests.java","products.add(p)"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-context/src/test/java/org/springframework/cloud/function/userissues/UserIssuesTests.java","products.add(p)"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-context/src/test/java/org/springframework/cloud/function/userissues/UserIssuesTests.java","products.add(p)"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-context/src/test/java/org/springframework/cloud/function/userissues/UserIssuesTests.java","products.add(""{\""name\"":\""julien\""}"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-context/src/test/java/org/springframework/cloud/function/userissues/UserIssuesTests.java","products.add(""{\""name\"":\""ricky\""}"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-context/src/test/java/org/springframework/cloud/function/userissues/UserIssuesTests.java","products.add(""{\""name\"":\""bubbles\""}"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-context/src/test/java/org/springframework/cloud/function/context/catalog/SimpleFunctionRegistryTests.java","messageConverters.add(new JsonMessageConverter(jsonMapper))"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-context/src/test/java/org/springframework/cloud/function/context/catalog/SimpleFunctionRegistryTests.java","messageConverters.add(new ByteArrayMessageConverter())"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-context/src/test/java/org/springframework/cloud/function/context/catalog/SimpleFunctionRegistryTests.java","messageConverters.add(new StringMessageConverter())"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-context/src/test/java/org/springframework/cloud/function/context/catalog/BeanFactoryAwareFunctionRegistryTests.java","list.add(""Ricky"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-context/src/test/java/org/springframework/cloud/function/context/catalog/BeanFactoryAwareFunctionRegistryTests.java","list.add(""Julien"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-context/src/test/java/org/springframework/cloud/function/context/catalog/BeanFactoryAwareFunctionRegistryTests.java","list.add(""Bubbles"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-context/src/test/java/org/springframework/cloud/function/context/catalog/BeanFactoryAwareFunctionRegistryTests.java","result.add(value)"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-context/src/test/java/org/springframework/cloud/function/context/config/ContextFunctionCatalogInitializerTests.java","this.list.add(value)"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-context/src/test/java/org/springframework/cloud/function/context/config/ContextFunctionCatalogAutoConfigurationTests.java","this.list.add(value)"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-rsocket/src/main/java/org/springframework/cloud/function/rsocket/FunctionRSocketMessageHandler.java","result.add(matchingCondition)"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-rsocket/src/main/java/org/springframework/cloud/function/rsocket/RSocketCustomizerConfiguration.java","encoders.add(0, new MessageAwareJsonEncoder(jsonMapper, true))"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-rsocket/src/main/java/org/springframework/cloud/function/rsocket/RSocketCustomizerConfiguration.java","decoders.add(0, new MessageAwareJsonDecoder(jsonMapper))"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-adapter-azure-web/src/test/java/org/springframework/cloud/function/adapter/azure/web/PetData.java","breeds.add(""Afghan Hound"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-adapter-azure-web/src/test/java/org/springframework/cloud/function/adapter/azure/web/PetData.java","breeds.add(""Beagle"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-adapter-azure-web/src/test/java/org/springframework/cloud/function/adapter/azure/web/PetData.java","breeds.add(""Bernese Mountain Dog"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-adapter-azure-web/src/test/java/org/springframework/cloud/function/adapter/azure/web/PetData.java","breeds.add(""Bloodhound"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-adapter-azure-web/src/test/java/org/springframework/cloud/function/adapter/azure/web/PetData.java","breeds.add(""Dalmatian"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-adapter-azure-web/src/test/java/org/springframework/cloud/function/adapter/azure/web/PetData.java","breeds.add(""Jack Russell Terrier"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-adapter-azure-web/src/test/java/org/springframework/cloud/function/adapter/azure/web/PetData.java","breeds.add(""Norwegian Elkhound"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-adapter-azure-web/src/test/java/org/springframework/cloud/function/adapter/azure/web/PetData.java","names.add(""Bailey"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-adapter-azure-web/src/test/java/org/springframework/cloud/function/adapter/azure/web/PetData.java","names.add(""Bella"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-adapter-azure-web/src/test/java/org/springframework/cloud/function/adapter/azure/web/PetData.java","names.add(""Max"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-adapter-azure-web/src/test/java/org/springframework/cloud/function/adapter/azure/web/PetData.java","names.add(""Lucy"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-adapter-azure-web/src/test/java/org/springframework/cloud/function/adapter/azure/web/PetData.java","names.add(""Charlie"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-adapter-azure-web/src/test/java/org/springframework/cloud/function/adapter/azure/web/PetData.java","names.add(""Molly"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-adapter-azure-web/src/test/java/org/springframework/cloud/function/adapter/azure/web/PetData.java","names.add(""Buddy"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-adapter-azure-web/src/test/java/org/springframework/cloud/function/adapter/azure/web/PetData.java","names.add(""Daisy"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-adapter-azure-web/src/test/java/org/springframework/cloud/function/adapter/azure/web/PetData.java","names.add(""Rocky"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-adapter-azure-web/src/test/java/org/springframework/cloud/function/adapter/azure/web/PetData.java","names.add(""Maggie"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-adapter-azure-web/src/test/java/org/springframework/cloud/function/adapter/azure/web/PetData.java","names.add(""Jake"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-adapter-azure-web/src/test/java/org/springframework/cloud/function/adapter/azure/web/PetData.java","names.add(""Sophie"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-adapter-azure-web/src/test/java/org/springframework/cloud/function/adapter/azure/web/PetData.java","names.add(""Jack"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-adapter-azure-web/src/test/java/org/springframework/cloud/function/adapter/azure/web/PetData.java","names.add(""Sadie"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-adapter-azure-web/src/test/java/org/springframework/cloud/function/adapter/azure/web/PetData.java","names.add(""Toby"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-adapter-azure-web/src/test/java/org/springframework/cloud/function/adapter/azure/web/PetData.java","names.add(""Chloe"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-adapter-azure-web/src/test/java/org/springframework/cloud/function/adapter/azure/web/PetData.java","names.add(""Cody"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-adapter-azure-web/src/test/java/org/springframework/cloud/function/adapter/azure/web/PetData.java","names.add(""Bailey"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-adapter-azure-web/src/test/java/org/springframework/cloud/function/adapter/azure/web/PetData.java","names.add(""Buster"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-adapter-azure-web/src/test/java/org/springframework/cloud/function/adapter/azure/web/PetData.java","names.add(""Lola"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-adapter-azure-web/src/test/java/org/springframework/cloud/function/adapter/azure/web/PetData.java","names.add(""Duke"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-adapter-azure-web/src/test/java/org/springframework/cloud/function/adapter/azure/web/PetData.java","names.add(""Zoe"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-adapter-azure-web/src/test/java/org/springframework/cloud/function/adapter/azure/web/PetData.java","names.add(""Cooper"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-adapter-azure-web/src/test/java/org/springframework/cloud/function/adapter/azure/web/PetData.java","names.add(""Abby"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-adapter-azure-web/src/test/java/org/springframework/cloud/function/adapter/azure/web/PetData.java","names.add(""Riley"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-adapter-azure-web/src/test/java/org/springframework/cloud/function/adapter/azure/web/PetData.java","names.add(""Ginger"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-adapter-azure-web/src/test/java/org/springframework/cloud/function/adapter/azure/web/PetData.java","names.add(""Harley"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-adapter-azure-web/src/test/java/org/springframework/cloud/function/adapter/azure/web/PetData.java","names.add(""Roxy"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-adapter-azure-web/src/test/java/org/springframework/cloud/function/adapter/azure/web/PetData.java","names.add(""Bear"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-adapter-azure-web/src/test/java/org/springframework/cloud/function/adapter/azure/web/PetData.java","names.add(""Gracie"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-adapter-azure-web/src/test/java/org/springframework/cloud/function/adapter/azure/web/PetData.java","names.add(""Tucker"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-adapter-azure-web/src/test/java/org/springframework/cloud/function/adapter/azure/web/PetData.java","names.add(""Coco"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-adapter-azure-web/src/test/java/org/springframework/cloud/function/adapter/azure/web/PetData.java","names.add(""Murphy"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-adapter-azure-web/src/test/java/org/springframework/cloud/function/adapter/azure/web/PetData.java","names.add(""Sasha"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-adapter-azure-web/src/test/java/org/springframework/cloud/function/adapter/azure/web/PetData.java","names.add(""Lucky"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-adapter-azure-web/src/test/java/org/springframework/cloud/function/adapter/azure/web/PetData.java","names.add(""Lily"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-adapter-azure-web/src/test/java/org/springframework/cloud/function/adapter/azure/web/PetData.java","names.add(""Oliver"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-adapter-azure-web/src/test/java/org/springframework/cloud/function/adapter/azure/web/PetData.java","names.add(""Angel"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-adapter-azure-web/src/test/java/org/springframework/cloud/function/adapter/azure/web/PetData.java","names.add(""Sam"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-adapter-azure-web/src/test/java/org/springframework/cloud/function/adapter/azure/web/PetData.java","names.add(""Princess"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-adapter-azure-web/src/test/java/org/springframework/cloud/function/adapter/azure/web/PetData.java","names.add(""Oscar"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-adapter-azure-web/src/test/java/org/springframework/cloud/function/adapter/azure/web/PetData.java","names.add(""Emma"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-adapter-azure-web/src/test/java/org/springframework/cloud/function/adapter/azure/web/PetData.java","names.add(""Teddy"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-adapter-azure-web/src/test/java/org/springframework/cloud/function/adapter/azure/web/PetData.java","names.add(""Annie"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-adapter-azure-web/src/test/java/org/springframework/cloud/function/adapter/azure/web/PetData.java","names.add(""Winston"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-adapter-azure-web/src/test/java/org/springframework/cloud/function/adapter/azure/web/PetData.java","names.add(""Rosie"")"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-deployer/src/main/java/org/springframework/cloud/function/deployer/DeployerContextUtils.java","params.add(ClassUtils.resolveClassName(holder.getType(), null))"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-deployer/src/main/java/org/springframework/cloud/function/deployer/FunctionArchiveDeployer.java","classPathArchives.add(iter.next())"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-deployer/src/main/java/org/springframework/cloud/function/deployer/FunctionArchiveDeployer.java","classPathArchives.add(this.getArchive())"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-deployer/src/main/java/org/springframework/cloud/function/deployer/FunctionDeployerConfiguration.java","originalArguments.add(FunctionProperties.PREFIX + "".definition="" + arguments.getOptionValues(""function.name"").get(0))"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-deployer/src/main/java/org/springframework/cloud/function/deployer/FunctionDeployerConfiguration.java","originalArguments.add(FunctionProperties.PREFIX + "".location="" + arguments.getOptionValues(""function.location"").get(0))"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-deployer/src/test/java/org/springframework/cloud/function/deployer/FunctionDeployerTests.java","result1.add(new String(message.getPayload()))"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-deployer/src/test/java/org/springframework/cloud/function/deployer/FunctionDeployerTests.java","result2.add(new String(message.getPayload()))"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-deployer/src/test/java/org/springframework/cloud/function/deployer/FunctionDeployerTests.java","result1.add(new String(message.getPayload()))"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-deployer/src/test/java/org/springframework/cloud/function/deployer/FunctionDeployerTests.java","result2.add(new String(message.getPayload()))"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-adapter-azure/src/main/java/org/springframework/cloud/function/adapter/azure/FunctionInvoker.java","resultList.add(resultItem)"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-grpc/src/test/java/org/springframework/cloud/function/grpc/GrpcInteractionTests.java","messages.add(MessageBuilder.withPayload(""\""Ricky\"""".getBytes()).setHeader(""foo"", ""bar"")
		.build())"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-grpc/src/test/java/org/springframework/cloud/function/grpc/GrpcInteractionTests.java","messages.add(MessageBuilder.withPayload(""\""Julien\"""".getBytes()).setHeader(""foo"", ""bar"")
		.build())"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-grpc/src/test/java/org/springframework/cloud/function/grpc/GrpcInteractionTests.java","messages.add(MessageBuilder.withPayload(""\""Bubbles\"""".getBytes()).setHeader(""foo"", ""bar"")
		.build())"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-grpc/src/test/java/org/springframework/cloud/function/grpc/GrpcInteractionTests.java","messages.add(MessageBuilder.withPayload(""\""Ricky\"""".getBytes()).setHeader(""foo"", ""bar"")
		.setHeader(MessageHeaders.CONTENT_TYPE, MimeTypeUtils.TEXT_PLAIN)
		.build())"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-grpc/src/test/java/org/springframework/cloud/function/grpc/GrpcInteractionTests.java","messages.add(MessageBuilder.withPayload(""\""Julien\"""".getBytes()).setHeader(""foo"", ""bar"")
		.setHeader(MessageHeaders.CONTENT_TYPE, MimeTypeUtils.TEXT_PLAIN)
		.build())"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-grpc/src/test/java/org/springframework/cloud/function/grpc/GrpcInteractionTests.java","messages.add(MessageBuilder.withPayload(""\""Bubbles\"""".getBytes()).setHeader(""foo"", ""bar"")
		.setHeader(MessageHeaders.CONTENT_TYPE, MimeTypeUtils.TEXT_PLAIN)
		.build())"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-grpc/src/test/java/org/springframework/cloud/function/grpc/GrpcInteractionTests.java","messages.add(MessageBuilder.withPayload(""\""Ricky\"""".getBytes()).setHeader(""foo"", ""bar"")
		.build())"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-grpc/src/test/java/org/springframework/cloud/function/grpc/GrpcInteractionTests.java","messages.add(MessageBuilder.withPayload(""\""Julien\"""".getBytes()).setHeader(""foo"", ""bar"")
		.build())"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-grpc/src/test/java/org/springframework/cloud/function/grpc/GrpcInteractionTests.java","messages.add(MessageBuilder.withPayload(""\""Bubbles\"""".getBytes()).setHeader(""foo"", ""bar"")
		.build())"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-grpc/src/test/java/org/springframework/cloud/function/grpc/GrpcInteractionTests.java","messages.add(MessageBuilder.withPayload(""\""Ricky\"""".getBytes()).setHeader(""foo"", ""bar"")
		.build())"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-grpc/src/test/java/org/springframework/cloud/function/grpc/GrpcInteractionTests.java","messages.add(MessageBuilder.withPayload(""\""Julien\"""".getBytes()).setHeader(""foo"", ""bar"")
		.build())"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-grpc/src/test/java/org/springframework/cloud/function/grpc/GrpcInteractionTests.java","messages.add(MessageBuilder.withPayload(""\""Bubbles\"""".getBytes()).setHeader(""foo"", ""bar"")
		.build())"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-grpc/src/test/java/org/springframework/cloud/function/grpc/GrpcInteractionTests.java","messages.add(MessageBuilder.withPayload(""\""Ricky\"""".getBytes()).setHeader(""foo"", ""bar"")
		.build())"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-grpc/src/test/java/org/springframework/cloud/function/grpc/GrpcInteractionTests.java","messages.add(MessageBuilder.withPayload(""\""Julien\"""".getBytes()).setHeader(""foo"", ""bar"")
		.build())"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-grpc/src/test/java/org/springframework/cloud/function/grpc/GrpcInteractionTests.java","messages.add(MessageBuilder.withPayload(""\""Bubbles\"""".getBytes()).setHeader(""foo"", ""bar"")
		.build())"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-adapter-aws/src/main/java/org/springframework/cloud/function/adapter/aws/AWSLambdaUtils.java","result.add(convertFromJsonIfNecessary(message.getPayload(), objectMapper))"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-adapters/spring-cloud-function-adapter-aws/src/main/java/org/springframework/cloud/function/adapter/aws/AWSLambdaUtils.java","result.add(convertFromJsonIfNecessary(item, objectMapper))"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-web/src/test/java/org/springframework/cloud/function/test/RestPojoConfiguration.java","this.inputs.add(body)"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-web/src/test/java/org/springframework/cloud/function/test/RestConfiguration.java","this.inputs.add(body)"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-web/src/test/java/org/springframework/cloud/function/mvc/MvcRestApplicationTests.java","this.list.add(value)"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-web/src/test/java/org/springframework/cloud/function/mvc/MvcRestApplicationTests.java","this.list.add(value.getValue())"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-web/src/test/java/org/springframework/cloud/function/flux/FluxRestApplicationTests.java","this.list.add(value)"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-web/src/test/java/org/springframework/cloud/function/flux/FluxRestApplicationTests.java","this.list.add(value.getValue())"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-web/src/test/java/org/springframework/cloud/function/web/mvc/HttpPostIntegrationTests.java","this.list.add(value)"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-web/src/test/java/org/springframework/cloud/function/web/mvc/HttpPostIntegrationTests.java","this.list.add(value.getValue())"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-web/src/test/java/org/springframework/cloud/function/web/mvc/HttpPostIntegrationTests.java","this.list.add(value)"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-web/src/test/java/org/springframework/cloud/function/web/source/WebAppIntegrationTests.java","this.values.add(body)"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-web/src/test/java/org/springframework/cloud/function/web/source/FunctionAutoConfigurationIntegrationTests.java","this.inputs.add(body)"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-web/src/test/java/org/springframework/cloud/function/web/source/FunctionAutoConfigurationWithRetriesIntegrationTests.java","this.inputs.add(body)"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-web/src/test/java/org/springframework/cloud/function/web/flux/HttpPostIntegrationTests.java","this.list.add(value)"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-web/src/test/java/org/springframework/cloud/function/web/flux/HttpPostIntegrationTests.java","this.list.add(value.getValue())"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-web/src/test/java/org/springframework/cloud/function/web/flux/HttpPostIntegrationTests.java","this.list.add(value.getValue())"
github.com,"spring-cloud/spring-cloud-function",main,"spring-cloud-function-web/src/test/java/org/springframework/cloud/function/web/flux/HttpPostIntegrationTests.java","this.list.add(value)"
github.com,"spring-cloud/spring-cloud-stream-binder-aws-kinesis",main,"spring-cloud-stream-binder-kinesis/src/main/java/org/springframework/cloud/stream/binder/kinesis/KinesisMessageChannelBinder.java","
this.streamsInUse.add(destination.getName())"
github.com,"spring-cloud/spring-cloud-stream-binder-aws-kinesis",main,"spring-cloud-stream-binder-kinesis/src/main/java/org/springframework/cloud/stream/binder/kinesis/KinesisMessageChannelBinder.java","
this.streamsInUse.add(destination.getName())"
github.com,"spring-cloud/spring-cloud-stream-binder-aws-kinesis",main,"spring-cloud-stream-binder-kinesis/src/main/java/org/springframework/cloud/stream/binder/kinesis/KinesisMessageChannelBinder.java","headers.add(""traceparent"")"
github.com,"spring-cloud/spring-cloud-stream-binder-aws-kinesis",main,"spring-cloud-stream-binder-kinesis/src/main/java/org/springframework/cloud/stream/binder/kinesis/KinesisMessageChannelBinder.java","headers.add(""X-B3*"")"
github.com,"spring-cloud/spring-cloud-stream-binder-aws-kinesis",main,"spring-cloud-stream-binder-kinesis/src/test/java/org/springframework/cloud/stream/binder/kinesis/KinesisBinderFunctionalTests.java","putRecordsRequestEntryList.add(putRecordsRequestEntry)"
github.com,"spring-cloud/spring-cloud-sleuth",3.1.x,"spring-cloud-sleuth-brave/src/main/java/org/springframework/cloud/sleuth/brave/bridge/W3CPropagation.java","pairs.add(new AbstractMap.SimpleEntry<>(baggage, value))"
github.com,"spring-cloud/spring-cloud-sleuth",3.1.x,"spring-cloud-sleuth-brave/src/test/java/org/springframework/cloud/sleuth/brave/instrument/messaging/KafkaFactoryBeanPostProcessorTests.java","factory.postProcessors.add(new TraceConsumerPostProcessor(null))"
github.com,"spring-cloud/spring-cloud-sleuth",3.1.x,"spring-cloud-sleuth-brave/src/test/java/org/springframework/cloud/sleuth/brave/instrument/messaging/KafkaFactoryBeanPostProcessorTests.java","factory.postProcessors.add(new TraceProducerPostProcessor(null))"
github.com,"spring-cloud/spring-cloud-sleuth",3.1.x,"spring-cloud-sleuth-brave/src/test/java/org/springframework/cloud/sleuth/brave/instrument/messaging/KafkaFactoryBeanPostProcessorTests.java","this.postProcessors.add(postProcessor)"
github.com,"spring-cloud/spring-cloud-sleuth",3.1.x,"spring-cloud-sleuth-brave/src/test/java/org/springframework/cloud/sleuth/brave/instrument/messaging/KafkaFactoryBeanPostProcessorTests.java","this.postProcessors.add(postProcessor)"
github.com,"spring-cloud/spring-cloud-sleuth",3.1.x,"tests/brave/spring-cloud-sleuth-zipkin-tests/src/test/java/org/springframework/cloud/sleuth/autoconfig/zipkin2/BraveZipkinAutoConfigurationTests.java","spanHandlers.add(handler1)"
github.com,"spring-cloud/spring-cloud-sleuth",3.1.x,"tests/brave/spring-cloud-sleuth-zipkin-tests/src/test/java/org/springframework/cloud/sleuth/autoconfig/zipkin2/BraveZipkinAutoConfigurationTests.java","spanHandlers.add(zipkin1)"
github.com,"spring-cloud/spring-cloud-sleuth",3.1.x,"tests/brave/spring-cloud-sleuth-zipkin-tests/src/test/java/org/springframework/cloud/sleuth/autoconfig/zipkin2/BraveZipkinAutoConfigurationTests.java","spanHandlers.add(handler2)"
github.com,"spring-cloud/spring-cloud-sleuth",3.1.x,"tests/brave/spring-cloud-sleuth-zipkin-tests/src/test/java/org/springframework/cloud/sleuth/autoconfig/zipkin2/BraveZipkinAutoConfigurationTests.java","spanHandlers.add(zipkin2)"
github.com,"spring-cloud/spring-cloud-sleuth",3.1.x,"tests/common/src/main/java/org/springframework/cloud/sleuth/instrument/async/TraceableExecutorServiceTests.java","list.add(new TraceCallable<>(this.tracer, new DefaultSpanNamer(), () -> ""foo""))"
github.com,"spring-cloud/spring-cloud-sleuth",3.1.x,"tests/common/src/main/java/org/springframework/cloud/sleuth/instrument/async/TraceableExecutorServiceTests.java","list.add((Callable) () -> ""bar"")"
github.com,"spring-cloud/spring-cloud-sleuth",3.1.x,"tests/common/src/main/java/org/springframework/cloud/sleuth/instrument/async/TraceableExecutorServiceTests.java","futures.add(CompletableFuture.runAsync(this.spanVerifyingRunnable, this.traceManagerableExecutorService))"
github.com,"spring-cloud/spring-cloud-sleuth",3.1.x,"tests/common/src/main/java/org/springframework/cloud/sleuth/instrument/messaging/TracingChannelInterceptorTest.java",messages::add
github.com,"spring-cloud/spring-cloud-sleuth",3.1.x,"tests/common/src/main/java/org/springframework/cloud/sleuth/instrument/messaging/TracingChannelInterceptorTest.java",messages::add
github.com,"spring-cloud/spring-cloud-sleuth",3.1.x,"tests/common/src/main/java/org/springframework/cloud/sleuth/instrument/messaging/TracingChannelInterceptorTest.java",messages::add
github.com,"spring-cloud/spring-cloud-sleuth",3.1.x,"tests/common/src/main/java/org/springframework/cloud/sleuth/instrument/messaging/TracingChannelInterceptorTest.java",messages::add
github.com,"spring-cloud/spring-cloud-sleuth",3.1.x,"tests/common/src/main/java/org/springframework/cloud/sleuth/instrument/messaging/TracingChannelInterceptorTest.java",messages::add
github.com,"spring-cloud/spring-cloud-sleuth",3.1.x,"tests/common/src/main/java/org/springframework/cloud/sleuth/instrument/messaging/TracingChannelInterceptorTest.java",messages::add
github.com,"spring-cloud/spring-cloud-sleuth",3.1.x,"tests/common/src/main/java/org/springframework/cloud/sleuth/instrument/messaging/TracingChannelInterceptorTest.java",messages::add
github.com,"spring-cloud/spring-cloud-sleuth",3.1.x,"spring-cloud-sleuth-samples/spring-cloud-sleuth-sample-messaging/src/test/java/integration/IntegrationTestZipkinSpanHandler.java","this.spans.add(span)"
github.com,"spring-cloud/spring-cloud-sleuth",3.1.x,"spring-cloud-sleuth-instrumentation/src/main/java/org/springframework/cloud/sleuth/instrument/rxjava/SleuthRxJavaSchedulersHook.java","patterns.add(Pattern.compile(thread))"
github.com,"spring-cloud/spring-cloud-sleuth",3.1.x,"spring-cloud-sleuth-instrumentation/src/main/java/org/springframework/cloud/sleuth/instrument/annotation/SpanTagAnnotationHandler.java","annotatedParametersIndices.add(container)"
github.com,"spring-cloud/spring-cloud-sleuth",3.1.x,"spring-cloud-sleuth-instrumentation/src/main/java/org/springframework/cloud/sleuth/instrument/annotation/SleuthAnnotationUtils.java","result.add(new SleuthAnnotatedParameter(i, (SpanTag) parameter2, args[i]))"
github.com,"spring-cloud/spring-cloud-sleuth",3.1.x,"spring-cloud-sleuth-instrumentation/src/main/java/org/springframework/cloud/sleuth/instrument/async/TraceableExecutorService.java","ts.add(new TraceCallable<>(tracer(), spanNamer(), task, this.spanName))"
github.com,"spring-cloud/spring-cloud-sleuth",3.1.x,"spring-cloud-sleuth-instrumentation/src/main/java/org/springframework/cloud/sleuth/instrument/async/LazyTraceScheduledThreadPoolExecutor.java","ts.add(traceCallableWhenContextReady(task))"
github.com,"spring-cloud/spring-cloud-sleuth",3.1.x,"spring-cloud-sleuth-instrumentation/src/main/java/org/springframework/cloud/sleuth/instrument/messaging/TraceMessageHandler.java","customizers.add(functionMessageSpanCustomizer)"
github.com,"spring-cloud/spring-cloud-sleuth",3.1.x,"spring-cloud-sleuth-instrumentation/src/main/java/org/springframework/cloud/sleuth/instrument/messaging/TraceMessageHandler.java","keysToRemove.add(Span.class.getName())"
github.com,"spring-cloud/spring-cloud-sleuth",3.1.x,"spring-cloud-sleuth-instrumentation/src/main/java/org/springframework/cloud/sleuth/instrument/messaging/TraceMessageHandler.java","keysToRemove.add(""traceHandlerParentSpan"")"
github.com,"spring-cloud/spring-cloud-sleuth",3.1.x,"spring-cloud-sleuth-instrumentation/src/main/java/org/springframework/cloud/sleuth/instrument/web/client/RestTemplateInterceptorInjector.java","interceptors.add(0, this.interceptor)"
github.com,"spring-cloud/spring-cloud-sleuth",3.1.x,"spring-cloud-sleuth-instrumentation/src/main/java/org/springframework/cloud/sleuth/instrument/web/client/TraceWebClientBeanPostProcessor.java","functions.add(new TraceExchangeFilterFunction(this.springContext))"
github.com,"spring-cloud/spring-cloud-sleuth",3.1.x,"spring-cloud-sleuth-instrumentation/src/main/java/org/springframework/cloud/sleuth/instrument/web/servlet/HttpServletRequestWrapper.java","headersList.add(headers.nextElement())"
github.com,"spring-cloud/spring-cloud-sleuth",3.1.x,"spring-cloud-sleuth-instrumentation/src/test/java/org/springframework/cloud/sleuth/tracer/SimpleSpan.java","this.events.add(value)"
github.com,"spring-cloud/spring-cloud-sleuth",3.1.x,"spring-cloud-sleuth-instrumentation/src/test/java/org/springframework/cloud/sleuth/tracer/SimpleSpanBuilder.java","this.events.add(value)"
github.com,"spring-cloud/spring-cloud-sleuth",3.1.x,"spring-cloud-sleuth-instrumentation/src/test/java/org/springframework/cloud/sleuth/tracer/SimpleSpanBuilder.java","simpleTracer.spans.add(span)"
github.com,"spring-cloud/spring-cloud-sleuth",3.1.x,"spring-cloud-sleuth-instrumentation/src/test/java/org/springframework/cloud/sleuth/tracer/SimpleTracer.java","this.spans.add(span)"
github.com,"spring-cloud/spring-cloud-sleuth",3.1.x,"spring-cloud-sleuth-zipkin/src/main/java/org/springframework/cloud/sleuth/zipkin2/DefaultZipkinRestTemplateCustomizer.java","restTemplate.getInterceptors().add(0, new GZipInterceptor())"
github.com,"spring-cloud/spring-cloud-sleuth",3.1.x,"spring-cloud-sleuth-autoconfigure/src/main/java/org/springframework/cloud/sleuth/autoconfig/instrument/jdbc/P6SpyPropertiesSetter.java","// default factory, holds P6Spy configuration
moduleList.add(P6SpyFactory.class.getName())"
github.com,"spring-cloud/spring-cloud-sleuth",3.1.x,"spring-cloud-sleuth-autoconfigure/src/main/java/org/springframework/cloud/sleuth/autoconfig/instrument/jdbc/P6SpyPropertiesSetter.java","moduleList.add(P6LogFactory.class.getName())"
github.com,"spring-cloud/spring-cloud-sleuth",3.1.x,"spring-cloud-sleuth-autoconfigure/src/main/java/org/springframework/cloud/sleuth/autoconfig/instrument/web/client/TraceWebAsyncClientAutoConfiguration.java","interceptors.add(this.clientInterceptor)"
github.com,"spring-cloud/spring-cloud-sleuth",3.1.x,"spring-cloud-sleuth-autoconfigure/src/main/java/org/springframework/cloud/sleuth/autoconfig/actuate/BufferingSpanReporter.java","events.add(iterator.next())"
github.com,"spring-cloud/spring-cloud-sleuth",3.1.x,"spring-cloud-sleuth-autoconfigure/src/test/java/org/springframework/cloud/sleuth/autoconfig/instrument/jdbc/P6SpyConfigurationTests.java","EXCEPTIONS.add(e)"
github.com,"spring-cloud/spring-cloud-sleuth",3.1.x,"spring-cloud-sleuth-autoconfigure/src/test/java/org/springframework/cloud/sleuth/autoconfig/instrument/jdbc/P6SpyConfigurationTests.java","MESSAGES.add(text)"
github.com,"spring-cloud/spring-cloud-sleuth",3.1.x,"spring-cloud-sleuth-autoconfigure/src/test/java/org/springframework/cloud/sleuth/autoconfig/instrument/kafka/SpringKafkaAutoConfigurationTests.java","this.postProcessors.add(postProcessor)"
github.com,"spring-cloud/spring-cloud-sleuth",3.1.x,"spring-cloud-sleuth-autoconfigure/src/test/java/org/springframework/cloud/sleuth/autoconfig/instrument/kafka/SpringKafkaAutoConfigurationTests.java","this.postProcessors.add(postProcessor)"
github.com,"spring-cloud/spring-cloud-sleuth",3.1.x,"spring-cloud-sleuth-autoconfigure/src/test/java/org/springframework/cloud/sleuth/autoconfig/instrument/web/client/BraveWebClientAutoConfigurationTests.java","restTemplate.getInterceptors().add(0, new MySecondClientHttpRequestInterceptor())"
github.com,"spring-projects/spring-mvc-showcase",master,"src/main/java/org/springframework/samples/mvc/config/WebMvcConfig.java","resolvers.add(new CustomArgumentResolver())"
github.com,"spring-projects/spring-tuple",master,"spring-tuple/src/main/java/org/springframework/tuple/DefaultMutableTuple.java","names.add(name)"
github.com,"spring-projects/spring-tuple",master,"spring-tuple/src/main/java/org/springframework/tuple/DefaultMutableTuple.java","values.add(value)"
github.com,"spring-projects/spring-tuple",master,"spring-tuple/src/main/java/org/springframework/tuple/DefaultTuple.java","types.add(val.getClass())"
github.com,"spring-projects/spring-tuple",master,"spring-tuple/src/main/java/org/springframework/tuple/DefaultTuple.java","newNames.add(name)"
github.com,"spring-projects/spring-tuple",master,"spring-tuple/src/main/java/org/springframework/tuple/DefaultTuple.java","newValues.add(value)"
github.com,"spring-projects/spring-tuple",master,"spring-tuple/src/main/java/org/springframework/tuple/JsonStringToTupleConverter.java","list.add(convert(item.toString()))"
github.com,"spring-projects/spring-tuple",master,"spring-tuple/src/main/java/org/springframework/tuple/JsonStringToTupleConverter.java","list.add(nodeToList(item))"
github.com,"spring-projects/spring-tuple",master,"spring-tuple/src/main/java/org/springframework/tuple/JsonStringToTupleConverter.java","list.add(null)"
github.com,"spring-projects/spring-tuple",master,"spring-tuple/src/main/java/org/springframework/tuple/JsonStringToTupleConverter.java","list.add(item.booleanValue())"
github.com,"spring-projects/spring-tuple",master,"spring-tuple/src/main/java/org/springframework/tuple/JsonStringToTupleConverter.java","list.add(item.numberValue())"
github.com,"spring-projects/spring-tuple",master,"spring-tuple/src/main/java/org/springframework/tuple/JsonStringToTupleConverter.java","list.add(mapper.treeToValue(item, Object.class))"
github.com,"spring-projects/spring-tuple",master,"spring-tuple/src/main/java/org/springframework/tuple/kryo/DefaultTupleSerializer.java","values.add(i, val)"
github.com,"spring-projects/spring-tuple",master,"spring-tuple/src/main/java/org/springframework/tuple/TupleBuilder.java","names.add(k1)"
github.com,"spring-projects/spring-tuple",master,"spring-tuple/src/main/java/org/springframework/tuple/TupleBuilder.java","values.add(v1)"
github.com,"spring-projects/spring-tuple",master,"spring-tuple/src/main/java/org/springframework/tuple/TupleBuilder.java","values.add(v1)"
github.com,"spring-projects/spring-tuple",master,"spring-tuple/src/main/java/org/springframework/tuple/TupleBuilder.java","fields.add(k1)"
github.com,"spring-projects/spring-tuple",master,"spring-tuple/src/main/java/org/springframework/tuple/JsonNodeToTupleConverter.java","list.add(convert(item))"
github.com,"spring-projects/spring-tuple",master,"spring-tuple/src/main/java/org/springframework/tuple/JsonNodeToTupleConverter.java","list.add(nodeToList(item))"
github.com,"spring-projects/spring-tuple",master,"spring-tuple/src/main/java/org/springframework/tuple/JsonNodeToTupleConverter.java","list.add(null)"
github.com,"spring-projects/spring-tuple",master,"spring-tuple/src/main/java/org/springframework/tuple/JsonNodeToTupleConverter.java","list.add(item.booleanValue())"
github.com,"spring-projects/spring-tuple",master,"spring-tuple/src/main/java/org/springframework/tuple/JsonNodeToTupleConverter.java","list.add(item.numberValue())"
github.com,"spring-projects/spring-tuple",master,"spring-tuple/src/main/java/org/springframework/tuple/JsonNodeToTupleConverter.java","list.add(item.asText())"
github.com,"spring-projects/spring-tuple",master,"spring-tuple/src/test/java/org/springframework/tuple/DefaultTupleTests.java","values.add(""bar"")"
github.com,"spring-projects/spring-tuple",master,"spring-tuple/src/test/java/org/springframework/tuple/DefaultTupleTests.java","names.add(""foo"")"
github.com,"spring-projects/spring-tuple",master,"spring-tuple/src/test/java/org/springframework/tuple/DefaultTupleTests.java","names.add(""foo"")"
github.com,"spring-projects/spring-tuple",master,"spring-tuple/src/test/java/org/springframework/tuple/DefaultTupleTests.java","names.add(""oof"")"
github.com,"spring-projects/spring-tuple",master,"spring-tuple/src/test/java/org/springframework/tuple/DefaultTupleTests.java","values.add(""bar"")"
github.com,"spring-projects/spring-tuple",master,"spring-integration-tuple/src/main/java/org/springframework/integration/tuple/MapToTupleTransformer.java","newNames.add(entry.getKey().toString())"
github.com,"spring-projects/spring-tuple",master,"spring-integration-tuple/src/main/java/org/springframework/integration/tuple/MapToTupleTransformer.java","newValues.add(entry.getValue())"
github.com,"spring-projects/spring-tuple",master,"spring-integration-tuple/src/main/java/org/springframework/integration/tuple/JsonToTupleTransformer.java","names.add(name)"
github.com,"spring-projects/spring-tuple",master,"spring-integration-tuple/src/main/java/org/springframework/integration/tuple/JsonToTupleTransformer.java","values.add(value)"
github.com,"spring-projects/spring-tuple",master,"spring-integration-tuple/src/main/java/org/springframework/integration/tuple/TupleKryoRegistrar.java","registrations.add(new Registration(DefaultTuple.class, defaultTupleSerializer, TUPLE_REGISTRATION_ID))"
github.com,"spring-projects/spring-tuple",master,"spring-integration-tuple/src/main/java/org/springframework/integration/tuple/TupleKryoRegistrar.java","registrations.add(new Registration(ArrayList.class, collectionSerializer, ARRAY_LIST_REGISTRATION_ID))"
github.com,"spring-projects/spring-tuple",master,"spring-batch-tuple/src/main/java/org/springframework/batch/tuple/TupleFieldExtractor.java","extractedFields.add(item.getValue(i))"
github.com,"spring-projects/spring-tuple",master,"spring-batch-tuple/src/main/java/org/springframework/batch/tuple/TupleFieldExtractor.java","extractedFields.add(item.getValue(fieldName))"
github.com,"spring-projects/spring-tuple",master,"spring-batch-tuple/src/test/java/org/springframework/batch/tuple/TupleFieldExtractorTests.java","add(""first"")"
github.com,"spring-projects/spring-tuple",master,"spring-batch-tuple/src/test/java/org/springframework/batch/tuple/TupleFieldExtractorTests.java","add(""last"")"
github.com,"spring-projects/spring-tuple",master,"spring-batch-tuple/src/test/java/org/springframework/batch/tuple/TupleFieldExtractorTests.java","add(""born"")"
github.com,"spring-projects/spring-tuple",master,"spring-batch-tuple/src/test/java/org/springframework/batch/tuple/TupleFieldExtractorTests.java","add(""first"")"
github.com,"spring-projects/spring-tuple",master,"spring-batch-tuple/src/test/java/org/springframework/batch/tuple/TupleFieldExtractorTests.java","add(""last"")"
github.com,"spring-projects/spring-tuple",master,"spring-batch-tuple/src/test/java/org/springframework/batch/tuple/TupleFieldExtractorTests.java","add(""birthday"")"
github.com,"spring-projects/spring-plugin",main,"core/src/test/java/org/springframework/plugin/core/SimplePluginRegistryUnitTest.java","plugins.add(null)"
github.com,"spring-projects/spring-integration-kafka",master,"src/main/java/org/springframework/integration/kafka/inbound/KafkaMessageSource.java","toCommit.add(info)"
github.com,"spring-projects/spring-integration-kafka",master,"src/test/java/org/springframework/integration/kafka/outbound/KafkaProducerMessageHandlerTests.java","transactionalIds.add(TransactionSupport.getTransactionIdSuffix())"
github.com,"spring-projects/spring-integration-kafka",master,"src/test/java/org/springframework/integration/kafka/outbound/KafkaProducerMessageHandlerTests.java","transactionalIds.add(TransactionSupport.getTransactionIdSuffix())"
github.com,"spring-cloud/spring-cloud-stream",main,"binders/pulsar-binder/spring-cloud-stream-binder-pulsar/src/test/java/org/springframework/cloud/stream/binder/pulsar/PulsarBinderIntegrationTests.java","producersCreated.add(producer)"
github.com,"spring-cloud/spring-cloud-stream",main,"binders/pulsar-binder/spring-cloud-stream-binder-pulsar/src/test/java/org/springframework/cloud/stream/binder/pulsar/PulsarBinderIntegrationTests.java","consumersCreated.add(consumer)"
github.com,"spring-cloud/spring-cloud-stream",main,"core/spring-cloud-stream/src/main/java/org/springframework/cloud/stream/function/FunctionConfiguration.java","contentTypes.add(bindingProperties.getContentType())"
github.com,"spring-cloud/spring-cloud-stream",main,"core/spring-cloud-stream/src/main/java/org/springframework/cloud/stream/function/FunctionConfiguration.java","eligibleFunctionDefinitions.add(functionDefinition)"
github.com,"spring-cloud/spring-cloud-stream",main,"core/spring-cloud-stream/src/main/java/org/springframework/cloud/stream/binding/AbstractBindableProxyFactory.java","candidateBindingTargetFactories.add(bindingTargetFactoryEntry.getKey())"
github.com,"spring-cloud/spring-cloud-stream",main,"core/spring-cloud-stream/src/main/java/org/springframework/cloud/stream/binding/AbstractBindableProxyFactory.java","bindings.add(bindingService.bindProducer(
	boundTargetHolder.getBoundTarget(), outputTargetName))"
github.com,"spring-cloud/spring-cloud-stream",main,"core/spring-cloud-stream/src/main/java/org/springframework/cloud/stream/binder/DefaultBinderFactory.java","candidatesForBindableType.add(defaultCandidateConfiguration)"
github.com,"spring-cloud/spring-cloud-stream",main,"core/spring-cloud-stream/src/main/java/org/springframework/cloud/stream/binder/DefaultBinderFactory.java","sourceClasses.add(Thread.currentThread().getContextClassLoader().loadClass(source.trim()))"
github.com,"spring-cloud/spring-cloud-stream",main,"core/spring-cloud-stream/src/main/java/org/springframework/cloud/stream/binder/DefaultPollableMessageSource.java","this.interceptors.add(interceptor)"
github.com,"spring-cloud/spring-cloud-stream",main,"core/spring-cloud-stream/src/main/java/org/springframework/cloud/stream/binder/DefaultPollableMessageSource.java","this.interceptors.add(index, interceptor)"
github.com,"spring-cloud/spring-cloud-stream",main,"core/spring-cloud-stream/src/main/java/org/springframework/cloud/stream/config/BinderFactoryAutoConfiguration.java","resolvers.add(new SmartPayloadArgumentResolver(
		compositeMessageConverter,
		validator))"
github.com,"spring-cloud/spring-cloud-stream",main,"core/spring-cloud-stream/src/main/java/org/springframework/cloud/stream/config/BinderFactoryAutoConfiguration.java","resolvers.add(new SmartMessageMethodArgumentResolver(
		compositeMessageConverter))"
github.com,"spring-cloud/spring-cloud-stream",main,"core/spring-cloud-stream/src/main/java/org/springframework/cloud/stream/config/BinderFactoryAutoConfiguration.java","
resolvers.add(new HeaderMethodArgumentResolver(clbf.getConversionService(), clbf))"
github.com,"spring-cloud/spring-cloud-stream",main,"core/spring-cloud-stream/src/main/java/org/springframework/cloud/stream/config/BinderFactoryAutoConfiguration.java","resolvers.add(new HeadersMethodArgumentResolver())"
github.com,"spring-cloud/spring-cloud-stream",main,"core/spring-cloud-stream/src/main/java/org/springframework/cloud/stream/config/BinderFactoryAutoConfiguration.java","
// Copy the order from Spring Integration for compatibility with SI 5.2
resolvers.add(new PayloadExpressionArgumentResolver())"
github.com,"spring-cloud/spring-cloud-stream",main,"core/spring-cloud-stream/src/main/java/org/springframework/cloud/stream/config/BinderFactoryAutoConfiguration.java","resolvers.add(new NullAwarePayloadArgumentResolver(compositeMessageConverter))"
github.com,"spring-cloud/spring-cloud-stream",main,"core/spring-cloud-stream/src/main/java/org/springframework/cloud/stream/config/BinderFactoryAutoConfiguration.java","resolvers.add(payloadExpressionArgumentResolver)"
github.com,"spring-cloud/spring-cloud-stream",main,"core/spring-cloud-stream/src/main/java/org/springframework/cloud/stream/config/BinderFactoryAutoConfiguration.java","resolvers.add(payloadsArgumentResolver)"
github.com,"spring-cloud/spring-cloud-stream",main,"core/spring-cloud-stream/src/main/java/org/springframework/cloud/stream/config/BinderFactoryAutoConfiguration.java","resolvers.add(mapArgumentResolver)"
github.com,"spring-cloud/spring-cloud-stream",main,"core/spring-cloud-stream/src/main/java/org/springframework/cloud/stream/config/BinderFactoryAutoConfiguration.java","configurerList.add(messageConverterConfigurer)"
github.com,"spring-cloud/spring-cloud-stream",main,"core/spring-cloud-stream/src/main/java/org/springframework/cloud/stream/config/BindingServiceConfiguration.java","existingBinderConfigurations.add(binderEntry.getKey())"
github.com,"spring-cloud/spring-cloud-stream",main,"core/spring-cloud-stream/src/main/java/org/springframework/cloud/stream/config/BindingServiceConfiguration.java","existingBinderConfigurations.add(binderEntry.getKey())"
github.com,"spring-cloud/spring-cloud-stream",main,"core/spring-cloud-stream/src/main/java/org/springframework/cloud/stream/converter/CompositeMessageConverterFactory.java","this.converters.add(new JsonMessageConverter(this.jsonMapper) {
	@Override
	protected Object convertToInternal(Object payload, @Nullable MessageHeaders headers,
			@Nullable Object conversionHint) {
		/*
		 * We must revisit this. This is a copy from ApplicationMarshallingMessageConverter which derived from an older class etc. . .
		 * This attempts to use JSON conversion to convert something that is not json in the first place.
		 * For example Integer payload with application/json CT should actually fail since Integer is not a JSON.
		 * This is !!!!wrong!!!!! and ONLY remains here for backward compatibility.
		 */
		if (payload instanceof String) {
			return ((String) payload).getBytes(StandardCharsets.UTF_8);
		}
		return super.convertToInternal(payload, headers, conversionHint);
	}
})"
github.com,"spring-cloud/spring-cloud-stream",main,"core/spring-cloud-stream/src/main/java/org/springframework/cloud/stream/converter/CompositeMessageConverterFactory.java","this.converters.add(new ByteArrayMessageConverter() {
	@Override
	protected boolean supports(Class<?> clazz) {
		if (!super.supports(clazz)) {
			return (Object.class == clazz);
		}
		return true;
	}
})"
github.com,"spring-cloud/spring-cloud-stream",main,"core/spring-cloud-stream/src/main/java/org/springframework/cloud/stream/converter/CompositeMessageConverterFactory.java","this.converters.add(new ObjectStringMessageConverter())"
github.com,"spring-cloud/spring-cloud-stream",main,"core/spring-cloud-stream/src/main/java/org/springframework/cloud/stream/converter/CompositeMessageConverterFactory.java","converters.add(converter)"
github.com,"spring-cloud/spring-cloud-stream",main,"core/spring-cloud-stream-test-binder/src/main/java/org/springframework/cloud/stream/binder/test/TestChannelBinderConfiguration.java","configClasses.add(TestChannelBinderConfiguration.class)"
github.com,"spring-cloud/spring-cloud-stream",main,"core/spring-cloud-stream-test-binder/src/main/java/org/springframework/cloud/stream/binder/test/TestChannelBinderConfiguration.java","configClasses.add(BindingServiceConfiguration.class)"
github.com,"spring-cloud/spring-cloud-stream",main,"core/spring-cloud-stream-test-binder/src/main/java/org/springframework/cloud/stream/binder/test/AbstractDestination.java","this.channels.add((AbstractSubscribableChannel) channel)"
github.com,"spring-cloud/spring-cloud-stream",main,"binders/rabbit-binder/spring-cloud-stream-binder-rabbit/src/main/java/org/springframework/cloud/stream/binder/rabbit/RabbitMessageChannelBinder.java","// need to keep this header until later
headerPatterns.add(""!"" + BinderHeaders.PARTITION_HEADER)"
github.com,"spring-cloud/spring-cloud-stream",main,"binders/rabbit-binder/spring-cloud-stream-binder-rabbit/src/main/java/org/springframework/cloud/stream/binder/rabbit/RabbitMessageChannelBinder.java","headerPatterns.add(""!"" + IntegrationMessageHeaderAccessor.SOURCE_DATA)"
github.com,"spring-cloud/spring-cloud-stream",main,"binders/rabbit-binder/spring-cloud-stream-binder-rabbit/src/main/java/org/springframework/cloud/stream/binder/rabbit/RabbitMessageChannelBinder.java","headerPatterns.add(""!"" + IntegrationMessageHeaderAccessor.DELIVERY_ATTEMPT)"
github.com,"spring-cloud/spring-cloud-stream",main,"binders/rabbit-binder/spring-cloud-stream-binder-rabbit/src/main/java/org/springframework/cloud/stream/binder/rabbit/RabbitMessageChannelBinder.java","headerPatterns.add(""!rabbitmq_streamContext"")"
github.com,"spring-cloud/spring-cloud-stream",main,"binders/rabbit-binder/spring-cloud-stream-binder-rabbit/src/test/java/org/springframework/cloud/stream/binder/rabbit/integration/RabbitBinderModuleTests.java","params.add(""--spring.cloud.function.definition=process"")"
github.com,"spring-cloud/spring-cloud-stream",main,"binders/rabbit-binder/spring-cloud-stream-binder-rabbit/src/test/java/org/springframework/cloud/stream/binder/rabbit/integration/RabbitBinderModuleTests.java","params.add(""--spring.cloud.stream.process-in-0.binder=custom"")"
github.com,"spring-cloud/spring-cloud-stream",main,"binders/rabbit-binder/spring-cloud-stream-binder-rabbit/src/test/java/org/springframework/cloud/stream/binder/rabbit/integration/RabbitBinderModuleTests.java","params.add(""--spring.cloud.stream.process-out-0.binder=custom"")"
github.com,"spring-cloud/spring-cloud-stream",main,"binders/rabbit-binder/spring-cloud-stream-binder-rabbit/src/test/java/org/springframework/cloud/stream/binder/rabbit/integration/RabbitBinderModuleTests.java","params.add(""--spring.cloud.stream.binders.custom.type=rabbit"")"
github.com,"spring-cloud/spring-cloud-stream",main,"binders/rabbit-binder/spring-cloud-stream-binder-rabbit/src/test/java/org/springframework/cloud/stream/binder/rabbit/integration/RabbitBinderModuleTests.java","params.add(""--spring.cloud.stream.binders.custom.environment.foo=bar"")"
github.com,"spring-cloud/spring-cloud-stream",main,"binders/rabbit-binder/spring-cloud-stream-binder-rabbit/src/test/java/org/springframework/cloud/stream/binder/rabbit/integration/RabbitBinderModuleTests.java","params.add(""--server.port=0"")"
github.com,"spring-cloud/spring-cloud-stream",main,"binders/rabbit-binder/spring-cloud-stream-binder-rabbit/src/test/java/org/springframework/cloud/stream/binder/rabbit/integration/RabbitBinderModuleTests.java","params.add(""--spring.rabbitmq.port="" + RABBITMQ.getAmqpPort())"
github.com,"spring-cloud/spring-cloud-stream",main,"binders/rabbit-binder/spring-cloud-stream-binder-rabbit/src/test/java/org/springframework/cloud/stream/binder/rabbit/integration/RabbitBinderModuleTests.java","params.add(""--spring.rabbitmq.template.retry.enabled=true"")"
github.com,"spring-cloud/spring-cloud-stream",main,"binders/rabbit-binder/spring-cloud-stream-binder-rabbit/src/test/java/org/springframework/cloud/stream/binder/rabbit/integration/RabbitBinderModuleTests.java","params.add(""--spring.rabbitmq.template.retry.maxAttempts=2"")"
github.com,"spring-cloud/spring-cloud-stream",main,"binders/rabbit-binder/spring-cloud-stream-binder-rabbit/src/test/java/org/springframework/cloud/stream/binder/rabbit/integration/RabbitBinderModuleTests.java","params.add(""--spring.rabbitmq.template.retry.initial-interval=1000"")"
github.com,"spring-cloud/spring-cloud-stream",main,"binders/rabbit-binder/spring-cloud-stream-binder-rabbit/src/test/java/org/springframework/cloud/stream/binder/rabbit/integration/RabbitBinderModuleTests.java","params.add(""--spring.rabbitmq.template.retry.multiplier=1.1"")"
github.com,"spring-cloud/spring-cloud-stream",main,"binders/rabbit-binder/spring-cloud-stream-binder-rabbit/src/test/java/org/springframework/cloud/stream/binder/rabbit/integration/RabbitBinderModuleTests.java","params.add(""--spring.rabbitmq.template.retry.max-interval=3000"")"
github.com,"spring-cloud/spring-cloud-stream",main,"binders/rabbit-binder/spring-cloud-stream-binder-rabbit/src/test/java/org/springframework/cloud/stream/binder/rabbit/RabbitBinderTests.java","deadLetterMessages.add(template
		.receive(""c.batching.0.consumerBatching.dlq"", 10_000))"
github.com,"spring-cloud/spring-cloud-stream",main,"binders/rabbit-binder/spring-cloud-stream-binder-rabbit/src/test/java/org/springframework/cloud/stream/binder/rabbit/RabbitBinderTests.java","this.messages.add(message)"
github.com,"spring-cloud/spring-cloud-stream",main,"binders/kafka-binder/spring-cloud-stream-binder-kafka-streams/src/main/java/org/springframework/cloud/stream/binder/kafka/streams/function/FunctionDetectorCondition.java","prunedList.add(key)"
github.com,"spring-cloud/spring-cloud-stream",main,"binders/kafka-binder/spring-cloud-stream-binder-kafka-streams/src/main/java/org/springframework/cloud/stream/binder/kafka/streams/function/FunctionDetectorCondition.java","prunedList.add(key)"
github.com,"spring-cloud/spring-cloud-stream",main,"binders/kafka-binder/spring-cloud-stream-binder-kafka-streams/src/main/java/org/springframework/cloud/stream/binder/kafka/streams/function/KafkaStreamsBindableProxyFactory.java","inputs.add(String.format(""%s-%s-%d"", this.functionName, FunctionConstants.DEFAULT_INPUT_SUFFIX, i++))"
github.com,"spring-cloud/spring-cloud-stream",main,"binders/kafka-binder/spring-cloud-stream-binder-kafka-streams/src/main/java/org/springframework/cloud/stream/binder/kafka/streams/KafkaStreamsBindingInformationCatalogue.java","this.consumerPropertiesPerSbfb.get(streamsBuilderFactoryBean).add(consumerProperties)"
github.com,"spring-cloud/spring-cloud-stream",main,"binders/kafka-binder/spring-cloud-stream-binder-kafka-streams/src/main/java/org/springframework/cloud/stream/binder/kafka/streams/KafkaStreamsBindingInformationCatalogue.java","producerFactories.add(producerFactory)"
github.com,"spring-cloud/spring-cloud-stream",main,"binders/kafka-binder/spring-cloud-stream-binder-kafka-streams/src/main/java/org/springframework/cloud/stream/binder/kafka/streams/endpoint/KafkaStreamsTopologyEndpoint.java","descs.add(streamsBuilderFactoryBean.getTopology().describe().toString())"
github.com,"spring-cloud/spring-cloud-stream",main,"binders/kafka-binder/spring-cloud-stream-binder-kafka-streams/src/main/java/org/springframework/cloud/stream/binder/kafka/streams/KafkaStreamsFunctionProcessor.java","outputBindingNames.add(String.format(""%s-%s-%d"", functionName, FunctionConstants.DEFAULT_OUTPUT_SUFFIX, i))"
github.com,"spring-cloud/spring-cloud-stream",main,"binders/kafka-binder/spring-cloud-stream-binder-kafka-streams/src/main/java/org/springframework/cloud/stream/binder/kafka/streams/SerdeResolverUtils.java","matchingSerdes.add(new SerdeWithSpecificityScore(calculateScore(targetType, serdeBeanGeneric), beanName))"
github.com,"spring-cloud/spring-cloud-stream",main,"binders/kafka-binder/spring-cloud-stream-binder-kafka-streams/src/main/java/org/springframework/cloud/stream/binder/kafka/streams/KafkaStreamsBinderMetrics.java","tags.add(Tag.of(key, value))"
github.com,"spring-cloud/spring-cloud-stream",main,"binders/kafka-binder/spring-cloud-stream-binder-kafka-streams/src/main/java/org/springframework/cloud/stream/binder/kafka/streams/KafkaStreamsBinderMetrics.java","tags.add(Tag.of(KAFKA_VERSION_TAG_NAME, kafkaVersion))"
github.com,"spring-cloud/spring-cloud-stream",main,"binders/kafka-binder/spring-cloud-stream-binder-kafka-streams/src/test/java/org/springframework/cloud/stream/binder/kafka/streams/function/StreamToGlobalKTableFunctionTests.java","enrichedOrders.add(new KeyValue<>(record.key(), record.value()))"
github.com,"spring-cloud/spring-cloud-stream",main,"binders/kafka-binder/spring-cloud-stream-binder-kafka-streams/src/test/java/org/springframework/cloud/stream/binder/kafka/streams/function/StreamToTableJoinFunctionTests.java","actualClicksPerRegion.add(new KeyValue<>(record.key(), record.value()))"
github.com,"spring-cloud/spring-cloud-stream",main,"binders/kafka-binder/spring-cloud-stream-binder-kafka-streams/src/test/java/org/springframework/cloud/stream/binder/kafka/streams/function/StreamToTableJoinFunctionTests.java","actualClicksPerRegion.add(new KeyValue<>(record.key(), record.value()))"
github.com,"spring-cloud/spring-cloud-stream",main,"binders/kafka-binder/spring-cloud-stream-binder-kafka-streams/src/test/java/org/springframework/cloud/stream/binder/kafka/streams/integration/KafkaStreamsBinderMultipleInputTopicsTest.java","wordCounts.add((consumerRecord.value()))"
github.com,"spring-cloud/spring-cloud-stream",main,"binders/kafka-binder/spring-cloud-stream-binder-kafka-streams/src/test/java/org/springframework/cloud/stream/binder/kafka/streams/serde/CollectionSerdeTest.java","foos.add(foo1)"
github.com,"spring-cloud/spring-cloud-stream",main,"binders/kafka-binder/spring-cloud-stream-binder-kafka-streams/src/test/java/org/springframework/cloud/stream/binder/kafka/streams/serde/CollectionSerdeTest.java","foos.add(foo2)"
github.com,"spring-cloud/spring-cloud-stream",main,"binders/kafka-binder/spring-cloud-stream-binder-kafka-streams/src/test/java/org/springframework/cloud/stream/binder/kafka/streams/KafkaStreamsEventTypeRoutingTests.java","keys.add(integerFooConsumerRecord.key())"
github.com,"spring-cloud/spring-cloud-stream",main,"binders/kafka-binder/spring-cloud-stream-binder-kafka-streams/src/test/java/org/springframework/cloud/stream/binder/kafka/streams/KafkaStreamsEventTypeRoutingTests.java","values.add(integerFooConsumerRecord.value())"
github.com,"spring-cloud/spring-cloud-stream",main,"binders/kafka-binder/spring-cloud-stream-binder-kafka-streams/src/test/java/org/springframework/cloud/stream/binder/kafka/streams/EventTypeRoutingWithInferredSerdeTests.java","keys.add(integerFooConsumerRecord.key())"
github.com,"spring-cloud/spring-cloud-stream",main,"binders/kafka-binder/spring-cloud-stream-binder-kafka-streams/src/test/java/org/springframework/cloud/stream/binder/kafka/streams/EventTypeRoutingWithInferredSerdeTests.java","values.add(integerFooConsumerRecord.value())"
github.com,"spring-cloud/spring-cloud-stream",main,"schema-registry/spring-cloud-stream-schema-registry-server/src/test/java/org/springframework/cloud/stream/schema/registry/server/SchemaRegistryServerAvroTests.java","value.add(registerSchemaResponse)"
github.com,"spring-cloud/spring-cloud-stream",main,"core/spring-cloud-stream-integration-tests/src/test/java/org/springframework/cloud/stream/function/FunctionBatchingTests.java","list.add(""{\""name\"":\""bob\""}"".getBytes())"
github.com,"spring-cloud/spring-cloud-stream",main,"core/spring-cloud-stream-integration-tests/src/test/java/org/springframework/cloud/stream/function/FunctionBatchingTests.java","list.add(""{\""name\"":\""jill\""}"".getBytes())"
github.com,"spring-cloud/spring-cloud-stream",main,"core/spring-cloud-stream-integration-tests/src/test/java/org/springframework/cloud/stream/function/FunctionBatchingTests.java","list.add(KafkaNull.INSTANCE)"
github.com,"spring-cloud/spring-cloud-stream",main,"core/spring-cloud-stream-integration-tests/src/test/java/org/springframework/cloud/stream/function/FunctionBatchingTests.java","list.add(""{\""name\"":\""steve\""}"".getBytes())"
github.com,"spring-cloud/spring-cloud-stream",main,"core/spring-cloud-stream-integration-tests/src/test/java/org/springframework/cloud/stream/function/FunctionBatchingTests.java","list.add(""{\""name\"":\""bob\""}"".getBytes())"
github.com,"spring-cloud/spring-cloud-stream",main,"core/spring-cloud-stream-integration-tests/src/test/java/org/springframework/cloud/stream/function/FunctionBatchingTests.java","list.add(""{\""name\"":\""jill\""}"".getBytes())"
github.com,"spring-cloud/spring-cloud-stream",main,"core/spring-cloud-stream-integration-tests/src/test/java/org/springframework/cloud/stream/function/FunctionBatchingTests.java","list.add(""[{\""name\"":\""bob\""},{\""name\"":\""jill\""}]"".getBytes())"
github.com,"spring-cloud/spring-cloud-stream",main,"core/spring-cloud-stream-integration-tests/src/test/java/org/springframework/cloud/stream/function/ImplicitFunctionBindingTests.java","messages.add(MessageBuilder.withPayload(value).build())"
github.com,"spring-cloud/spring-cloud-stream",main,"core/spring-cloud-stream-integration-tests/src/test/java/org/springframework/cloud/stream/function/ImplicitFunctionBindingTests.java","messages.add(MessageBuilder.withPayload(value).build())"
github.com,"spring-cloud/spring-cloud-stream",main,"binders/rabbit-binder/spring-cloud-stream-binder-rabbit-core/src/main/java/org/springframework/cloud/stream/binder/rabbit/provisioning/RabbitExchangeQueueProvisioner.java","consumerDestinationNames.add(doProvisionConsumerDestination(destination, group,
		temporaryProperties).getName())"
github.com,"spring-cloud/spring-cloud-stream",main,"binders/kafka-binder/spring-cloud-stream-binder-kafka-reactive/src/main/java/org/springframework/cloud/stream/binder/reactorkafka/ReactorKafkaBinderHealthIndicator.java","messageProducers.add(messageProducerDetails)"
github.com,"spring-cloud/spring-cloud-stream",main,"binders/kafka-binder/spring-cloud-stream-binder-kafka-reactive/src/main/java/org/springframework/cloud/stream/binder/reactorkafka/ReactorKafkaBinder.java","this.receivers.add(KafkaReceiver.create(finalOpts))"
github.com,"spring-cloud/spring-cloud-stream",main,"binders/kafka-binder/spring-cloud-stream-binder-kafka-reactive/src/main/java/org/springframework/cloud/stream/binder/reactorkafka/ReactorKafkaBinder.java","fluxes.add(kafkaReceiver
		.receiveAutoAck()
		.map(inner -> new GenericMessage<>(inner)))"
github.com,"spring-cloud/spring-cloud-stream",main,"binders/kafka-binder/spring-cloud-stream-binder-kafka-reactive/src/main/java/org/springframework/cloud/stream/binder/reactorkafka/ReactorKafkaBinder.java","fluxes.add(receive
		.map(record -> {
			Message<Object> message = (Message<Object>) ((RecordMessageConverter) converter)
				.toMessage(record, null, null, null);
			return addAckHeaderIfNeeded(atMostOnce, record, message);
		}))"
github.com,"spring-cloud/spring-cloud-stream",main,"binders/kafka-binder/spring-cloud-stream-binder-kafka-reactive/src/test/java/org/springframework/cloud/stream/binder/reactorkafka/ReactorKafkaBinderIntegrationTests.java","patternedDeliveries.add(s)"
github.com,"spring-cloud/spring-cloud-stream",main,"binders/kafka-binder/spring-cloud-stream-binder-kafka-reactive/src/test/java/org/springframework/cloud/stream/binder/reactorkafka/ReactorKafkaBinderIntegrationTests.java","recOptsCustOrder.add(""one"")"
github.com,"spring-cloud/spring-cloud-stream",main,"binders/kafka-binder/spring-cloud-stream-binder-kafka-reactive/src/test/java/org/springframework/cloud/stream/binder/reactorkafka/ReactorKafkaBinderIntegrationTests.java","recOptsCustOrder.add(""two"")"
github.com,"spring-cloud/spring-cloud-stream",main,"binders/kafka-binder/spring-cloud-stream-binder-kafka-reactive/src/test/java/org/springframework/cloud/stream/binder/reactorkafka/ReactorKafkaBinderIntegrationTests.java","this.correlation.add(result.correlationMetadata())"
github.com,"spring-cloud/spring-cloud-stream",main,"binders/kafka-binder/spring-cloud-stream-binder-kafka-reactive/src/test/java/org/springframework/cloud/stream/binder/reactorkafka/ReactorKafkaBinderTests.java","payloads.add((String) msg.getPayload())"
github.com,"spring-cloud/spring-cloud-stream",main,"binders/kafka-binder/spring-cloud-stream-binder-kafka-reactive/src/test/java/org/springframework/cloud/stream/binder/reactorkafka/ReactorKafkaBinderTests.java","payloads.add(rec.value())"
github.com,"spring-cloud/spring-cloud-stream",main,"binders/kafka-binder/spring-cloud-stream-binder-kafka-reactive/src/test/java/org/springframework/cloud/stream/binder/reactorkafka/ReactorKafkaBinderHealthIndicatorTests.java","partitions.add(new PartitionInfo(TEST_TOPIC, 0, leader, null, null))"
github.com,"spring-cloud/spring-cloud-stream",main,"binders/kafka-binder/spring-cloud-stream-binder-kafka/src/main/java/org/springframework/cloud/stream/binder/kafka/KafkaMessageChannelBinder.java","this.clientFactoryCustomizers.add(customizer)"
github.com,"spring-cloud/spring-cloud-stream",main,"binders/kafka-binder/spring-cloud-stream-binder-kafka/src/main/java/org/springframework/cloud/stream/binder/kafka/KafkaMessageChannelBinder.java","
this.kafkaMessageListenerContainers.add(messageListenerContainer)"
github.com,"spring-cloud/spring-cloud-stream",main,"binders/kafka-binder/spring-cloud-stream-binder-kafka/src/main/java/org/springframework/cloud/stream/binder/kafka/KafkaMessageChannelBinder.java","this.consumerConfigCustomizers.add(consumerConfigCustomizer)"
github.com,"spring-cloud/spring-cloud-stream",main,"binders/kafka-binder/spring-cloud-stream-binder-kafka/src/main/java/org/springframework/cloud/stream/binder/kafka/KafkaMessageChannelBinder.java","this.producerConfigCustomizers.add(producerConfigCustomizer)"
github.com,"spring-cloud/spring-cloud-stream",main,"binders/kafka-binder/spring-cloud-stream-binder-kafka/src/main/java/org/springframework/cloud/stream/binder/kafka/KafkaBinderMetrics.java","topicPartitions.add(new TopicPartition(partitionInfo.topic(),
		partitionInfo.partition()))"
github.com,"spring-cloud/spring-cloud-stream",main,"binders/kafka-binder/spring-cloud-stream-binder-kafka/src/main/java/org/springframework/cloud/stream/binder/kafka/BinderHeaderMapper.java","patternsToUse.add(0, NEVER_NATIVE_HEADERS_PRESENT)"
github.com,"spring-cloud/spring-cloud-stream",main,"binders/kafka-binder/spring-cloud-stream-binder-kafka/src/main/java/org/springframework/cloud/stream/binder/kafka/BinderHeaderMapper.java","patternsToUse.add(0, NEVER_DELIVERY_ATTEMPT)"
github.com,"spring-cloud/spring-cloud-stream",main,"binders/kafka-binder/spring-cloud-stream-binder-kafka/src/main/java/org/springframework/cloud/stream/binder/kafka/BinderHeaderMapper.java","patternsToUse.add(0, NEVER_TIMESTAMP)"
github.com,"spring-cloud/spring-cloud-stream",main,"binders/kafka-binder/spring-cloud-stream-binder-kafka/src/main/java/org/springframework/cloud/stream/binder/kafka/BinderHeaderMapper.java","patternsToUse.add(0, NEVER_ID)"
github.com,"spring-cloud/spring-cloud-stream",main,"binders/kafka-binder/spring-cloud-stream-binder-kafka/src/main/java/org/springframework/cloud/stream/binder/kafka/KafkaBinderHealthIndicator.java","
containersDetails.add(containerDetails)"
github.com,"spring-cloud/spring-cloud-stream",main,"binders/kafka-binder/spring-cloud-stream-binder-kafka/src/test/java/org/springframework/cloud/stream/binder/kafka/integration2/ConsumerProducerTransactionTests.java","this.outs.add(in)"
github.com,"spring-cloud/spring-cloud-stream",main,"binders/kafka-binder/spring-cloud-stream-binder-kafka/src/test/java/org/springframework/cloud/stream/binder/kafka/KafkaBinderMetricsTest.java","partitions.add(new PartitionInfo(TEST_TOPIC, i, nodes[i], null, null))"
github.com,"spring-cloud/spring-cloud-stream",main,"binders/kafka-binder/spring-cloud-stream-binder-kafka/src/test/java/org/springframework/cloud/stream/binder/kafka/KafkaBinderHealthIndicatorTest.java","partitions.add(new PartitionInfo(TEST_TOPIC, 0, null, null, null))"
github.com,"spring-cloud/spring-cloud-stream",main,"binders/kafka-binder/spring-cloud-stream-binder-kafka/src/test/java/org/springframework/cloud/stream/binder/kafka/KafkaBinderHealthIndicatorTest.java","partitions.add(new PartitionInfo(TEST_TOPIC, 0, null, null, null))"
github.com,"spring-cloud/spring-cloud-stream",main,"binders/kafka-binder/spring-cloud-stream-binder-kafka/src/test/java/org/springframework/cloud/stream/binder/kafka/KafkaBinderHealthIndicatorTest.java","partitions.add(new PartitionInfo(TEST_TOPIC, 0, leader, null, null))"
github.com,"spring-cloud/spring-cloud-stream",main,"binders/kafka-binder/spring-cloud-stream-binder-kafka/src/test/java/org/springframework/cloud/stream/binder/kafka/KafkaBinderConfigurationPropertiesTest.java","bootstrapServers.add(""10.98.09.199:9082"")"
github.com,"spring-cloud/spring-cloud-stream",main,"binders/kafka-binder/spring-cloud-stream-binder-kafka/src/test/java/org/springframework/cloud/stream/binder/kafka/KafkaBinderAutoConfigurationPropertiesTest.java","bootstrapServers.add(""10.98.09.199:9092"")"
github.com,"spring-cloud/spring-cloud-stream",main,"binders/kafka-binder/spring-cloud-stream-binder-kafka/src/test/java/org/springframework/cloud/stream/binder/kafka/KafkaBinderAutoConfigurationPropertiesTest.java","bootstrapServers.add(""10.98.09.196:9092"")"
github.com,"spring-cloud/spring-cloud-stream",main,"binders/kafka-binder/spring-cloud-stream-binder-kafka/src/test/java/org/springframework/cloud/stream/binder/kafka/KafkaBinderAutoConfigurationPropertiesTest.java","bootstrapServers.add(""10.98.09.199:9092"")"
github.com,"spring-cloud/spring-cloud-stream",main,"binders/kafka-binder/spring-cloud-stream-binder-kafka/src/test/java/org/springframework/cloud/stream/binder/kafka/KafkaBinderAutoConfigurationPropertiesTest.java","bootstrapServers.add(""10.98.09.196:9092"")"
github.com,"spring-cloud/spring-cloud-stream",main,"binders/kafka-binder/spring-cloud-stream-binder-kafka/src/test/java/org/springframework/cloud/stream/binder/kafka/KafkaBinderUnitTests.java","partitions.add(new TopicPartition(topic, 0))"
github.com,"spring-cloud/spring-cloud-stream",main,"binders/kafka-binder/spring-cloud-stream-binder-kafka/src/test/java/org/springframework/cloud/stream/binder/kafka/KafkaBinderUnitTests.java","partitions.add(new TopicPartition(topic, 1))"
github.com,"spring-cloud/spring-cloud-stream",main,"binders/kafka-binder/spring-cloud-stream-binder-kafka/src/test/java/org/springframework/cloud/stream/binder/kafka/KafkaBinderTests.java","bAddresses.add(bAddress.toString())"
github.com,"spring-cloud/spring-cloud-stream",main,"binders/kafka-binder/spring-cloud-stream-binder-kafka/src/test/java/org/springframework/cloud/stream/binder/kafka/KafkaBinderTests.java","bAddresses.add(bAddress.toString())"
github.com,"spring-cloud/spring-cloud-stream",main,"binders/kafka-binder/spring-cloud-stream-binder-kafka/src/test/java/org/springframework/cloud/stream/binder/kafka/KafkaBinderTests.java","nonProvisionedDlqTopics.add(nTopic)"
github.com,"spring-projects/spring-integration-samples",main,"applications/cafe/cafe-si/src/main/java/org/springframework/integration/samples/cafe/Order.java","this.orderItems.add(new OrderItem(this.number, drinkType, shots, iced))"
github.com,"spring-projects/spring-integration-samples",main,"intermediate/rest-http/src/main/java/org/springframework/integration/samples/rest/service/EmployeeSearchService.java","employeeList.getEmployee().add(new Employee(1, ""John"", ""Doe""))"
github.com,"spring-projects/spring-integration-samples",main,"intermediate/rest-http/src/main/java/org/springframework/integration/samples/rest/service/EmployeeSearchService.java","employeeList.getEmployee().add(new Employee(2, ""Jane"", ""Doe""))"
github.com,"spring-projects/spring-integration-samples",main,"intermediate/rest-http/src/main/java/org/springframework/integration/samples/rest/service/EmployeeSearchService.java","employeeList.getEmployee().add(new Employee(1, ""John"", ""Doe""))"
github.com,"spring-projects/spring-integration-samples",main,"intermediate/rest-http/src/main/java/org/springframework/integration/samples/rest/service/EmployeeSearchService.java","employeeList.getEmployee().add(new Employee(2, ""Jane"", ""Doe""))"
github.com,"spring-projects/spring-integration-samples",main,"applications/cafe-scripted/src/main/java/org/springframework/integration/samples/cafe/Order.java","this.orderItems.add(new OrderItem(this, drinkType, shots, iced))"
github.com,"spring-projects/spring-integration-samples",main,"intermediate/mail-attachments/src/main/java/org/springframework/integration/samples/mailattachments/support/EmailSplitter.java","messages.add(message)"
github.com,"spring-projects/spring-integration-samples",main,"intermediate/mail-attachments/src/main/java/org/springframework/integration/samples/mailattachments/support/EmailParserUtils.java","emailFragments.add(new EmailFragment(new File(subject), ""message.txt"", content))"
github.com,"spring-projects/spring-integration-samples",main,"intermediate/mail-attachments/src/main/java/org/springframework/integration/samples/mailattachments/support/EmailParserUtils.java","emailFragments.add(new EmailFragment(directory, i + ""-"" + filename, content))"
github.com,"spring-projects/spring-integration-samples",main,"intermediate/mail-attachments/src/main/java/org/springframework/integration/samples/mailattachments/support/EmailParserUtils.java","
emailFragments.add(new EmailFragment(directory, textFilename, content))"
github.com,"spring-projects/spring-integration-samples",main,"intermediate/mail-attachments/src/main/java/org/springframework/integration/samples/mailattachments/support/EmailParserUtils.java","
emailFragments.add(new EmailFragment(directory, filename, bis.toByteArray()))"
github.com,"spring-projects/spring-integration-samples",main,"basic/testing-examples/src/main/java/org/springframework/integration/samples/testing/splitter/CommaDelimitedSplitter.java","list.add(trimmed)"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/test/java/org/springframework/amqp/rabbit/core/RabbitAdminDeclarationTests.java","mockChannels.add(channel)"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/test/java/org/springframework/amqp/rabbit/core/BatchingRabbitTemplateTests.java","lastInBatch.add(messages.get(0).getMessageProperties().isLastInBatch())"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/test/java/org/springframework/amqp/rabbit/core/BatchingRabbitTemplateTests.java","lastInBatch.add(messages.get(1).getMessageProperties().isLastInBatch())"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/test/java/org/springframework/amqp/rabbit/core/BatchingRabbitTemplateTests.java","received.add(message)"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/test/java/org/springframework/amqp/rabbit/core/BatchingRabbitTemplateTests.java","lastInBatch.add(message.getMessageProperties().isLastInBatch())"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/test/java/org/springframework/amqp/rabbit/core/BatchingRabbitTemplateTests.java","received.add(message)"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/test/java/org/springframework/amqp/rabbit/core/BatchingRabbitTemplateTests.java","received.add(message)"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/test/java/org/springframework/amqp/rabbit/core/RabbitGatewaySupportTests.java","test.add(""test"")"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/test/java/org/springframework/amqp/rabbit/core/RabbitGatewaySupportTests.java","test.add(""test"")"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/test/java/org/springframework/amqp/rabbit/core/RabbitTemplatePerformanceIntegrationTests.java","results.add((String) template.receiveAndConvert(ROUTE, 10_000L))"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/test/java/org/springframework/amqp/rabbit/core/RabbitTemplatePerformanceIntegrationTests.java","results.add((String) template.receiveAndConvert(ROUTE, 10_000L))"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/test/java/org/springframework/amqp/rabbit/core/RabbitTemplatePerformanceIntegrationTests.java","results.add((String) template.receiveAndConvert(ROUTE, 10_000L))"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/test/java/org/springframework/amqp/rabbit/core/RabbitAdminTests.java","events.add((DeclarationExceptionEvent) event)"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/test/java/org/springframework/amqp/rabbit/core/RabbitTemplateHeaderTests.java","nestedReplyTo.add(basicProps.getReplyTo())"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/test/java/org/springframework/amqp/rabbit/core/RabbitTemplateHeaderTests.java","nestedCorrelation.add(basicProps.getCorrelationId())"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/test/java/org/springframework/amqp/rabbit/core/RabbitTemplateHeaderTests.java","nestedReplyTo.add(replyMessage.getMessageProperties().getReplyTo())"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/test/java/org/springframework/amqp/rabbit/core/RabbitTemplateHeaderTests.java","nestedCorrelation.add(replyMessage.getMessageProperties().getCorrelationId())"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/test/java/org/springframework/amqp/rabbit/core/RabbitTemplateHeaderTests.java","nestedReplyTo.add(basicProps.getReplyTo())"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/test/java/org/springframework/amqp/rabbit/core/RabbitTemplateHeaderTests.java","nestedCorrelation.add(basicProps.getCorrelationId())"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/test/java/org/springframework/amqp/rabbit/core/RabbitTemplateHeaderTests.java","nestedReplyTo.add(replyMessage.getMessageProperties().getReplyTo())"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/test/java/org/springframework/amqp/rabbit/core/RabbitTemplateHeaderTests.java","nestedCorrelation.add((String) replyMessage.getMessageProperties().getHeaders().get(CORRELATION_HEADER))"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/test/java/org/springframework/amqp/rabbit/core/RabbitTemplatePublisherCallbacksIntegrationTests.java","returns.add(returned.getMessage())"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/test/java/org/springframework/amqp/rabbit/core/RabbitTemplatePublisherCallbacksIntegrationTests.java","returns.add(returned.getMessage())"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/test/java/org/springframework/amqp/rabbit/listener/SimpleMessageListenerWithRabbitMQ.java","queues.add((BlockingQueue<?>) accessor.getPropertyValue(""queue""))"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/test/java/org/springframework/amqp/rabbit/listener/adapter/MessagingMessageListenerAdapterTests.java","methods.add(this.factory.createInvocableHandlerMethod(sample, m1))"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/test/java/org/springframework/amqp/rabbit/listener/adapter/MessagingMessageListenerAdapterTests.java","methods.add(this.factory.createInvocableHandlerMethod(sample, m2))"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/test/java/org/springframework/amqp/rabbit/listener/adapter/DelegatingInvocableHandlerTests.java","methods.add(messageHandlerFactory().createInvocableHandlerMethod(bean, method))"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/test/java/org/springframework/amqp/rabbit/listener/SimpleMessageListenerContainerTests.java",messages::add
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/test/java/org/springframework/amqp/rabbit/listener/SimpleMessageListenerContainerTests.java",messages::add
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/test/java/org/springframework/amqp/rabbit/listener/SimpleMessageListenerContainerTests.java","consumers.add(cons)"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/test/java/org/springframework/amqp/rabbit/listener/SimpleMessageListenerContainerTests.java","messages.add(message)"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/test/java/org/springframework/amqp/rabbit/listener/SimpleMessageListenerContainerIntegration2Tests.java","events.add((AmqpEvent) event)"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/test/java/org/springframework/amqp/rabbit/listener/BlockingQueueConsumerIntegrationTests.java","events.add((ConsumeOkEvent) e)"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/test/java/org/springframework/amqp/rabbit/listener/DirectMessageListenerContainerIntegrationTests.java","times.add(System.currentTimeMillis())"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/test/java/org/springframework/amqp/rabbit/annotation/AsyncListenerTests.java","foos.add(""FOO"")"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/test/java/org/springframework/amqp/rabbit/annotation/EnableRabbitReturnTypesTests.java","list.add(new Three())"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/test/java/org/springframework/amqp/rabbit/annotation/OptionalPayloadTests.java","this.deOptionaled.add(payload)"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/test/java/org/springframework/amqp/rabbit/annotation/OptionalPayloadTests.java","this.deOptionaled.add(optional.orElse(""baz""))"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/test/java/org/springframework/amqp/rabbit/annotation/EnableRabbitIntegrationTests.java","beanMethodHeaders.add(msg.getMessageProperties().getHeader(""bean""))"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/test/java/org/springframework/amqp/rabbit/annotation/EnableRabbitIntegrationTests.java","beanMethodHeaders.add(msg.getMessageProperties().getHeader(""method""))"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/test/java/org/springframework/amqp/rabbit/annotation/EnableRabbitIntegrationTests.java","beanMethodHeaders.add(msg.getMessageProperties().getHeader(""bean""))"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/test/java/org/springframework/amqp/rabbit/annotation/EnableRabbitIntegrationTests.java","beanMethodHeaders.add(msg.getMessageProperties().getHeader(""method""))"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/test/java/org/springframework/amqp/rabbit/annotation/EnableRabbitIntegrationTests.java","foos.add(foo)"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/test/java/org/springframework/amqp/rabbit/annotation/EnableRabbitIntegrationTests.java","foos.add(foo)"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/test/java/org/springframework/amqp/rabbit/annotation/EnableRabbitIntegrationTests.java","foos.add(foo)"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/test/java/org/springframework/amqp/rabbit/annotation/EnableRabbitIntegrationTests.java","list.add(comma3)"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/test/java/org/springframework/amqp/rabbit/annotation/EnableRabbitIntegrationTests.java","list.add(comma4)"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/test/java/org/springframework/amqp/rabbit/connection/PublisherCallbackChannelTests.java","this.calls.add(""confirm"")"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/test/java/org/springframework/amqp/rabbit/connection/PublisherCallbackChannelTests.java","this.calls.add(""return"")"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/test/java/org/springframework/amqp/rabbit/connection/PooledChannelConnectionFactoryTests.java","channels.add(connection.createChannel(false))"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/test/java/org/springframework/amqp/rabbit/connection/PooledChannelConnectionFactoryTests.java","txChannels.add(connection.createChannel(true))"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/test/java/org/springframework/amqp/rabbit/connection/CachingConnectionFactoryTests.java","mockChannels.add(channel)"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/test/java/org/springframework/amqp/rabbit/connection/CachingConnectionFactoryTests.java","mockConnections.add(connection)"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/test/java/org/springframework/amqp/rabbit/connection/CachingConnectionFactoryTests.java","mockChannels.add(channel)"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/test/java/org/springframework/amqp/rabbit/connection/CachingConnectionFactoryTests.java","mockConnections.add(connection)"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/test/java/org/springframework/amqp/rabbit/connection/CachingConnectionFactoryTests.java","mockChannels.add(channel)"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/test/java/org/springframework/amqp/rabbit/connection/CachingConnectionFactoryTests.java","mockConnections.add(connection)"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/test/java/org/springframework/amqp/rabbit/connection/CachingConnectionFactoryIntegrationTests.java","connections.add(connectionFactory.createConnection())"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/test/java/org/springframework/amqp/rabbit/connection/CachingConnectionFactoryIntegrationTests.java","connections.add(connectionFactory.createConnection())"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/test/java/org/springframework/amqp/rabbit/connection/CachingConnectionFactoryIntegrationTests.java","connections.add(connectionFactory.createConnection())"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/test/java/org/springframework/amqp/rabbit/connection/CachingConnectionFactoryIntegrationTests.java","connections.add(connectionFactory.createConnection())"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/test/java/org/springframework/amqp/rabbit/connection/CachingConnectionFactoryIntegrationTests.java","connections.add(connectionFactory.createConnection())"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/test/java/org/springframework/amqp/rabbit/connection/CachingConnectionFactoryIntegrationTests.java","connections.add(connectionFactory.createConnection())"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/test/java/org/springframework/amqp/rabbit/connection/CachingConnectionFactoryIntegrationTests.java","connections.add(connectionFactory.createConnection())"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/test/java/org/springframework/amqp/rabbit/connection/CachingConnectionFactoryIntegrationTests.java","connections.add(connectionFactory.createConnection())"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/test/java/org/springframework/amqp/rabbit/connection/CachingConnectionFactoryIntegrationTests.java","connections.add(connectionFactory.createConnection())"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/test/java/org/springframework/amqp/rabbit/connection/CachingConnectionFactoryIntegrationTests.java","connections.add(connectionFactory.createConnection())"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/test/java/org/springframework/amqp/rabbit/connection/CachingConnectionFactoryIntegrationTests.java","channels.add(connections.get(0).createChannel(false))"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/test/java/org/springframework/amqp/rabbit/connection/CachingConnectionFactoryIntegrationTests.java","channels.add(connections.get(0).createChannel(false))"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/test/java/org/springframework/amqp/rabbit/connection/CachingConnectionFactoryIntegrationTests.java","channels.add(connections.get(1).createChannel(false))"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/test/java/org/springframework/amqp/rabbit/connection/CachingConnectionFactoryIntegrationTests.java","channels.add(connections.get(1).createChannel(false))"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/test/java/org/springframework/amqp/rabbit/connection/CachingConnectionFactoryIntegrationTests.java","channels.add(connections.get(0).createChannel(false))"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/test/java/org/springframework/amqp/rabbit/connection/CachingConnectionFactoryIntegrationTests.java","channels.add(connections.get(1).createChannel(false))"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/test/java/org/springframework/amqp/rabbit/connection/CachingConnectionFactoryIntegrationTests.java","connections.add(connectionFactory.createConnection())"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/test/java/org/springframework/amqp/rabbit/connection/CachingConnectionFactoryIntegrationTests.java","connections.add(connectionFactory.createConnection())"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/test/java/org/springframework/amqp/rabbit/connection/CachingConnectionFactoryIntegrationTests.java","channels.add(connections.get(0).createChannel(false))"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/test/java/org/springframework/amqp/rabbit/connection/CachingConnectionFactoryIntegrationTests.java","channels.add(connections.get(1).createChannel(false))"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/test/java/org/springframework/amqp/rabbit/connection/CachingConnectionFactoryIntegrationTests.java","channels.add(connections.get(0).createChannel(true))"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/test/java/org/springframework/amqp/rabbit/connection/CachingConnectionFactoryIntegrationTests.java","channels.add(connections.get(1).createChannel(true))"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/main/java/org/springframework/amqp/rabbit/core/RabbitAdmin.java","declareOks.add(declareOk)"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/main/java/org/springframework/amqp/rabbit/listener/RabbitListenerEndpointRegistrar.java","this.endpointDescriptors.add(descriptor)"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/main/java/org/springframework/amqp/rabbit/listener/adapter/AmqpMessageHandlerMethodFactory.java","// Insert before PayloadMethodArgumentResolver
resolvers.add(resolvers.size() - 1, new ContinuationHandlerMethodArgumentResolver())"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/main/java/org/springframework/amqp/rabbit/listener/adapter/AmqpMessageHandlerMethodFactory.java","// Has to be at the end, but before PayloadMethodArgumentResolver
resolvers.add(resolvers.size() - 1,
		new OptionalEmptyAwarePayloadArgumentResolver(this.messageConverter, this.validator))"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/main/java/org/springframework/amqp/rabbit/listener/adapter/BatchMessagingMessageListenerAdapter.java","messagingMessages.add(toMessagingMessage(message))"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/main/java/org/springframework/amqp/rabbit/listener/adapter/BatchMessagingMessageListenerAdapter.java","payloads.add(message.getPayload())"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/main/java/org/springframework/amqp/rabbit/listener/adapter/BatchMessagingMessageListenerAdapter.java","messages.add(super.toMessagingMessage(fragment))"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/main/java/org/springframework/amqp/rabbit/listener/adapter/BatchMessagingMessageListenerAdapter.java","list.add(this.converterAdapter.extractPayload(fragment))"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/main/java/org/springframework/amqp/rabbit/listener/adapter/MessageListenerAdapter.java","arrayClass.add(argument.getClass().toString())"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/main/java/org/springframework/amqp/rabbit/listener/RabbitListenerEndpointRegistry.java","containerGroup.add(container)"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/main/java/org/springframework/amqp/rabbit/listener/MultiMethodRabbitListenerEndpoint.java","invocableHandlerMethods.add(handler)"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/main/java/org/springframework/amqp/rabbit/listener/SimpleMessageListenerContainer.java","canceledConsumers.add(consumer)"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/main/java/org/springframework/amqp/rabbit/listener/SimpleMessageListenerContainer.java","messageList.add(fragment)"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/main/java/org/springframework/amqp/rabbit/listener/SimpleMessageListenerContainer.java","messages.add(message)"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/main/java/org/springframework/amqp/rabbit/listener/AbstractMessageListenerContainer.java","messageList.add(fragment)"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/main/java/org/springframework/amqp/rabbit/listener/BlockingQueueConsumer.java","this.failedQueues.add(queue)"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/main/java/org/springframework/amqp/rabbit/listener/DirectMessageListenerContainer.java","this.consumers.add(consumer)"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/main/java/org/springframework/amqp/rabbit/support/DefaultMessagePropertiesConverter.java","writableList.add(convertHeaderValueIfNecessary(listValue))"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/main/java/org/springframework/amqp/rabbit/support/DefaultMessagePropertiesConverter.java","convertedList.add(this.convertLongStringIfNecessary(listValue, charset))"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/main/java/org/springframework/amqp/rabbit/batch/SimpleBatchingStrategy.java","this.messages.add(message)"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/main/java/org/springframework/amqp/rabbit/annotation/RabbitListenerAnnotationBeanPostProcessor.java","methods.add(new ListenerMethod(method,
		listenerAnnotations.toArray(new RabbitListener[listenerAnnotations.size()])))"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/main/java/org/springframework/amqp/rabbit/annotation/RabbitListenerAnnotationBeanPostProcessor.java","multiMethods.add(method)"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/main/java/org/springframework/amqp/rabbit/annotation/RabbitListenerAnnotationBeanPostProcessor.java","checkedMethods.add(checked)"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/main/java/org/springframework/amqp/rabbit/annotation/RabbitListenerAnnotationBeanPostProcessor.java","queueNames.add(qb.getName())"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/main/java/org/springframework/amqp/rabbit/annotation/RabbitListenerAnnotationBeanPostProcessor.java","queueNames.add(declareQueue(queue, declarables))"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/main/java/org/springframework/amqp/rabbit/annotation/RabbitListenerAnnotationBeanPostProcessor.java","// revert to the previous behavior of just using the name when there is mixture of String and Queue
names.add(q.getName())"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/main/java/org/springframework/amqp/rabbit/annotation/RabbitListenerAnnotationBeanPostProcessor.java","queues.add(q)"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/main/java/org/springframework/amqp/rabbit/annotation/RabbitListenerAnnotationBeanPostProcessor.java","names.add(str)"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/main/java/org/springframework/amqp/rabbit/annotation/RabbitListenerAnnotationBeanPostProcessor.java","queues.add(queueName)"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/main/java/org/springframework/amqp/rabbit/connection/RabbitResourceHolder.java","this.connections.add(connection)"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/main/java/org/springframework/amqp/rabbit/connection/RabbitResourceHolder.java","this.channels.add(channel)"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/main/java/org/springframework/amqp/rabbit/connection/RabbitResourceHolder.java","channelsForConnection.add(channel)"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/main/java/org/springframework/amqp/rabbit/connection/RestTemplateNodeLocator.java","client.template.getInterceptors().add(new BasicAuthenticationInterceptor(client.userName, client.password))"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/main/java/org/springframework/amqp/rabbit/connection/AbstractRoutingConnectionFactory.java","this.connectionListeners.add(listener)"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/main/java/org/springframework/amqp/rabbit/connection/CompositeConnectionListener.java","this.delegates.add(delegate)"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/main/java/org/springframework/amqp/rabbit/connection/CompositeChannelListener.java","this.delegates.add(delegate)"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/main/java/org/springframework/amqp/rabbit/connection/PublisherCallbackChannelImpl.java","expired.add(pendingConfirm)"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/main/java/org/springframework/amqp/rabbit/connection/AbstractConnectionFactory.java","this.addresses.add(this.addresses.remove(0))"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/main/java/org/springframework/amqp/rabbit/config/NamespaceUtils.java","adminBeanRefs.add(new RuntimeBeanReference(adminBeanName.trim()))"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/main/java/org/springframework/amqp/rabbit/config/ListenerContainerParser.java","values.add(new RuntimeBeanReference(names[i].trim()))"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/main/java/org/springframework/amqp/rabbit/config/ListenerContainerParser.java","containerList.add(new RuntimeBeanReference(containerBeanName))"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit/src/main/java/org/springframework/amqp/rabbit/config/RabbitNamespaceUtils.java","values.add(new RuntimeBeanReference(name))"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit-test/src/main/java/org/springframework/amqp/rabbit/test/TestRabbitTemplate.java","this.listeners.computeIfAbsent(queue, v -> new Listeners()).listeners.add(container.getMessageListener())"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit-junit/src/main/java/org/springframework/amqp/rabbit/junit/LogLevelAdjuster.java","this.classes.add(getClass())"
github.com,"spring-projects/spring-amqp",main,"spring-amqp/src/main/java/org/springframework/amqp/support/postprocessor/MessagePostProcessorUtils.java","priorityOrdered.add(processor)"
github.com,"spring-projects/spring-amqp",main,"spring-amqp/src/main/java/org/springframework/amqp/support/postprocessor/MessagePostProcessorUtils.java","ordered.add(processor)"
github.com,"spring-projects/spring-amqp",main,"spring-amqp/src/main/java/org/springframework/amqp/support/postprocessor/MessagePostProcessorUtils.java","unOrdered.add(processor)"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit-stream/src/main/java/org/springframework/rabbit/stream/config/SuperStream.java","declarables.add(new DirectExchange(name, true, false, Map.of(""x-super-stream"", true)))"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit-stream/src/main/java/org/springframework/rabbit/stream/config/SuperStream.java","declarables.add(q)"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit-stream/src/main/java/org/springframework/rabbit/stream/config/SuperStream.java","declarables.add(new Binding(q.getName(), DestinationType.QUEUE, name, rk,
		Map.of(""x-stream-partition-order"", i)))"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit-stream/src/test/java/org/springframework/rabbit/stream/listener/SuperStreamSACTests.java","this.info.add(name + "":"" + new String(msg.getBody()))"
github.com,"spring-projects/spring-amqp",main,"spring-rabbit-stream/src/test/java/org/springframework/rabbit/stream/listener/RabbitListenerTests.java","this.received.add(in)"
github.com,"spring-cloud/spring-cloud-cloudfoundry",main,"spring-cloud-cloudfoundry-discovery/src/main/java/org/springframework/cloud/cloudfoundry/discovery/SimpleDnsBasedDiscoveryClient.java","serviceInstances.add(serviceInstance)"
github.com,"spring-projects/spring-webflow",main,"spring-webflow/src/main/java/org/springframework/webflow/engine/model/AbstractModel.java","copy.add((T) model.createCopy())"
github.com,"spring-projects/spring-webflow",main,"spring-webflow/src/main/java/org/springframework/webflow/engine/model/builder/xml/XmlFlowModelBuilder.java","attributes.add(parseAttribute(element2))"
github.com,"spring-projects/spring-webflow",main,"spring-webflow/src/main/java/org/springframework/webflow/engine/model/builder/xml/XmlFlowModelBuilder.java","vars.add(parseVar(element2))"
github.com,"spring-projects/spring-webflow",main,"spring-webflow/src/main/java/org/springframework/webflow/engine/model/builder/xml/XmlFlowModelBuilder.java","inputs.add(parseInput(element2))"
github.com,"spring-projects/spring-webflow",main,"spring-webflow/src/main/java/org/springframework/webflow/engine/model/builder/xml/XmlFlowModelBuilder.java","outputs.add(parseOutput(element2))"
github.com,"spring-projects/spring-webflow",main,"spring-webflow/src/main/java/org/springframework/webflow/engine/model/builder/xml/XmlFlowModelBuilder.java","actions.add(parseAction(element2))"
github.com,"spring-projects/spring-webflow",main,"spring-webflow/src/main/java/org/springframework/webflow/engine/model/builder/xml/XmlFlowModelBuilder.java","states.add(parseState(element2))"
github.com,"spring-projects/spring-webflow",main,"spring-webflow/src/main/java/org/springframework/webflow/engine/model/builder/xml/XmlFlowModelBuilder.java","transitions.add(parseTransition(element2))"
github.com,"spring-projects/spring-webflow",main,"spring-webflow/src/main/java/org/springframework/webflow/engine/model/builder/xml/XmlFlowModelBuilder.java","exceptionHandlers.add(parseExceptionHandler(element2))"
github.com,"spring-projects/spring-webflow",main,"spring-webflow/src/main/java/org/springframework/webflow/engine/model/builder/xml/XmlFlowModelBuilder.java","beanImports.add(parseBeanImport(element2))"
github.com,"spring-projects/spring-webflow",main,"spring-webflow/src/main/java/org/springframework/webflow/engine/model/builder/xml/XmlFlowModelBuilder.java","ifs.add(parseIf(element2))"
github.com,"spring-projects/spring-webflow",main,"spring-webflow/src/main/java/org/springframework/webflow/engine/model/builder/xml/XmlFlowModelBuilder.java","bindings.add(parseBinding(element2))"
github.com,"spring-projects/spring-webflow",main,"spring-webflow/src/main/java/org/springframework/webflow/engine/model/builder/xml/XmlFlowModelBuilder.java","this.parentHolders.add(locator.getFlowModelHolder(parentFlowId))"
github.com,"spring-projects/spring-webflow",main,"spring-webflow/src/main/java/org/springframework/webflow/engine/TransitionSet.java","transitions.add(transition)"
github.com,"spring-projects/spring-webflow",main,"spring-webflow/src/main/java/org/springframework/webflow/engine/Flow.java","possibleOutcomes.add(state.getId())"
github.com,"spring-projects/spring-webflow",main,"spring-webflow/src/main/java/org/springframework/webflow/engine/support/TransitionCriteriaChain.java","this.criteriaChain.add(criteria)"
github.com,"spring-projects/spring-webflow",main,"spring-webflow/src/main/java/org/springframework/webflow/engine/builder/model/FlowModelFlowBuilder.java","resources.add(flowResource.createRelative(beanImport.getResource()))"
github.com,"spring-projects/spring-webflow",main,"spring-webflow/src/main/java/org/springframework/webflow/engine/builder/model/FlowModelFlowBuilder.java","variables.add(parseViewVariable(varModel))"
github.com,"spring-projects/spring-webflow",main,"spring-webflow/src/main/java/org/springframework/webflow/engine/builder/model/FlowModelFlowBuilder.java","exceptionHandlers.add(parseTransitionExecutingExceptionHandler(model))"
github.com,"spring-projects/spring-webflow",main,"spring-webflow/src/main/java/org/springframework/webflow/engine/builder/model/FlowModelFlowBuilder.java","exceptionHandlers.add(parseCustomExceptionHandler(exceptionHandlerModel))"
github.com,"spring-projects/spring-webflow",main,"spring-webflow/src/main/java/org/springframework/webflow/engine/builder/model/FlowModelFlowBuilder.java","transitions.add(parseTransition(transition))"
github.com,"spring-projects/spring-webflow",main,"spring-webflow/src/main/java/org/springframework/webflow/engine/builder/model/FlowModelFlowBuilder.java","actions.add(annotatedAction)"
github.com,"spring-projects/spring-webflow",main,"spring-webflow/src/main/java/org/springframework/webflow/engine/ActionList.java","actions.add(action)"
github.com,"spring-projects/spring-webflow",main,"spring-webflow/src/main/java/org/springframework/webflow/engine/FlowExecutionExceptionHandlerSet.java","exceptionHandlers.add(exceptionHandler)"
github.com,"spring-projects/spring-webflow",main,"spring-webflow/src/main/java/org/springframework/webflow/engine/impl/FlowExecutionImpl.java","flowSessions.add(session)"
github.com,"spring-projects/spring-webflow",main,"spring-webflow/src/main/java/org/springframework/webflow/core/collection/LocalParameterMap.java","list.add((T) converter.execute(parameter))"
github.com,"spring-projects/spring-webflow",main,"spring-webflow/src/main/java/org/springframework/webflow/core/collection/CollectionUtils.java","target.add(object)"
github.com,"spring-projects/spring-webflow",main,"spring-webflow/src/main/java/org/springframework/webflow/mvc/view/AbstractMvcView.java","propertyNames.add(nestedProperty)"
github.com,"spring-projects/spring-webflow",main,"spring-webflow/src/main/java/org/springframework/webflow/mvc/view/BindingModel.java","errors.add(error)"
github.com,"spring-projects/spring-webflow",main,"spring-webflow/src/main/java/org/springframework/webflow/security/SecurityFlowExecutionListener.java","voters.add(new RoleVoter())"
github.com,"spring-projects/spring-webflow",main,"spring-webflow/src/main/java/org/springframework/webflow/security/SecurityFlowExecutionListener.java","voters.add(new RoleVoter())"
github.com,"spring-projects/spring-webflow",main,"spring-webflow/src/main/java/org/springframework/webflow/security/SecurityFlowExecutionListener.java","configAttributes.add(new SecurityConfig(attribute))"
github.com,"spring-projects/spring-webflow",main,"spring-webflow/src/test/java/org/springframework/webflow/engine/impl/FlowExecutionImplFactoryTests.java","flowExecution.getFlowSessions().add(session1)"
github.com,"spring-projects/spring-webflow",main,"spring-webflow/src/test/java/org/springframework/webflow/engine/impl/FlowExecutionImplFactoryTests.java","flowExecution.getFlowSessions().add(session2)"
github.com,"spring-projects/spring-webflow",main,"spring-webflow/src/test/java/org/springframework/webflow/mvc/view/AbstractBindingModelTests.java","mappingResults.add(new TypeConversionError(mapping, ""bogus"", null))"
github.com,"spring-projects/spring-webflow",main,"spring-webflow/src/test/java/org/springframework/webflow/expression/el/FlowResourceELResolverTests.java","resolvers.add(new FlowResourceELResolver())"
github.com,"spring-projects/spring-webflow",main,"spring-webflow/src/test/java/org/springframework/webflow/expression/el/ImplicitFlowVariableELResolverTests.java","vars.add(""requestParameters"")"
github.com,"spring-projects/spring-webflow",main,"spring-webflow/src/test/java/org/springframework/webflow/expression/el/ImplicitFlowVariableELResolverTests.java","vars.add(""requestScope"")"
github.com,"spring-projects/spring-webflow",main,"spring-webflow/src/test/java/org/springframework/webflow/expression/el/ImplicitFlowVariableELResolverTests.java","vars.add(""flashScope"")"
github.com,"spring-projects/spring-webflow",main,"spring-webflow/src/test/java/org/springframework/webflow/expression/el/ImplicitFlowVariableELResolverTests.java","vars.add(""viewScope"")"
github.com,"spring-projects/spring-webflow",main,"spring-webflow/src/test/java/org/springframework/webflow/expression/el/ImplicitFlowVariableELResolverTests.java","vars.add(""flowScope"")"
github.com,"spring-projects/spring-webflow",main,"spring-webflow/src/test/java/org/springframework/webflow/expression/el/ImplicitFlowVariableELResolverTests.java","vars.add(""conversationScope"")"
github.com,"spring-projects/spring-webflow",main,"spring-webflow/src/test/java/org/springframework/webflow/expression/el/ImplicitFlowVariableELResolverTests.java","vars.add(""messageContext"")"
github.com,"spring-projects/spring-webflow",main,"spring-webflow/src/test/java/org/springframework/webflow/expression/el/ImplicitFlowVariableELResolverTests.java","vars.add(""externalContext"")"
github.com,"spring-projects/spring-webflow",main,"spring-webflow/src/test/java/org/springframework/webflow/expression/el/ImplicitFlowVariableELResolverTests.java","vars.add(""flowExecutionContext"")"
github.com,"spring-projects/spring-webflow",main,"spring-webflow/src/test/java/org/springframework/webflow/expression/el/ImplicitFlowVariableELResolverTests.java","vars.add(""flowExecutionUrl"")"
github.com,"spring-projects/spring-webflow",main,"spring-webflow/src/test/java/org/springframework/webflow/expression/el/ImplicitFlowVariableELResolverTests.java","vars.add(""currentUser"")"
github.com,"spring-projects/spring-webflow",main,"spring-webflow/src/test/java/org/springframework/webflow/expression/el/ImplicitFlowVariableELResolverTests.java","vars.add(""currentEvent"")"
github.com,"spring-projects/spring-webflow",main,"spring-webflow/src/test/java/org/springframework/webflow/expression/el/ImplicitFlowVariableELResolverTests.java","resolvers.add(new ImplicitFlowVariableELResolver())"
github.com,"spring-projects/spring-webflow",main,"spring-webflow/src/test/java/org/springframework/webflow/expression/el/ScopeSearchingELResolverTests.java","resolvers.add(new ScopeSearchingELResolver())"
github.com,"spring-projects/spring-webflow",main,"spring-webflow/src/main/java/org/springframework/webflow/conversation/impl/ConversationContainer.java","conversations.add(conversation)"
github.com,"spring-projects/spring-webflow",main,"spring-webflow/src/main/java/org/springframework/webflow/validation/ValidationHelper.java","modelSearchClasses.add(modelClass)"
github.com,"spring-projects/spring-webflow",main,"spring-webflow/src/main/java/org/springframework/webflow/validation/BeanValidationHintResolver.java","result.add(resolvedHint)"
github.com,"spring-projects/spring-webflow",main,"spring-webflow/src/main/java/org/springframework/webflow/validation/WebFlowMessageCodesResolver.java","codeList.add(postProcessMessageCode(objectName + CODE_SEPARATOR + fieldInList + CODE_SEPARATOR + errorCode))"
github.com,"spring-projects/spring-webflow",main,"spring-webflow/src/main/java/org/springframework/webflow/validation/WebFlowMessageCodesResolver.java","codeList.add(postProcessMessageCode(fieldInList + CODE_SEPARATOR + errorCode))"
github.com,"spring-projects/spring-webflow",main,"spring-webflow/src/main/java/org/springframework/webflow/validation/WebFlowMessageCodesResolver.java","codeList.add(postProcessMessageCode(fieldType.getName() + CODE_SEPARATOR + errorCode))"
github.com,"spring-projects/spring-webflow",main,"spring-webflow/src/main/java/org/springframework/webflow/validation/WebFlowMessageCodesResolver.java","codeList.add(postProcessMessageCode(errorCode))"
github.com,"spring-projects/spring-webflow",main,"spring-webflow/src/main/java/org/springframework/webflow/validation/WebFlowMessageCodesResolver.java","fieldList.add(field)"
github.com,"spring-projects/spring-webflow",main,"spring-webflow/src/main/java/org/springframework/webflow/validation/WebFlowMessageCodesResolver.java","fieldList.add(plainField)"
github.com,"spring-projects/spring-webflow",main,"spring-webflow/src/main/java/org/springframework/webflow/expression/el/WebFlowELExpressionParser.java","customResolvers.add(new RequestContextELResolver(context))"
github.com,"spring-projects/spring-webflow",main,"spring-webflow/src/main/java/org/springframework/webflow/expression/el/WebFlowELExpressionParser.java","customResolvers.add(new FlowResourceELResolver(context))"
github.com,"spring-projects/spring-webflow",main,"spring-webflow/src/main/java/org/springframework/webflow/expression/el/WebFlowELExpressionParser.java","customResolvers.add(new ImplicitFlowVariableELResolver(context))"
github.com,"spring-projects/spring-webflow",main,"spring-webflow/src/main/java/org/springframework/webflow/expression/el/WebFlowELExpressionParser.java","customResolvers.add(new ScopeSearchingELResolver(context))"
github.com,"spring-projects/spring-webflow",main,"spring-webflow/src/main/java/org/springframework/webflow/expression/el/WebFlowELExpressionParser.java","customResolvers.add(new SpringBeanWebFlowELResolver(context))"
github.com,"spring-projects/spring-webflow",main,"spring-webflow/src/main/java/org/springframework/webflow/expression/el/WebFlowELExpressionParser.java","customResolvers.add(new ActionMethodELResolver())"
github.com,"spring-projects/spring-webflow",main,"spring-webflow/src/main/java/org/springframework/webflow/execution/repository/impl/SimpleFlowExecutionSnapshotGroup.java","snapshotIds.add(snapshotId)"
github.com,"spring-projects/spring-webflow",main,"spring-webflow/src/main/java/org/springframework/webflow/execution/factory/ConditionalFlowExecutionListenerLoader.java","listeners.add(conditional)"
github.com,"spring-projects/spring-webflow",main,"spring-webflow/src/main/java/org/springframework/webflow/execution/factory/ConditionalFlowExecutionListenerLoader.java","listenersToAttach.add(listenerHolder.getListener())"
github.com,"spring-projects/spring-webflow",main,"spring-webflow/src/main/java/org/springframework/webflow/action/CompositeAction.java","actionResults.add(result)"
github.com,"spring-projects/spring-webflow",main,"spring-webflow/src/main/java/org/springframework/webflow/config/FlowDefinitionRegistryBuilder.java","this.flowLocations.add(new FlowLocation(path, id, null))"
github.com,"spring-projects/spring-webflow",main,"spring-webflow/src/main/java/org/springframework/webflow/config/FlowDefinitionRegistryBuilder.java","this.flowLocations.add(new FlowLocation(path, id, attributes))"
github.com,"spring-projects/spring-webflow",main,"spring-webflow/src/main/java/org/springframework/webflow/config/FlowDefinitionRegistryBuilder.java","this.flowLocationPatterns.add(pattern)"
github.com,"spring-projects/spring-webflow",main,"spring-webflow/src/main/java/org/springframework/webflow/config/FlowDefinitionRegistryBuilder.java","this.flowBuilderInfos.add(new FlowBuilderInfo(builder, id, attributes))"
github.com,"spring-projects/spring-webflow",main,"spring-webflow/src/main/java/org/springframework/webflow/config/FlowRegistryBeanDefinitionParser.java","locations.add(new FlowLocation(id, path, parseAttributes(locationElement)))"
github.com,"spring-projects/spring-webflow",main,"spring-webflow/src/main/java/org/springframework/webflow/config/FlowRegistryBeanDefinitionParser.java","locationPatterns.add(value)"
github.com,"spring-projects/spring-webflow",main,"spring-webflow/src/main/java/org/springframework/webflow/config/FlowRegistryBeanDefinitionParser.java","builders.add(new FlowBuilderInfo(id, className, parseAttributes(builderElement)))"
github.com,"spring-projects/spring-webflow",main,"spring-webflow/src/test/java/org/springframework/webflow/test/SearchFlowExecutionTests.java","res.add(new Object())"
github.com,"spring-projects/spring-webflow",main,"spring-webflow/src/test/java/org/springframework/webflow/engine/model/AbstractModelTests.java","child.add(new SecuredModel(""1""))"
github.com,"spring-projects/spring-webflow",main,"spring-webflow/src/test/java/org/springframework/webflow/engine/model/AbstractModelTests.java","child.add(new SecuredModel(""3""))"
github.com,"spring-projects/spring-webflow",main,"spring-webflow/src/test/java/org/springframework/webflow/engine/model/AbstractModelTests.java","parent.add(new SecuredModel(""2""))"
github.com,"spring-projects/spring-webflow",main,"spring-webflow/src/test/java/org/springframework/webflow/engine/model/AbstractModelTests.java","parent.add(match)"
github.com,"spring-projects/spring-webflow",main,"spring-webflow/src/test/java/org/springframework/webflow/engine/model/AbstractModelTests.java","child.add(new SecuredModel(""1""))"
github.com,"spring-projects/spring-webflow",main,"spring-webflow/src/test/java/org/springframework/webflow/engine/model/AbstractModelTests.java","child.add(new SecuredModel(""3""))"
github.com,"spring-projects/spring-webflow",main,"spring-webflow/src/test/java/org/springframework/webflow/engine/model/AbstractModelTests.java","parent.add(new SecuredModel(""2""))"
github.com,"spring-projects/spring-webflow",main,"spring-webflow/src/test/java/org/springframework/webflow/engine/model/AbstractModelTests.java","parent.add(match)"
github.com,"spring-projects/spring-webflow",main,"spring-webflow/src/test/java/org/springframework/webflow/engine/model/AbstractModelTests.java","child.add(new SecuredModel(""1""))"
github.com,"spring-projects/spring-webflow",main,"spring-webflow/src/test/java/org/springframework/webflow/engine/model/AbstractModelTests.java","parent.add(new SecuredModel(""2""))"
github.com,"spring-projects/spring-webflow",main,"spring-webflow/src/test/java/org/springframework/webflow/engine/model/EndStateModelTests.java","outputs.add(new OutputModel(""foo"", ""bar""))"
github.com,"spring-projects/spring-webflow",main,"spring-webflow/src/test/java/org/springframework/webflow/engine/model/ViewStateModelTests.java","attributes.add(new AttributeModel(""foo"", ""bar""))"
github.com,"spring-projects/spring-webflow",main,"spring-webflow/src/test/java/org/springframework/webflow/engine/model/ViewStateModelTests.java","bindings.add(new BindingModel(""foo"", ""fooConverter"", ""true""))"
github.com,"spring-projects/spring-webflow",main,"spring-webflow/src/test/java/org/springframework/webflow/engine/model/ViewStateModelTests.java","transitions.add(tx)"
github.com,"spring-projects/spring-webflow",main,"spring-webflow/src/test/java/org/springframework/webflow/engine/model/ViewStateModelTests.java","actions.add(eval)"
github.com,"spring-projects/spring-webflow",main,"spring-webflow/src/test/java/org/springframework/webflow/engine/model/ViewStateModelTests.java","vars.add(new VarModel(""foo"", ""class""))"
github.com,"spring-projects/spring-webflow",main,"spring-webflow/src/test/java/org/springframework/webflow/engine/model/ViewStateModelTests.java","eh.add(new ExceptionHandlerModel(""foo""))"
github.com,"spring-projects/spring-webflow",main,"spring-webflow/src/test/java/org/springframework/webflow/engine/model/DecisionStateModelTests.java","ifs.add(new IfModel(""test"", ""foo""))"
github.com,"spring-projects/spring-webflow",main,"spring-webflow/src/test/java/org/springframework/webflow/engine/model/ActionStateModelTests.java","actions.add(eval)"
github.com,"spring-projects/spring-webflow",main,"spring-faces/src/main/java/org/springframework/faces/model/ManySelectionTrackingListDataModel.java","this.selections.add(getRowData())"
github.com,"spring-projects/spring-webflow",main,"spring-faces/src/main/java/org/springframework/faces/model/ManySelectionTrackingListDataModel.java","this.selections.add(rowData)"
github.com,"spring-projects/spring-webflow",main,"spring-faces/src/main/java/org/springframework/faces/model/OneSelectionTrackingListDataModel.java","this.selections.add(rowData)"
github.com,"spring-projects/spring-webflow",main,"spring-faces/src/main/java/org/springframework/faces/model/OneSelectionTrackingListDataModel.java","this.selections.add(getRowData())"
github.com,"spring-projects/spring-webflow",main,"spring-faces/src/main/java/org/springframework/faces/webflow/FlowActionListener.java","fragments.add(formId)"
github.com,"spring-projects/spring-webflow",main,"spring-faces/src/main/java/org/springframework/faces/webflow/FlowActionListener.java","fragments.add(MESSAGES_ID)"
github.com,"spring-projects/spring-webflow",main,"spring-faces/src/main/java/org/springframework/faces/webflow/FlowFacesContext.java","facesMessages.add(asFacesMessage(message))"
github.com,"spring-projects/spring-webflow",main,"spring-faces/src/main/java/org/springframework/faces/webflow/JsfManagedBeanAwareELExpressionParser.java","customResolvers.add(new RequestContextELResolver(context))"
github.com,"spring-projects/spring-webflow",main,"spring-faces/src/main/java/org/springframework/faces/webflow/JsfManagedBeanAwareELExpressionParser.java","customResolvers.add(new FlowResourceELResolver(context))"
github.com,"spring-projects/spring-webflow",main,"spring-faces/src/main/java/org/springframework/faces/webflow/JsfManagedBeanAwareELExpressionParser.java","customResolvers.add(new ImplicitFlowVariableELResolver(context))"
github.com,"spring-projects/spring-webflow",main,"spring-faces/src/main/java/org/springframework/faces/webflow/JsfManagedBeanAwareELExpressionParser.java","customResolvers.add(new ScopeSearchingELResolver(context))"
github.com,"spring-projects/spring-webflow",main,"spring-faces/src/main/java/org/springframework/faces/webflow/JsfManagedBeanAwareELExpressionParser.java","customResolvers.add(new SpringBeanWebFlowELResolver(context))"
github.com,"spring-projects/spring-webflow",main,"spring-faces/src/main/java/org/springframework/faces/webflow/JsfManagedBeanAwareELExpressionParser.java","customResolvers.add(new ActionMethodELResolver())"
github.com,"spring-projects/spring-webflow",main,"spring-faces/src/main/java/org/springframework/faces/webflow/JsfManagedBeanAwareELExpressionParser.java","customResolvers.add(new JsfManagedBeanResolver())"
github.com,"spring-projects/spring-webflow",main,"spring-faces/src/test/java/org/springframework/faces/model/SelectionTrackingActionListenerTests.java","rows.add(new TestRowData())"
github.com,"spring-projects/spring-webflow",main,"spring-faces/src/test/java/org/springframework/faces/model/SelectionTrackingActionListenerTests.java","rows.add(new TestRowData())"
github.com,"spring-projects/spring-webflow",main,"spring-faces/src/test/java/org/springframework/faces/model/SelectionTrackingActionListenerTests.java","rows.add(new TestRowData())"
github.com,"spring-projects/spring-webflow",main,"spring-faces/src/test/java/org/springframework/faces/model/SelectionTrackingActionListenerTests.java","column.getChildren().add(commandButton)"
github.com,"spring-projects/spring-webflow",main,"spring-faces/src/test/java/org/springframework/faces/model/SelectionTrackingActionListenerTests.java","dataTable.getChildren().add(column)"
github.com,"spring-projects/spring-webflow",main,"spring-faces/src/test/java/org/springframework/faces/model/SelectionTrackingActionListenerTests.java","this.viewToTest.getChildren().add(dataTable)"
github.com,"spring-projects/spring-webflow",main,"spring-faces/src/test/java/org/springframework/faces/model/SelectionTrackingActionListenerTests.java","uiRepeat.getChildren().add(commandButton)"
github.com,"spring-projects/spring-webflow",main,"spring-faces/src/test/java/org/springframework/faces/model/SelectionTrackingActionListenerTests.java","this.viewToTest.getChildren().add(uiRepeat)"
github.com,"spring-projects/spring-webflow",main,"spring-faces/src/test/java/org/springframework/faces/model/converter/FacesConversionServiceTests.java","list.add(""foo"")"
github.com,"spring-projects/spring-webflow",main,"spring-faces/src/test/java/org/springframework/faces/webflow/JsfViewFactoryTests.java","existingRoot.getChildren().add(input)"
github.com,"spring-projects/spring-webflow",main,"spring-faces/src/test/java/org/springframework/faces/webflow/JsfViewFactoryTests.java","
existingRoot.getChildren().add(panel)"
github.com,"spring-projects/spring-webflow",main,"spring-faces/src/test/java/org/springframework/faces/webflow/JsfViewFactoryTests.java","panel.getChildren().add(input)"
github.com,"spring-projects/spring-webflow",main,"spring-faces/src/test/java/org/springframework/faces/webflow/JsfViewFactoryTests.java","this.phaseCallbacks.add(phaseCallback)"
github.com,"spring-projects/spring-webflow",main,"spring-faces/src/test/java/org/springframework/faces/webflow/JsfViewFactoryTests.java","this.phaseCallbacks.add(phaseCallback)"
github.com,"spring-projects/spring-webflow",main,"spring-faces/src/test/java/org/springframework/faces/webflow/JsfFinalResponseActionTests.java","this.phaseCallbacks.add(phaseCallback)"
github.com,"spring-projects/spring-webflow",main,"spring-faces/src/test/java/org/springframework/faces/webflow/JsfFinalResponseActionTests.java","this.phaseCallbacks.add(phaseCallback)"
github.com,"spring-projects/spring-webflow",main,"spring-faces/src/test/java/org/springframework/faces/webflow/JSFManagedBean.java","this.values.add(value)"
github.com,"spring-projects/spring-webflow",main,"spring-faces/src/test/java/org/springframework/faces/webflow/JsfViewTests.java","
form.getChildren().add(input)"
github.com,"spring-projects/spring-webflow",main,"spring-faces/src/test/java/org/springframework/faces/webflow/JsfViewTests.java","viewToRender.getChildren().add(form)"
github.com,"spring-projects/spring-webflow",main,"spring-faces/src/test/java/org/springframework/faces/webflow/JsfUtilsTests.java","this.afterPhaseList.add(this)"
github.com,"spring-projects/spring-webflow",main,"spring-faces/src/test/java/org/springframework/faces/webflow/JsfUtilsTests.java","this.beforePhaseList.add(this)"
github.com,"spring-projects/spring-webflow",main,"spring-faces/src/test/java/org/springframework/faces/webflow/FlowFacesContextTests.java","expectedOrderedIds.add(null)"
github.com,"spring-projects/spring-webflow",main,"spring-faces/src/test/java/org/springframework/faces/webflow/FlowFacesContextTests.java","expectedOrderedIds.add(""componentId"")"
github.com,"spring-projects/spring-webflow",main,"spring-faces/src/test/java/org/springframework/faces/webflow/FlowFacesContextTests.java","expectedOrderedIds.add(""userMessage"")"
github.com,"spring-projects/spring-webflow",main,"spring-binding/src/main/java/org/springframework/binding/mapping/impl/DefaultMappingContext.java","mappingResults.add(result)"
github.com,"spring-projects/spring-webflow",main,"spring-binding/src/main/java/org/springframework/binding/mapping/impl/DefaultMapper.java","mappings.add(mapping)"
github.com,"spring-projects/spring-webflow",main,"spring-binding/src/main/java/org/springframework/binding/mapping/impl/DefaultMappingResults.java","errorResults.add(result)"
github.com,"spring-projects/spring-webflow",main,"spring-binding/src/main/java/org/springframework/binding/mapping/impl/DefaultMappingResults.java","results.add(result)"
github.com,"spring-projects/spring-webflow",main,"spring-binding/src/main/java/org/springframework/binding/method/Parameters.java","this.parameters.add(parameter)"
github.com,"spring-projects/spring-webflow",main,"spring-binding/src/main/java/org/springframework/binding/message/DefaultMessageContext.java","messages.add(message)"
github.com,"spring-projects/spring-webflow",main,"spring-binding/src/main/java/org/springframework/binding/message/DefaultMessageContext.java","messages.add(message)"
github.com,"spring-projects/spring-webflow",main,"spring-binding/src/main/java/org/springframework/binding/message/MessageBuilder.java","args.add(arg)"
github.com,"spring-projects/spring-webflow",main,"spring-binding/src/main/java/org/springframework/binding/message/MessageBuilder.java","args.add(new ResolvableArgument(arg))"
github.com,"spring-projects/spring-webflow",main,"spring-binding/src/main/java/org/springframework/binding/message/MessageBuilder.java","this.args.add(new ResolvableArgument(arg))"
github.com,"spring-projects/spring-webflow",main,"spring-binding/src/main/java/org/springframework/binding/message/MessageContextErrors.java","errors.add(new ObjectError(objectName, message.getText()))"
github.com,"spring-projects/spring-webflow",main,"spring-binding/src/main/java/org/springframework/binding/message/MessageContextErrors.java","errors.add(new FieldError(objectName, (String) message.getSource(), message.getText()))"
github.com,"spring-projects/spring-webflow",main,"spring-binding/src/main/java/org/springframework/binding/collection/AbstractCachingMapDecorator.java","values.add(value == NULL_VALUE ? null : (V) value)"
github.com,"spring-projects/spring-webflow",main,"spring-binding/src/main/java/org/springframework/binding/expression/support/AbstractExpressionParser.java","expressions.add(new LiteralExpression(expressionString.substring(startIdx, prefixIndex)))"
github.com,"spring-projects/spring-webflow",main,"spring-binding/src/main/java/org/springframework/binding/expression/support/AbstractExpressionParser.java","expressions.add(doParseExpression(expr, context))"
github.com,"spring-projects/spring-webflow",main,"spring-binding/src/main/java/org/springframework/binding/expression/support/AbstractExpressionParser.java","expressions.add(doParseExpression(expressionString, context))"
github.com,"spring-projects/spring-webflow",main,"spring-binding/src/main/java/org/springframework/binding/expression/support/AbstractExpressionParser.java","// treat entire string as a literal
expressions.add(new LiteralExpression(expressionString))"
github.com,"spring-projects/spring-webflow",main,"spring-binding/src/main/java/org/springframework/binding/expression/support/AbstractExpressionParser.java","// no more ${expressions} found in string, add rest as static text
expressions.add(new LiteralExpression(expressionString.substring(startIdx)))"
github.com,"spring-projects/spring-webflow",main,"spring-binding/src/main/java/org/springframework/binding/expression/support/FluentParserContext.java","expressionVariables.add(variable)"
github.com,"spring-projects/spring-webflow",main,"spring-binding/src/main/java/org/springframework/binding/expression/spel/SpringELExpressionParser.java","this.propertyAccessors.add(new MapAccessor())"
github.com,"spring-projects/spring-webflow",main,"spring-binding/src/main/java/org/springframework/binding/expression/spel/SpringELExpressionParser.java","propertyAccessors.add(propertyAccessor)"
github.com,"spring-projects/spring-webflow",main,"spring-binding/src/test/java/org/springframework/binding/convert/service/DefaultConversionServiceTests.java","princyList.add(""princy1"")"
github.com,"spring-projects/spring-webflow",main,"spring-binding/src/test/java/org/springframework/binding/convert/service/DefaultConversionServiceTests.java","princyList.add(""princy2"")"
github.com,"spring-projects/spring-webflow",main,"spring-binding/src/test/java/org/springframework/binding/convert/service/DefaultConversionServiceTests.java","princyList.add(princy1)"
github.com,"spring-projects/spring-webflow",main,"spring-binding/src/test/java/org/springframework/binding/convert/service/DefaultConversionServiceTests.java","princyList.add(princy2)"
github.com,"spring-projects/spring-webflow",main,"spring-binding/src/test/java/org/springframework/binding/convert/service/DefaultConversionServiceTests.java","princyList.add(""princy1"")"
github.com,"spring-projects/spring-webflow",main,"spring-binding/src/test/java/org/springframework/binding/convert/service/DefaultConversionServiceTests.java","princyList.add(""princy2"")"
github.com,"spring-projects/spring-webflow",main,"spring-binding/src/test/java/org/springframework/binding/convert/service/DefaultConversionServiceTests.java","princyList.add(princy1)"
github.com,"spring-projects/spring-webflow",main,"spring-binding/src/test/java/org/springframework/binding/convert/service/DefaultConversionServiceTests.java","princyList.add(princy2)"
github.com,"spring-projects/spring-webflow",main,"spring-binding/src/test/java/org/springframework/binding/convert/service/DefaultConversionServiceTests.java","princyList.add(1)"
github.com,"spring-projects/spring-webflow",main,"spring-binding/src/test/java/org/springframework/binding/convert/service/DefaultConversionServiceTests.java","list.add(""1"")"
github.com,"spring-projects/spring-webflow",main,"spring-binding/src/test/java/org/springframework/binding/convert/service/DefaultConversionServiceTests.java","list.add(""2"")"
github.com,"spring-projects/spring-webflow",main,"spring-binding/src/test/java/org/springframework/binding/convert/service/DefaultConversionServiceTests.java","list.add(""3"")"
github.com,"spring-projects/spring-webflow",main,"spring-binding/src/test/java/org/springframework/binding/convert/service/DefaultConversionServiceTests.java","principals.add(() -> name)"
github.com,"spring-projects/spring-webflow",main,"spring-binding/src/test/java/org/springframework/binding/expression/el/TestBean.java","list.add(""1"")"
github.com,"spring-projects/spring-webflow",main,"spring-binding/src/test/java/org/springframework/binding/expression/el/TestBean.java","list.add(""2"")"
github.com,"spring-projects/spring-webflow",main,"spring-binding/src/test/java/org/springframework/binding/expression/el/TestBean.java","list.add(""3"")"
github.com,"spring-projects/spring-webflow",main,"spring-binding/src/test/java/org/springframework/binding/expression/el/TestBean.java","list.add(null)"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-spi/src/main/java/org/springframework/cloud/deployer/spi/app/AppStatus.java","statuses.add(instance)"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-spi/src/main/java/org/springframework/cloud/deployer/spi/util/CommandLineTokenizer.java","args.add(sb.toString())"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-kubernetes/src/main/java/org/springframework/cloud/deployer/spi/kubernetes/KubernetesScheduler.java","
scheduleInfos.add(scheduleInfo)"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-kubernetes/src/main/java/org/springframework/cloud/deployer/spi/kubernetes/KubernetesScheduler.java","
cronJob.getSpec().getJobTemplate().getSpec().getTemplate().getSpec().getImagePullSecrets()
		.add(localObjectReference)"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-kubernetes/src/main/java/org/springframework/cloud/deployer/spi/kubernetes/KubernetesAppDeployer.java","
podSpec.getVolumes().add(new VolumeBuilder().withName(""config"").withNewEmptyDir().endEmptyDir().build())"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-kubernetes/src/main/java/org/springframework/cloud/deployer/spi/kubernetes/KubernetesAppDeployer.java","
podSpec.getContainers().get(0).getVolumeMounts()
        .add(new VolumeMountBuilder().withName(""config"").withMountPath(""/config"").build())"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-kubernetes/src/main/java/org/springframework/cloud/deployer/spi/kubernetes/KubernetesAppDeployer.java","
podSpec.getInitContainers().add(createStatefulSetInitContainer(podSpec, statefulSetInitContainerImageName))"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-kubernetes/src/main/java/org/springframework/cloud/deployer/spi/kubernetes/KubernetesAppDeployer.java","
command.add(""sh"")"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-kubernetes/src/main/java/org/springframework/cloud/deployer/spi/kubernetes/KubernetesAppDeployer.java","command.add(""-c"")"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-kubernetes/src/main/java/org/springframework/cloud/deployer/spi/kubernetes/KubernetesAppDeployer.java","command.add(commandString)"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-kubernetes/src/main/java/org/springframework/cloud/deployer/spi/kubernetes/HttpProbeCreator.java","httpHeaders.add(authenticationHeader)"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-kubernetes/src/main/java/org/springframework/cloud/deployer/spi/kubernetes/support/ArgumentSanitizer.java","sanitizedArguments.add(this.sanitize(argument))"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-kubernetes/src/main/java/org/springframework/cloud/deployer/spi/kubernetes/DefaultContainerFactory.java","finalAppArgs.add(String.format(""--%s=%s"", k, v))"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-kubernetes/src/main/java/org/springframework/cloud/deployer/spi/kubernetes/DefaultContainerFactory.java","envVars.add(new EnvVar(e.getKey(), e.getValue(), null))"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-kubernetes/src/main/java/org/springframework/cloud/deployer/spi/kubernetes/DefaultContainerFactory.java","envVars.add(getGUIDEnvVar())"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-kubernetes/src/main/java/org/springframework/cloud/deployer/spi/kubernetes/DefaultContainerFactory.java","envVars.add(new EnvVar(""SPRING_CLOUD_APPLICATION_GROUP"",
        request.getDeploymentProperties().get(AppDeployer.GROUP_PROPERTY_KEY), null))"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-kubernetes/src/main/java/org/springframework/cloud/deployer/spi/kubernetes/DefaultContainerFactory.java","cmdArgs.add(String.format(""--%s=%s"", entry.getKey(), entry.getValue()))"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-kubernetes/src/main/java/org/springframework/cloud/deployer/spi/kubernetes/DeploymentPropertiesResolver.java","tolerations.add(
			new Toleration(toleration.getEffect(), toleration.getKey(), toleration.getOperator(),
					toleration.getTolerationSeconds(), toleration.getValue()))"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-kubernetes/src/main/java/org/springframework/cloud/deployer/spi/kubernetes/DeploymentPropertiesResolver.java","tolerations.add(new Toleration(toleration.getEffect(), toleration.getKey(),
					toleration.getOperator(), toleration.getTolerationSeconds(), toleration.getValue()))"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-kubernetes/src/main/java/org/springframework/cloud/deployer/spi/kubernetes/DeploymentPropertiesResolver.java","envVars.add(new EnvVar(e.getKey(), e.getValue(), null))"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-kubernetes/src/main/java/org/springframework/cloud/deployer/spi/kubernetes/DeploymentPropertiesResolver.java","containers.add(container)"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-kubernetes/src/main/java/org/springframework/cloud/deployer/spi/kubernetes/DeploymentPropertiesResolver.java","containers.add(container)"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-kubernetes/src/main/java/org/springframework/cloud/deployer/spi/kubernetes/DeploymentPropertiesResolver.java","containerPortList.add(port)"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-kubernetes/src/main/java/org/springframework/cloud/deployer/spi/kubernetes/DeploymentPropertiesResolver.java","vars.add(replacedVar)"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-kubernetes/src/main/java/org/springframework/cloud/deployer/spi/kubernetes/DeploymentPropertiesResolver.java","configMapKeyRefs.add(buildConfigMapKeyRefEnvVar(configMapKeyRef))"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-kubernetes/src/main/java/org/springframework/cloud/deployer/spi/kubernetes/DeploymentPropertiesResolver.java","configMapKeyRefs.add(buildConfigMapKeyRefEnvVar(configMapKeyRef))"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-kubernetes/src/main/java/org/springframework/cloud/deployer/spi/kubernetes/DeploymentPropertiesResolver.java","secretKeyRefs.add(buildSecretKeyRefEnvVar(secretKeyRef))"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-kubernetes/src/main/java/org/springframework/cloud/deployer/spi/kubernetes/DeploymentPropertiesResolver.java","secretKeyRefs.add(buildSecretKeyRefEnvVar(secretKeyRef))"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-kubernetes/src/main/java/org/springframework/cloud/deployer/spi/kubernetes/DeploymentPropertiesResolver.java","configMapRefs.add(buildConfigMapRefEnvVar(configMapRef))"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-kubernetes/src/main/java/org/springframework/cloud/deployer/spi/kubernetes/DeploymentPropertiesResolver.java","configMapRefs.add(buildConfigMapRefEnvVar(configMapRef))"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-kubernetes/src/main/java/org/springframework/cloud/deployer/spi/kubernetes/DeploymentPropertiesResolver.java","secretRefs.add(buildSecretRefEnvVar(secretRef))"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-kubernetes/src/main/java/org/springframework/cloud/deployer/spi/kubernetes/DeploymentPropertiesResolver.java","secretRefs.add(buildSecretRefEnvVar(secretRef))"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-kubernetes/src/main/java/org/springframework/cloud/deployer/spi/kubernetes/KubernetesTaskLauncher.java","ids.add(hasMetadata.getMetadata().getName())"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-kubernetes/src/test/java/org/springframework/cloud/deployer/spi/kubernetes/DefaultContainerFactoryTests.java","cmdLineArgs.add(""--foo.bar=value1"")"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-kubernetes/src/test/java/org/springframework/cloud/deployer/spi/kubernetes/DefaultContainerFactoryTests.java","cmdLineArgs.add(""--spring.cloud.task.executionid=1"")"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-kubernetes/src/test/java/org/springframework/cloud/deployer/spi/kubernetes/DefaultContainerFactoryTests.java","cmdLineArgs.add(""--spring.cloud.data.flow.platformname=platform1"")"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-kubernetes/src/test/java/org/springframework/cloud/deployer/spi/kubernetes/DefaultContainerFactoryTests.java","cmdLineArgs.add(""--spring.cloud.data.flow.taskappname==a1"")"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-kubernetes/src/test/java/org/springframework/cloud/deployer/spi/kubernetes/DefaultContainerFactoryTests.java","cmdLineArgs.add(""blah=chacha"")"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-kubernetes/src/test/java/org/springframework/cloud/deployer/spi/kubernetes/DefaultContainerFactoryTests.java","args.add(""a"")"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-kubernetes/src/test/java/org/springframework/cloud/deployer/spi/kubernetes/DefaultContainerFactoryTests.java","args.add(""--b = c"")"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-kubernetes/src/test/java/org/springframework/cloud/deployer/spi/kubernetes/DefaultContainerFactoryTests.java","args.add(""d=e"")"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-kubernetes/src/test/java/org/springframework/cloud/deployer/spi/kubernetes/DefaultContainerFactoryTests.java","args.add(""f = g"")"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-kubernetes/src/test/java/org/springframework/cloud/deployer/spi/kubernetes/KubernetesSchedulerIT.java","commandLineArguments.add(""arg1=value1"")"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-kubernetes/src/test/java/org/springframework/cloud/deployer/spi/kubernetes/KubernetesSchedulerIT.java","commandLineArguments.add(""arg2=value2"")"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-kubernetes/src/test/java/org/springframework/cloud/deployer/spi/kubernetes/KubernetesTaskLauncherMaximumConcurrentTasksTests.java","items.add(new PodBuilder().withNewMetadata()
		.withName(""task-"" + i).endMetadata()
		.withNewStatus()
		.withPhase(""Running"")
		.endStatus().build())"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-kubernetes/src/test/java/org/springframework/cloud/deployer/spi/kubernetes/KubernetesAppDeployerIntegrationIT.java","
podSpec.getContainers().add(container)"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-kubernetes/src/test/java/org/springframework/cloud/deployer/spi/kubernetes/KubernetesAppDeployerIntegrationIT.java","secrets.add(secret1.getMetadata().getName())"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-kubernetes/src/test/java/org/springframework/cloud/deployer/spi/kubernetes/KubernetesAppDeployerIntegrationIT.java","secrets.add(secret2.getMetadata().getName())"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-kubernetes/src/test/java/org/springframework/cloud/deployer/spi/kubernetes/KubernetesAppDeployerIntegrationIT.java","configMaps.add(configMap1.getMetadata().getName())"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-kubernetes/src/test/java/org/springframework/cloud/deployer/spi/kubernetes/KubernetesAppDeployerIntegrationIT.java","configMaps.add(configMap2.getMetadata().getName())"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-kubernetes/src/test/java/org/springframework/cloud/deployer/spi/kubernetes/KubernetesAppDeployerTests.java","kubernetesDeployerProperties.getTolerations().add(toleration)"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-kubernetes/src/test/java/org/springframework/cloud/deployer/spi/kubernetes/KubernetesAppDeployerTests.java","kubernetesDeployerProperties.getTolerations().add(toleration)"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-kubernetes/src/test/java/org/springframework/cloud/deployer/spi/kubernetes/KubernetesAppDeployerTests.java","
kubernetesDeployerProperties.getTolerations().add(toleration1)"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-kubernetes/src/test/java/org/springframework/cloud/deployer/spi/kubernetes/KubernetesAppDeployerTests.java","
kubernetesDeployerProperties.getTolerations().add(toleration2)"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-kubernetes/src/test/java/org/springframework/cloud/deployer/spi/kubernetes/KubernetesAppDeployerTests.java","
globalSecretKeyRefs.add(globalSecretKeyRef1)"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-kubernetes/src/test/java/org/springframework/cloud/deployer/spi/kubernetes/KubernetesAppDeployerTests.java","globalSecretKeyRefs.add(globalSecretKeyRef2)"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-kubernetes/src/test/java/org/springframework/cloud/deployer/spi/kubernetes/KubernetesAppDeployerTests.java","
globalConfigMapKeyRefs.add(globalConfigMapKeyRef1)"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-kubernetes/src/test/java/org/springframework/cloud/deployer/spi/kubernetes/KubernetesAppDeployerTests.java","globalConfigMapKeyRefs.add(globalConfigMapKeyRef2)"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-spi-test/src/main/java/org/springframework/cloud/deployer/spi/test/AbstractAppDeployerIntegrationJUnit5Tests.java","individualStates.add(status.getState())"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-spi-test/src/main/java/org/springframework/cloud/deployer/spi/test/AbstractAppDeployerIntegrationJUnit5Tests.java","individualStates.add(status.getState())"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-spi-test/src/main/java/org/springframework/cloud/deployer/spi/test/AbstractAppDeployerIntegrationTests.java","individualStates.add(status.getState())"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-spi-test/src/main/java/org/springframework/cloud/deployer/spi/test/AbstractAppDeployerIntegrationTests.java","individualStates.add(status.getState())"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-resource-support/src/test/java/org/springframework/cloud/deployer/resource/StubResourceLoader.java","this.requestedLocations.add(location)"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-cloudfoundry/src/main/java/org/springframework/cloud/deployer/spi/cloudfoundry/CfEnvAwareResource.java","urls.add(a.getUrl())"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-cloudfoundry/src/main/java/org/springframework/cloud/deployer/spi/cloudfoundry/ServiceParser.java","serviceInstances.add(val)"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-cloudfoundry/src/main/java/org/springframework/cloud/deployer/spi/cloudfoundry/ServiceParser.java","serviceInstances.add(s)"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-cloudfoundry/src/test/java/org/springframework/cloud/deployer/spi/cloudfoundry/CloudFoundryTaskLauncherTests.java","args.add(""test-command-arg-1"")"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-cloudfoundry/src/test/java/org/springframework/cloud/deployer/spi/cloudfoundry/CloudFoundryTaskLauncherTests.java","args.add(""a=b"")"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-cloudfoundry/src/test/java/org/springframework/cloud/deployer/spi/cloudfoundry/CloudFoundryTaskLauncherTests.java","args.add(""run.id=1"")"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-cloudfoundry/src/test/java/org/springframework/cloud/deployer/spi/cloudfoundry/CloudFoundryTaskLauncherTests.java","args.add(""run.id(long)=1"")"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-cloudfoundry/src/test/java/org/springframework/cloud/deployer/spi/cloudfoundry/CloudFoundryTaskLauncherTests.java","args.add(""run.id(long=1"")"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-cloudfoundry/src/test/java/org/springframework/cloud/deployer/spi/cloudfoundry/CloudFoundryTaskLauncherTests.java","args.add(""run.id)=1"")"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-cloudfoundry/src/test/java/org/springframework/cloud/deployer/spi/cloudfoundry/CloudFoundryTaskLauncherTests.java","taskResources.add(TaskResource.builder()
	.name(""task-"" + i)
	.dropletId(UUID.randomUUID().toString())
	.id(UUID.randomUUID().toString())
	.diskInMb(2048)
	.sequenceId(i)
	.state(TaskState.RUNNING)
	.memoryInMb(2048)
	.createdAt(LocalDateTime.now().format(DateTimeFormatter.ofPattern(""yyyy-MM-dd HH:mm:ss"")))
	.build())"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-cloudfoundry/src/test/java/org/springframework/cloud/deployer/spi/cloudfoundry/CloudFoundryTaskLauncherCachingTests.java","taskResources.add(TaskResource.builder()
	.name(""task-"" + i)
	.dropletId(UUID.randomUUID().toString())
	.id(UUID.randomUUID().toString())
	.diskInMb(2048)
	.sequenceId(i)
	.state(TaskState.RUNNING)
	.memoryInMb(2048)
	.createdAt(LocalDateTime.now().format(DateTimeFormatter.ofPattern(""yyyy-MM-dd HH:mm:ss"")))
	.build())"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-cloudfoundry/src/test/java/org/springframework/cloud/deployer/spi/scheduler/cloudfoundry/CloudFoundryAppSchedulerTests.java","this.jobResources.add(Job.builder().applicationId(request.getApplicationId())
		.command(request.getCommand())
		.id(""test-job-1"")
		.name(request.getName())
		.build())"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-cloudfoundry/src/test/java/org/springframework/cloud/deployer/spi/scheduler/cloudfoundry/CloudFoundryAppSchedulerTests.java","localJobs.jobResources.add(Job.builder().applicationId(""test-application-id-1"")
		.command(""test-command"")
		.id(""test-job-1"")
		.name(""test-job-name-1"")
		.build())"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-cloudfoundry/src/test/java/org/springframework/cloud/deployer/spi/scheduler/cloudfoundry/CloudFoundryAppSchedulerTests.java","localJobs.jobResources.add(Job.builder().applicationId(""test-application-id-2"")
		.command(""test-command"")
		.id(""test-job-2"")
		.name(""test-job-name-2"")
		.build())"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-cloudfoundry/src/test/java/org/springframework/cloud/deployer/spi/scheduler/cloudfoundry/CloudFoundryAppSchedulerTests.java","localJobs.jobResources.add(Job.builder().applicationId(""test-application-id-1"")
		.command(""test-command"")
		.id(""test-job-1"")
		.name(""test-job-name-1"")
		.jobSchedules(createJobScheduleList(""test-job-1"", ""test-schedule-1""))
		.build())"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-cloudfoundry/src/test/java/org/springframework/cloud/deployer/spi/scheduler/cloudfoundry/CloudFoundryAppSchedulerTests.java","localJobs.jobResources.add(Job.builder().applicationId(""test-application-id-2"")
		.command(""test-command"")
		.id(""test-job-2"")
		.name(""test-job-name-2"")
		.jobSchedules(createJobScheduleList(""test-job-2"", ""test-schedule-2""))
		.build())"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-cloudfoundry/src/test/java/org/springframework/cloud/deployer/spi/scheduler/cloudfoundry/CloudFoundryAppSchedulerTests.java","jobSchedules.add(JobSchedule.builder()
		.enabled(true)
		.expression(DEFAULT_CRON_EXPRESSION)
		.expressionType(ExpressionType.CRON)
		.id(scheduleId)
		.jobId(jobId)
		.build())"
github.com,"spring-cloud/spring-cloud-deployer",main,"src/main/java/org/springframework/cloud/deployer/spi/local/JavaCommandBuilder.java","commands.add(bindDeploymentProperties(deploymentProperties).getJavaCmd())"
github.com,"spring-cloud/spring-cloud-deployer",main,"src/main/java/org/springframework/cloud/deployer/spi/local/JavaCommandBuilder.java","commands.add(getJdwpOptions(debugAddress.getSuspend(), debugAddress.getAddress()))"
github.com,"spring-cloud/spring-cloud-deployer",main,"src/main/java/org/springframework/cloud/deployer/spi/local/JavaCommandBuilder.java","commands.add(memory)"
github.com,"spring-cloud/spring-cloud-deployer",main,"src/main/java/org/springframework/cloud/deployer/spi/local/JavaCommandBuilder.java","commands.add(memory)"
github.com,"spring-cloud/spring-cloud-deployer",main,"src/main/java/org/springframework/cloud/deployer/spi/local/JavaCommandBuilder.java","commands.add(""-jar"")"
github.com,"spring-cloud/spring-cloud-deployer",main,"src/main/java/org/springframework/cloud/deployer/spi/local/DockerCommandBuilder.java","commands.add(""docker"")"
github.com,"spring-cloud/spring-cloud-deployer",main,"src/main/java/org/springframework/cloud/deployer/spi/local/DockerCommandBuilder.java","commands.add(""run"")"
github.com,"spring-cloud/spring-cloud-deployer",main,"src/main/java/org/springframework/cloud/deployer/spi/local/DockerCommandBuilder.java","commands.add(""--network"")"
github.com,"spring-cloud/spring-cloud-deployer",main,"src/main/java/org/springframework/cloud/deployer/spi/local/DockerCommandBuilder.java","commands.add(this.dockerNetwork)"
github.com,"spring-cloud/spring-cloud-deployer",main,"src/main/java/org/springframework/cloud/deployer/spi/local/DockerCommandBuilder.java","commands.add(""--rm"")"
github.com,"spring-cloud/spring-cloud-deployer",main,"src/main/java/org/springframework/cloud/deployer/spi/local/DockerCommandBuilder.java","commands.add(""-e"")"
github.com,"spring-cloud/spring-cloud-deployer",main,"src/main/java/org/springframework/cloud/deployer/spi/local/DockerCommandBuilder.java","commands.add(String.format(""%s=%s"", env, appInstanceEnv.get(env)))"
github.com,"spring-cloud/spring-cloud-deployer",main,"src/main/java/org/springframework/cloud/deployer/spi/local/DockerCommandBuilder.java","
commands.add(""-e"")"
github.com,"spring-cloud/spring-cloud-deployer",main,"src/main/java/org/springframework/cloud/deployer/spi/local/DockerCommandBuilder.java","commands.add(""JAVA_TOOL_OPTIONS="" + debugCommand)"
github.com,"spring-cloud/spring-cloud-deployer",main,"src/main/java/org/springframework/cloud/deployer/spi/local/DockerCommandBuilder.java","commands.add(""-p"")"
github.com,"spring-cloud/spring-cloud-deployer",main,"src/main/java/org/springframework/cloud/deployer/spi/local/DockerCommandBuilder.java","commands.add(String.format(""%s:%s"", debugAddress.getPort(), debugAddress.getPort()))"
github.com,"spring-cloud/spring-cloud-deployer",main,"src/main/java/org/springframework/cloud/deployer/spi/local/DockerCommandBuilder.java","commands.add(""-p"")"
github.com,"spring-cloud/spring-cloud-deployer",main,"src/main/java/org/springframework/cloud/deployer/spi/local/DockerCommandBuilder.java","commands.add(String.format(""%s:%s"", port, port))"
github.com,"spring-cloud/spring-cloud-deployer",main,"src/main/java/org/springframework/cloud/deployer/spi/local/DockerCommandBuilder.java","commands.add(String.format(""--name=%s-%d"", deploymentId, index))"
github.com,"spring-cloud/spring-cloud-deployer",main,"src/main/java/org/springframework/cloud/deployer/spi/local/DockerCommandBuilder.java","commands.add(dockerImageURI.substring(""docker:"".length()))"
github.com,"spring-cloud/spring-cloud-deployer",main,"src/main/java/org/springframework/cloud/deployer/spi/local/DockerCommandBuilder.java","commands.add(""-v"")"
github.com,"spring-cloud/spring-cloud-deployer",main,"src/main/java/org/springframework/cloud/deployer/spi/local/DockerCommandBuilder.java","commands.add(v)"
github.com,"spring-cloud/spring-cloud-deployer",main,"src/main/java/org/springframework/cloud/deployer/spi/local/DockerCommandBuilder.java","commands.add(""-p"")"
github.com,"spring-cloud/spring-cloud-deployer",main,"src/main/java/org/springframework/cloud/deployer/spi/local/DockerCommandBuilder.java","commands.add(p)"
github.com,"spring-cloud/spring-cloud-deployer",main,"src/main/java/org/springframework/cloud/deployer/spi/local/LocalAppDeployer.java","processes.add(instances.remove(index))"
github.com,"spring-cloud/spring-cloud-deployer",main,"src/main/java/org/springframework/cloud/deployer/spi/local/LocalTaskLauncher.java","oldTaskInstanceIds.add(taskLaunchId)"
github.com,"spring-cloud/spring-cloud-deployer",main,"src/main/java/org/springframework/cloud/deployer/spi/kubernetes/KubernetesAppDeployer.java","
command.add(""sh"")"
github.com,"spring-cloud/spring-cloud-deployer",main,"src/main/java/org/springframework/cloud/deployer/spi/kubernetes/KubernetesAppDeployer.java","command.add(""-c"")"
github.com,"spring-cloud/spring-cloud-deployer",main,"src/main/java/org/springframework/cloud/deployer/spi/kubernetes/KubernetesAppDeployer.java","command.add(commandString)"
github.com,"spring-cloud/spring-cloud-deployer",main,"src/main/java/org/springframework/cloud/deployer/spi/kubernetes/DefaultContainerFactory.java","finalAppArgs.add(String.format(""--%s=%s"", k, v))"
github.com,"spring-cloud/spring-cloud-deployer",main,"src/main/java/org/springframework/cloud/deployer/spi/kubernetes/DefaultContainerFactory.java","cmdArgs.add(String.format(""--%s=%s"", entry.getKey(), entry.getValue()))"
github.com,"spring-cloud/spring-cloud-deployer",main,"src/test/java/org/springframework/cloud/deployer/spi/local/LocalAppDeployerIntegrationTests.java","beforeDirs.add(customWorkDirRoot)"
github.com,"spring-cloud/spring-cloud-deployer",main,"src/test/java/org/springframework/cloud/deployer/spi/local/LocalTaskLauncherIntegrationTests.java","beforeDirs.add(customWorkDirRoot)"
github.com,"spring-cloud/spring-cloud-deployer",main,"src/test/java/org/springframework/cloud/deployer/spi/kubernetes/DefaultContainerFactoryTests.java","cmdLineArgs.add(""--foo.bar=value1"")"
github.com,"spring-cloud/spring-cloud-deployer",main,"src/test/java/org/springframework/cloud/deployer/spi/kubernetes/DefaultContainerFactoryTests.java","cmdLineArgs.add(""--spring.cloud.task.executionid=1"")"
github.com,"spring-cloud/spring-cloud-deployer",main,"src/test/java/org/springframework/cloud/deployer/spi/kubernetes/DefaultContainerFactoryTests.java","cmdLineArgs.add(""--spring.cloud.data.flow.platformname=platform1"")"
github.com,"spring-cloud/spring-cloud-deployer",main,"src/test/java/org/springframework/cloud/deployer/spi/kubernetes/DefaultContainerFactoryTests.java","cmdLineArgs.add(""--spring.cloud.data.flow.taskappname==a1"")"
github.com,"spring-cloud/spring-cloud-deployer",main,"src/test/java/org/springframework/cloud/deployer/spi/kubernetes/DefaultContainerFactoryTests.java","cmdLineArgs.add(""blah=chacha"")"
github.com,"spring-cloud/spring-cloud-deployer",main,"src/test/java/org/springframework/cloud/deployer/spi/kubernetes/DefaultContainerFactoryTests.java","args.add(""a"")"
github.com,"spring-cloud/spring-cloud-deployer",main,"src/test/java/org/springframework/cloud/deployer/spi/kubernetes/DefaultContainerFactoryTests.java","args.add(""--b = c"")"
github.com,"spring-cloud/spring-cloud-deployer",main,"src/test/java/org/springframework/cloud/deployer/spi/kubernetes/DefaultContainerFactoryTests.java","args.add(""d=e"")"
github.com,"spring-cloud/spring-cloud-deployer",main,"src/test/java/org/springframework/cloud/deployer/spi/kubernetes/DefaultContainerFactoryTests.java","args.add(""f = g"")"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-resource-maven/src/main/java/org/springframework/cloud/deployer/resource/maven/MavenArtifactResolver.java","this.remoteRepositories.add(repo)"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-resource-maven/src/main/java/org/springframework/cloud/deployer/resource/maven/MavenArtifactResolver.java","defaultRepos.add(defaultRepo)"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-resource-maven/src/main/java/org/springframework/cloud/deployer/resource/maven/MavenArtifactResolver.java","versions.add(version.toString())"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-resource-maven/src/main/java/org/springframework/cloud/deployer/resource/maven/MavenArtifactResolver.java","artifactRequests.add(new ArtifactRequest(toPomArtifact(resource), this.remoteRepositories, JavaScopes.RUNTIME))"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-resource-maven/src/main/java/org/springframework/cloud/deployer/resource/maven/MavenArtifactResolver.java","artifactRequests.add(new ArtifactRequest(toJarArtifact(resource), this.remoteRepositories, JavaScopes.RUNTIME))"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-local/src/main/java/org/springframework/cloud/deployer/spi/local/JavaCommandBuilder.java","commands.add(bindDeploymentProperties(deploymentProperties).getJavaCmd(bootVersion))"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-local/src/main/java/org/springframework/cloud/deployer/spi/local/JavaCommandBuilder.java","commands.add(getJdwpOptions(debugAddress.getSuspend(), debugAddress.getAddress()))"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-local/src/main/java/org/springframework/cloud/deployer/spi/local/JavaCommandBuilder.java","commands.add(memory)"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-local/src/main/java/org/springframework/cloud/deployer/spi/local/JavaCommandBuilder.java","commands.add(memory)"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-local/src/main/java/org/springframework/cloud/deployer/spi/local/JavaCommandBuilder.java","commands.add(""-jar"")"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-local/src/main/java/org/springframework/cloud/deployer/spi/local/JavaCommandBuilder.java","commands.add(resource.getFile().getAbsolutePath())"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-local/src/main/java/org/springframework/cloud/deployer/spi/local/DockerCommandBuilder.java","commands.add(""docker"")"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-local/src/main/java/org/springframework/cloud/deployer/spi/local/DockerCommandBuilder.java","commands.add(""run"")"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-local/src/main/java/org/springframework/cloud/deployer/spi/local/DockerCommandBuilder.java","commands.add(""--network"")"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-local/src/main/java/org/springframework/cloud/deployer/spi/local/DockerCommandBuilder.java","commands.add(this.dockerNetwork)"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-local/src/main/java/org/springframework/cloud/deployer/spi/local/DockerCommandBuilder.java","commands.add(""--rm"")"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-local/src/main/java/org/springframework/cloud/deployer/spi/local/DockerCommandBuilder.java","commands.add(""-e"")"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-local/src/main/java/org/springframework/cloud/deployer/spi/local/DockerCommandBuilder.java","commands.add(String.format(""%s=%s"", env, appInstanceEnv.get(env)))"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-local/src/main/java/org/springframework/cloud/deployer/spi/local/DockerCommandBuilder.java","
commands.add(""-e"")"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-local/src/main/java/org/springframework/cloud/deployer/spi/local/DockerCommandBuilder.java","commands.add(""JAVA_TOOL_OPTIONS="" + debugCommand)"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-local/src/main/java/org/springframework/cloud/deployer/spi/local/DockerCommandBuilder.java","commands.add(""-p"")"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-local/src/main/java/org/springframework/cloud/deployer/spi/local/DockerCommandBuilder.java","commands.add(String.format(""%s:%s"", debugAddress.getPort(), debugAddress.getPort()))"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-local/src/main/java/org/springframework/cloud/deployer/spi/local/DockerCommandBuilder.java","commands.add(""-p"")"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-local/src/main/java/org/springframework/cloud/deployer/spi/local/DockerCommandBuilder.java","commands.add(String.format(""%s:%s"", port, port))"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-local/src/main/java/org/springframework/cloud/deployer/spi/local/DockerCommandBuilder.java","commands.add(String.format(""--name=%s-%d"", request.getDeploymentProperties().get(DOCKER_CONTAINER_NAME_KEY), appInstanceNumber.get()))"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-local/src/main/java/org/springframework/cloud/deployer/spi/local/DockerCommandBuilder.java","commands.add(String.format(""--name=%s"", request.getDeploymentProperties().get(DOCKER_CONTAINER_NAME_KEY)))"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-local/src/main/java/org/springframework/cloud/deployer/spi/local/DockerCommandBuilder.java","commands.add(String.format(""--name=%s-%d"", deploymentId, index))"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-local/src/main/java/org/springframework/cloud/deployer/spi/local/DockerCommandBuilder.java","commands.add(dockerImageURI.substring(""docker:"".length()))"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-local/src/main/java/org/springframework/cloud/deployer/spi/local/DockerCommandBuilder.java","commands.add(""-v"")"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-local/src/main/java/org/springframework/cloud/deployer/spi/local/DockerCommandBuilder.java","commands.add(v)"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-local/src/main/java/org/springframework/cloud/deployer/spi/local/DockerCommandBuilder.java","commands.add(""-p"")"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-local/src/main/java/org/springframework/cloud/deployer/spi/local/DockerCommandBuilder.java","commands.add(p)"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-local/src/main/java/org/springframework/cloud/deployer/spi/local/LocalAppDeployer.java","processes.add(deployApp(request, workDir, group, deploymentId, index, request.getDeploymentProperties()))"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-local/src/main/java/org/springframework/cloud/deployer/spi/local/LocalAppDeployer.java","instances.add(deployApp(request, workDir, group, deploymentId, index, request.getDeploymentProperties()))"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-local/src/main/java/org/springframework/cloud/deployer/spi/local/LocalAppDeployer.java","processes.add(instances.remove(index))"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-local/src/main/java/org/springframework/cloud/deployer/spi/local/LocalTaskLauncher.java","oldTaskInstanceIds.add(taskLaunchId)"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-local/src/test/java/org/springframework/cloud/deployer/spi/local/LocalAppDeployerIntegrationTests.java","beforeDirs.add(customWorkDirRoot)"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-local/src/test/java/org/springframework/cloud/deployer/spi/local/LocalDeployerSupportTests.java","
// test adding to command line args, which has higher precedence than application properties
commandLineArgs.add(LocalTaskLauncher.SERVER_PORT_KEY_COMMAND_LINE_ARG  + 9191)"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-local/src/test/java/org/springframework/cloud/deployer/spi/local/LocalTaskLauncherIntegrationTests.java","beforeDirs.add(customWorkDirRoot)"
github.com,"spring-cloud/spring-cloud-deployer",main,"spring-cloud-deployer-local/src/test/java/org/springframework/cloud/deployer/spi/local/LocalTaskLauncherIntegrationTests.java","// Test to ensure no issues parsing server.port command line arg.
commandLineArgs.add(LocalTaskLauncher.SERVER_PORT_KEY_COMMAND_LINE_ARG + DeployerSocketUtils.findAvailableTcpPort(LocalTaskLauncher.DEFAULT_SERVER_PORT))"
github.com,"spring-cloud/spring-cloud-consul",main,"spring-cloud-consul-binder/src/test/java/org/springframework/cloud/consul/binder/ConsulBinderTests.java","args.add(String.format(""--server.port=%d"", consumerPort))"
github.com,"spring-cloud/spring-cloud-consul",main,"spring-cloud-consul-binder/src/test/java/org/springframework/cloud/consul/binder/ConsulBinderTests.java","args.add(""--management.context-path=/"")"
github.com,"spring-cloud/spring-cloud-consul",main,"spring-cloud-consul-binder/src/test/java/org/springframework/cloud/consul/binder/ConsulBinderTests.java","args.add(""--management.security.enabled=false"")"
github.com,"spring-cloud/spring-cloud-consul",main,"spring-cloud-consul-binder/src/test/java/org/springframework/cloud/consul/binder/ConsulBinderTests.java","args.add(""--endpoints.shutdown.enabled=true"")"
github.com,"spring-cloud/spring-cloud-consul",main,"spring-cloud-consul-binder/src/test/java/org/springframework/cloud/consul/binder/ConsulBinderTests.java","args.add(""--debug"")"
github.com,"spring-cloud/spring-cloud-consul",main,"spring-cloud-consul-binder/src/test/java/org/springframework/cloud/consul/binder/ConsulBinderTests.java","args.add(String.format(""--group=%s"", groups[i]))"
github.com,"spring-cloud/spring-cloud-consul",main,"spring-cloud-consul-binder/src/test/java/org/springframework/cloud/consul/binder/ConsulBinderTests.java","args.add(String.format(""--server.port=%d"", producerPort))"
github.com,"spring-cloud/spring-cloud-consul",main,"spring-cloud-consul-binder/src/test/java/org/springframework/cloud/consul/binder/ConsulBinderTests.java","args.add(""--management.context-path=/"")"
github.com,"spring-cloud/spring-cloud-consul",main,"spring-cloud-consul-binder/src/test/java/org/springframework/cloud/consul/binder/ConsulBinderTests.java","args.add(""--management.security.enabled=false"")"
github.com,"spring-cloud/spring-cloud-consul",main,"spring-cloud-consul-binder/src/test/java/org/springframework/cloud/consul/binder/ConsulBinderTests.java","args.add(""--endpoints.shutdown.enabled=true"")"
github.com,"spring-cloud/spring-cloud-consul",main,"spring-cloud-consul-binder/src/test/java/org/springframework/cloud/consul/binder/ConsulBinderTests.java","args.add(String.format(""--partitioned=%b"", false))"
github.com,"spring-cloud/spring-cloud-consul",main,"spring-cloud-consul-binder/src/test/java/org/springframework/cloud/consul/binder/ConsulBinderTests.java","args.add(""--debug"")"
github.com,"spring-cloud/spring-cloud-consul",main,"spring-cloud-consul-binder/src/test/java/org/springframework/cloud/consul/binder/ConsulBinderTests.java","commands.add(super.getLocalDeployerProperties().getJavaCmd())"
github.com,"spring-cloud/spring-cloud-consul",main,"spring-cloud-consul-binder/src/test/java/org/springframework/cloud/consul/binder/ConsulBinderTests.java","commands.add(""-cp"")"
github.com,"spring-cloud/spring-cloud-consul",main,"spring-cloud-consul-binder/src/test/java/org/springframework/cloud/consul/binder/ConsulBinderTests.java","commands.add(request.getDefinition().getProperties().get(""classpath""))"
github.com,"spring-cloud/spring-cloud-consul",main,"spring-cloud-consul-binder/src/test/java/org/springframework/cloud/consul/binder/ConsulBinderTests.java","commands.add(request.getDefinition().getProperties().get(""main""))"
github.com,"spring-cloud/spring-cloud-consul",main,"spring-cloud-consul-config/src/main/java/org/springframework/cloud/consul/config/ConsulConfigDataLocationResolver.java","contexts.add(new Context(path + suffix))"
github.com,"spring-cloud/spring-cloud-consul",main,"spring-cloud-consul-config/src/main/java/org/springframework/cloud/consul/config/ConsulConfigDataLoader.java","options.add(Option.IGNORE_IMPORTS)"
github.com,"spring-cloud/spring-cloud-consul",main,"spring-cloud-consul-config/src/main/java/org/springframework/cloud/consul/config/ConsulConfigDataLoader.java","options.add(Option.IGNORE_PROFILES)"
github.com,"spring-cloud/spring-cloud-consul",main,"spring-cloud-consul-config/src/main/java/org/springframework/cloud/consul/config/ConsulConfigDataLoader.java","options.add(Option.PROFILE_SPECIFIC)"
github.com,"spring-cloud/spring-cloud-consul",main,"spring-cloud-consul-config/src/main/java/org/springframework/cloud/consul/config/ConsulPropertySources.java","contexts.add(new Context(defaultContext + suffix))"
github.com,"spring-cloud/spring-cloud-consul",main,"spring-cloud-consul-config/src/main/java/org/springframework/cloud/consul/config/ConsulPropertySources.java","contexts.add(new Context(baseContext + suffix))"
github.com,"spring-cloud/spring-cloud-consul",main,"spring-cloud-consul-config/src/main/java/org/springframework/cloud/consul/config/ConsulPropertySources.java","contexts.add(new Context(path, profile))"
github.com,"spring-cloud/spring-cloud-consul",main,"spring-cloud-consul-discovery/src/main/java/org/springframework/cloud/consul/discovery/ConsulDiscoveryProperties.java","this.managementTags.add(MANAGEMENT)"
github.com,"spring-cloud/spring-cloud-consul",main,"spring-cloud-consul-discovery/src/main/java/org/springframework/cloud/consul/discovery/reactive/ConsulReactiveDiscoveryClient.java","instances.add(new ConsulServiceInstance(healthService, serviceId))"
github.com,"spring-cloud/spring-cloud-consul",main,"spring-cloud-consul-discovery/src/main/java/org/springframework/cloud/consul/discovery/ConsulDiscoveryClient.java","instances.add(new ConsulServiceInstance(service, serviceId))"
github.com,"spring-cloud/spring-cloud-consul",main,"spring-cloud-consul-discovery/src/main/java/org/springframework/cloud/consul/serviceregistry/ConsulServletRegistrationCustomizer.java","tags.add(""contextPath="" + sc.getContextPath())"
github.com,"spring-cloud/spring-cloud-consul",main,"spring-cloud-consul-discovery/src/test/java/org/springframework/cloud/consul/discovery/ConsulDiscoveryPropertiesTests.java","properties.getManagementTags().add(""newTag"")"
github.com,"spring-cloud/spring-cloud-consul",main,"spring-cloud-consul-discovery/src/test/java/org/springframework/cloud/consul/serviceregistry/ConsulAutoServiceRegistrationManagementCustomizerTests.java","checks.add(check)"
github.com,"spring-cloud/spring-cloud-config",main,"spring-cloud-config-server/src/main/java/org/springframework/cloud/config/server/composite/OnSearchPathLocatorPresent.java","repositoryTypes.add(repositoryType)"
github.com,"spring-cloud/spring-cloud-config",main,"spring-cloud-config-server/src/main/java/org/springframework/cloud/config/server/support/GitSkipSslValidationCredentialsProvider.java","
unprocessedItems.add(item)"
github.com,"spring-cloud/spring-cloud-config",main,"spring-cloud-config-server/src/main/java/org/springframework/cloud/config/server/support/GitSkipSslValidationCredentialsProvider.java","unprocessedItems.add(item)"
github.com,"spring-cloud/spring-cloud-config",main,"spring-cloud-config-server/src/main/java/org/springframework/cloud/config/server/support/GitSkipSslValidationCredentialsProvider.java","unprocessedItems.add(item)"
github.com,"spring-cloud/spring-cloud-config",main,"spring-cloud-config-server/src/main/java/org/springframework/cloud/config/server/support/GitSkipSslValidationCredentialsProvider.java","unprocessedItems.add(item)"
github.com,"spring-cloud/spring-cloud-config",main,"spring-cloud-config-server/src/main/java/org/springframework/cloud/config/server/support/AbstractScmAccessor.java","output.add(resource.getURI().toString())"
github.com,"spring-cloud/spring-cloud-config",main,"spring-cloud-config-server/src/main/java/org/springframework/cloud/config/server/ssh/PropertyBasedSshSessionFactory.java","publicKeys.add(publicKey)"
github.com,"spring-cloud/spring-cloud-config",main,"spring-cloud-config-server/src/main/java/org/springframework/cloud/config/server/ssh/SshPropertyValidator.java","allRepoProperties.add(sshUriProperties)"
github.com,"spring-cloud/spring-cloud-config",main,"spring-cloud-config-server/src/main/java/org/springframework/cloud/config/server/resource/GenericResourceRepository.java","locationResources.add(this.resourceLoader.getResource(location.replaceFirst(""optional:"", """")))"
github.com,"spring-cloud/spring-cloud-config",main,"spring-cloud-config-server/src/main/java/org/springframework/cloud/config/server/environment/AwsParameterStoreEnvironmentRepository.java","result.add(new PropertySource(name, source))"
github.com,"spring-cloud/spring-cloud-config",main,"spring-cloud-config-server/src/main/java/org/springframework/cloud/config/server/environment/AwsParameterStoreEnvironmentRepository.java","result.add(0, new PropertySource(""overrides"", overrides))"
github.com,"spring-cloud/spring-cloud-config",main,"spring-cloud-config-server/src/main/java/org/springframework/cloud/config/server/environment/ConsulEnvironmentWatch.java","params.add(this.scheme)"
github.com,"spring-cloud/spring-cloud-config",main,"spring-cloud-config-server/src/main/java/org/springframework/cloud/config/server/environment/ConsulEnvironmentWatch.java","params.add(this.host)"
github.com,"spring-cloud/spring-cloud-config",main,"spring-cloud-config-server/src/main/java/org/springframework/cloud/config/server/environment/ConsulEnvironmentWatch.java","params.add(String.valueOf(this.port))"
github.com,"spring-cloud/spring-cloud-config",main,"spring-cloud-config-server/src/main/java/org/springframework/cloud/config/server/environment/ConsulEnvironmentWatch.java","params.add(this.path)"
github.com,"spring-cloud/spring-cloud-config",main,"spring-cloud-config-server/src/main/java/org/springframework/cloud/config/server/environment/ConsulEnvironmentWatch.java","params.add(this.wait)"
github.com,"spring-cloud/spring-cloud-config",main,"spring-cloud-config-server/src/main/java/org/springframework/cloud/config/server/environment/ConsulEnvironmentWatch.java","params.add(StringUtils.hasText(state) ? state : """")"
github.com,"spring-cloud/spring-cloud-config",main,"spring-cloud-config-server/src/main/java/org/springframework/cloud/config/server/environment/HttpClientConfigurableHttpConnectionFactory.java","values.add(valueTokens[0])"
github.com,"spring-cloud/spring-cloud-config",main,"spring-cloud-config-server/src/main/java/org/springframework/cloud/config/server/environment/HttpClientConfigurableHttpConnectionFactory.java","values.add(spec)"
github.com,"spring-cloud/spring-cloud-config",main,"spring-cloud-config-server/src/main/java/org/springframework/cloud/config/server/environment/HttpClientConfigurableHttpConnectionFactory.java","placeholders.add(new Placeholder(matcher.group(1), matcher.start(), matcher.end()))"
github.com,"spring-cloud/spring-cloud-config",main,"spring-cloud-config-server/src/main/java/org/springframework/cloud/config/server/environment/secretmanager/GoogleSecretManagerV1AccessStrategy.java",result::add
github.com,"spring-cloud/spring-cloud-config",main,"spring-cloud-config-server/src/main/java/org/springframework/cloud/config/server/environment/secretmanager/GoogleSecretManagerV1AccessStrategy.java",result::add
github.com,"spring-cloud/spring-cloud-config",main,"spring-cloud-config-server/src/main/java/org/springframework/cloud/config/server/environment/RedisEnvironmentRepository.java","keys.add(application)"
github.com,"spring-cloud/spring-cloud-config",main,"spring-cloud-config-server/src/main/java/org/springframework/cloud/config/server/environment/RedisEnvironmentRepository.java","keys.add(application + ""-"" + profile)"
github.com,"spring-cloud/spring-cloud-config",main,"spring-cloud-config-server/src/main/java/org/springframework/cloud/config/server/environment/EnvironmentController.java","list.add(null)"
github.com,"spring-cloud/spring-cloud-config",main,"spring-cloud-config-server/src/main/java/org/springframework/cloud/config/server/environment/AbstractVaultEnvironmentRepository.java","keys.add(this.defaultKey)"
github.com,"spring-cloud/spring-cloud-config",main,"spring-cloud-config-server/src/main/java/org/springframework/cloud/config/server/environment/AbstractVaultEnvironmentRepository.java","keys.add(app)"
github.com,"spring-cloud/spring-cloud-config",main,"spring-cloud-config-server/src/main/java/org/springframework/cloud/config/server/environment/AbstractVaultEnvironmentRepository.java","contexts.add(baseContext + this.profileSeparator + profile)"
github.com,"spring-cloud/spring-cloud-config",main,"spring-cloud-config-server/src/main/java/org/springframework/cloud/config/server/environment/vault/SpringVaultClientConfiguration.java","restTemplate.getInterceptors().add(VaultClients.createNamespaceInterceptor(vaultProperties.getNamespace()))"
github.com,"spring-cloud/spring-cloud-config",main,"spring-cloud-config-server/src/main/java/org/springframework/cloud/config/server/environment/MultipleJGitEnvironmentRepository.java","list.add(getRepository(repository, application, profiles[i], label))"
github.com,"spring-cloud/spring-cloud-config",main,"spring-cloud-config-server/src/main/java/org/springframework/cloud/config/server/environment/MultipleJGitEnvironmentRepository.java","// If user supplies only one profile, allow others
otherProfiles.add(p + "",*"")"
github.com,"spring-cloud/spring-cloud-config",main,"spring-cloud-config-server/src/main/java/org/springframework/cloud/config/server/environment/AwsS3EnvironmentRepository.java","apps.add(serverProperties.getDefaultApplicationName())"
github.com,"spring-cloud/spring-cloud-config",main,"spring-cloud-config-server/src/main/java/org/springframework/cloud/config/server/config/ConfigServerHealthIndicator.java","sources.add(source.getName())"
github.com,"spring-cloud/spring-cloud-config",main,"spring-cloud-config-server/src/main/java/org/springframework/cloud/config/server/config/ConfigServerHealthIndicator.java","details.add(detail)"
github.com,"spring-cloud/spring-cloud-config",main,"spring-cloud-config-server/src/test/java/org/springframework/cloud/config/server/encryption/CipherEnvironmentEncryptorTests.java","list.add(new Object[] { ""deadbeef"", ""foo"" })"
github.com,"spring-cloud/spring-cloud-config",main,"spring-cloud-config-server/src/test/java/org/springframework/cloud/config/server/encryption/CipherEnvironmentEncryptorTests.java","list.add(new Object[] { ""4567890a12345678"", ""bar"" })"
github.com,"spring-cloud/spring-cloud-config",main,"spring-cloud-config-server/src/test/java/org/springframework/cloud/config/server/environment/ConfigurableHttpConnectionFactoryIntegrationTests.java","result.add(""spring.cloud.config.server.git.uri="" + repoUrl)"
github.com,"spring-cloud/spring-cloud-config",main,"spring-cloud-config-server/src/test/java/org/springframework/cloud/config/server/environment/JGitEnvironmentRepositorySslTests.java","properties.add(""spring.cloud.config.server.git.uri="" + server.getSecureUri())"
github.com,"spring-cloud/spring-cloud-config",main,"spring-cloud-config-server/src/test/java/org/springframework/cloud/config/server/environment/JGitEnvironmentRepositorySslTests.java","properties.add(""spring.cloud.config.server.git.username=agitter"")"
github.com,"spring-cloud/spring-cloud-config",main,"spring-cloud-config-server/src/test/java/org/springframework/cloud/config/server/environment/JGitEnvironmentRepositorySslTests.java","properties.add(""spring.cloud.config.server.git.password=letmein"")"
github.com,"spring-cloud/spring-cloud-config",main,"spring-cloud-config-server/src/test/java/org/springframework/cloud/config/server/environment/CompositeEnvironmentRepositoryTests.java","repos.add(new TestOrderedEnvironmentRepository(3, e1, loc1))"
github.com,"spring-cloud/spring-cloud-config",main,"spring-cloud-config-server/src/test/java/org/springframework/cloud/config/server/environment/CompositeEnvironmentRepositoryTests.java","repos.add(new TestOrderedEnvironmentRepository(2, e3, loc2))"
github.com,"spring-cloud/spring-cloud-config",main,"spring-cloud-config-server/src/test/java/org/springframework/cloud/config/server/environment/CompositeEnvironmentRepositoryTests.java","repos.add(new TestOrderedEnvironmentRepository(1, e2, loc3))"
github.com,"spring-cloud/spring-cloud-config",main,"spring-cloud-config-server/src/test/java/org/springframework/cloud/config/server/environment/CompositeEnvironmentRepositoryTests.java","repos.add(new TestOrderedEnvironmentRepository(3, e1, loc1))"
github.com,"spring-cloud/spring-cloud-config",main,"spring-cloud-config-server/src/test/java/org/springframework/cloud/config/server/environment/CompositeEnvironmentRepositoryTests.java","repos2.add(new TestOrderedEnvironmentRepository(3, e1, loc1))"
github.com,"spring-cloud/spring-cloud-config",main,"spring-cloud-config-server/src/test/java/org/springframework/cloud/config/server/environment/CompositeEnvironmentRepositoryTests.java","repos2.add(new TestOrderedEnvironmentRepository(3, e2, loc2))"
github.com,"spring-cloud/spring-cloud-config",main,"spring-cloud-config-server/src/test/java/org/springframework/cloud/config/server/environment/CompositeEnvironmentRepositoryTests.java","repos.add(new TestOrderedEnvironmentRepository(2, e1, loc1))"
github.com,"spring-cloud/spring-cloud-config",main,"spring-cloud-config-server/src/test/java/org/springframework/cloud/config/server/environment/CompositeEnvironmentRepositoryTests.java","repos.add(new TestFailingEnvironmentRepository(1, e2, loc2))"
github.com,"spring-cloud/spring-cloud-config",main,"spring-cloud-config-server/src/test/java/org/springframework/cloud/config/server/environment/CompositeEnvironmentRepositoryTests.java","repos.add(new TestFailingLocationRepository(1, e1, loc1))"
github.com,"spring-cloud/spring-cloud-config",main,"spring-cloud-config-server/src/test/java/org/springframework/cloud/config/server/environment/CompositeEnvironmentRepositoryTests.java","repos.add(new TestFailingLocationRepository(1, e1, loc1))"
github.com,"spring-cloud/spring-cloud-config",main,"spring-cloud-config-server/src/test/java/org/springframework/cloud/config/server/environment/JGitEnvironmentRepositoryConcurrencyTests.java","tasks.add(threads.submit(new Runnable() {
	@Override
	public void run() {
		repository.findOne(""bar"", ""staging"", ""master"");
	}
}, true))"
github.com,"spring-cloud/spring-cloud-config",main,"spring-cloud-config-server/src/test/java/org/springframework/cloud/config/server/environment/JGitEnvironmentRepositoryTests.java","refs.add(ref)"
github.com,"spring-cloud/spring-cloud-config",main,"spring-cloud-config-server/src/test/java/org/springframework/cloud/config/server/environment/JGitEnvironmentRepositoryTests.java","refs.add(ref)"
github.com,"spring-cloud/spring-cloud-config",main,"spring-cloud-config-server/src/test/java/org/springframework/cloud/config/server/environment/JGitEnvironmentRepositoryTests.java","refs.add(ref)"
github.com,"spring-cloud/spring-cloud-config",main,"spring-cloud-config-server/src/test/java/org/springframework/cloud/config/server/environment/JGitEnvironmentRepositoryTests.java","refs.add(ref)"
github.com,"spring-cloud/spring-cloud-config",main,"spring-cloud-config-server/src/test/java/org/springframework/cloud/config/server/environment/JGitEnvironmentRepositoryTests.java","repositoryRefsList.add(mockMasterRef)"
github.com,"spring-cloud/spring-cloud-config",main,"spring-cloud-config-server/src/test/java/org/springframework/cloud/config/server/environment/JGitEnvironmentRepositoryTests.java","repositoryRefsList.add(mockReleaseRef)"
github.com,"spring-cloud/spring-cloud-config",main,"spring-cloud-config-server/src/test/java/org/springframework/cloud/config/server/environment/JGitEnvironmentRepositoryTests.java","repositoryRefsList.add(mockMasterRef)"
github.com,"spring-cloud/spring-cloud-config",main,"spring-cloud-config-server/src/test/java/org/springframework/cloud/config/server/environment/JGitEnvironmentRepositoryTests.java","repositoryRefsList.add(mockMasterRef)"
github.com,"spring-cloud/spring-cloud-config",main,"spring-cloud-config-server/src/test/java/org/springframework/cloud/config/server/environment/JGitEnvironmentRepositoryTests.java","repositoryRefsList.add(mockMasterRef)"
github.com,"spring-cloud/spring-cloud-config",main,"spring-cloud-config-server/src/test/java/org/springframework/cloud/config/server/environment/JGitEnvironmentRepositoryTests.java","repositoryRefsList.add(mockReleaseRef)"
github.com,"spring-cloud/spring-cloud-config",main,"spring-cloud-config-server/src/test/java/org/springframework/cloud/config/server/environment/GoogleSecretManagerEnvironmentRepositoryTests.java","secrets.add(secret)"
github.com,"spring-cloud/spring-cloud-config",main,"spring-cloud-config-server/src/test/java/org/springframework/cloud/config/server/environment/GoogleSecretManagerEnvironmentRepositoryTests.java","secrets.add(secret1)"
github.com,"spring-cloud/spring-cloud-config",main,"spring-cloud-config-server/src/test/java/org/springframework/cloud/config/server/environment/GoogleSecretManagerEnvironmentRepositoryTests.java","secrets.add(secret2)"
github.com,"spring-cloud/spring-cloud-config",main,"spring-cloud-config-server/src/test/java/org/springframework/cloud/config/server/environment/GoogleSecretManagerEnvironmentRepositoryTests.java","secrets.add(secret3)"
github.com,"spring-cloud/spring-cloud-config",main,"spring-cloud-config-server/src/test/java/org/springframework/cloud/config/server/environment/GoogleSecretManagerEnvironmentRepositoryTests.java","secrets.add(secret4)"
github.com,"spring-cloud/spring-cloud-config",main,"spring-cloud-config-server/src/test/java/org/springframework/cloud/config/server/environment/AwsParameterStoreEnvironmentRepositoryTests.java","toBeRemoved.add(value.name())"
github.com,"spring-cloud/spring-cloud-config",main,"spring-cloud-config-server/src/test/java/org/springframework/cloud/config/server/environment/AwsS3EnvironmentRepositoryTests.java","toBeRemoved.add(fileName)"
github.com,"spring-cloud/spring-cloud-config",main,"spring-cloud-config-server/src/test/java/org/springframework/cloud/config/server/environment/AwsSecretsManagerEnvironmentRepositoryTests.java","toBeRemoved.add(path)"
github.com,"spring-cloud/spring-cloud-config",main,"spring-cloud-config-client/src/main/java/org/springframework/cloud/config/client/ConfigServerConfigDataLocationResolver.java","locations.add(resource)"
github.com,"spring-cloud/spring-cloud-config",main,"spring-cloud-config-client/src/main/java/org/springframework/cloud/config/client/ConfigServerConfigDataLoader.java","propertySources.add(0,
		new OriginTrackedMapPropertySource(""configserver:"" + source.getName(), map, true))"
github.com,"spring-cloud/spring-cloud-config",main,"spring-cloud-config-client/src/main/java/org/springframework/cloud/config/client/ConfigServerConfigDataLoader.java","// the existence of this property source confirms a successful
// response from config server
propertySources.add(0, new MapPropertySource(CONFIG_CLIENT_PROPERTYSOURCE_NAME, map))"
github.com,"spring-cloud/spring-cloud-config",main,"spring-cloud-config-client/src/main/java/org/springframework/cloud/config/client/ConfigServerConfigDataLoader.java","options.add(Option.IGNORE_IMPORTS)"
github.com,"spring-cloud/spring-cloud-config",main,"spring-cloud-config-client/src/main/java/org/springframework/cloud/config/client/ConfigServerConfigDataLoader.java","options.add(Option.IGNORE_PROFILES)"
github.com,"spring-cloud/spring-cloud-config",main,"spring-cloud-config-client/src/main/java/org/springframework/cloud/config/client/ConfigServerConfigDataLoader.java","// // TODO: switch to Options.with() when implemented
options.add(Option.PROFILE_SPECIFIC)"
github.com,"spring-cloud/spring-cloud-config",main,"spring-cloud-config-client/src/main/java/org/springframework/cloud/config/client/ConfigServerHealthIndicator.java","sources.add(ps.getName())"
github.com,"spring-cloud/spring-cloud-config",main,"spring-cloud-config-client/src/main/java/org/springframework/cloud/config/client/ConfigServerHealthIndicator.java","sources.add(propertySource.getName())"
github.com,"spring-cloud/spring-cloud-config",main,"spring-cloud-config-client/src/main/java/org/springframework/cloud/config/client/ConfigServerInstanceMonitor.java","
listOfUrls.add(url)"
github.com,"spring-cloud/spring-cloud-config",main,"spring-cloud-config-client/src/main/java/org/springframework/cloud/config/environment/Environment.java","this.propertySources.add(propertySource)"
github.com,"spring-cloud/spring-cloud-config",main,"spring-cloud-config-client/src/main/java/org/springframework/cloud/config/environment/Environment.java","this.propertySources.add(0, propertySource)"
github.com,"spring-cloud/spring-cloud-config",main,"spring-cloud-config-client-tls-tests/src/test/java/org/springframework/cloud/config/client/tls/AppRunner.java","result.add(String.format(""%s=%s"", key, value))"
github.com,"spring-cloud/spring-cloud-config",main,"spring-cloud-config-monitor/src/main/java/org/springframework/cloud/config/monitor/CompositePropertyPathNotificationExtractor.java","this.extractors.add(new SimplePropertyPathNotificationExtractor())"
github.com,"spring-cloud/spring-cloud-config",main,"spring-cloud-config-monitor/src/test/java/org/springframework/cloud/config/monitor/PropertyPathEndpointTests.java","request.add(""/foo/bar.properties"")"
github.com,"spring-cloud/spring-cloud-config",main,"spring-cloud-config-monitor/src/test/java/org/springframework/cloud/config/monitor/PropertyPathEndpointTests.java","request.add(""/application.properties"")"
github.com,"spring-cloud/spring-cloud-openfeign",main,"spring-cloud-openfeign-core/src/main/java/org/springframework/cloud/openfeign/support/PageableSpringEncoder.java","sortQueries.add(order.getProperty() + ""%2C"" + order.getDirection())"
github.com,"spring-cloud/spring-cloud-openfeign",main,"spring-cloud-openfeign-core/src/main/java/org/springframework/cloud/openfeign/support/SpringMvcContract.java","
annotatedArgumentResolvers.add(new MatrixVariableParameterProcessor())"
github.com,"spring-cloud/spring-cloud-openfeign",main,"spring-cloud-openfeign-core/src/main/java/org/springframework/cloud/openfeign/support/SpringMvcContract.java","annotatedArgumentResolvers.add(new PathVariableParameterProcessor())"
github.com,"spring-cloud/spring-cloud-openfeign",main,"spring-cloud-openfeign-core/src/main/java/org/springframework/cloud/openfeign/support/SpringMvcContract.java","annotatedArgumentResolvers.add(new RequestParamParameterProcessor())"
github.com,"spring-cloud/spring-cloud-openfeign",main,"spring-cloud-openfeign-core/src/main/java/org/springframework/cloud/openfeign/support/SpringMvcContract.java","annotatedArgumentResolvers.add(new RequestHeaderParameterProcessor())"
github.com,"spring-cloud/spring-cloud-openfeign",main,"spring-cloud-openfeign-core/src/main/java/org/springframework/cloud/openfeign/support/SpringMvcContract.java","annotatedArgumentResolvers.add(new QueryMapParameterProcessor())"
github.com,"spring-cloud/spring-cloud-openfeign",main,"spring-cloud-openfeign-core/src/main/java/org/springframework/cloud/openfeign/support/SpringMvcContract.java","annotatedArgumentResolvers.add(new RequestPartParameterProcessor())"
github.com,"spring-cloud/spring-cloud-openfeign",main,"spring-cloud-openfeign-core/src/main/java/org/springframework/cloud/openfeign/support/SpringMvcContract.java","annotatedArgumentResolvers.add(new CookieValueParameterProcessor())"
github.com,"spring-cloud/spring-cloud-openfeign",main,"spring-cloud-openfeign-core/src/main/java/org/springframework/cloud/openfeign/support/PageableSpringQueryMapEncoder.java","sortQueries.add(order.getProperty() + ""%2C"" + order.getDirection())"
github.com,"spring-cloud/spring-cloud-openfeign",main,"spring-cloud-openfeign-core/src/main/java/org/springframework/cloud/openfeign/support/SortJsonComponent.java","orders.add(order)"
github.com,"spring-cloud/spring-cloud-openfeign",main,"spring-cloud-openfeign-core/src/main/java/org/springframework/cloud/openfeign/annotation/PathVariableParameterProcessor.java","data.formParams().add(name)"
github.com,"spring-cloud/spring-cloud-openfeign",main,"spring-cloud-openfeign-core/src/main/java/org/springframework/cloud/openfeign/annotation/RequestPartParameterProcessor.java","
data.formParams().add(name)"
github.com,"spring-cloud/spring-cloud-openfeign",main,"spring-cloud-openfeign-core/src/main/java/org/springframework/cloud/openfeign/FeignClientFactoryBean.java","additionalCustomizers.add(customizer)"
github.com,"spring-cloud/spring-cloud-openfeign",main,"spring-cloud-openfeign-core/src/test/java/org/springframework/cloud/openfeign/SpringDecoderTests.java","hellos.add(new Hello(""hello world 1""))"
github.com,"spring-cloud/spring-cloud-openfeign",main,"spring-cloud-openfeign-core/src/test/java/org/springframework/cloud/openfeign/SpringDecoderTests.java","hellos.add(new Hello(""oi terra 2""))"
github.com,"spring-cloud/spring-cloud-openfeign",main,"spring-cloud-openfeign-core/src/test/java/org/springframework/cloud/openfeign/SpringDecoderTests.java","hellos.add(""hello world 1"")"
github.com,"spring-cloud/spring-cloud-openfeign",main,"spring-cloud-openfeign-core/src/test/java/org/springframework/cloud/openfeign/SpringDecoderTests.java","hellos.add(""oi terra 2"")"
github.com,"spring-cloud/spring-cloud-openfeign",main,"spring-cloud-openfeign-core/src/test/java/org/springframework/cloud/openfeign/support/PageJacksonModuleTests.java","pageElements.add(""first element"")"
github.com,"spring-cloud/spring-cloud-openfeign",main,"spring-cloud-openfeign-core/src/test/java/org/springframework/cloud/openfeign/support/PageJacksonModuleTests.java","pageElements.add(""second element"")"
github.com,"spring-cloud/spring-cloud-openfeign",main,"spring-cloud-openfeign-core/src/test/java/org/springframework/cloud/openfeign/support/PageJacksonModuleTests.java","pageElements.add(""first element in cascaded serialization"")"
github.com,"spring-cloud/spring-cloud-openfeign",main,"spring-cloud-openfeign-core/src/test/java/org/springframework/cloud/openfeign/support/PageJacksonModuleTests.java","pageElements.add(""second element in cascaded serialization"")"
github.com,"spring-cloud/spring-cloud-openfeign",main,"spring-cloud-openfeign-core/src/test/java/org/springframework/cloud/openfeign/valid/ValidFeignClientTests.java","hellos.add(new Hello(HELLO_WORLD_1))"
github.com,"spring-cloud/spring-cloud-openfeign",main,"spring-cloud-openfeign-core/src/test/java/org/springframework/cloud/openfeign/valid/ValidFeignClientTests.java","hellos.add(new Hello(OI_TERRA_2))"
github.com,"spring-cloud/spring-cloud-openfeign",main,"spring-cloud-openfeign-core/src/test/java/org/springframework/cloud/openfeign/valid/ValidFeignClientTests.java","args.add(new OtherArg(""foo""))"
github.com,"spring-cloud/spring-cloud-openfeign",main,"spring-cloud-openfeign-core/src/test/java/org/springframework/cloud/openfeign/valid/ValidFeignClientTests.java","args.add(new OtherArg(""goo""))"
github.com,"spring-cloud/spring-cloud-openfeign",main,"spring-cloud-openfeign-core/src/test/java/org/springframework/cloud/openfeign/valid/ValidFeignClientTests.java","expectedResult.add(""bar"")"
github.com,"spring-cloud/spring-cloud-openfeign",main,"spring-cloud-openfeign-core/src/test/java/org/springframework/cloud/openfeign/valid/ValidFeignClientTests.java","expectedResult.add(""goo"")"
github.com,"spring-cloud/spring-cloud-openfeign",main,"spring-cloud-openfeign-core/src/test/java/org/springframework/cloud/openfeign/valid/ValidFeignClientTests.java","hellos.add(HELLO_WORLD_1)"
github.com,"spring-cloud/spring-cloud-openfeign",main,"spring-cloud-openfeign-core/src/test/java/org/springframework/cloud/openfeign/valid/ValidFeignClientTests.java","hellos.add(OI_TERRA_2)"
github.com,"spring-cloud/spring-cloud-openfeign",main,"spring-cloud-openfeign-core/src/test/java/org/springframework/cloud/openfeign/valid/ValidFeignClientTests.java","headers.add(myheader1)"
github.com,"spring-cloud/spring-cloud-openfeign",main,"spring-cloud-openfeign-core/src/test/java/org/springframework/cloud/openfeign/valid/ValidFeignClientTests.java","headers.add(myheader2)"
github.com,"spring-cloud/spring-cloud-openfeign",main,"spring-cloud-openfeign-core/src/test/java/org/springframework/cloud/openfeign/valid/ValidFeignClientTests.java","result.add(arg.value)"
github.com,"spring-cloud/spring-cloud-openfeign",main,"spring-cloud-openfeign-core/src/test/java/org/springframework/cloud/openfeign/encoding/app/resource/InvoiceResource.java","invoices.add(invoice)"
github.com,"spring-cloud/spring-cloud-openfeign",main,"spring-cloud-openfeign-core/src/test/java/org/springframework/cloud/openfeign/encoding/Invoices.java","invoices.add(invoice)"
github.com,"spring-cloud/spring-cloud-openfeign",main,"spring-cloud-openfeign-core/src/test/java/org/springframework/cloud/openfeign/encoding/proto/ProtobufSpringEncoderTests.java","request.add((ClassicHttpRequest) invocationOnMock.getArguments()[1])"
github.com,"spring-cloud/spring-cloud-openfeign",main,"spring-cloud-openfeign-core/src/test/java/org/springframework/cloud/openfeign/FeignClientBuilderTests.java","methodNames.add(method.getName())"
github.com,"spring-cloud/spring-cloud-aws",main,"spring-cloud-aws-integration-test/src/test/java/org/springframework/cloud/aws/it/context/support/io/PathMatchingResourceLoaderAwsTest.java","callables.add(new CreateFileCallable(bucketName, fileName, this.amazonS3))"
github.com,"spring-cloud/spring-cloud-aws",main,"spring-cloud-aws-integration-test/src/test/java/org/springframework/cloud/aws/it/context/support/io/PathMatchingResourceLoaderAwsTest.java","deleteFileCallables.add(new DeleteFileCallable(bucketName, fileName, this.amazonS3))"
github.com,"spring-cloud/spring-cloud-aws",main,"spring-cloud-aws-integration-test/src/test/java/org/springframework/cloud/aws/it/context/support/io/ResourceLoaderAwsTest.java","
this.createdObjects.add(childFileResource.getFilename())"
github.com,"spring-cloud/spring-cloud-aws",main,"spring-cloud-aws-integration-test/src/test/java/org/springframework/cloud/aws/it/context/support/io/ResourceLoaderAwsTest.java","this.createdObjects.add(objectKey)"
github.com,"spring-cloud/spring-cloud-aws",main,"spring-cloud-aws-integration-test/src/test/java/org/springframework/cloud/aws/it/context/support/io/ResourceLoaderAwsTest.java","this.createdObjects.add(""testUploadFileWithMoreThenFiveMegabytes"")"
github.com,"spring-cloud/spring-cloud-aws",main,"spring-cloud-aws-integration-test/src/test/java/org/springframework/cloud/aws/it/context/support/io/ResourceLoaderAwsTest.java","this.createdObjects.add(""test-file.jpg"")"
github.com,"spring-cloud/spring-cloud-aws",main,"spring-cloud-aws-integration-test/src/test/java/org/springframework/cloud/aws/it/support/TestStackInstanceIdService.java","allStackNames.add(stack.getStackName())"
github.com,"spring-cloud/spring-cloud-aws",main,"spring-cloud-aws-integration-test/src/test/java/org/springframework/cloud/aws/it/messaging/QueueListenerTest.java","this.receivedMessages.add(message)"
github.com,"spring-cloud/spring-cloud-aws",main,"spring-cloud-aws-integration-test/src/test/java/org/springframework/cloud/aws/it/messaging/QueueListenerTest.java","this.receivedMessages.add(message)"
github.com,"spring-cloud/spring-cloud-aws",main,"spring-cloud-aws-integration-test/src/test/java/org/springframework/cloud/aws/it/messaging/MessageListenerContainerAwsTest.java","messages.add(new SendMessageBatchRequestEntry(Integer.toString(i),
		new StringBuilder().append(""message_"").append(i).toString()))"
github.com,"spring-cloud/spring-cloud-aws",main,"spring-cloud-aws-context/src/main/java/org/springframework/cloud/aws/context/config/support/ContextConfigurationUtils.java","
awsCredentialsProviders.add(provider.getBeanDefinition())"
github.com,"spring-cloud/spring-cloud-aws",main,"spring-cloud-aws-context/src/main/java/org/springframework/cloud/aws/context/config/support/ContextConfigurationUtils.java","awsCredentialsProviders.add(BeanDefinitionBuilder
		.rootBeanDefinition(EC2ContainerCredentialsProviderWrapper.class).getBeanDefinition())"
github.com,"spring-cloud/spring-cloud-aws",main,"spring-cloud-aws-context/src/main/java/org/springframework/cloud/aws/context/config/support/ContextConfigurationUtils.java","awsCredentialsProviders.add(builder.getBeanDefinition())"
github.com,"spring-cloud/spring-cloud-aws",main,"spring-cloud-aws-context/src/main/java/org/springframework/cloud/aws/context/config/xml/ContextCredentialsBeanDefinitionParser.java","constructorArguments.add(element.getAttribute(""profilePath""))"
github.com,"spring-cloud/spring-cloud-aws",main,"spring-cloud-aws-context/src/main/java/org/springframework/cloud/aws/context/config/xml/ContextCredentialsBeanDefinitionParser.java","constructorArguments.add(element.getAttribute(""profileName""))"
github.com,"spring-cloud/spring-cloud-aws",main,"spring-cloud-aws-context/src/main/java/org/springframework/cloud/aws/context/config/xml/ContextCredentialsBeanDefinitionParser.java","credentialsProviders.add(getCredentialsProvider(STATIC_CREDENTIALS_PROVIDER_BEAN_CLASS_NAME,
		getCredentials(credentialsProviderElement, parserContext)))"
github.com,"spring-cloud/spring-cloud-aws",main,"spring-cloud-aws-context/src/main/java/org/springframework/cloud/aws/context/config/xml/ContextCredentialsBeanDefinitionParser.java","credentialsProviders.add(getCredentialsProvider(INSTANCE_CREDENTIALS_PROVIDER_BEAN_CLASS_NAME))"
github.com,"spring-cloud/spring-cloud-aws",main,"spring-cloud-aws-context/src/main/java/org/springframework/cloud/aws/context/config/xml/ContextCredentialsBeanDefinitionParser.java","credentialsProviders.add(getCredentialsProvider(PROFILE_CREDENTIALS_PROVIDER_BEAN_CLASS_NAME,
		getProfileConfiguration(credentialsProviderElement).toArray()))"
github.com,"spring-cloud/spring-cloud-aws",main,"spring-cloud-aws-context/src/main/java/org/springframework/cloud/aws/cache/config/xml/CacheBeanDefinitionParser.java","result.add(getCacheFactory(MEMCACHED_FACTORY_CLASS_NAME, element))"
github.com,"spring-cloud/spring-cloud-aws",main,"spring-cloud-aws-context/src/main/java/org/springframework/cloud/aws/cache/config/xml/CacheBeanDefinitionParser.java","result.add(getCacheFactory(REDIS_CONNECTION_FACTORY_CLASS_NAME, element))"
github.com,"spring-cloud/spring-cloud-aws",main,"spring-cloud-aws-context/src/main/java/org/springframework/cloud/aws/cache/config/xml/CacheBeanDefinitionParser.java","caches.add(new RuntimeBeanReference(cacheElement.getAttribute(""ref"")))"
github.com,"spring-cloud/spring-cloud-aws",main,"spring-cloud-aws-context/src/main/java/org/springframework/cloud/aws/cache/config/xml/CacheBeanDefinitionParser.java","caches.add(createElastiCacheFactoryBean(cacheElement, parserContext, cacheClusterId,
		createDefaultCacheFactories(cacheElement, parserContext)))"
github.com,"spring-cloud/spring-cloud-aws",main,"spring-cloud-aws-context/src/main/java/org/springframework/cloud/aws/cache/config/annotation/ElastiCacheCachingConfiguration.java","cacheNames.add(annotationAttribute.getString(""name""))"
github.com,"spring-cloud/spring-cloud-aws",main,"spring-cloud-aws-context/src/main/java/org/springframework/cloud/aws/cache/config/annotation/ElastiCacheCachingConfiguration.java","cacheNames.add(stackResource.getLogicalId())"
github.com,"spring-cloud/spring-cloud-aws",main,"spring-cloud-aws-context/src/main/java/org/springframework/cloud/aws/cache/config/annotation/ElastiCacheCacheConfigurer.java","caches.add(clusterCache(cacheName))"
github.com,"spring-cloud/spring-cloud-aws",main,"spring-cloud-aws-jdbc/src/main/java/org/springframework/cloud/aws/jdbc/datasource/ReadOnlyRoutingDataSource.java","this.dataSources.add(defaultTargetDataSource)"
github.com,"spring-cloud/spring-cloud-aws",main,"spring-cloud-aws-jdbc/src/main/java/org/springframework/cloud/aws/jdbc/config/xml/AmazonRdsRetryInterceptorBeanDefinitionParser.java","policies.add(buildDatabaseInstancePolicy(element, parserContext))"
github.com,"spring-cloud/spring-cloud-aws",main,"spring-cloud-aws-jdbc/src/main/java/org/springframework/cloud/aws/jdbc/config/xml/AmazonRdsRetryInterceptorBeanDefinitionParser.java","policies.add(buildSQLRetryPolicy(element))"
github.com,"spring-cloud/spring-cloud-aws",main,"spring-cloud-aws-parameter-store-config/src/main/java/org/springframework/cloud/aws/paramstore/AwsParamStorePropertySources.java","contexts.add(appContext + ""/"")"
github.com,"spring-cloud/spring-cloud-aws",main,"spring-cloud-aws-parameter-store-config/src/main/java/org/springframework/cloud/aws/paramstore/AwsParamStorePropertySources.java","contexts.add(defaultContext + ""/"")"
github.com,"spring-cloud/spring-cloud-aws",main,"spring-cloud-aws-parameter-store-config/src/main/java/org/springframework/cloud/aws/paramstore/AwsParamStorePropertySources.java","contexts.add(baseContext + this.properties.getProfileSeparator() + profile + ""/"")"
github.com,"spring-cloud/spring-cloud-aws",main,"spring-cloud-aws-autoconfigure/src/main/java/org/springframework/cloud/aws/autoconfigure/context/ContextCredentialsAutoConfiguration.java","providers.add(new AWSStaticCredentialsProvider(
		new BasicAWSCredentials(properties.getAccessKey(), properties.getSecretKey())))"
github.com,"spring-cloud/spring-cloud-aws",main,"spring-cloud-aws-autoconfigure/src/main/java/org/springframework/cloud/aws/autoconfigure/context/ContextCredentialsAutoConfiguration.java","providers.add(new EC2ContainerCredentialsProviderWrapper())"
github.com,"spring-cloud/spring-cloud-aws",main,"spring-cloud-aws-autoconfigure/src/main/java/org/springframework/cloud/aws/autoconfigure/context/ContextCredentialsAutoConfiguration.java","providers.add(properties.getProfilePath() != null
		? new ProfileCredentialsProvider(properties.getProfilePath(), properties.getProfileName())
		: new ProfileCredentialsProvider(properties.getProfileName()))"
github.com,"spring-cloud/spring-cloud-aws",main,"spring-cloud-aws-autoconfigure/src/main/java/org/springframework/cloud/aws/autoconfigure/security/CognitoAuthenticationAutoConfiguration.java","validators.add(JwtValidators.createDefaultWithIssuer(this.properties.getIssuer()))"
github.com,"spring-cloud/spring-cloud-aws",main,"spring-cloud-aws-autoconfigure/src/main/java/org/springframework/cloud/aws/autoconfigure/security/CognitoAuthenticationAutoConfiguration.java","validators.add(new JwtClaimValidator<List<String>>(""aud"",
		aud -> aud != null && aud.contains(this.properties.getAppClientId())))"
github.com,"spring-cloud/spring-cloud-aws",main,"spring-cloud-aws-autoconfigure/src/main/java/org/springframework/cloud/aws/autoconfigure/messaging/SnsAutoConfiguration.java","resolvers.add(getNotificationHandlerMethodArgumentResolver(amazonSns))"
github.com,"spring-cloud/spring-cloud-aws",main,"spring-cloud-aws-autoconfigure/src/main/java/org/springframework/cloud/aws/autoconfigure/cache/ElastiCacheAutoConfiguration.java","cacheNames.add(stackResource.getLogicalId())"
github.com,"spring-cloud/spring-cloud-aws",main,"spring-cloud-starter-aws-parameter-store-config/src/main/java/org/springframework/cloud/aws/autoconfigure/paramstore/AwsParamStoreConfigDataLocationResolver.java","locations
			.add(new AwsParamStoreConfigDataResource(propertySourceContext, location.isOptional(), sources))"
github.com,"spring-cloud/spring-cloud-aws",main,"spring-cloud-starter-aws-secrets-manager-config/src/main/java/org/springframework/cloud/aws/autoconfigure/secretsmanager/AwsSecretsManagerConfigDataLocationResolver.java","locations.add(new AwsSecretsManagerConfigDataResource(propertySourceContext,
					location.isOptional(), propertySources))"
github.com,"spring-cloud/spring-cloud-aws",main,"spring-cloud-aws-core/src/main/java/org/springframework/cloud/aws/core/io/s3/SimpleStorageResource.java","result.add(uploadPartResultFuture.get().getPartETag())"
github.com,"spring-cloud/spring-cloud-aws",main,"spring-cloud-aws-core/src/main/java/org/springframework/cloud/aws/core/io/s3/PathMatchingSimpleStorageResourcePatternResolver.java","matchingBuckets.add(bucket.getName())"
github.com,"spring-cloud/spring-cloud-aws",main,"spring-cloud-aws-core/src/main/java/org/springframework/cloud/aws/core/env/stack/config/StackResourceRegistryFactoryBean.java","result.add(stackResource)"
github.com,"spring-cloud/spring-cloud-aws",main,"spring-cloud-aws-core/src/test/java/org/springframework/cloud/aws/core/io/s3/AmazonS3ProxyFactoryTest.java","advisorClasses.add(((MethodInterceptor) advisor.getAdvice()).getClass())"
github.com,"spring-cloud/spring-cloud-aws",main,"spring-cloud-aws-core/src/test/java/org/springframework/cloud/aws/core/env/stack/config/StackResourceRegistryFactoryBeanTest.java","
list.add(makeStackResourceSummary(logicalResourceId, physicalResourceId))"
github.com,"spring-cloud/spring-cloud-aws",main,"spring-cloud-aws-secrets-manager-config/src/main/java/org/springframework/cloud/aws/secretsmanager/AwsSecretsManagerPropertySources.java","contexts.add(appContext)"
github.com,"spring-cloud/spring-cloud-aws",main,"spring-cloud-aws-secrets-manager-config/src/main/java/org/springframework/cloud/aws/secretsmanager/AwsSecretsManagerPropertySources.java","contexts.add(defaultContext)"
github.com,"spring-cloud/spring-cloud-aws",main,"spring-cloud-aws-secrets-manager-config/src/main/java/org/springframework/cloud/aws/secretsmanager/AwsSecretsManagerPropertySources.java","contexts.add(baseContext + this.properties.getProfileSeparator() + profile)"
github.com,"spring-cloud/spring-cloud-aws",main,"spring-cloud-aws-messaging/src/main/java/org/springframework/cloud/aws/messaging/core/support/AbstractMessageChannelMessagingSendingTemplate.java","messageConverters.add(stringMessageConverter)"
github.com,"spring-cloud/spring-cloud-aws",main,"spring-cloud-aws-messaging/src/main/java/org/springframework/cloud/aws/messaging/core/support/AbstractMessageChannelMessagingSendingTemplate.java","messageConverters.add(messageConverter)"
github.com,"spring-cloud/spring-cloud-aws",main,"spring-cloud-aws-messaging/src/main/java/org/springframework/cloud/aws/messaging/core/support/AbstractMessageChannelMessagingSendingTemplate.java","messageConverters.add(mappingJackson2MessageConverter)"
github.com,"spring-cloud/spring-cloud-aws",main,"spring-cloud-aws-messaging/src/main/java/org/springframework/cloud/aws/messaging/listener/QueueMessageHandler.java","
resolvers.add(new HeaderMethodArgumentResolver(null, null))"
github.com,"spring-cloud/spring-cloud-aws",main,"spring-cloud-aws-messaging/src/main/java/org/springframework/cloud/aws/messaging/listener/QueueMessageHandler.java","resolvers.add(new SqsHeadersMethodArgumentResolver())"
github.com,"spring-cloud/spring-cloud-aws",main,"spring-cloud-aws-messaging/src/main/java/org/springframework/cloud/aws/messaging/listener/QueueMessageHandler.java","
resolvers.add(new NotificationSubjectArgumentResolver())"
github.com,"spring-cloud/spring-cloud-aws",main,"spring-cloud-aws-messaging/src/main/java/org/springframework/cloud/aws/messaging/listener/QueueMessageHandler.java","resolvers.add(new AcknowledgmentHandlerMethodArgumentResolver(ACKNOWLEDGMENT))"
github.com,"spring-cloud/spring-cloud-aws",main,"spring-cloud-aws-messaging/src/main/java/org/springframework/cloud/aws/messaging/listener/QueueMessageHandler.java","resolvers.add(new VisibilityHandlerMethodArgumentResolver(VISIBILITY))"
github.com,"spring-cloud/spring-cloud-aws",main,"spring-cloud-aws-messaging/src/main/java/org/springframework/cloud/aws/messaging/listener/QueueMessageHandler.java","resolvers.add(new NotificationMessageArgumentResolver(compositeMessageConverter))"
github.com,"spring-cloud/spring-cloud-aws",main,"spring-cloud-aws-messaging/src/main/java/org/springframework/cloud/aws/messaging/listener/QueueMessageHandler.java","resolvers.add(new MessageMethodArgumentResolver(this.messageConverters.isEmpty() ? new StringMessageConverter()
		: new CompositeMessageConverter(this.messageConverters)))"
github.com,"spring-cloud/spring-cloud-aws",main,"spring-cloud-aws-messaging/src/main/java/org/springframework/cloud/aws/messaging/listener/QueueMessageHandler.java","resolvers.add(new SqsMessageMethodArgumentResolver())"
github.com,"spring-cloud/spring-cloud-aws",main,"spring-cloud-aws-messaging/src/main/java/org/springframework/cloud/aws/messaging/listener/QueueMessageHandler.java","resolvers.add(new PayloadArgumentResolver(compositeMessageConverter, new NoOpValidator()))"
github.com,"spring-cloud/spring-cloud-aws",main,"spring-cloud-aws-messaging/src/main/java/org/springframework/cloud/aws/messaging/listener/QueueMessageHandler.java","payloadArgumentConverters.add(objectMessageConverter)"
github.com,"spring-cloud/spring-cloud-aws",main,"spring-cloud-aws-messaging/src/main/java/org/springframework/cloud/aws/messaging/listener/QueueMessageHandler.java","
payloadArgumentConverters.add(new SimpleMessageConverter())"
github.com,"spring-cloud/spring-cloud-aws",main,"spring-cloud-aws-messaging/src/main/java/org/springframework/cloud/aws/messaging/config/xml/AnnotationDrivenQueueListenerBeanDefinitionParser.java","returnValueHandlers.add(
		createSendToHandlerMethodReturnValueHandlerBeanDefinition(element, parserContext, sqsClientBeanName))"
github.com,"spring-cloud/spring-cloud-aws",main,"spring-cloud-aws-messaging/src/main/java/org/springframework/cloud/aws/messaging/config/xml/AnnotationDrivenQueueListenerBeanDefinitionParser.java","list.add(beanDef.getBeanDefinition())"
github.com,"spring-cloud/spring-cloud-aws",main,"spring-cloud-aws-messaging/src/main/java/org/springframework/cloud/aws/messaging/config/QueueMessageHandlerFactory.java","queueMessageHandler.getCustomReturnValueHandlers().add(sendToHandlerMethodReturnValueHandler)"
github.com,"spring-cloud/spring-cloud-aws",main,"spring-cloud-aws-messaging/src/main/java/org/springframework/cloud/aws/messaging/config/annotation/SnsWebConfiguration.java","argumentResolvers.add(getNotificationHandlerMethodArgumentResolver(amazonSns))"
github.com,"spring-cloud/spring-cloud-aws",main,"spring-cloud-aws-messaging/src/test/java/org/springframework/cloud/aws/messaging/listener/QueueMessageHandlerTest.java","returnValueHandlers.add(new SendToHandlerMethodReturnValueHandler(this.messageTemplate))"
github.com,"spring-projects/spring-test-data-geode",main,"spring-data-geode-test/src/main/java/org/springframework/data/gemfire/tests/integration/ForkingClientServerIntegrationTestsSupport.java","
argumentList.add(String.format(""-D%s=%d"", GEMFIRE_CACHE_SERVER_PORT_PROPERTY, availablePort))"
github.com,"spring-projects/spring-test-data-geode",main,"spring-data-geode-test/src/main/java/org/springframework/data/gemfire/tests/mock/GemFireMockObjectsSupport.java","cachedGemFireObjects::add"
github.com,"spring-projects/spring-test-data-geode",main,"spring-data-geode-test/src/main/java/org/springframework/data/gemfire/tests/mock/GemFireMockObjectsSupport.java","
cacheServers.add(mockCacheServer)"
github.com,"spring-projects/spring-test-data-geode",main,"spring-data-geode-test/src/main/java/org/springframework/data/gemfire/tests/mock/GemFireMockObjectsSupport.java","
gatewayEventFilters.add(invocation.getArgument(0))"
github.com,"spring-projects/spring-test-data-geode",main,"spring-data-geode-test/src/main/java/org/springframework/data/gemfire/tests/mock/GemFireMockObjectsSupport.java","transactionListeners.add(invocation.getArgument(0))"
github.com,"spring-projects/spring-test-data-geode",main,"spring-data-geode-test/src/main/java/org/springframework/data/gemfire/tests/mock/GemFireMockObjectsSupport.java","
gatewayTransportFilters.add(invocation.getArgument(0))"
github.com,"spring-projects/spring-test-data-geode",main,"spring-data-geode-test/src/main/java/org/springframework/data/gemfire/tests/mock/GemFireMockObjectsSupport.java","
gatewayEventFilters.add(invocation.getArgument(0))"
github.com,"spring-projects/spring-test-data-geode",main,"spring-data-geode-test/src/main/java/org/springframework/data/gemfire/tests/mock/GemFireMockObjectsSupport.java","
gatewayTransportFilters.add(invocation.getArgument(0))"
github.com,"spring-projects/spring-test-data-geode",main,"spring-data-geode-test/src/main/java/org/springframework/data/gemfire/tests/mock/GemFireMockObjectsSupport.java","
gatewayEventFilters.add(it.getArgument(0))"
github.com,"spring-projects/spring-test-data-geode",main,"spring-data-geode-test/src/main/java/org/springframework/data/gemfire/tests/mock/GemFireMockObjectsSupport.java","locators.add(new InetSocketAddress(invocation.<String>getArgument(0), invocation.getArgument(1)))"
github.com,"spring-projects/spring-test-data-geode",main,"spring-data-geode-test/src/main/java/org/springframework/data/gemfire/tests/mock/GemFireMockObjectsSupport.java","servers.add(new InetSocketAddress(invocation.<String>getArgument(0), invocation.getArgument(1)))"
github.com,"spring-projects/spring-test-data-geode",main,"spring-data-geode-test/src/main/java/org/springframework/data/gemfire/tests/util/FileSystemUtils.java","results.add(file)"
github.com,"spring-projects/spring-test-data-geode",main,"spring-data-geode-test/src/main/java/org/springframework/data/gemfire/tests/process/ProcessExecutor.java","
command.add(JAVA_EXE.getAbsolutePath())"
github.com,"spring-projects/spring-test-data-geode",main,"spring-data-geode-test/src/main/java/org/springframework/data/gemfire/tests/process/ProcessExecutor.java","command.add(""-server"")"
github.com,"spring-projects/spring-test-data-geode",main,"spring-data-geode-test/src/main/java/org/springframework/data/gemfire/tests/process/ProcessExecutor.java","command.add(""-ea"")"
github.com,"spring-projects/spring-test-data-geode",main,"spring-data-geode-test/src/main/java/org/springframework/data/gemfire/tests/process/ProcessExecutor.java","command.add(""-classpath"")"
github.com,"spring-projects/spring-test-data-geode",main,"spring-data-geode-test/src/main/java/org/springframework/data/gemfire/tests/process/ProcessExecutor.java","command.add(StringUtils.hasText(classpath) ? classpath : JAVA_CLASSPATH)"
github.com,"spring-projects/spring-test-data-geode",main,"spring-data-geode-test/src/main/java/org/springframework/data/gemfire/tests/process/ProcessExecutor.java","command.add(arg)"
github.com,"spring-projects/spring-test-data-geode",main,"spring-data-geode-test/src/main/java/org/springframework/data/gemfire/tests/process/ProcessExecutor.java","programArguments.add(arg)"
github.com,"spring-projects/spring-test-data-geode",main,"spring-data-geode-test/src/main/java/org/springframework/data/gemfire/tests/process/ProcessExecutor.java","
command.add(type.getName())"
github.com,"spring-projects/spring-test-data-geode",main,"spring-data-geode-test/src/main/java/org/springframework/data/gemfire/tests/process/ProcessExecutor.java","command.add(""--add-opens"")"
github.com,"spring-projects/spring-test-data-geode",main,"spring-data-geode-test/src/main/java/org/springframework/data/gemfire/tests/process/ProcessExecutor.java","command.add(""java.base/java.lang=ALL-UNNAMED"")"
github.com,"spring-projects/spring-test-data-geode",main,"spring-data-geode-test/src/main/java/org/springframework/data/gemfire/tests/process/ProcessExecutor.java","command.add(""--add-opens"")"
github.com,"spring-projects/spring-test-data-geode",main,"spring-data-geode-test/src/main/java/org/springframework/data/gemfire/tests/process/ProcessExecutor.java","command.add(""java.base/java.nio=ALL-UNNAMED"")"
github.com,"spring-projects/spring-test-data-geode",main,"spring-data-geode-test/src/main/java/org/springframework/data/gemfire/tests/process/ProcessExecutor.java","command.add(""--add-opens"")"
github.com,"spring-projects/spring-test-data-geode",main,"spring-data-geode-test/src/main/java/org/springframework/data/gemfire/tests/process/ProcessExecutor.java","command.add(""java.base/java.util=ALL-UNNAMED"")"
github.com,"spring-projects/spring-test-data-geode",main,"spring-data-geode-test/src/main/java/org/springframework/data/gemfire/tests/process/ProcessExecutor.java","command.add(""--add-opens"")"
github.com,"spring-projects/spring-test-data-geode",main,"spring-data-geode-test/src/main/java/org/springframework/data/gemfire/tests/process/ProcessExecutor.java","command.add(""jdk.management/com.sun.management.internal=ALL-UNNAMED"")"
github.com,"spring-projects/spring-test-data-geode",main,"spring-data-geode-test/src/main/java/org/springframework/data/gemfire/tests/process/ProcessExecutor.java","command.add(""--add-exports"")"
github.com,"spring-projects/spring-test-data-geode",main,"spring-data-geode-test/src/main/java/org/springframework/data/gemfire/tests/process/ProcessExecutor.java","command.add(""java.base/sun.nio.ch=ALL-UNNAMED"")"
github.com,"spring-projects/spring-test-data-geode",main,"spring-data-geode-test/src/main/java/org/springframework/data/gemfire/tests/process/ProcessExecutor.java","command.add(""--add-exports"")"
github.com,"spring-projects/spring-test-data-geode",main,"spring-data-geode-test/src/main/java/org/springframework/data/gemfire/tests/process/ProcessExecutor.java","command.add(""java.management/com.sun.jmx.remote.security=ALL-UNNAMED"")"
github.com,"spring-projects/spring-test-data-geode",main,"spring-data-geode-test/src/main/java/org/springframework/data/gemfire/tests/process/ProcessWrapper.java","listeners.add(listener)"
github.com,"spring-projects/spring-data-release",main,"src/main/java/org/springframework/data/release/git/GitOperations.java","uniqueTicketReferences.add(reference)"
github.com,"spring-projects/spring-data-release",main,"src/main/java/org/springframework/data/release/git/ParsedCommitMessage.java",relatedTickets::add
github.com,"spring-projects/spring-data-release",main,"src/main/java/org/springframework/data/release/git/ParsedCommitMessage.java",relatedTickets::add
github.com,"spring-projects/spring-data-release",main,"src/main/java/org/springframework/data/release/model/ArtifactCoordinates.java","artifacts.add(coordinate)"
github.com,"spring-projects/spring-data-release",main,"src/main/java/org/springframework/data/release/model/Projects.java","intermediate.add(it)"
github.com,"spring-projects/spring-data-release",main,"src/main/java/org/springframework/data/release/model/Version.java","
digits.add(major)"
github.com,"spring-projects/spring-data-release",main,"src/main/java/org/springframework/data/release/model/Version.java","
digits.add(minor)"
github.com,"spring-projects/spring-data-release",main,"src/main/java/org/springframework/data/release/model/Version.java","
digits.add(bugfix)"
github.com,"spring-projects/spring-data-release",main,"src/main/java/org/springframework/data/release/model/Version.java","
digits.add(build)"
github.com,"spring-projects/spring-data-release",main,"src/main/java/org/springframework/data/release/projectservice/DefaultProjectClient.java",versionsInSagan::add
github.com,"spring-projects/spring-data-release",main,"src/main/java/org/springframework/data/release/cli/ProjectConverter.java","completions.add(new Completion(project.getName()))"
github.com,"spring-projects/spring-data-release",main,"src/main/java/org/springframework/data/release/cli/TrainIterationConverter.java","
completions.add(new Completion(trainIteration.toString()))"
github.com,"spring-projects/spring-data-release",main,"src/main/java/org/springframework/data/release/cli/TrainIterationConverter.java","completions.add(new Completion(trainIteration.getCalver().toMajorMinorBugfix()))"
github.com,"spring-projects/spring-data-release",main,"src/main/java/org/springframework/data/release/build/MavenRuntime.java","contents.add(msg)"
github.com,"spring-projects/spring-data-release",main,"src/main/java/org/springframework/data/release/build/MavenRuntime.java","contents.add(msg)"
github.com,"spring-projects/spring-data-release",main,"src/main/java/org/springframework/data/release/build/MavenRuntime.java","contents.add(message)"
github.com,"spring-projects/spring-data-release",main,"src/main/java/org/springframework/data/release/build/MavenRuntime.java","contents.add(message)"
github.com,"spring-projects/spring-data-release",main,"src/main/java/org/springframework/data/release/build/CommandLine.java","newArguments.add(argument)"
github.com,"spring-projects/spring-data-release",main,"src/main/java/org/springframework/data/release/infra/Dependencies.java","
dependencies.add((Dependency) ReflectionUtils.getField(field, null))"
github.com,"spring-projects/spring-data-release",main,"src/main/java/org/springframework/data/release/infra/DependencyOperations.java","projectsToUpgrade.add(moduleIteration.getProject())"
github.com,"spring-projects/spring-data-release",main,"src/main/java/org/springframework/data/release/infra/DependencyOperations.java","summaries.add(getUpgradeTicketSummary(dependency, dependencyVersion))"
github.com,"spring-projects/spring-data-release",main,"src/main/java/org/springframework/data/release/infra/DependencyOperations.java","
ticketsToClose.add(upgradeTicket)"
github.com,"spring-projects/spring-data-release",main,"src/main/java/org/springframework/data/release/issues/github/GitHub.java","tickets.add(toTicket(ticket))"
github.com,"spring-projects/spring-data-release",main,"src/main/java/org/springframework/data/release/issues/github/GitHubWriteIssue.java","labels.add(labelName)"
github.com,"spring-projects/spring-data-release",main,"src/main/java/org/springframework/data/release/issues/github/ChangelogSections.java","sections.add(new ChangelogSection(title, null, labels))"
github.com,"spring-projects/spring-data-release",main,"src/main/java/org/springframework/data/release/issues/github/ChangelogSections.java","collated.get(section).add(issue)"
github.com,"spring-projects/spring-data-release",main,"src/main/java/org/springframework/data/release/issues/github/ChangelogSections.java","result.add(section)"
github.com,"spring-projects/spring-data-release",main,"src/main/java/org/springframework/data/release/issues/TicketOperations.java","results.add(it)"
github.com,"spring-projects/spring-data-release",main,"src/main/java/org/springframework/data/release/issues/TicketOperations.java","results.add(ticket)"
github.com,"spring-projects/spring-data-release",main,"src/main/java/org/springframework/data/release/utils/ListWrapperCollector.java",List::add
github.com,"spring-cloud/spring-cloud-stream-binder-kafka",main,"spring-cloud-stream-binder-kafka/src/main/java/org/springframework/cloud/stream/binder/kafka/KafkaMessageChannelBinder.java","
this.kafkaMessageListenerContainers.add(messageListenerContainer)"
github.com,"spring-cloud/spring-cloud-stream-binder-kafka",main,"spring-cloud-stream-binder-kafka/src/main/java/org/springframework/cloud/stream/binder/kafka/KafkaBinderMetrics.java","topicPartitions.add(new TopicPartition(partitionInfo.topic(),
		partitionInfo.partition()))"
github.com,"spring-cloud/spring-cloud-stream-binder-kafka",main,"spring-cloud-stream-binder-kafka/src/main/java/org/springframework/cloud/stream/binder/kafka/BinderHeaderMapper.java","patternsToUse.add(0, NEVER_NATIVE_HEADERS_PRESENT)"
github.com,"spring-cloud/spring-cloud-stream-binder-kafka",main,"spring-cloud-stream-binder-kafka/src/main/java/org/springframework/cloud/stream/binder/kafka/BinderHeaderMapper.java","patternsToUse.add(0, NEVER_DELIVERY_ATTEMPT)"
github.com,"spring-cloud/spring-cloud-stream-binder-kafka",main,"spring-cloud-stream-binder-kafka/src/main/java/org/springframework/cloud/stream/binder/kafka/BinderHeaderMapper.java","patternsToUse.add(0, NEVER_TIMESTAMP)"
github.com,"spring-cloud/spring-cloud-stream-binder-kafka",main,"spring-cloud-stream-binder-kafka/src/main/java/org/springframework/cloud/stream/binder/kafka/BinderHeaderMapper.java","patternsToUse.add(0, NEVER_ID)"
github.com,"spring-cloud/spring-cloud-stream-binder-kafka",main,"spring-cloud-stream-binder-kafka/src/main/java/org/springframework/cloud/stream/binder/kafka/KafkaBinderHealthIndicator.java","
containersDetails.add(containerDetails)"
github.com,"spring-cloud/spring-cloud-stream-binder-kafka",main,"spring-cloud-stream-binder-kafka/src/test/java/org/springframework/cloud/stream/binder/kafka/integration2/ConsumerProducerTransactionTests.java","this.outs.add(in)"
github.com,"spring-cloud/spring-cloud-stream-binder-kafka",main,"spring-cloud-stream-binder-kafka/src/test/java/org/springframework/cloud/stream/binder/kafka/KafkaBinderMetricsTest.java","partitions.add(new PartitionInfo(TEST_TOPIC, i, nodes[i], null, null))"
github.com,"spring-cloud/spring-cloud-stream-binder-kafka",main,"spring-cloud-stream-binder-kafka/src/test/java/org/springframework/cloud/stream/binder/kafka/KafkaBinderHealthIndicatorTest.java","partitions.add(new PartitionInfo(TEST_TOPIC, 0, null, null, null))"
github.com,"spring-cloud/spring-cloud-stream-binder-kafka",main,"spring-cloud-stream-binder-kafka/src/test/java/org/springframework/cloud/stream/binder/kafka/KafkaBinderHealthIndicatorTest.java","partitions.add(new PartitionInfo(TEST_TOPIC, 0, null, null, null))"
github.com,"spring-cloud/spring-cloud-stream-binder-kafka",main,"spring-cloud-stream-binder-kafka/src/test/java/org/springframework/cloud/stream/binder/kafka/KafkaBinderHealthIndicatorTest.java","partitions.add(new PartitionInfo(TEST_TOPIC, 0, leader, null, null))"
github.com,"spring-cloud/spring-cloud-stream-binder-kafka",main,"spring-cloud-stream-binder-kafka/src/test/java/org/springframework/cloud/stream/binder/kafka/KafkaBinderConfigurationPropertiesTest.java","bootstrapServers.add(""10.98.09.199:9082"")"
github.com,"spring-cloud/spring-cloud-stream-binder-kafka",main,"spring-cloud-stream-binder-kafka/src/test/java/org/springframework/cloud/stream/binder/kafka/KafkaBinderAutoConfigurationPropertiesTest.java","bootstrapServers.add(""10.98.09.199:9092"")"
github.com,"spring-cloud/spring-cloud-stream-binder-kafka",main,"spring-cloud-stream-binder-kafka/src/test/java/org/springframework/cloud/stream/binder/kafka/KafkaBinderAutoConfigurationPropertiesTest.java","bootstrapServers.add(""10.98.09.196:9092"")"
github.com,"spring-cloud/spring-cloud-stream-binder-kafka",main,"spring-cloud-stream-binder-kafka/src/test/java/org/springframework/cloud/stream/binder/kafka/KafkaBinderAutoConfigurationPropertiesTest.java","bootstrapServers.add(""10.98.09.199:9092"")"
github.com,"spring-cloud/spring-cloud-stream-binder-kafka",main,"spring-cloud-stream-binder-kafka/src/test/java/org/springframework/cloud/stream/binder/kafka/KafkaBinderAutoConfigurationPropertiesTest.java","bootstrapServers.add(""10.98.09.196:9092"")"
github.com,"spring-cloud/spring-cloud-stream-binder-kafka",main,"spring-cloud-stream-binder-kafka/src/test/java/org/springframework/cloud/stream/binder/kafka/KafkaBinderUnitTests.java","partitions.add(new TopicPartition(topic, 0))"
github.com,"spring-cloud/spring-cloud-stream-binder-kafka",main,"spring-cloud-stream-binder-kafka/src/test/java/org/springframework/cloud/stream/binder/kafka/KafkaBinderUnitTests.java","partitions.add(new TopicPartition(topic, 1))"
github.com,"spring-cloud/spring-cloud-stream-binder-kafka",main,"spring-cloud-stream-binder-kafka/src/test/java/org/springframework/cloud/stream/binder/kafka/KafkaBinderTests.java","bAddresses.add(bAddress.toString())"
github.com,"spring-cloud/spring-cloud-stream-binder-kafka",main,"spring-cloud-stream-binder-kafka/src/test/java/org/springframework/cloud/stream/binder/kafka/KafkaBinderTests.java","bAddresses.add(bAddress.toString())"
github.com,"spring-cloud/spring-cloud-stream-binder-kafka",main,"spring-cloud-stream-binder-kafka/src/test/java/org/springframework/cloud/stream/binder/kafka/KafkaBinderTests.java","nonProvisionedDlqTopics.add(nTopic)"
github.com,"spring-cloud/spring-cloud-stream-binder-kafka",main,"spring-cloud-stream-binder-kafka-streams/src/main/java/org/springframework/cloud/stream/binder/kafka/streams/function/FunctionDetectorCondition.java","prunedList.add(key)"
github.com,"spring-cloud/spring-cloud-stream-binder-kafka",main,"spring-cloud-stream-binder-kafka-streams/src/main/java/org/springframework/cloud/stream/binder/kafka/streams/function/FunctionDetectorCondition.java","prunedList.add(key)"
github.com,"spring-cloud/spring-cloud-stream-binder-kafka",main,"spring-cloud-stream-binder-kafka-streams/src/main/java/org/springframework/cloud/stream/binder/kafka/streams/function/KafkaStreamsBindableProxyFactory.java","inputs.add(String.format(""%s-%s-%d"", this.functionName, FunctionConstants.DEFAULT_INPUT_SUFFIX, i++))"
github.com,"spring-cloud/spring-cloud-stream-binder-kafka",main,"spring-cloud-stream-binder-kafka-streams/src/main/java/org/springframework/cloud/stream/binder/kafka/streams/KafkaStreamsBindingInformationCatalogue.java","this.consumerPropertiesPerSbfb.get(streamsBuilderFactoryBean).add(consumerProperties)"
github.com,"spring-cloud/spring-cloud-stream-binder-kafka",main,"spring-cloud-stream-binder-kafka-streams/src/main/java/org/springframework/cloud/stream/binder/kafka/streams/KafkaStreamsBindingInformationCatalogue.java","producerFactories.add(producerFactory)"
github.com,"spring-cloud/spring-cloud-stream-binder-kafka",main,"spring-cloud-stream-binder-kafka-streams/src/main/java/org/springframework/cloud/stream/binder/kafka/streams/endpoint/KafkaStreamsTopologyEndpoint.java","descs.add(streamsBuilderFactoryBean.getTopology().describe().toString())"
github.com,"spring-cloud/spring-cloud-stream-binder-kafka",main,"spring-cloud-stream-binder-kafka-streams/src/main/java/org/springframework/cloud/stream/binder/kafka/streams/KafkaStreamsFunctionProcessor.java","outputBindingNames.add(String.format(""%s-%s-%d"", functionName, FunctionConstants.DEFAULT_OUTPUT_SUFFIX, i))"
github.com,"spring-cloud/spring-cloud-stream-binder-kafka",main,"spring-cloud-stream-binder-kafka-streams/src/main/java/org/springframework/cloud/stream/binder/kafka/streams/KafkaStreamsBinderMetrics.java","tags.add(Tag.of(key, value))"
github.com,"spring-cloud/spring-cloud-stream-binder-kafka",main,"spring-cloud-stream-binder-kafka-streams/src/main/java/org/springframework/cloud/stream/binder/kafka/streams/KafkaStreamsBinderMetrics.java","tags.add(Tag.of(KAFKA_VERSION_TAG_NAME, kafkaVersion))"
github.com,"spring-cloud/spring-cloud-stream-binder-kafka",main,"spring-cloud-stream-binder-kafka-streams/src/test/java/org/springframework/cloud/stream/binder/kafka/streams/function/StreamToGlobalKTableFunctionTests.java","enrichedOrders.add(new KeyValue<>(record.key(), record.value()))"
github.com,"spring-cloud/spring-cloud-stream-binder-kafka",main,"spring-cloud-stream-binder-kafka-streams/src/test/java/org/springframework/cloud/stream/binder/kafka/streams/function/StreamToTableJoinFunctionTests.java","actualClicksPerRegion.add(new KeyValue<>(record.key(), record.value()))"
github.com,"spring-cloud/spring-cloud-stream-binder-kafka",main,"spring-cloud-stream-binder-kafka-streams/src/test/java/org/springframework/cloud/stream/binder/kafka/streams/function/StreamToTableJoinFunctionTests.java","actualClicksPerRegion.add(new KeyValue<>(record.key(), record.value()))"
github.com,"spring-cloud/spring-cloud-stream-binder-kafka",main,"spring-cloud-stream-binder-kafka-streams/src/test/java/org/springframework/cloud/stream/binder/kafka/streams/integration/KafkaStreamsBinderMultipleInputTopicsTest.java","wordCounts.add((consumerRecord.value()))"
github.com,"spring-cloud/spring-cloud-stream-binder-kafka",main,"spring-cloud-stream-binder-kafka-streams/src/test/java/org/springframework/cloud/stream/binder/kafka/streams/serde/CollectionSerdeTest.java","foos.add(foo1)"
github.com,"spring-cloud/spring-cloud-stream-binder-kafka",main,"spring-cloud-stream-binder-kafka-streams/src/test/java/org/springframework/cloud/stream/binder/kafka/streams/serde/CollectionSerdeTest.java","foos.add(foo2)"
github.com,"spring-cloud/spring-cloud-stream-binder-kafka",main,"spring-cloud-stream-binder-kafka-streams/src/test/java/org/springframework/cloud/stream/binder/kafka/streams/KafkaStreamsEventTypeRoutingTests.java","keys.add(integerFooConsumerRecord.key())"
github.com,"spring-cloud/spring-cloud-stream-binder-kafka",main,"spring-cloud-stream-binder-kafka-streams/src/test/java/org/springframework/cloud/stream/binder/kafka/streams/KafkaStreamsEventTypeRoutingTests.java","values.add(integerFooConsumerRecord.value())"
github.com,"spring-projects/spring-security-oauth",main,"tests/annotation/custom-grant/src/main/java/demo/Application.java","granters.add(new CustomTokenGranter(endpoints.getTokenServices(), endpoints.getClientDetailsService(), endpoints.getOAuth2RequestFactory(), ""custom""))"
github.com,"spring-projects/spring-security-oauth",main,"samples/oauth2/sparklr/src/main/java/org/springframework/security/oauth/examples/sparklr/config/WebMvcConfig.java","photos.add(createPhoto(""1"", ""marissa""))"
github.com,"spring-projects/spring-security-oauth",main,"samples/oauth2/sparklr/src/main/java/org/springframework/security/oauth/examples/sparklr/config/WebMvcConfig.java","photos.add(createPhoto(""2"", ""paul""))"
github.com,"spring-projects/spring-security-oauth",main,"samples/oauth2/sparklr/src/main/java/org/springframework/security/oauth/examples/sparklr/config/WebMvcConfig.java","photos.add(createPhoto(""3"", ""marissa""))"
github.com,"spring-projects/spring-security-oauth",main,"samples/oauth2/sparklr/src/main/java/org/springframework/security/oauth/examples/sparklr/config/WebMvcConfig.java","photos.add(createPhoto(""4"", ""paul""))"
github.com,"spring-projects/spring-security-oauth",main,"samples/oauth2/sparklr/src/main/java/org/springframework/security/oauth/examples/sparklr/config/WebMvcConfig.java","photos.add(createPhoto(""5"", ""marissa""))"
github.com,"spring-projects/spring-security-oauth",main,"samples/oauth2/sparklr/src/main/java/org/springframework/security/oauth/examples/sparklr/config/WebMvcConfig.java","photos.add(createPhoto(""6"", ""paul""))"
github.com,"spring-projects/spring-security-oauth",main,"samples/oauth2/sparklr/src/main/java/org/springframework/security/oauth/examples/sparklr/impl/PhotoServiceImpl.java","infos.add(info)"
github.com,"spring-projects/spring-security-oauth",main,"spring-security-oauth/src/main/java/org/springframework/security/oauth/provider/filter/OAuthProviderProcessingFilter.java","this.allowedMethods.add(allowedMethod.toUpperCase())"
github.com,"spring-projects/spring-security-oauth",main,"spring-security-oauth/src/main/java/org/springframework/security/oauth/provider/attributes/ConsumerSecurityMetadataSource.java","attributes.add(ConsumerSecurityConfig.DENY_ALL_ATTRIBUTE)"
github.com,"spring-projects/spring-security-oauth",main,"spring-security-oauth/src/main/java/org/springframework/security/oauth/provider/attributes/ConsumerSecurityMetadataSource.java","attributes.add(ConsumerSecurityConfig.PERMIT_ALL_ATTRIBUTE)"
github.com,"spring-projects/spring-security-oauth",main,"spring-security-oauth/src/main/java/org/springframework/security/oauth/provider/attributes/ConsumerSecurityMetadataSource.java","attributes.add(new ConsumerSecurityConfig(role, ConsumerSecurityConfig.ConsumerSecurityType.CONSUMER_ROLE))"
github.com,"spring-projects/spring-security-oauth",main,"spring-security-oauth/src/main/java/org/springframework/security/oauth/provider/attributes/ConsumerSecurityMetadataSource.java","attributes.add(new ConsumerSecurityConfig(key, ConsumerSecurityConfig.ConsumerSecurityType.CONSUMER_KEY))"
github.com,"spring-projects/spring-security-oauth",main,"spring-security-oauth/src/main/java/org/springframework/security/oauth/common/StringSplitUtils.java","list.add(str.substring(start, i))"
github.com,"spring-projects/spring-security-oauth",main,"spring-security-oauth/src/main/java/org/springframework/security/oauth/common/StringSplitUtils.java","list.add(str.substring(start, i))"
github.com,"spring-projects/spring-security-oauth",main,"spring-security-oauth/src/main/java/org/springframework/security/oauth/config/OAuthConsumerBeanDefinitionParser.java","filterChain.add(filterChain.size(), new RuntimeBeanReference(""oauthConsumerContextFilter""))"
github.com,"spring-projects/spring-security-oauth",main,"spring-security-oauth/src/main/java/org/springframework/security/oauth/config/OAuthConsumerBeanDefinitionParser.java","filterChain.add(filterChain.size(), new RuntimeBeanReference(""oauthConsumerFilter""))"
github.com,"spring-projects/spring-security-oauth",main,"spring-security-oauth/src/main/java/org/springframework/security/oauth/config/OAuthProviderBeanDefinitionParser.java","filterChain.add(index++, new RuntimeBeanReference(""oauthRequestTokenFilter""))"
github.com,"spring-projects/spring-security-oauth",main,"spring-security-oauth/src/main/java/org/springframework/security/oauth/config/OAuthProviderBeanDefinitionParser.java","filterChain.add(index++, new RuntimeBeanReference(""oauthAuthenticateTokenFilter""))"
github.com,"spring-projects/spring-security-oauth",main,"spring-security-oauth/src/main/java/org/springframework/security/oauth/config/OAuthProviderBeanDefinitionParser.java","filterChain.add(index++, new RuntimeBeanReference(""oauthAccessTokenFilter""))"
github.com,"spring-projects/spring-security-oauth",main,"spring-security-oauth/src/main/java/org/springframework/security/oauth/config/OAuthProviderBeanDefinitionParser.java","filterChain.add(index++, new RuntimeBeanReference(""oauthProtectedResourceFilter""))"
github.com,"spring-projects/spring-security-oauth",main,"tests/annotation/jaxb/src/main/java/demo/Application.java","converters.add(new JaxbOAuth2AccessTokenMessageConverter())"
github.com,"spring-projects/spring-security-oauth",main,"tests/annotation/jaxb/src/main/java/demo/Application.java","converters.add(new JaxbOAuth2ExceptionMessageConverter())"
github.com,"spring-projects/spring-security-oauth",main,"samples/oauth/sparklr/src/main/java/org/springframework/security/oauth/examples/sparklr/impl/PhotoServiceImpl.java","infos.add(info)"
github.com,"spring-projects/spring-security-oauth",main,"samples/oauth/tonr/src/main/java/org/springframework/security/oauth/examples/tonr/impl/GoogleServiceImpl.java","//just do the thumbnails that are between 100 and 200 px...
photoUrls.add(attributes.getValue(""url""))"
github.com,"spring-projects/spring-security-oauth",main,"samples/oauth/tonr/src/main/java/org/springframework/security/oauth/examples/tonr/impl/SparklrServiceImpl.java","photoIds.add(attributes.getValue(""id""))"
github.com,"spring-projects/spring-security-oauth",main,"spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/http/StringSplitUtils.java","list.add(str.substring(start, i))"
github.com,"spring-projects/spring-security-oauth",main,"spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/http/StringSplitUtils.java","list.add(str.substring(start, i))"
github.com,"spring-projects/spring-security-oauth",main,"spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/token/OAuth2AccessTokenSupport.java","this.messageConverters.add(new FormOAuth2AccessTokenMessageConverter())"
github.com,"spring-projects/spring-security-oauth",main,"spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/token/OAuth2AccessTokenSupport.java","this.messageConverters.add(new FormOAuth2ExceptionHttpMessageConverter())"
github.com,"spring-projects/spring-security-oauth",main,"spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/jwk/JwkDefinitionSource.java","this.jwkSetUrls.add(new URL(jwkSetUrl))"
github.com,"spring-projects/spring-security-oauth",main,"spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/redis/RedisTokenStore.java","byteList.add(cursor.next())"
github.com,"spring-projects/spring-security-oauth",main,"spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/redis/RedisTokenStore.java","accessTokens.add(accessToken)"
github.com,"spring-projects/spring-security-oauth",main,"spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/redis/RedisTokenStore.java","accessTokens.add(accessToken)"
github.com,"spring-projects/spring-security-oauth",main,"spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/JdbcTokenStore.java","tokens.add(token)"
github.com,"spring-projects/spring-security-oauth",main,"spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/CompositeTokenGranter.java","tokenGranters.add(tokenGranter)"
github.com,"spring-projects/spring-security-oauth",main,"spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/error/DefaultOAuth2ExceptionRenderer.java","result.add(new JaxbOAuth2ExceptionMessageConverter())"
github.com,"spring-projects/spring-security-oauth",main,"spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/util/WhitelistedSerializationStrategy.java","classes.add(""java.lang."")"
github.com,"spring-projects/spring-security-oauth",main,"spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/util/WhitelistedSerializationStrategy.java","classes.add(""java.util."")"
github.com,"spring-projects/spring-security-oauth",main,"spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/util/WhitelistedSerializationStrategy.java","classes.add(""org.springframework.security."")"
github.com,"spring-projects/spring-security-oauth",main,"spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/xml/AuthorizationServerBeanDefinitionParser.java","tokenGranters.add(authorizationCodeTokenGranterBean.getBeanDefinition())"
github.com,"spring-projects/spring-security-oauth",main,"spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/xml/AuthorizationServerBeanDefinitionParser.java","tokenGranters.add(refreshTokenGranterBean.getBeanDefinition())"
github.com,"spring-projects/spring-security-oauth",main,"spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/xml/AuthorizationServerBeanDefinitionParser.java","tokenGranters.add(implicitGranterBean.getBeanDefinition())"
github.com,"spring-projects/spring-security-oauth",main,"spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/xml/AuthorizationServerBeanDefinitionParser.java","tokenGranters.add(clientCredentialsGranterBean.getBeanDefinition())"
github.com,"spring-projects/spring-security-oauth",main,"spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/xml/AuthorizationServerBeanDefinitionParser.java","tokenGranters.add(clientPasswordTokenGranter.getBeanDefinition())"
github.com,"spring-projects/spring-security-oauth",main,"spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/xml/AuthorizationServerBeanDefinitionParser.java","tokenGranters.add(new RuntimeBeanReference(customGranterRef))"
github.com,"spring-projects/spring-security-oauth",main,"spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/annotation/builders/ClientDetailsServiceBuilder.java","this.clientBuilders.add(clientBuilder)"
github.com,"spring-projects/spring-security-oauth",main,"spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/annotation/web/configurers/AuthorizationServerEndpointsConfigurer.java","this.interceptors.add(interceptor)"
github.com,"spring-projects/spring-security-oauth",main,"spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/annotation/web/configurers/AuthorizationServerEndpointsConfigurer.java","this.interceptors.add(interceptor)"
github.com,"spring-projects/spring-security-oauth",main,"spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/annotation/web/configurers/AuthorizationServerEndpointsConfigurer.java","tokenGranters.add(new AuthorizationCodeTokenGranter(tokenServices, authorizationCodeServices, clientDetails,
		requestFactory))"
github.com,"spring-projects/spring-security-oauth",main,"spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/annotation/web/configurers/AuthorizationServerEndpointsConfigurer.java","tokenGranters.add(new RefreshTokenGranter(tokenServices, clientDetails, requestFactory))"
github.com,"spring-projects/spring-security-oauth",main,"spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/annotation/web/configurers/AuthorizationServerEndpointsConfigurer.java","tokenGranters.add(implicit)"
github.com,"spring-projects/spring-security-oauth",main,"spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/annotation/web/configurers/AuthorizationServerEndpointsConfigurer.java","tokenGranters.add(new ClientCredentialsTokenGranter(tokenServices, clientDetails, requestFactory))"
github.com,"spring-projects/spring-security-oauth",main,"spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/annotation/web/configurers/AuthorizationServerEndpointsConfigurer.java","tokenGranters.add(new ResourceOwnerPasswordTokenGranter(authenticationManager, tokenServices,
		clientDetails, requestFactory))"
github.com,"spring-projects/spring-security-oauth",main,"spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/annotation/web/configurers/AuthorizationServerSecurityConfigurer.java","this.authenticationProviders.add(authenticationProvider)"
github.com,"spring-projects/spring-security-oauth",main,"spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/annotation/web/configurers/AuthorizationServerSecurityConfigurer.java","this.tokenEndpointAuthenticationFilters.add(filter)"
github.com,"spring-projects/spring-security-oauth",main,"spring-security-oauth2/src/test/java/org/springframework/security/oauth2/client/http/OAuth2ErrorHandlerTests.java","messageConverters.add(extractor)"
github.com,"spring-projects/spring-security-oauth",main,"spring-security-oauth2/src/test/java/org/springframework/security/oauth2/client/token/JdbcClientTokenServicesTests.java","allowedClasses.add(""java.util."")"
github.com,"spring-projects/spring-security-oauth",main,"spring-security-oauth2/src/test/java/org/springframework/security/oauth2/client/token/JdbcClientTokenServicesTests.java","allowedClasses.add(""org.springframework.security."")"
github.com,"spring-projects/spring-security-oauth",main,"spring-security-oauth2/src/test/java/org/springframework/security/oauth2/client/token/JdbcClientTokenServicesTests.java","allowedClasses.add(""org.company.oauth2.CustomOAuth2AccessToken"")"
github.com,"spring-projects/spring-security-oauth",main,"spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/code/JdbcAuthorizationCodeServicesTests.java","allowedClasses.add(""java.util."")"
github.com,"spring-projects/spring-security-oauth",main,"spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/code/JdbcAuthorizationCodeServicesTests.java","allowedClasses.add(""org.springframework.security."")"
github.com,"spring-projects/spring-security-oauth",main,"spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/code/JdbcAuthorizationCodeServicesTests.java","allowedClasses.add(""org.company.oauth2.CustomOAuth2AccessToken"")"
github.com,"spring-projects/spring-security-oauth",main,"spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/code/JdbcAuthorizationCodeServicesTests.java","allowedClasses.add(""org.company.oauth2.CustomOAuth2Authentication"")"
github.com,"spring-projects/spring-security-oauth",main,"spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/code/JdbcAuthorizationCodeServicesTests.java","allowedClasses.add(""org.company.oauth2.CustomAuthentication"")"
github.com,"spring-projects/spring-security-oauth",main,"spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/store/JdbcTokenStoreTests.java","allowedClasses.add(""java.util."")"
github.com,"spring-projects/spring-security-oauth",main,"spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/store/JdbcTokenStoreTests.java","allowedClasses.add(""org.springframework.security."")"
github.com,"spring-projects/spring-security-oauth",main,"spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/store/JdbcTokenStoreTests.java","allowedClasses.add(""org.company.oauth2.CustomOAuth2AccessToken"")"
github.com,"spring-projects/spring-security-oauth",main,"spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/store/JdbcTokenStoreTests.java","allowedClasses.add(""org.company.oauth2.CustomOAuth2Authentication"")"
github.com,"spring-projects/spring-security-oauth",main,"spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/store/jwk/JwkTokenStoreITests.java","jwtClaimsSetVerifiers.add(new IssuerClaimVerifier(providerConfiguration.getIssuer()))"
github.com,"spring-projects/spring-security-oauth",main,"spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/store/jwk/JwkTokenStoreITests.java","jwtClaimsSetVerifiers.add(new IssuerClaimVerifier(providerConfiguration.getIssuer()))"
github.com,"spring-projects/spring-security-oauth",main,"spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/store/redis/RedisTokenStoreMockTests.java","result.add(Long.valueOf(1))"
github.com,"spring-projects/spring-security-oauth",main,"spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/store/redis/RedisTokenStoreMockTests.java","result.add(Long.valueOf(1))"
github.com,"spring-projects/spring-security-oauth",main,"spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/store/redis/RedisTokenStoreMockTests.java","result.add(new byte[] {42})"
github.com,"spring-projects/spring-security-oauth",main,"spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/store/redis/RedisTokenStoreMockTests.java","result.add(Long.valueOf(1))"
github.com,"spring-projects/spring-security-oauth",main,"spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/store/redis/RedisTokenStoreCustomTokenTests.java","ALLOWED_CLASSES.add(""java.util."")"
github.com,"spring-projects/spring-security-oauth",main,"spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/store/redis/RedisTokenStoreCustomTokenTests.java","ALLOWED_CLASSES.add(""org.springframework.security."")"
github.com,"spring-projects/spring-security-oauth",main,"spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/store/redis/RedisTokenStoreCustomTokenTests.java","ALLOWED_CLASSES.add(""org.company.oauth2.CustomOAuth2AccessToken"")"
github.com,"spring-projects/spring-security-oauth",main,"spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/store/redis/RedisTokenStoreCustomTokenTests.java","ALLOWED_CLASSES.add(""org.company.oauth2.CustomOAuth2Authentication"")"
github.com,"spring-projects/spring-security-oauth",main,"spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/DefaultUserAuthenticationConverterTests.java","lists.add(""a1"")"
github.com,"spring-projects/spring-security-oauth",main,"spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/DefaultUserAuthenticationConverterTests.java","lists.add(""a2"")"
github.com,"spring-projects/spring-security-oauth",main,"spring-security-oauth2/src/test/java/org/springframework/security/oauth2/common/util/CustomSerializationStrategyTests.java","ALLOWED_CLASSES.add(""java.lang."")"
github.com,"spring-projects/spring-security-oauth",main,"spring-security-oauth2/src/test/java/org/springframework/security/oauth2/common/util/CustomSerializationStrategyTests.java","ALLOWED_CLASSES.add(""java.util."")"
github.com,"spring-projects/spring-security-oauth",main,"spring-security-oauth2/src/test/java/org/springframework/security/oauth2/common/util/CustomSerializationStrategyTests.java","ALLOWED_CLASSES.add(""org.springframework.security."")"
github.com,"spring-projects/spring-security-oauth",main,"spring-security-oauth2/src/test/java/org/springframework/security/oauth2/common/util/CustomSerializationStrategyTests.java","ALLOWED_CLASSES.add(""org.company.oauth2."")"
github.com,"spring-projects/spring-security-oauth",main,"samples/oauth2/tonr/src/main/java/org/springframework/security/oauth/examples/config/WebMvcConfig.java","converters.add(new BufferedImageHttpMessageConverter())"
github.com,"spring-projects/spring-security-oauth",main,"samples/oauth2/tonr/src/main/java/org/springframework/security/oauth/examples/tonr/mvc/FacebookController.java","friends.add(dataNode.get(""name"").asText())"
github.com,"spring-projects/spring-security-oauth",main,"samples/oauth2/tonr/src/main/java/org/springframework/security/oauth/examples/tonr/impl/SparklrServiceImpl.java","photoIds.add(attributes.getValue(""id""))"
github.com,"spring-projects/spring-security-oauth",main,"tests/annotation/jpa/src/main/java/demo/Application.java","authorities.add(new SimpleGrantedAuthority(name))"
github.com,"spring-projects/spring-guice",main,"src/main/java/org/springframework/guice/module/SpringModule.java","candidateBeanNames.add(name)"
github.com,"spring-projects/spring-guice",main,"src/main/java/org/springframework/guice/module/SpringModule.java","// Guice is injecting dependency of this type by bean name
matchingBeanNames.add(name)"
github.com,"spring-projects/spring-guice",main,"src/main/java/org/springframework/guice/module/SpringModule.java","// Spring bean definition has a Named annotation that
// matches the name of the bean
// In such cases, we dedupe namedProvider (because it's
// Key equals typeProvider Key)
// Thus, this complementary check is required
// (because name field is null in typeProvider,
// and if check above wouldn't pass)
matchingBeanNames.add(name)"
github.com,"spring-projects/spring-guice",main,"src/main/java/org/springframework/guice/module/SpringModule.java","// Found a bean with matching qualifier annotation
matchingBeanNames.add(name)"
github.com,"spring-projects/spring-guice",main,"src/main/java/org/springframework/guice/annotation/ModuleRegistryConfiguration.java","modules.add(module)"
github.com,"spring-projects/spring-guice",main,"src/main/java/org/springframework/guice/annotation/GuiceModuleRegistrar.java","typeFilters.add(new AnnotationTypeFilter(annoClass))"
github.com,"spring-projects/spring-guice",main,"src/main/java/org/springframework/guice/annotation/GuiceModuleRegistrar.java","typeFilters.add(new AssignableTypeFilter(filterClass))"
github.com,"spring-projects/spring-guice",main,"src/main/java/org/springframework/guice/annotation/GuiceModuleRegistrar.java","typeFilters.add(BeanUtils.instantiateClass(filterClass, TypeFilter.class))"
github.com,"spring-projects/spring-guice",main,"src/main/java/org/springframework/guice/annotation/GuiceModuleRegistrar.java","typeFilters.add(new RegexPatternTypeFilter(Pattern.compile(expression)))"
github.com,"spring-projects/spring-guice",main,"src/main/java/org/springframework/guice/annotation/GuiceModuleRegistrar.java","typeFilters.add(new AspectJTypeFilter(expression, this.resourceLoader.getClassLoader()))"
github.com,"spring-projects/spring-pulsar",main,"integration-tests/src/intTest/java/org/springframework/pulsar/autoconfigure/PulsarFunctionAdministrationIntegrationTests.java","RECEIVED_MESSAGES.add(message)"
github.com,"spring-projects/spring-pulsar",main,"spring-pulsar/src/main/java/org/springframework/pulsar/function/PulsarFunctionAdministration.java","this.processedFunctions.add(function)"
github.com,"spring-projects/spring-pulsar",main,"spring-pulsar/src/main/java/org/springframework/pulsar/core/PulsarTemplate.java","customizers.add(builder -> this.interceptors.forEach(builder::intercept))"
github.com,"spring-projects/spring-pulsar",main,"spring-pulsar/src/main/java/org/springframework/pulsar/core/PulsarTemplate.java","customizers.add(producerCustomizer)"
github.com,"spring-projects/spring-pulsar",main,"spring-pulsar/src/main/java/org/springframework/pulsar/listener/adapter/DelegatingInvocableHandler.java","this.handlers.add(wrapIfNecessary(handler))"
github.com,"spring-projects/spring-pulsar",main,"spring-pulsar/src/main/java/org/springframework/pulsar/listener/adapter/PulsarBatchMessagesToSpringMessageListenerAdapter.java","list.add(vMessage.getValue())"
github.com,"spring-projects/spring-pulsar",main,"spring-pulsar/src/main/java/org/springframework/pulsar/listener/adapter/PulsarBatchMessagesToSpringMessageListenerAdapter.java","list.add(vMessage.getValue())"
github.com,"spring-projects/spring-pulsar",main,"spring-pulsar/src/main/java/org/springframework/pulsar/listener/adapter/PulsarBatchMessagesToSpringMessageListenerAdapter.java","objects.add(o)"
github.com,"spring-projects/spring-pulsar",main,"spring-pulsar/src/main/java/org/springframework/pulsar/listener/adapter/PulsarBatchMessagesToSpringMessageListenerAdapter.java","messages.add(toMessagingMessage(record, consumer))"
github.com,"spring-projects/spring-pulsar",main,"spring-pulsar/src/main/java/org/springframework/pulsar/listener/DefaultPulsarMessageListenerContainer.java","customizers.add(builder -> {
	ConsumerBuilderConfigurationUtil.loadConf(builder, propertiesToConsumer);
	builder.batchReceivePolicy(batchReceivePolicy);
})"
github.com,"spring-projects/spring-pulsar",main,"spring-pulsar/src/main/java/org/springframework/pulsar/listener/DefaultPulsarMessageListenerContainer.java","customizers.add(this.consumerBuilderCustomizer)"
github.com,"spring-projects/spring-pulsar",main,"spring-pulsar/src/main/java/org/springframework/pulsar/listener/DefaultPulsarMessageListenerContainer.java",messageList::add
github.com,"spring-projects/spring-pulsar",main,"spring-pulsar/src/main/java/org/springframework/pulsar/listener/ConcurrentPulsarMessageListenerContainer.java","this.containers.add(container)"
github.com,"spring-projects/spring-pulsar",main,"spring-pulsar/src/main/java/org/springframework/pulsar/listener/ConcurrentPulsarMessageListenerContainer.java","this.executors.add(exec)"
github.com,"spring-projects/spring-pulsar",main,"spring-pulsar/src/main/java/org/springframework/pulsar/support/header/AbstractPulsarHeaderMapper.java","this.inboundMatchers.add(PatternMatch.fromPatternString(p))"
github.com,"spring-projects/spring-pulsar",main,"spring-pulsar/src/main/java/org/springframework/pulsar/support/header/AbstractPulsarHeaderMapper.java","// @formatter:off
this.outboundMatchers.add(new NeverMatch(
		PulsarHeaders.KEY,
		PulsarHeaders.KEY_BYTES,
		PulsarHeaders.ORDERING_KEY,
		PulsarHeaders.INDEX,
		PulsarHeaders.MESSAGE_ID,
		PulsarHeaders.BROKER_PUBLISH_TIME,
		PulsarHeaders.EVENT_TIME,
		PulsarHeaders.MESSAGE_SIZE,
		PulsarHeaders.PRODUCER_NAME,
		PulsarHeaders.RAW_DATA,
		PulsarHeaders.PUBLISH_TIME,
		PulsarHeaders.REDELIVERY_COUNT,
		PulsarHeaders.REPLICATED_FROM,
		PulsarHeaders.SCHEMA_VERSION,
		PulsarHeaders.SEQUENCE_ID,
		PulsarHeaders.TOPIC_NAME))"
github.com,"spring-projects/spring-pulsar",main,"spring-pulsar/src/main/java/org/springframework/pulsar/support/header/AbstractPulsarHeaderMapper.java","this.outboundMatchers.add(EXCLUDE_PATTERN_ID)"
github.com,"spring-projects/spring-pulsar",main,"spring-pulsar/src/main/java/org/springframework/pulsar/support/header/AbstractPulsarHeaderMapper.java","this.outboundMatchers.add(EXCLUDE_PATTERN_TIMESTAMP)"
github.com,"spring-projects/spring-pulsar",main,"spring-pulsar/src/main/java/org/springframework/pulsar/support/header/AbstractPulsarHeaderMapper.java","this.outboundMatchers.add(PatternMatch.fromPatternString(""*""))"
github.com,"spring-projects/spring-pulsar",main,"spring-pulsar/src/main/java/org/springframework/pulsar/support/header/AbstractPulsarHeaderMapper.java","this.outboundMatchers.add(PatternMatch.fromPatternString(p))"
github.com,"spring-projects/spring-pulsar",main,"spring-pulsar/src/main/java/org/springframework/pulsar/support/header/AbstractPulsarHeaderMapper.java","this.outboundMatchers.add(EXCLUDE_PATTERN_ID)"
github.com,"spring-projects/spring-pulsar",main,"spring-pulsar/src/main/java/org/springframework/pulsar/support/header/AbstractPulsarHeaderMapper.java","this.outboundMatchers.add(EXCLUDE_PATTERN_TIMESTAMP)"
github.com,"spring-projects/spring-pulsar",main,"spring-pulsar/src/main/java/org/springframework/pulsar/annotation/AbstractPulsarAnnotationsBeanPostProcessor.java","result.add((String) resolvedValue)"
github.com,"spring-projects/spring-pulsar",main,"spring-pulsar/src/main/java/org/springframework/pulsar/config/PulsarReaderEndpointRegistrar.java","this.endpointDescriptors.add(descriptor)"
github.com,"spring-projects/spring-pulsar",main,"spring-pulsar/src/main/java/org/springframework/pulsar/config/PulsarListenerEndpointRegistrar.java","this.endpointDescriptors.add(descriptor)"
github.com,"spring-projects/spring-pulsar",main,"spring-pulsar/src/test/java/org/springframework/pulsar/function/PulsarFunctionAdministrationTests.java","functionAdmin.getProcessedFunctions().add(function)"
github.com,"spring-projects/spring-pulsar",main,"spring-pulsar/src/test/java/org/springframework/pulsar/function/PulsarFunctionAdministrationTests.java","functionAdmin.getProcessedFunctions().add(function)"
github.com,"spring-projects/spring-pulsar",main,"spring-pulsar/src/test/java/org/springframework/pulsar/function/PulsarFunctionAdministrationTests.java","functionAdmin.getProcessedFunctions().add(function)"
github.com,"spring-projects/spring-pulsar",main,"spring-pulsar/src/test/java/org/springframework/pulsar/function/PulsarFunctionAdministrationTests.java","functionAdmin.getProcessedFunctions().add(function1)"
github.com,"spring-projects/spring-pulsar",main,"spring-pulsar/src/test/java/org/springframework/pulsar/function/PulsarFunctionAdministrationTests.java","functionAdmin.getProcessedFunctions().add(sink1)"
github.com,"spring-projects/spring-pulsar",main,"spring-pulsar/src/test/java/org/springframework/pulsar/function/PulsarFunctionAdministrationTests.java","functionAdmin.getProcessedFunctions().add(source1)"
github.com,"spring-projects/spring-pulsar",main,"spring-pulsar/src/test/java/org/springframework/pulsar/function/PulsarFunctionAdministrationTests.java","functionAdmin.getProcessedFunctions().add(function1)"
github.com,"spring-projects/spring-pulsar",main,"spring-pulsar/src/test/java/org/springframework/pulsar/function/PulsarFunctionAdministrationTests.java","functionAdmin.getProcessedFunctions().add(sink1)"
github.com,"spring-projects/spring-pulsar",main,"spring-pulsar/src/test/java/org/springframework/pulsar/function/PulsarFunctionAdministrationTests.java","functionAdmin.getProcessedFunctions().add(source1)"
github.com,"spring-projects/spring-pulsar",main,"spring-pulsar/src/test/java/org/springframework/pulsar/function/PulsarFunctionAdministrationTests.java","functionAdmin.getProcessedFunctions().add(function1)"
github.com,"spring-projects/spring-pulsar",main,"spring-pulsar/src/test/java/org/springframework/pulsar/function/PulsarFunctionAdministrationTests.java","functionAdmin.getProcessedFunctions().add(function1)"
github.com,"spring-projects/spring-pulsar",main,"spring-pulsar/src/test/java/org/springframework/pulsar/core/ConsumerAcknowledgmentTests.java","acksObjects.add(acknowledgement)"
github.com,"spring-projects/spring-pulsar",main,"spring-pulsar/src/test/java/org/springframework/pulsar/core/CachingPulsarProducerFactoryTests.java","expectedCacheKeys.add(new ProducerCacheKey<>(schema1, topic1, null, null))"
github.com,"spring-projects/spring-pulsar",main,"spring-pulsar/src/test/java/org/springframework/pulsar/core/CachingPulsarProducerFactoryTests.java","expectedCacheKeys.add(new ProducerCacheKey<>(schema1, topic1, encryptionKeys1, null))"
github.com,"spring-projects/spring-pulsar",main,"spring-pulsar/src/test/java/org/springframework/pulsar/core/CachingPulsarProducerFactoryTests.java","expectedCacheKeys.add(new ProducerCacheKey<>(schema1, topic1, encryptionKeys1, customizers1))"
github.com,"spring-projects/spring-pulsar",main,"spring-pulsar/src/test/java/org/springframework/pulsar/core/CachingPulsarProducerFactoryTests.java","expectedCacheKeys.add(new ProducerCacheKey<>(schema1, topic1, encryptionKeys1, customizers2))"
github.com,"spring-projects/spring-pulsar",main,"spring-pulsar/src/test/java/org/springframework/pulsar/core/CachingPulsarProducerFactoryTests.java","expectedCacheKeys.add(new ProducerCacheKey<>(schema1, topic1, encryptionKeys2, null))"
github.com,"spring-projects/spring-pulsar",main,"spring-pulsar/src/test/java/org/springframework/pulsar/core/CachingPulsarProducerFactoryTests.java","expectedCacheKeys.add(new ProducerCacheKey<>(schema1, topic1, encryptionKeys2, customizers1))"
github.com,"spring-projects/spring-pulsar",main,"spring-pulsar/src/test/java/org/springframework/pulsar/core/CachingPulsarProducerFactoryTests.java","expectedCacheKeys.add(new ProducerCacheKey<>(schema1, topic1, encryptionKeys2, customizers2))"
github.com,"spring-projects/spring-pulsar",main,"spring-pulsar/src/test/java/org/springframework/pulsar/core/CachingPulsarProducerFactoryTests.java","expectedCacheKeys.add(new ProducerCacheKey<>(schema2, topic1, null, null))"
github.com,"spring-projects/spring-pulsar",main,"spring-pulsar/src/test/java/org/springframework/pulsar/core/CachingPulsarProducerFactoryTests.java","expectedCacheKeys.add(new ProducerCacheKey<>(schema2, topic1, encryptionKeys1, null))"
github.com,"spring-projects/spring-pulsar",main,"spring-pulsar/src/test/java/org/springframework/pulsar/core/CachingPulsarProducerFactoryTests.java","expectedCacheKeys.add(new ProducerCacheKey<>(schema2, topic1, encryptionKeys1, customizers1))"
github.com,"spring-projects/spring-pulsar",main,"spring-pulsar/src/test/java/org/springframework/pulsar/core/CachingPulsarProducerFactoryTests.java","expectedCacheKeys.add(new ProducerCacheKey<>(schema2, topic1, encryptionKeys1, customizers2))"
github.com,"spring-projects/spring-pulsar",main,"spring-pulsar/src/test/java/org/springframework/pulsar/core/CachingPulsarProducerFactoryTests.java","expectedCacheKeys.add(new ProducerCacheKey<>(schema2, topic1, encryptionKeys2, null))"
github.com,"spring-projects/spring-pulsar",main,"spring-pulsar/src/test/java/org/springframework/pulsar/core/CachingPulsarProducerFactoryTests.java","expectedCacheKeys.add(new ProducerCacheKey<>(schema2, topic1, encryptionKeys2, customizers1))"
github.com,"spring-projects/spring-pulsar",main,"spring-pulsar/src/test/java/org/springframework/pulsar/core/CachingPulsarProducerFactoryTests.java","expectedCacheKeys.add(new ProducerCacheKey<>(schema2, topic1, encryptionKeys2, customizers2))"
github.com,"spring-projects/spring-pulsar",main,"spring-pulsar/src/test/java/org/springframework/pulsar/core/CachingPulsarProducerFactoryTests.java","expectedCacheKeys.add(new ProducerCacheKey<>(schema1, topic2, null, null))"
github.com,"spring-projects/spring-pulsar",main,"spring-pulsar/src/test/java/org/springframework/pulsar/core/CachingPulsarProducerFactoryTests.java","expectedCacheKeys.add(new ProducerCacheKey<>(schema1, topic2, encryptionKeys1, null))"
github.com,"spring-projects/spring-pulsar",main,"spring-pulsar/src/test/java/org/springframework/pulsar/core/CachingPulsarProducerFactoryTests.java","expectedCacheKeys.add(new ProducerCacheKey<>(schema1, topic2, encryptionKeys1, customizers1))"
github.com,"spring-projects/spring-pulsar",main,"spring-pulsar/src/test/java/org/springframework/pulsar/core/CachingPulsarProducerFactoryTests.java","expectedCacheKeys.add(new ProducerCacheKey<>(schema1, topic2, encryptionKeys1, customizers2))"
github.com,"spring-projects/spring-pulsar",main,"spring-pulsar/src/test/java/org/springframework/pulsar/core/CachingPulsarProducerFactoryTests.java","expectedCacheKeys.add(new ProducerCacheKey<>(schema1, topic2, encryptionKeys2, null))"
github.com,"spring-projects/spring-pulsar",main,"spring-pulsar/src/test/java/org/springframework/pulsar/core/CachingPulsarProducerFactoryTests.java","expectedCacheKeys.add(new ProducerCacheKey<>(schema1, topic2, encryptionKeys2, customizers1))"
github.com,"spring-projects/spring-pulsar",main,"spring-pulsar/src/test/java/org/springframework/pulsar/core/CachingPulsarProducerFactoryTests.java","expectedCacheKeys.add(new ProducerCacheKey<>(schema1, topic2, encryptionKeys2, customizers2))"
github.com,"spring-projects/spring-pulsar",main,"spring-pulsar/src/test/java/org/springframework/pulsar/core/CachingPulsarProducerFactoryTests.java","producerFactories.add(producerFactory)"
github.com,"spring-projects/spring-pulsar",main,"spring-pulsar/src/test/java/org/springframework/pulsar/listener/PulsarListenerTests.java","list.add(m.getValue())"
github.com,"spring-projects/spring-pulsar",main,"spring-pulsar/src/test/java/org/springframework/pulsar/listener/DefaultPulsarConsumerErrorHandlerTests.java","messageIds.add(integerMessage1.getMessageId())"
github.com,"spring-projects/spring-pulsar",main,"spring-pulsar/src/test/java/org/springframework/pulsar/listener/DefaultPulsarMessageListenerContainerTests.java","messages.add((String) msg.getValue())"
github.com,"spring-projects/spring-pulsar",main,"spring-pulsar-reactive/src/main/java/org/springframework/pulsar/reactive/listener/DefaultReactivePulsarMessageListenerContainer.java","customizers.add(customizer)"
github.com,"spring-projects/spring-pulsar",main,"spring-pulsar-reactive/src/main/java/org/springframework/pulsar/reactive/listener/DefaultReactivePulsarMessageListenerContainer.java","customizers.add(this.consumerCustomizer)"
github.com,"spring-projects/spring-retry",main,"src/main/java/org/springframework/classify/BinaryExceptionClassifierBuilder.java","exceptionClasses.add(throwable)"
github.com,"spring-projects/spring-retry",main,"src/main/java/org/springframework/classify/BinaryExceptionClassifierBuilder.java","exceptionClasses.add(throwable)"
github.com,"spring-projects/spring-retry",main,"src/main/java/org/springframework/retry/support/RetrySimulator.java","sleeps.add(backOffPeriod)"
github.com,"spring-projects/spring-retry",main,"src/main/java/org/springframework/retry/support/RetrySimulation.java","sleepSequences.add(new SleepSequence(sleeps))"
github.com,"spring-projects/spring-retry",main,"src/main/java/org/springframework/retry/support/RetrySimulation.java","res.add(getPercentile(percentile / 100))"
github.com,"spring-projects/spring-retry",main,"src/main/java/org/springframework/retry/support/RetryTemplate.java","list.add(listener)"
github.com,"spring-projects/spring-retry",main,"src/main/java/org/springframework/retry/support/RetryTemplate.java","list.add(index, listener)"
github.com,"spring-projects/spring-retry",main,"src/main/java/org/springframework/retry/support/RetryTemplateBuilder.java","listenersList().add(listener)"
github.com,"spring-projects/spring-retry",main,"src/main/java/org/springframework/retry/policy/CompositeRetryPolicy.java","list.add(policy.open(parent))"
github.com,"spring-projects/spring-retry",main,"src/test/java/org/springframework/retry/backoff/DummySleeper.java","this.backOffs.add(backOffPeriod)"
github.com,"spring-projects/spring-retry",main,"src/test/java/org/springframework/retry/backoff/BackOffPolicySerializationTests.java","result.add(new Object[] {
		BeanUtils.instantiate(ClassUtils.resolveClassName(beanDefinition.getBeanClassName(), null)) })"
github.com,"spring-projects/spring-retry",main,"src/test/java/org/springframework/retry/listener/RetryListenerTests.java","list.add(""1:"" + count)"
github.com,"spring-projects/spring-retry",main,"src/test/java/org/springframework/retry/listener/RetryListenerTests.java","list.add(""2:"" + count)"
github.com,"spring-projects/spring-retry",main,"src/test/java/org/springframework/retry/listener/RetryListenerTests.java","list.add(""1"")"
github.com,"spring-projects/spring-retry",main,"src/test/java/org/springframework/retry/listener/RetryListenerTests.java","list.add(""1:"" + count)"
github.com,"spring-projects/spring-retry",main,"src/test/java/org/springframework/retry/listener/RetryListenerTests.java","list.add(""2:"" + count)"
github.com,"spring-projects/spring-retry",main,"src/test/java/org/springframework/retry/listener/RetryListenerTests.java","list.add(""1"")"
github.com,"spring-projects/spring-retry",main,"src/test/java/org/springframework/retry/listener/RetryListenerTests.java","list.add(""2"")"
github.com,"spring-projects/spring-retry",main,"src/test/java/org/springframework/retry/listener/RetryListenerTests.java","list.add("""" + count)"
github.com,"spring-projects/spring-retry",main,"src/test/java/org/springframework/retry/support/StatefulRecoveryRetryTests.java","StatefulRecoveryRetryTests.this.list.add(input)"
github.com,"spring-projects/spring-retry",main,"src/test/java/org/springframework/retry/support/StatefulRecoveryRetryTests.java","StatefulRecoveryRetryTests.this.list.add(input)"
github.com,"spring-projects/spring-retry",main,"src/test/java/org/springframework/retry/policy/StatefulRetryIntegrationTests.java","times.add(System.currentTimeMillis())"
github.com,"spring-projects/spring-retry",main,"src/test/java/org/springframework/retry/policy/CompositeRetryPolicyTests.java","list.add(""1"")"
github.com,"spring-projects/spring-retry",main,"src/test/java/org/springframework/retry/policy/CompositeRetryPolicyTests.java","list.add(""2"")"
github.com,"spring-projects/spring-retry",main,"src/test/java/org/springframework/retry/policy/CompositeRetryPolicyTests.java","list.add(""1"")"
github.com,"spring-projects/spring-retry",main,"src/test/java/org/springframework/retry/policy/CompositeRetryPolicyTests.java","list.add(""2"")"
github.com,"spring-projects/spring-retry",main,"src/test/java/org/springframework/retry/policy/RetryContextSerializationTests.java","result.add(new Object[] {
		BeanUtils.instantiate(ClassUtils.resolveClassName(beanDefinition.getBeanClassName(), null)) })"
github.com,"spring-projects/spring-retry",main,"src/test/java/org/springframework/retry/policy/RetryContextSerializationTests.java","result.add(new Object[] { extra })"
github.com,"spring-projects/spring-retry",main,"src/test/java/org/springframework/retry/annotation/EnableRetryWithBackoffTests.java","periods.add(period)"
github.com,"spring-projects/spring-retry",main,"src/test/java/org/springframework/retry/interceptor/RetryOperationsInterceptorTests.java","list.add(""chain"")"
github.com,"spring-projects/spring-retry",main,"src/test/java/org/springframework/retry/interceptor/StatefulRetryOperationsInterceptorTests.java","list.add(""chain"")"
github.com,"spring-projects/spring-integration-aws",main,"src/main/java/org/springframework/integration/aws/inbound/kinesis/KclMessageDrivenChannelAdapter.java","partitionKeys.add(r.partitionKey())"
github.com,"spring-projects/spring-integration-aws",main,"src/main/java/org/springframework/integration/aws/inbound/kinesis/KclMessageDrivenChannelAdapter.java","sequenceNumbers.add(r.sequenceNumber())"
github.com,"spring-projects/spring-integration-aws",main,"src/main/java/org/springframework/integration/aws/inbound/kinesis/KinesisMessageDrivenChannelAdapter.java","
shardsToConsume.add(shard)"
github.com,"spring-projects/spring-integration-aws",main,"src/main/java/org/springframework/integration/aws/inbound/kinesis/KinesisMessageDrivenChannelAdapter.java","this.consumerInvokers.add(consumerInvoker)"
github.com,"spring-projects/spring-integration-aws",main,"src/main/java/org/springframework/integration/aws/inbound/kinesis/KinesisMessageDrivenChannelAdapter.java","partitionKeys.add(r.partitionKey())"
github.com,"spring-projects/spring-integration-aws",main,"src/main/java/org/springframework/integration/aws/inbound/kinesis/KinesisMessageDrivenChannelAdapter.java","sequenceNumbers.add(r.sequenceNumber())"
github.com,"spring-projects/spring-integration-aws",main,"src/main/java/org/springframework/integration/aws/support/S3Session.java","names.add(objectSummary.key())"
github.com,"spring-projects/spring-integration-aws",main,"src/test/java/org/springframework/integration/aws/leader/DynamoDbLockRegistryLeaderInitiatorTests.java","repositories.add(dynamoDbLockRepository)"
github.com,"spring-projects/spring-integration-aws",main,"src/test/java/org/springframework/integration/aws/leader/DynamoDbLockRegistryLeaderInitiatorTests.java","initiators.add(initiator)"
github.com,"spring-cloud/spring-cloud-schema-registry",main,"spring-cloud-schema-registry-server/src/test/java/org/springframework/cloud/schema/registry/server/SchemaRegistryServerAvroTests.java","value.add(registerSchemaResponse)"
github.com,"spring-cloud/spring-cloud-schema-registry",main,"spring-cloud-schema-registry-client/src/test/java/org/springframework/cloud/schema/avro/AvroSchemaMessageConverterTests.java","this.receivedUsers.add(user)"
github.com,"spring-cloud/spring-cloud-schema-registry",main,"spring-cloud-schema-registry-client/src/test/java/org/springframework/cloud/schema/avro/AvroSchemaLocationsTest.java","this.receivedPojos.add(fooPojo)"
github.com,"spring-cloud/spring-cloud-schema-registry",main,"spring-cloud-schema-registry-client/src/test/java/org/springframework/cloud/schema/avro/ForwardAndBackwardCompatibilityTest.java","source1Args.add(""--spring.cloud.schema.avro.schema-locations="" + user1Schema)"
github.com,"spring-cloud/spring-cloud-schema-registry",main,"spring-cloud-schema-registry-client/src/test/java/org/springframework/cloud/schema/avro/ForwardAndBackwardCompatibilityTest.java","source1Args.add(""--spring.cloud.schema.avro.dynamicSchemaGenerationEnabled="" + dynamicSchemaGenerationEnabled)"
github.com,"spring-cloud/spring-cloud-schema-registry",main,"spring-cloud-schema-registry-client/src/test/java/org/springframework/cloud/schema/avro/ForwardAndBackwardCompatibilityTest.java","source2Args.add(""--spring.cloud.schema.avro.schema-locations="" + user2Schema)"
github.com,"spring-cloud/spring-cloud-schema-registry",main,"spring-cloud-schema-registry-client/src/test/java/org/springframework/cloud/schema/avro/ForwardAndBackwardCompatibilityTest.java","source2Args.add(""--spring.cloud.schema.avro.dynamicSchemaGenerationEnabled="" + dynamicSchemaGenerationEnabled)"
github.com,"spring-cloud/spring-cloud-schema-registry",main,"spring-cloud-schema-registry-client/src/test/java/org/springframework/cloud/schema/avro/ForwardAndBackwardCompatibilityTest.java","sinkArgs.add(""--spring.cloud.schema.avro.reader-schema="" + readerSchema)"
github.com,"spring-cloud/spring-cloud-schema-registry",main,"spring-cloud-schema-registry-client/src/test/java/org/springframework/cloud/schema/avro/ForwardAndBackwardCompatibilityTest.java","this.receivedPojos.add(fooPojo)"
github.com,"spring-cloud/spring-cloud-schema-registry",main,"spring-cloud-schema-registry-client/src/test/java/org/springframework/cloud/schema/avro/AvroStubSchemaRegistryClientMessageConverterTests.java","this.receivedPojos.add(fooPojo)"
github.com,"spring-cloud/spring-cloud-schema-registry",main,"spring-cloud-schema-registry-client/src/test/java/org/springframework/cloud/schema/serialization/AvroSchemaRegistryClientMessageConverterTests.java","this.receivedPojos.add(fooPojo)"
github.com,"spring-cloud/spring-cloud-schema-registry",main,"spring-cloud-schema-registry-client/src/test/java/org/springframework/cloud/schema/serialization/AvroSchemaRegistryClientMessageConverterTests.java","this.receivedPojos.add(fooPojo)"
github.com,"spring-cloud/spring-cloud-bus",main,"spring-cloud-bus/src/main/java/org/springframework/cloud/bus/jackson/BusJacksonAutoConfiguration.java","packages.add(DEFAULT_PACKAGE)"
github.com,"spring-cloud/spring-cloud-bus",main,"spring-cloud-bus/src/main/java/org/springframework/cloud/bus/jackson/BusJacksonAutoConfiguration.java","types.add(Class.forName(component.getBeanClassName()))"
github.com,"spring-cloud/spring-cloud-bus",main,"spring-cloud-bus/src/test/java/org/springframework/cloud/bus/jackson/RemoteApplicationEventScanTests.java","expectedRegisterdClassesAsList.add(AckRemoteApplicationEvent.class)"
github.com,"spring-cloud/spring-cloud-bus",main,"spring-cloud-bus/src/test/java/org/springframework/cloud/bus/jackson/RemoteApplicationEventScanTests.java","expectedRegisterdClassesAsList.add(EnvironmentChangeRemoteApplicationEvent.class)"
github.com,"spring-cloud/spring-cloud-bus",main,"spring-cloud-bus/src/test/java/org/springframework/cloud/bus/jackson/RemoteApplicationEventScanTests.java","expectedRegisterdClassesAsList.add(RefreshRemoteApplicationEvent.class)"
github.com,"spring-cloud/spring-cloud-bus",main,"spring-cloud-bus/src/test/java/org/springframework/cloud/bus/jackson/RemoteApplicationEventScanTests.java","expectedRegisterdClassesAsList.add(UnknownRemoteApplicationEvent.class)"
github.com,"spring-cloud/spring-cloud-bus",main,"spring-cloud-bus-rsocket/src/main/java/org/springframework/cloud/bus/rsocket/RoutingClientDestinationFactory.java","entries.add(keyStr + ""="" + s)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/test/java/org/springframework/data/jdbc/repository/query/StringBasedJdbcQueryUnitTests.java","list.add(new MyEvaluationContextProvider())"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/main/java/org/springframework/data/jdbc/core/mapping/schema/SchemaDiff.java","toCreate.add(table)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/main/java/org/springframework/data/jdbc/core/mapping/schema/SchemaDiff.java","toDrop.add(table)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/main/java/org/springframework/data/jdbc/core/mapping/schema/SchemaDiff.java","tableDiff.columnsToAdd().add(column)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/main/java/org/springframework/data/jdbc/core/mapping/schema/SchemaDiff.java","tableDiff.columnsToAdd().add(column)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/main/java/org/springframework/data/jdbc/core/mapping/schema/SchemaDiff.java","
tableDiffs.add(tableDiff)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/main/java/org/springframework/data/jdbc/core/mapping/schema/LiquibaseChangeSetWriter.java","deletedColumns.add(column)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/main/java/org/springframework/data/jdbc/core/mapping/schema/LiquibaseChangeSetWriter.java","changes.add(changeSet)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/main/java/org/springframework/data/jdbc/core/mapping/schema/LiquibaseChangeSetWriter.java","
tableModel.columns().add(columnModel)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/main/java/org/springframework/data/jdbc/core/mapping/schema/LiquibaseChangeSetWriter.java","
existingTables.add(tableModel)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/main/java/org/springframework/data/jdbc/core/mapping/schema/LiquibaseChangeSetWriter.java","dropColumns.add(config)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/main/java/org/springframework/data/jdbc/core/mapping/schema/Tables.java","table.columns().add(column)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/main/java/org/springframework/data/jdbc/core/convert/Identifier.java","
values.add(new SingleIdentifierValue(k, v, v != null ? ClassUtils.getUserClass(v) : Object.class))"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/main/java/org/springframework/data/jdbc/core/convert/Identifier.java","keys.add(new SingleIdentifierValue(singleValue.getName(), value, targetType))"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/main/java/org/springframework/data/jdbc/core/convert/Identifier.java","keys.add(singleValue)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/main/java/org/springframework/data/jdbc/core/convert/Identifier.java","keys.add(new SingleIdentifierValue(name, value, targetType))"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/main/java/org/springframework/data/jdbc/core/convert/SqlParametersFactory.java","convertedIds.add(jdbcValue.getValue())"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/main/java/org/springframework/data/jdbc/core/convert/SqlGenerator.java","joinTables.add(join)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/main/java/org/springframework/data/jdbc/core/convert/SqlGenerator.java","columnExpressions.add(column)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/main/java/org/springframework/data/jdbc/core/convert/SqlGenerator.java","columnExpressions.add(table.column(keyColumn).as(keyColumn))"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/main/java/org/springframework/data/jdbc/core/convert/SqlGenerator.java","
columnNames.add(columnName)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/main/java/org/springframework/data/jdbc/core/convert/SqlGenerator.java","nonIdColumnNames.add(columnName)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/main/java/org/springframework/data/jdbc/core/convert/SqlGenerator.java","idColumnNames.add(columnName)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/main/java/org/springframework/data/jdbc/core/convert/FunctionCollector.java","exceptions.add(ex)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/main/java/org/springframework/data/jdbc/core/convert/QueryMapper.java","mappedOrder.add(order.isAscending() ? orderBy.asc() : orderBy.desc())"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/main/java/org/springframework/data/jdbc/core/convert/QueryMapper.java","mappedArguments.add(getMappedObject(argument, entity))"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/main/java/org/springframework/data/jdbc/core/convert/QueryMapper.java","
mapped.add(jdbcValue.getValue())"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/main/java/org/springframework/data/jdbc/core/convert/QueryMapper.java","
expressions.add(bind(o, sqlType, parameterSource, column.getName().getReference()))"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/main/java/org/springframework/data/jdbc/core/convert/BatchJdbcOperations.java","rowsAffected.add(ps.executeUpdate())"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/main/java/org/springframework/data/jdbc/core/convert/Jsr310TimestampBasedConverters.java","
converters.add(TimestampToLocalDateTimeConverter.INSTANCE)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/main/java/org/springframework/data/jdbc/core/convert/Jsr310TimestampBasedConverters.java","converters.add(TimestampToLocalDateConverter.INSTANCE)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/main/java/org/springframework/data/jdbc/core/convert/Jsr310TimestampBasedConverters.java","converters.add(LocalDateToTimestampConverter.INSTANCE)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/main/java/org/springframework/data/jdbc/core/convert/Jsr310TimestampBasedConverters.java","converters.add(TimestampToLocalTimeConverter.INSTANCE)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/main/java/org/springframework/data/jdbc/core/convert/Jsr310TimestampBasedConverters.java","converters.add(LocalTimeToTimestampConverter.INSTANCE)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/main/java/org/springframework/data/jdbc/core/convert/Jsr310TimestampBasedConverters.java","converters.add(TimestampToInstantConverter.INSTANCE)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/main/java/org/springframework/data/jdbc/core/convert/Jsr310TimestampBasedConverters.java","converters.add(InstantToTimestampConverter.INSTANCE)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/main/java/org/springframework/data/jdbc/core/JdbcAggregateTemplate.java","entityAndChangeCreators.add(new EntityAndChangeCreator<>(instance, changeCreatorSelectorForSave(instance)))"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/main/java/org/springframework/data/jdbc/core/JdbcAggregateTemplate.java","entityAndChangeCreators.add(entityChange)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/main/java/org/springframework/data/jdbc/core/JdbcAggregateTemplate.java","entityAndChangeCreators.add(entityChange)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/main/java/org/springframework/data/jdbc/core/JdbcAggregateTemplate.java","list.add(instance)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/main/java/org/springframework/data/jdbc/core/JdbcAggregateTemplate.java","results.add(afterExecute(batchingAggregateChange, instance))"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/main/java/org/springframework/data/jdbc/core/JdbcAggregateTemplate.java","result.add(triggerAfterConvert(e))"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/main/java/org/springframework/data/jdbc/core/JdbcAggregateChangeExecutionContext.java","// noinspection unchecked
roots.add((T) newEntity)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/main/java/org/springframework/data/jdbc/core/JdbcAggregateChangeExecutionContext.java","list.add(value)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/main/java/org/springframework/data/jdbc/core/JdbcAggregateChangeExecutionContext.java","list.add(index, value)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/main/java/org/springframework/data/jdbc/core/dialect/JdbcMySqlDialect.java","converters.add(OffsetDateTimeToTimestampJdbcValueConverter.INSTANCE)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/main/java/org/springframework/data/jdbc/core/dialect/JdbcMySqlDialect.java","converters.add(LocalDateTimeToDateConverter.INSTANCE)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/main/java/org/springframework/data/jdbc/core/dialect/JdbcSqlServerDialect.java","converters.add(DateTimeOffsetToOffsetDateTimeConverter.INSTANCE)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/main/java/org/springframework/data/jdbc/core/dialect/JdbcDb2Dialect.java","converters.add(OffsetDateTimeToTimestampConverter.INSTANCE)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/main/java/org/springframework/data/jdbc/core/dialect/JdbcDb2Dialect.java","converters.add(Jsr310TimestampBasedConverters.LocalDateTimeToTimestampConverter.INSTANCE)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/main/java/org/springframework/data/jdbc/repository/query/JdbcQueryCreator.java","joinTables.add(join)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/main/java/org/springframework/data/jdbc/repository/query/JdbcQueryCreator.java","columnExpressions.add(column)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/main/java/org/springframework/data/jdbc/repository/query/StringBasedJdbcQuery.java","
mapped.add(elementJdbcValue.getValue())"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/test/java/org/springframework/data/jdbc/core/mapping/schema/SchemaDiffUnitTests.java","table2.columns().add(newColumn)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/test/java/org/springframework/data/jdbc/core/mapping/schema/SchemaDiffUnitTests.java","delete_me.columns().add(newColumn)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/test/java/org/springframework/data/jdbc/core/mapping/schema/SchemaDiffUnitTests.java","existingTables.tables().add(delete_me)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/test/java/org/springframework/data/jdbc/core/JdbcAggregateTemplateIntegrationTests.java","chain4.chain3.add(c3)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/test/java/org/springframework/data/jdbc/core/JdbcAggregateTemplateIntegrationTests.java","c3.chain2.add(c2)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/test/java/org/springframework/data/jdbc/core/JdbcAggregateTemplateIntegrationTests.java","c2.chain1.add(c1)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/test/java/org/springframework/data/jdbc/core/JdbcAggregateTemplateIntegrationTests.java","c1.chain0.add(c0)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/test/java/org/springframework/data/jdbc/core/JdbcAggregateTemplateIntegrationTests.java","
entity.content.add(element)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/test/java/org/springframework/data/jdbc/core/JdbcAggregateTemplateIntegrationTests.java","
constructorInvocations.add(new ConstructorInvocation(id, version))"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/test/java/org/springframework/data/jdbc/core/convert/IdentifierUnitTests.java","keys.add(name.toSql(IdentifierProcessing.ANSI))"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/test/java/org/springframework/data/jdbc/core/convert/IdGeneratingInsertStrategyTest.java","keyHolder.getKeyList().add(keys)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/test/java/org/springframework/data/jdbc/core/convert/IdGeneratingInsertStrategyTest.java","keyHolder.getKeyList().add(keys)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/test/java/org/springframework/data/jdbc/core/convert/IdGeneratingInsertStrategyTest.java","keyHolder.getKeyList().add(keys)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/test/java/org/springframework/data/jdbc/core/convert/IdGeneratingBatchInsertStrategyTest.java","keyHolder.getKeyList().add(keys)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/test/java/org/springframework/data/jdbc/core/convert/IdGeneratingBatchInsertStrategyTest.java","keyHolder.getKeyList().add(keys)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/test/java/org/springframework/data/jdbc/core/convert/IdGeneratingBatchInsertStrategyTest.java","keyHolder.getKeyList().add(keys)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/test/java/org/springframework/data/jdbc/core/convert/EntityRowMapperUnitTests.java","result.add(row)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/test/java/org/springframework/data/jdbc/core/convert/EntityRowMapperUnitTests.java","
values.add(value)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/test/java/org/springframework/data/jdbc/core/convert/EntityRowMapperUnitTests.java","
values.add(values.get(values.size() - 1))"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/test/java/org/springframework/data/jdbc/core/convert/EntityRowMapperUnitTests.java","
this.columns.add(column)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/test/java/org/springframework/data/jdbc/core/convert/EntityRowMapperUnitTests.java","
expectations.add(new Expectation<T>(extractor, values.get(values.size() - 1), explainingColumn))"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/test/java/org/springframework/data/jdbc/core/convert/SqlParametersFactoryTest.java","root.dummyEntities.add(child)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/test/java/org/springframework/data/jdbc/core/AggregateChangeIdGenerationUnitTests.java","
entity.contentList.add(content)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/test/java/org/springframework/data/jdbc/core/AggregateChangeIdGenerationUnitTests.java","entity.contentList.add(content2)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/test/java/org/springframework/data/jdbc/core/AggregateChangeIdGenerationUnitTests.java","
content.tagList.add(tag1)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/test/java/org/springframework/data/jdbc/core/AggregateChangeIdGenerationUnitTests.java","content.tagList.add(tag2)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/test/java/org/springframework/data/jdbc/core/AggregateChangeIdGenerationUnitTests.java","entity.contentList.add(content)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/test/java/org/springframework/data/jdbc/core/AggregateChangeIdGenerationUnitTests.java","entity.contentList.add(content2)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/test/java/org/springframework/data/jdbc/core/AggregateChangeIdGenerationUnitTests.java","
content.tagList.add(tag1)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/test/java/org/springframework/data/jdbc/core/AggregateChangeIdGenerationUnitTests.java","content2.tagList.add(tag2)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/test/java/org/springframework/data/jdbc/core/AggregateChangeIdGenerationUnitTests.java","content2.tagList.add(tag3)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/test/java/org/springframework/data/jdbc/core/AggregateChangeIdGenerationUnitTests.java","entity.contentList.add(content)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/test/java/org/springframework/data/jdbc/core/AggregateChangeIdGenerationUnitTests.java","entity.contentList.add(content2)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/test/java/org/springframework/data/jdbc/repository/JdbcRepositoryConcurrencyIntegrationTests.java","exceptions.add(ex)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/test/java/org/springframework/data/jdbc/repository/JdbcRepositoryConcurrencyIntegrationTests.java","
concurrencyEntities.add(entity.withName(entity.getName() + i).withContent(newContent))"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/test/java/org/springframework/data/jdbc/repository/SimpleJdbcRepositoryEventsUnitTests.java","keyHolder.getKeyList().add(keys)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/test/java/org/springframework/data/jdbc/repository/SimpleJdbcRepositoryEventsUnitTests.java","events.add((RelationalEvent) o)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/test/java/org/springframework/data/jdbc/repository/JdbcRepositoryEmbeddedWithCollectionIntegrationTests.java","
embeddable.getList().add(dummyEntity21)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/test/java/org/springframework/data/jdbc/repository/JdbcRepositoryEmbeddedWithCollectionIntegrationTests.java","embeddable.getList().add(dummyEntity22)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/test/java/org/springframework/data/jdbc/repository/JdbcRepositoryResultSetExtractorIntegrationTests.java","currentPerson.getAddresses().add(new Address(addrId, rs.getString(""street"")))"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/test/java/org/springframework/data/jdbc/repository/JdbcRepositoryIntegrationTests.java","events.add(event)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/test/java/org/springframework/data/jdbc/repository/JdbcRepositoryWithListsIntegrationTests.java","entity.content.add(element1)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/test/java/org/springframework/data/jdbc/repository/JdbcRepositoryWithListsIntegrationTests.java","entity.content.add(element2)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/test/java/org/springframework/data/jdbc/repository/JdbcRepositoryWithListsIntegrationTests.java","root.intermediates.add(intermediate1)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/test/java/org/springframework/data/jdbc/repository/JdbcRepositoryWithListsIntegrationTests.java","root.intermediates.add(intermediate2)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/test/java/org/springframework/data/jdbc/repository/JdbcRepositoryWithListsIntegrationTests.java","entity.content.add(element1)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/test/java/org/springframework/data/jdbc/repository/JdbcRepositoryWithListsIntegrationTests.java","entity.content.add(element2)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/test/java/org/springframework/data/jdbc/repository/JdbcRepositoryWithListsIntegrationTests.java","entity.content.add(element1)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/test/java/org/springframework/data/jdbc/repository/JdbcRepositoryWithListsIntegrationTests.java","entity.content.add(element2)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/test/java/org/springframework/data/jdbc/repository/JdbcRepositoryWithListsIntegrationTests.java","entity.content.add(element3)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/test/java/org/springframework/data/jdbc/repository/JdbcRepositoryWithListsIntegrationTests.java","entity.content.add(element1)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-jdbc/src/test/java/org/springframework/data/jdbc/repository/JdbcRepositoryWithListsIntegrationTests.java","entity.content.add(element2)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-r2dbc/src/main/java/org/springframework/data/r2dbc/core/NamedParameterUtils.java","
parameterList.add(new ParameterHolder(parameter, i - escapes, j - escapes))"
github.com,"spring-projects/spring-data-relational",main,"spring-data-r2dbc/src/main/java/org/springframework/data/r2dbc/core/NamedParameterUtils.java","reference.add(param)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-r2dbc/src/main/java/org/springframework/data/r2dbc/core/NamedParameterUtils.java","reference.add(param)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-r2dbc/src/main/java/org/springframework/data/r2dbc/core/NamedParameterUtils.java","this.placeholders.add(bindMarker)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-r2dbc/src/main/java/org/springframework/data/r2dbc/core/NamedParameterUtils.java","markers.add(new ArrayList<>(parameter.placeholders))"
github.com,"spring-projects/spring-data-relational",main,"spring-data-r2dbc/src/main/java/org/springframework/data/r2dbc/core/DefaultStatementMapper.java","mapped.add(updateMapper.getMappedObject(expression, entity))"
github.com,"spring-projects/spring-data-relational",main,"spring-data-r2dbc/src/main/java/org/springframework/data/r2dbc/core/DefaultReactiveDataAccessStrategy.java","columnNames.add(property.getColumnName())"
github.com,"spring-projects/spring-data-relational",main,"spring-data-r2dbc/src/main/java/org/springframework/data/r2dbc/core/DefaultReactiveDataAccessStrategy.java","columnNames.add(property.getColumnName())"
github.com,"spring-projects/spring-data-relational",main,"spring-data-r2dbc/src/main/java/org/springframework/data/r2dbc/core/ParsedSql.java","this.parameterNames.add(parameterName)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-r2dbc/src/main/java/org/springframework/data/r2dbc/core/ParsedSql.java","this.parameterIndexes.add(new int[] { startIndex, endIndex })"
github.com,"spring-projects/spring-data-relational",main,"spring-data-r2dbc/src/main/java/org/springframework/data/r2dbc/convert/MappingR2dbcConverter.java","collection.add(getPotentiallyConvertedSimpleWrite(element,
		componentType != null ? componentType.getType() : Object.class))"
github.com,"spring-projects/spring-data-relational",main,"spring-data-r2dbc/src/main/java/org/springframework/data/r2dbc/convert/MappingR2dbcConverter.java","collection.add(writeCollectionInternal(asCollection(element), componentType, new ArrayList<>()))"
github.com,"spring-projects/spring-data-relational",main,"spring-data-r2dbc/src/main/java/org/springframework/data/r2dbc/convert/R2dbcConverters.java","
converters.add(RowToBooleanConverter.INSTANCE)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-r2dbc/src/main/java/org/springframework/data/r2dbc/convert/R2dbcConverters.java","converters.add(RowToNumberConverterFactory.INSTANCE)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-r2dbc/src/main/java/org/springframework/data/r2dbc/convert/R2dbcConverters.java","converters.add(RowToLocalDateConverter.INSTANCE)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-r2dbc/src/main/java/org/springframework/data/r2dbc/convert/R2dbcConverters.java","converters.add(RowToLocalDateTimeConverter.INSTANCE)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-r2dbc/src/main/java/org/springframework/data/r2dbc/convert/R2dbcConverters.java","converters.add(RowToLocalTimeConverter.INSTANCE)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-r2dbc/src/main/java/org/springframework/data/r2dbc/convert/R2dbcConverters.java","converters.add(RowToOffsetDateTimeConverter.INSTANCE)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-r2dbc/src/main/java/org/springframework/data/r2dbc/convert/R2dbcConverters.java","converters.add(RowToStringConverter.INSTANCE)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-r2dbc/src/main/java/org/springframework/data/r2dbc/convert/R2dbcConverters.java","converters.add(RowToUuidConverter.INSTANCE)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-r2dbc/src/main/java/org/springframework/data/r2dbc/convert/R2dbcConverters.java","converters.add(RowToZonedDateTimeConverter.INSTANCE)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-r2dbc/src/main/java/org/springframework/data/r2dbc/repository/query/StringBasedR2dbcQuery.java","dependencies.add(ExpressionDependencies.discover(expressionParser.parseExpression(binding.getExpression())))"
github.com,"spring-projects/spring-data-relational",main,"spring-data-r2dbc/src/main/java/org/springframework/data/r2dbc/repository/query/ExpressionQuery.java","parameterBindings.add(new ParameterBinding(parameterName, expression))"
github.com,"spring-projects/spring-data-relational",main,"spring-data-r2dbc/src/main/java/org/springframework/data/r2dbc/repository/query/R2dbcQueryCreator.java","expressions.add(column)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-r2dbc/src/main/java/org/springframework/data/r2dbc/repository/query/R2dbcParameterAccessor.java","publishers.add(ReactiveWrapperConverters.toWrapper(value, Mono.class) //
		.map(Optional::of) //
		.defaultIfEmpty(Optional.empty()) //
		.doOnNext(it -> holder.put(index, (Optional<?>) it)))"
github.com,"spring-projects/spring-data-relational",main,"spring-data-r2dbc/src/main/java/org/springframework/data/r2dbc/repository/query/R2dbcParameterAccessor.java","publishers.add(ReactiveWrapperConverters.toWrapper(value, Flux.class) //
		.collectList() //
		.doOnNext(it -> holder.put(index, Optional.of(it))))"
github.com,"spring-projects/spring-data-relational",main,"spring-data-r2dbc/src/main/java/org/springframework/data/r2dbc/query/UpdateMapper.java","result.add(assignment)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-r2dbc/src/main/java/org/springframework/data/r2dbc/query/QueryMapper.java","mappedOrder.add(
		Sort.Order.by(toSql(field.getMappedColumnName())).with(order.getNullHandling()).with(order.getDirection()))"
github.com,"spring-projects/spring-data-relational",main,"spring-data-r2dbc/src/main/java/org/springframework/data/r2dbc/query/QueryMapper.java","mappedOrder.add(order.isAscending() ? orderBy.asc() : orderBy.desc())"
github.com,"spring-projects/spring-data-relational",main,"spring-data-r2dbc/src/main/java/org/springframework/data/r2dbc/query/QueryMapper.java","mappedArguments.add(getMappedObject(argument, entity))"
github.com,"spring-projects/spring-data-relational",main,"spring-data-r2dbc/src/main/java/org/springframework/data/r2dbc/query/QueryMapper.java","expressions.add(bind(o, valueType, bindings, bindMarker))"
github.com,"spring-projects/spring-data-relational",main,"spring-data-r2dbc/src/main/java/org/springframework/data/r2dbc/dialect/PostgresDialect.java","targetPoints.add(FromPostgresPointConverter.INSTANCE.convert(sourcePoint))"
github.com,"spring-projects/spring-data-relational",main,"spring-data-r2dbc/src/main/java/org/springframework/data/r2dbc/dialect/PostgresDialect.java","targetPoints.add(ToPostgresPointConverter.INSTANCE.convert(sourcePoint))"
github.com,"spring-projects/spring-data-relational",main,"spring-data-r2dbc/src/test/java/org/springframework/data/r2dbc/core/NamedParameterUtilsTests.java","bindings.add(identifier + "": "" + value)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-r2dbc/src/test/java/org/springframework/data/r2dbc/core/NamedParameterUtilsTests.java","bindings.add(index + "": "" + value)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-r2dbc/src/test/java/org/springframework/data/r2dbc/core/R2dbcEntityTemplateUnitTests.java","values.add(value)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-r2dbc/src/test/java/org/springframework/data/r2dbc/testing/StatementRecorder.java","
createdStatements.add(statement)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-r2dbc/src/test/java/org/springframework/data/r2dbc/testing/StatementRecorder.java","executedStatements.add(this)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-r2dbc/src/test/java/org/springframework/data/r2dbc/repository/H2R2dbcRepositoryIntegrationTests.java","seenEntities.add(entity)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-relational/src/main/java/org/springframework/data/relational/repository/query/ParameterMetadataProvider.java","parameterMetadata.add(metadata)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-relational/src/main/java/org/springframework/data/relational/repository/query/RelationalExampleMapper.java","criteriaBasedOnProperties.add(includeNulls(example) //
		? Criteria.where(column).isNull().or(column).is(convPropValue).ignoreCase(ignoreCase)
		: Criteria.where(column).is(convPropValue).ignoreCase(ignoreCase))"
github.com,"spring-projects/spring-data-relational",main,"spring-data-relational/src/main/java/org/springframework/data/relational/repository/query/RelationalExampleMapper.java","criteriaBasedOnProperties.add(includeNulls(example) //
		? Criteria.where(column).isNull().or(column).like(""%"" + convPropValue).ignoreCase(ignoreCase)
		: Criteria.where(column).like(""%"" + convPropValue).ignoreCase(ignoreCase))"
github.com,"spring-projects/spring-data-relational",main,"spring-data-relational/src/main/java/org/springframework/data/relational/repository/query/RelationalExampleMapper.java","criteriaBasedOnProperties.add(includeNulls(example) //
		? Criteria.where(column).isNull().or(column).like(convPropValue + ""%"").ignoreCase(ignoreCase)
		: Criteria.where(column).like(convPropValue + ""%"").ignoreCase(ignoreCase))"
github.com,"spring-projects/spring-data-relational",main,"spring-data-relational/src/main/java/org/springframework/data/relational/repository/query/RelationalExampleMapper.java","criteriaBasedOnProperties.add(includeNulls(example) //
		? Criteria.where(column).isNull().or(column).like(""%"" + convPropValue + ""%"").ignoreCase(ignoreCase)
		: Criteria.where(column).like(""%"" + convPropValue + ""%"").ignoreCase(ignoreCase))"
github.com,"spring-projects/spring-data-relational",main,"spring-data-relational/src/main/java/org/springframework/data/relational/domain/SqlSort.java","result.add(new Order(direction, path))"
github.com,"spring-projects/spring-data-relational",main,"spring-data-relational/src/main/java/org/springframework/data/relational/domain/SqlSort.java","orders.add(new SqlOrder(direction, property))"
github.com,"spring-projects/spring-data-relational",main,"spring-data-relational/src/main/java/org/springframework/data/relational/domain/SqlSort.java","existing.add(order)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-relational/src/main/java/org/springframework/data/relational/domain/SqlSort.java","orders.add(order)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-relational/src/main/java/org/springframework/data/relational/domain/SqlSort.java","orders.add(new SqlOrder(direction, property))"
github.com,"spring-projects/spring-data-relational",main,"spring-data-relational/src/test/java/org/springframework/data/relational/core/conversion/DeleteBatchingAggregateChangeTest.java",actions::add
github.com,"spring-projects/spring-data-relational",main,"spring-data-relational/src/test/java/org/springframework/data/relational/core/conversion/BatchedActionsUnitTests.java","log.add(dbAction)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-relational/src/test/java/org/springframework/data/relational/core/conversion/RelationalEntityUpdateWriterUnitTests.java",actions::add
github.com,"spring-projects/spring-data-relational",main,"spring-data-relational/src/test/java/org/springframework/data/relational/core/conversion/SaveBatchingAggregateChangeTest.java",actions::add
github.com,"spring-projects/spring-data-relational",main,"spring-data-relational/src/test/java/org/springframework/data/relational/core/conversion/RelationalEntityDeleteWriterUnitTests.java",actions::add
github.com,"spring-projects/spring-data-relational",main,"spring-data-relational/src/test/java/org/springframework/data/relational/core/conversion/RelationalEntityWriterUnitTests.java","entity.elements.add(new Element(null))"
github.com,"spring-projects/spring-data-relational",main,"spring-data-relational/src/test/java/org/springframework/data/relational/core/conversion/RelationalEntityWriterUnitTests.java","entity.elements.add(new Element(null))"
github.com,"spring-projects/spring-data-relational",main,"spring-data-relational/src/test/java/org/springframework/data/relational/core/conversion/RelationalEntityWriterUnitTests.java","entity.elements.add(new Element(null))"
github.com,"spring-projects/spring-data-relational",main,"spring-data-relational/src/test/java/org/springframework/data/relational/core/conversion/RelationalEntityWriterUnitTests.java","listMapContainer.maps.add(new MapContainer(SOME_ENTITY_ID))"
github.com,"spring-projects/spring-data-relational",main,"spring-data-relational/src/test/java/org/springframework/data/relational/core/conversion/RelationalEntityWriterUnitTests.java","listMapContainer.maps.add(new NoIdMapContainer())"
github.com,"spring-projects/spring-data-relational",main,"spring-data-relational/src/test/java/org/springframework/data/relational/core/conversion/RelationalEntityWriterUnitTests.java","entity.primitiveLongIdEntities.add(new PrimitiveLongIdEntity())"
github.com,"spring-projects/spring-data-relational",main,"spring-data-relational/src/test/java/org/springframework/data/relational/core/conversion/RelationalEntityWriterUnitTests.java","entity.primitiveIntIdEntities.add(new PrimitiveIntIdEntity())"
github.com,"spring-projects/spring-data-relational",main,"spring-data-relational/src/test/java/org/springframework/data/relational/core/conversion/RelationalEntityWriterUnitTests.java",actions::add
github.com,"spring-projects/spring-data-relational",main,"spring-data-relational/src/test/java/org/springframework/data/relational/core/conversion/RelationalEntityInsertWriterUnitTests.java",actions::add
github.com,"spring-projects/spring-data-relational",main,"spring-data-relational/src/test/java/org/springframework/data/relational/core/mapping/event/AbstractRelationalEventListenerUnitTests.java","events.add(""beforeConvert"")"
github.com,"spring-projects/spring-data-relational",main,"spring-data-relational/src/test/java/org/springframework/data/relational/core/mapping/event/AbstractRelationalEventListenerUnitTests.java","events.add(""beforeSave"")"
github.com,"spring-projects/spring-data-relational",main,"spring-data-relational/src/test/java/org/springframework/data/relational/core/mapping/event/AbstractRelationalEventListenerUnitTests.java","events.add(""afterSave"")"
github.com,"spring-projects/spring-data-relational",main,"spring-data-relational/src/test/java/org/springframework/data/relational/core/mapping/event/AbstractRelationalEventListenerUnitTests.java","events.add(""afterConvert"")"
github.com,"spring-projects/spring-data-relational",main,"spring-data-relational/src/test/java/org/springframework/data/relational/core/mapping/event/AbstractRelationalEventListenerUnitTests.java","events.add(""afterDelete"")"
github.com,"spring-projects/spring-data-relational",main,"spring-data-relational/src/test/java/org/springframework/data/relational/core/mapping/event/AbstractRelationalEventListenerUnitTests.java","events.add(""beforeDelete"")"
github.com,"spring-projects/spring-data-relational",main,"spring-data-relational/src/test/java/org/springframework/data/relational/core/sql/render/TypedSubtreeVisitorUnitTests.java","
events.add(prefix + ""enter matched "" + segment)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-relational/src/test/java/org/springframework/data/relational/core/sql/render/TypedSubtreeVisitorUnitTests.java","
events.add(prefix + ""leave matched "" + segment)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-relational/src/test/java/org/springframework/data/relational/core/sql/render/TypedSubtreeVisitorUnitTests.java","
events.add(prefix + ""enter nested "" + segment)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-relational/src/test/java/org/springframework/data/relational/core/sql/render/TypedSubtreeVisitorUnitTests.java","
events.add(prefix + ""leave nested "" + segment)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-relational/src/test/java/org/springframework/data/relational/core/sql/CapturingVisitor.java","enter.add(segment)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-relational/src/test/java/org/springframework/data/relational/core/sql/CapturingVisitor.java","leave.add(segment)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-relational/src/test/java/org/springframework/data/relational/core/sql/ConditionsUnitTests.java",segments::add
github.com,"spring-projects/spring-data-relational",main,"spring-data-relational/src/main/java/org/springframework/data/relational/core/conversion/BasicRelationalConverter.java","mapped.add(writeValue(o, component))"
github.com,"spring-projects/spring-data-relational",main,"spring-data-relational/src/main/java/org/springframework/data/relational/core/conversion/DeleteBatchingAggregateChange.java","lockActions.add(lockRootAction)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-relational/src/main/java/org/springframework/data/relational/core/conversion/DeleteBatchingAggregateChange.java","rootActionsWithoutVersion.add(action)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-relational/src/main/java/org/springframework/data/relational/core/conversion/DeleteBatchingAggregateChange.java","rootActionsWithVersion.add(action)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-relational/src/main/java/org/springframework/data/relational/core/conversion/WritingContext.java","inserts.add(insert)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-relational/src/main/java/org/springframework/data/relational/core/conversion/WritingContext.java","deletes.add(0, deleteReferenced(path))"
github.com,"spring-projects/spring-data-relational",main,"spring-data-relational/src/main/java/org/springframework/data/relational/core/conversion/WritingContext.java","nodes.add(new PathNode(path, parentNode, value))"
github.com,"spring-projects/spring-data-relational",main,"spring-data-relational/src/main/java/org/springframework/data/relational/core/conversion/WritingContext.java","nodes.add(new PathNode(path, parentNode, Pair.of(k, v)))"
github.com,"spring-projects/spring-data-relational",main,"spring-data-relational/src/main/java/org/springframework/data/relational/core/conversion/WritingContext.java","nodes.add(new PathNode(path, parentNode, Pair.of(k, listValue.get(k))))"
github.com,"spring-projects/spring-data-relational",main,"spring-data-relational/src/main/java/org/springframework/data/relational/core/conversion/WritingContext.java","nodes.add(new PathNode(path, parentNode, v))"
github.com,"spring-projects/spring-data-relational",main,"spring-data-relational/src/main/java/org/springframework/data/relational/core/conversion/WritingContext.java","nodes.add(new PathNode(path, parentNode, v))"
github.com,"spring-projects/spring-data-relational",main,"spring-data-relational/src/main/java/org/springframework/data/relational/core/conversion/WritingContext.java","// single entity value
		nodes.add(new PathNode(path, parentNode, value))"
github.com,"spring-projects/spring-data-relational",main,"spring-data-relational/src/main/java/org/springframework/data/relational/core/conversion/BatchedActions.java","actions.add(action)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-relational/src/main/java/org/springframework/data/relational/core/conversion/BatchedActions.java","actions.add(action)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-relational/src/main/java/org/springframework/data/relational/core/conversion/DeleteAggregateChange.java","
actions.add(action)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-relational/src/main/java/org/springframework/data/relational/core/conversion/DefaultRootAggregateChange.java","
actions.add(action)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-relational/src/main/java/org/springframework/data/relational/core/conversion/SaveBatchingAggregateChange.java","rootActions.add(rootAction)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-relational/src/main/java/org/springframework/data/relational/core/conversion/SaveBatchingAggregateChange.java","// noinspection unchecked
insertRootBatchCandidates.add((DbAction.InsertRoot<T>) rootAction)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-relational/src/main/java/org/springframework/data/relational/core/conversion/SaveBatchingAggregateChange.java","rootActions.add(new DbAction.BatchInsertRoot<>(List.copyOf(insertRootBatchCandidates)))"
github.com,"spring-projects/spring-data-relational",main,"spring-data-relational/src/main/java/org/springframework/data/relational/core/conversion/RelationalEntityDeleteWriter.java","deleteReferencedActions.add(new DbAction.DeleteAll<>(p))"
github.com,"spring-projects/spring-data-relational",main,"spring-data-relational/src/main/java/org/springframework/data/relational/core/conversion/RelationalEntityDeleteWriter.java","actions.add(new DbAction.AcquireLockAllRoot<>(entityType))"
github.com,"spring-projects/spring-data-relational",main,"spring-data-relational/src/main/java/org/springframework/data/relational/core/conversion/RelationalEntityDeleteWriter.java","actions.add(result)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-relational/src/main/java/org/springframework/data/relational/core/conversion/RelationalEntityDeleteWriter.java","actions.add(new DbAction.AcquireLockRoot<>(id, aggregateChange.getEntityType()))"
github.com,"spring-projects/spring-data-relational",main,"spring-data-relational/src/main/java/org/springframework/data/relational/core/conversion/RelationalEntityDeleteWriter.java","
actions.add(new DbAction.DeleteRoot<>(id, aggregateChange.getEntityType(), aggregateChange.getPreviousVersion()))"
github.com,"spring-projects/spring-data-relational",main,"spring-data-relational/src/main/java/org/springframework/data/relational/core/conversion/RelationalEntityDeleteWriter.java","actions.add(new DbAction.Delete<>(id, p))"
github.com,"spring-projects/spring-data-relational",main,"spring-data-relational/src/main/java/org/springframework/data/relational/core/sql/DefaultUpdateBuilder.java","
this.assignments.add(assignment)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-relational/src/main/java/org/springframework/data/relational/core/sql/DefaultInsertBuilder.java","
this.columns.add(column)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-relational/src/main/java/org/springframework/data/relational/core/sql/DefaultInsertBuilder.java","
this.values.add(value)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-relational/src/main/java/org/springframework/data/relational/core/sql/DefaultSelectBuilder.java","selectList.add(expression)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-relational/src/main/java/org/springframework/data/relational/core/sql/DefaultSelectBuilder.java","from.add(table)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-relational/src/main/java/org/springframework/data/relational/core/sql/DefaultSelectBuilder.java","this.orderBy.add(OrderByField.from(column))"
github.com,"spring-projects/spring-data-relational",main,"spring-data-relational/src/main/java/org/springframework/data/relational/core/sql/DefaultSelectBuilder.java","this.joins.add(join)"
github.com,"spring-projects/spring-data-relational",main,"spring-data-relational/src/main/java/org/springframework/data/relational/core/sql/TableLike.java","columns.add(column(name))"
github.com,"spring-projects/spring-data-relational",main,"spring-data-relational/src/main/java/org/springframework/data/relational/core/sql/TableLike.java","columns.add(column(name))"
github.com,"spring-projects/spring-petclinic",main,"src/main/java/org/springframework/samples/petclinic/owner/Owner.java","getPets().add(pet)"
github.com,"spring-projects/spring-petclinic",main,"src/test/java/org/springframework/samples/petclinic/PostgresIntegrationTests.java","sources.add(enumerable)"
github.com,"spring-projects/spring-petclinic",main,"src/test/java/org/springframework/samples/petclinic/owner/PetTypeFormatterTests.java","petTypes.add(new PetType() {
	{
		setName(""Dog"");
	}
})"
github.com,"spring-projects/spring-petclinic",main,"src/test/java/org/springframework/samples/petclinic/owner/PetTypeFormatterTests.java","petTypes.add(new PetType() {
	{
		setName(""Bird"");
	}
})"
github.com,"spring-cloud/spring-cloud-netflix",main,"spring-cloud-netflix-eureka-client/src/main/java/org/springframework/cloud/netflix/eureka/http/RestTemplateTransportClientFactory.java","restTemplate.getInterceptors()
		.add(new BasicAuthenticationInterceptor(credentials[0], credentials[1]))"
github.com,"spring-cloud/spring-cloud-netflix",main,"spring-cloud-netflix-eureka-client/src/main/java/org/springframework/cloud/netflix/eureka/http/RestTemplateTransportClientFactory.java","
restTemplate.getMessageConverters().add(0, mappingJacksonHttpMessageConverter())"
github.com,"spring-cloud/spring-cloud-netflix",main,"spring-cloud-netflix-eureka-client/src/main/java/org/springframework/cloud/netflix/eureka/http/RestTemplateTransportClientFactory.java","
restTemplate.getInterceptors().add((request, body, execution) -> {
	ClientHttpResponse response = execution.execute(request, body);
	if (!response.getStatusCode().equals(HttpStatus.NOT_FOUND)) {
		return response;
	}
	return new NotFoundHttpResponse(response);
})"
github.com,"spring-cloud/spring-cloud-netflix",main,"spring-cloud-netflix-eureka-client/src/main/java/org/springframework/cloud/netflix/eureka/EurekaClientConfigBean.java","eurekaServiceUrls.add(eurekaServiceUrl.trim())"
github.com,"spring-cloud/spring-cloud-netflix",main,"spring-cloud-netflix-eureka-client/src/main/java/org/springframework/cloud/netflix/eureka/EurekaDiscoveryClient.java","instances.add(new EurekaServiceInstance(info))"
github.com,"spring-cloud/spring-cloud-netflix",main,"spring-cloud-netflix-eureka-client/src/main/java/org/springframework/cloud/netflix/eureka/EurekaDiscoveryClient.java","names.add(app.getName().toLowerCase())"
github.com,"spring-cloud/spring-cloud-netflix",main,"spring-cloud-netflix-eureka-client/src/main/java/org/springframework/cloud/netflix/eureka/config/HostnameBasedUrlRandomizer.java","urlList.add(zone)"
github.com,"spring-cloud/spring-cloud-netflix",main,"spring-cloud-netflix-eureka-client/src/main/java/org/springframework/cloud/netflix/eureka/config/EurekaConfigServerInstanceProvider.java","instances.add(new EurekaServiceInstance(info))"
github.com,"spring-cloud/spring-cloud-netflix",main,"spring-cloud-netflix-eureka-server/src/main/java/org/springframework/cloud/netflix/eureka/server/EurekaController.java","lastNCanceled.add(registeredInstance(entry.second(), entry.first()))"
github.com,"spring-cloud/spring-cloud-netflix",main,"spring-cloud-netflix-eureka-server/src/main/java/org/springframework/cloud/netflix/eureka/server/EurekaController.java","lastNRegistered.add(registeredInstance(entry.second(), entry.first()))"
github.com,"spring-cloud/spring-cloud-netflix",main,"spring-cloud-netflix-eureka-server/src/main/java/org/springframework/cloud/netflix/eureka/server/EurekaController.java","apps.add(appData)"
github.com,"spring-cloud/spring-cloud-netflix",main,"spring-cloud-netflix-eureka-server/src/main/java/org/springframework/cloud/netflix/eureka/server/EurekaController.java","list.add(new Pair<>(id, url))"
github.com,"spring-cloud/spring-cloud-netflix",main,"spring-cloud-netflix-eureka-server/src/main/java/org/springframework/cloud/netflix/eureka/server/EurekaController.java","instanceInfos.add(instanceData)"
github.com,"spring-cloud/spring-cloud-netflix",main,"spring-cloud-netflix-eureka-server/src/main/java/org/springframework/cloud/netflix/eureka/server/EurekaController.java","instances.add(instance)"
github.com,"spring-cloud/spring-cloud-netflix",main,"spring-cloud-netflix-eureka-server/src/test/java/org/springframework/cloud/netflix/eureka/server/EurekaControllerTests.java","applications.add(myapp)"
github.com,"spring-cloud/spring-cloud-netflix",main,"spring-cloud-netflix-eureka-server/src/test/java/org/springframework/cloud/netflix/eureka/server/InstanceRegistryTests.java","this.applicationEvents.add(event)"
github.com,"spring-cloud/spring-cloud-netflix",main,"spring-cloud-netflix-eureka-client-tls-tests/src/test/java/org/springframework/cloud/netflix/eureka/AppRunner.java","result.add(String.format(""%s=%s"", key, value))"
github.com,"spring-projects/spring-graphql",main,"spring-graphql-test/src/main/java/org/springframework/graphql/test/tester/DefaultExecutionGraphQlServiceTesterBuilder.java","
this.executionInputConfigurers.add(configurer)"
github.com,"spring-projects/spring-graphql",main,"spring-graphql/src/main/java/org/springframework/graphql/data/method/HandlerMethod.java","parameterAnnotations.add(candidate.getParameterAnnotations())"
github.com,"spring-projects/spring-graphql",main,"spring-graphql/src/main/java/org/springframework/graphql/data/method/HandlerMethod.java","merged.add(adaptAnnotation(paramAnn))"
github.com,"spring-projects/spring-graphql",main,"spring-graphql/src/main/java/org/springframework/graphql/data/method/HandlerMethodArgumentResolverComposite.java","this.argumentResolvers.add(resolver)"
github.com,"spring-projects/spring-graphql",main,"spring-graphql/src/main/java/org/springframework/graphql/data/method/InvocableHandlerMethodSupport.java","monoList.add(argMono.defaultIfEmpty(NO_VALUE))"
github.com,"spring-projects/spring-graphql",main,"spring-graphql/src/main/java/org/springframework/graphql/data/method/annotation/support/SchemaMappingBeanFactoryInitializationAotProcessor.java","controllers.add(beanClass)"
github.com,"spring-projects/spring-graphql",main,"spring-graphql/src/main/java/org/springframework/graphql/data/method/annotation/support/SchemaMappingBeanFactoryInitializationAotProcessor.java","controllerAdvices.add(beanClass)"
github.com,"spring-projects/spring-graphql",main,"spring-graphql/src/main/java/org/springframework/graphql/data/method/annotation/support/AnnotatedControllerConfigurer.java","this.customArgumentResolvers.add(resolver)"
github.com,"spring-projects/spring-graphql",main,"spring-graphql/src/main/java/org/springframework/graphql/data/method/annotation/support/AnnotatedControllerExceptionResolver.java","exceptionTypes.add((Class<? extends Throwable>) parameterType)"
github.com,"spring-projects/spring-graphql",main,"spring-graphql/src/main/java/org/springframework/graphql/data/method/annotation/support/AnnotatedControllerExceptionResolver.java","exceptions.add(exToExpose)"
github.com,"spring-projects/spring-graphql",main,"spring-graphql/src/main/java/org/springframework/graphql/data/method/annotation/support/AnnotatedControllerExceptionResolver.java","matches.add(mappedException)"
github.com,"spring-projects/spring-graphql",main,"spring-graphql/src/main/java/org/springframework/graphql/data/pagination/ConnectionFieldTypeVisitor.java","edges.add(new DefaultEdge<>(node, new DefaultConnectionCursor(cursor)))"
github.com,"spring-projects/spring-graphql",main,"spring-graphql/src/main/java/org/springframework/graphql/data/query/AbstractSortStrategy.java","sortOrders.add(new Sort.Order(direction, property))"
github.com,"spring-projects/spring-graphql",main,"spring-graphql/src/main/java/org/springframework/graphql/data/query/AutoRegistrationRuntimeWiringConfigurer.java","container.add(new AutoRegistrationWiringFactory(builder))"
github.com,"spring-projects/spring-graphql",main,"spring-graphql/src/main/java/org/springframework/graphql/data/query/PropertySelection.java","selectedFields.add(selectedField)"
github.com,"spring-projects/spring-graphql",main,"spring-graphql/src/main/java/org/springframework/graphql/support/AbstractGraphQlResponse.java","dataPath.add(readingIndex ? Integer.parseInt(token) : token)"
github.com,"spring-projects/spring-graphql",main,"spring-graphql/src/main/java/org/springframework/graphql/support/DefaultExecutionGraphQlRequest.java","this.executionInputConfigurers.add(configurer)"
github.com,"spring-projects/spring-graphql",main,"spring-graphql/src/main/java/org/springframework/graphql/execution/DefaultExecutionGraphQlService.java","this.dataLoaderRegistrars.add(registrar)"
github.com,"spring-projects/spring-graphql",main,"spring-graphql/src/main/java/org/springframework/graphql/execution/DefaultSchemaResourceGraphQlSourceBuilder.java","this.typeDefinitionConfigurers.add(configurer)"
github.com,"spring-projects/spring-graphql",main,"spring-graphql/src/main/java/org/springframework/graphql/execution/DefaultSchemaResourceGraphQlSourceBuilder.java","this.runtimeWiringConfigurers.add(configurer)"
github.com,"spring-projects/spring-graphql",main,"spring-graphql/src/main/java/org/springframework/graphql/execution/DefaultSchemaResourceGraphQlSourceBuilder.java","factories.add(factory)"
github.com,"spring-projects/spring-graphql",main,"spring-graphql/src/main/java/org/springframework/graphql/execution/SchemaMappingInspector.java","this.unmappedFields.add(coordinates)"
github.com,"spring-projects/spring-graphql",main,"spring-graphql/src/main/java/org/springframework/graphql/execution/SchemaMappingInspector.java","this.skippedTypes.add(new DefaultSkippedType(type, coordinates))"
github.com,"spring-projects/spring-graphql",main,"spring-graphql/src/main/java/org/springframework/graphql/execution/SchemaMappingInspector.java","fields.add(coordinates.getFieldName())"
github.com,"spring-projects/spring-graphql",main,"spring-graphql/src/main/java/org/springframework/graphql/execution/AbstractGraphQlSourceBuilder.java","visitorsToUse.add(ContextDataFetcherDecorator.createVisitor(this.subscriptionExceptionResolvers))"
github.com,"spring-projects/spring-graphql",main,"spring-graphql/src/main/java/org/springframework/graphql/execution/DefaultBatchLoaderRegistry.java","DefaultBatchLoaderRegistry.this.loaders.add(
		new ReactorBatchLoader<>(initName(), loader, initOptionsSupplier()))"
github.com,"spring-projects/spring-graphql",main,"spring-graphql/src/main/java/org/springframework/graphql/execution/DefaultBatchLoaderRegistry.java","DefaultBatchLoaderRegistry.this.mappedLoaders.add(
		new ReactorMappedBatchLoader<>(initName(), loader, initOptionsSupplier()))"
github.com,"spring-projects/spring-graphql",main,"spring-graphql/src/test/java/org/springframework/graphql/data/method/annotation/support/BatchMappingDetectionTests.java","this.batchSizes.add(bookIds.size())"
github.com,"spring-projects/spring-graphql",main,"spring-graphql/src/test/java/org/springframework/graphql/data/GraphQlArgumentBinderTests.java","this.items.add(item)"
github.com,"spring-projects/spring-graphql",main,"spring-graphql/src/test/java/org/springframework/graphql/server/webmvc/GraphQlWebSocketHandlerTests.java","messages.add(decode(message))"
github.com,"spring-projects/spring-graphql",main,"spring-graphql/src/test/java/org/springframework/graphql/server/webflux/GraphQlWebSocketHandlerTests.java","messages.add(decode(message))"
github.com,"spring-projects/spring-graphql",main,"spring-graphql/src/test/java/org/springframework/graphql/client/GraphQlClientBuilderTests.java","interceptors.add(0, changingInterceptor)"
github.com,"spring-projects/spring-graphql",main,"spring-graphql/src/test/java/org/springframework/graphql/execution/DefaultSchemaResourceGraphQlSourceBuilderTests.java","container.add(new DataFetcherWiringFactory(""q1"", dataFetcher1))"
github.com,"spring-projects/spring-graphql",main,"spring-graphql/src/test/java/org/springframework/graphql/execution/DefaultSchemaResourceGraphQlSourceBuilderTests.java","container.add(new DataFetcherWiringFactory(""q2"", dataFetcher2))"
github.com,"spring-projects/spring-graphql",main,"spring-graphql/src/test/java/org/springframework/graphql/execution/DefaultSchemaResourceGraphQlSourceBuilderTests.java","container.add(new DataFetcherWiringFactory(""q2"", dataFetcher2))"
github.com,"spring-projects/spring-graphql",main,"spring-graphql/src/testFixtures/java/org/springframework/graphql/client/TestWebSocketClient.java","this.connections.add(connection)"
github.com,"spring-cloud/spring-cloud-gateway",main,"spring-cloud-gateway-server-mvc/src/main/java/org/springframework/cloud/gateway/server/mvc/filter/ForwardedRequestHeadersFilter.java","forwardeds.add(forwarded)"
github.com,"spring-cloud/spring-cloud-gateway",main,"spring-cloud-gateway-server-mvc/src/main/java/org/springframework/cloud/gateway/server/mvc/filter/BeforeFilterFunctions.java","list.add(throwable)"
github.com,"spring-cloud/spring-cloud-gateway",main,"spring-cloud-gateway-server-mvc/src/main/java/org/springframework/cloud/gateway/server/mvc/filter/WeightCalculatorFilter.java","
config.ranges.add(0.0)"
github.com,"spring-cloud/spring-cloud-gateway",main,"spring-cloud-gateway-server-mvc/src/main/java/org/springframework/cloud/gateway/server/mvc/filter/WeightCalculatorFilter.java","config.ranges.add(range)"
github.com,"spring-cloud/spring-cloud-gateway",main,"spring-cloud-gateway-server-mvc/src/main/java/org/springframework/cloud/gateway/server/mvc/invoke/reflect/OperationMethodParameters.java","operationParameters.add(new OperationMethodParameter(names[i], parameters[i]))"
github.com,"spring-cloud/spring-cloud-gateway",main,"spring-cloud-gateway-server-mvc/src/main/java/org/springframework/cloud/gateway/server/mvc/handler/GatewayErrorHandlingServerResponse.java","this.errorHandlers.add(new ErrorHandler<>(predicate, errorHandler))"
github.com,"spring-cloud/spring-cloud-gateway",main,"spring-cloud-gateway-server-mvc/src/main/java/org/springframework/cloud/gateway/server/mvc/handler/ProxyExchange.java","responseConsumers.add(responseConsumer)"
github.com,"spring-cloud/spring-cloud-gateway",main,"spring-cloud-gateway-server-mvc/src/main/java/org/springframework/cloud/gateway/server/mvc/config/RouteProperties.java","this.predicates.add(new PredicateProperties(args[i]))"
github.com,"spring-cloud/spring-cloud-gateway",main,"spring-cloud-gateway-server-mvc/src/test/java/org/springframework/cloud/gateway/server/mvc/filter/ForwardedRequestHeadersFilterTests.java","expectedFor.add(Arrays.asList(map(""for"", ""\""_gazonk\"""")))"
github.com,"spring-cloud/spring-cloud-gateway",main,"spring-cloud-gateway-server-mvc/src/test/java/org/springframework/cloud/gateway/server/mvc/filter/ForwardedRequestHeadersFilterTests.java","expectedFor.add(Arrays.asList(map(""for"", ""192.0.2.60"", ""proto"", ""http"", ""by"", ""203.0.113.43"")))"
github.com,"spring-cloud/spring-cloud-gateway",main,"spring-cloud-gateway-server-mvc/src/test/java/org/springframework/cloud/gateway/server/mvc/filter/ForwardedRequestHeadersFilterTests.java","expectedFor.add(Arrays.asList(map(""for"", ""192.0.2.43""), map(""for"", ""198.51.100.17"")))"
github.com,"spring-cloud/spring-cloud-gateway",main,"spring-cloud-gateway-server-mvc/src/test/java/org/springframework/cloud/gateway/server/mvc/filter/ForwardedRequestHeadersFilterTests.java","expectedFor.add(Arrays.asList(map(""for"", ""12.34.56.78"", ""host"", ""example.com"", ""proto"", ""https""),
		map(""for"", ""23.45.67.89"")))"
github.com,"spring-cloud/spring-cloud-gateway",main,"spring-cloud-gateway-server-mvc/src/test/java/org/springframework/cloud/gateway/server/mvc/filter/ForwardedRequestHeadersFilterTests.java","expectedFor.add(Arrays.asList(map(""for"", ""12.34.56.78""), map(""for"", ""23.45.67.89"", ""secret"", ""egah2CGj55fSJFs""),
		map(""for"", ""10.1.2.3"")))"
github.com,"spring-cloud/spring-cloud-gateway",main,"spring-cloud-gateway-server-mvc/src/test/java/org/springframework/cloud/gateway/server/mvc/filter/ForwardedRequestHeadersFilterTests.java","expectedFor.add(Arrays.asList(map(""for"", ""\""[2001:db8:cafe::17]:4711\"""")))"
github.com,"spring-cloud/spring-cloud-gateway",main,"spring-cloud-gateway-server/src/main/java/org/springframework/cloud/gateway/discovery/DiscoveryClientRouteDefinitionLocator.java","routeDefinition.getPredicates().add(predicate)"
github.com,"spring-cloud/spring-cloud-gateway",main,"spring-cloud-gateway-server/src/main/java/org/springframework/cloud/gateway/discovery/DiscoveryClientRouteDefinitionLocator.java","routeDefinition.getFilters().add(filter)"
github.com,"spring-cloud/spring-cloud-gateway",main,"spring-cloud-gateway-server/src/main/java/org/springframework/cloud/gateway/discovery/GatewayDiscoveryClientAutoConfiguration.java","definitions.add(predicate)"
github.com,"spring-cloud/spring-cloud-gateway",main,"spring-cloud-gateway-server/src/main/java/org/springframework/cloud/gateway/discovery/GatewayDiscoveryClientAutoConfiguration.java","definitions.add(filter)"
github.com,"spring-cloud/spring-cloud-gateway",main,"spring-cloud-gateway-server/src/main/java/org/springframework/cloud/gateway/filter/headers/ForwardedHeadersFilter.java","forwardeds.add(forwarded)"
github.com,"spring-cloud/spring-cloud-gateway",main,"spring-cloud-gateway-server/src/main/java/org/springframework/cloud/gateway/filter/WebsocketRoutingFilter.java","
// remove host header unless specifically asked not to
headersFilters.add((headers, exchange) -> {
	HttpHeaders filtered = new HttpHeaders();
	filtered.addAll(headers);
	filtered.remove(HttpHeaders.HOST);
	boolean preserveHost = exchange.getAttributeOrDefault(PRESERVE_HOST_HEADER_ATTRIBUTE, false);
	if (preserveHost) {
		String host = exchange.getRequest().getHeaders().getFirst(HttpHeaders.HOST);
		filtered.add(HttpHeaders.HOST, host);
	}
	return filtered;
})"
github.com,"spring-cloud/spring-cloud-gateway",main,"spring-cloud-gateway-server/src/main/java/org/springframework/cloud/gateway/filter/WebsocketRoutingFilter.java","
headersFilters.add((headers, exchange) -> {
	HttpHeaders filtered = new HttpHeaders();
	for (Map.Entry<String, List<String>> entry : headers.entrySet()) {
		if (!entry.getKey().toLowerCase().startsWith(""sec-websocket"")) {
			filtered.addAll(entry.getKey(), entry.getValue());
		}
	}
	return filtered;
})"
github.com,"spring-cloud/spring-cloud-gateway",main,"spring-cloud-gateway-server/src/main/java/org/springframework/cloud/gateway/filter/LoadBalancerServiceInstanceCookieFilter.java","cookieHeaders.add(serviceInstanceCookie)"
github.com,"spring-cloud/spring-cloud-gateway",main,"spring-cloud-gateway-server/src/main/java/org/springframework/cloud/gateway/filter/factory/FallbackHeadersGatewayFilterFactory.java","list.add(throwable)"
github.com,"spring-cloud/spring-cloud-gateway",main,"spring-cloud-gateway-server/src/main/java/org/springframework/cloud/gateway/filter/factory/AddRequestHeadersIfNotPresentGatewayFilterFactory.java","candidateValue.add(keyValue.getValue())"
github.com,"spring-cloud/spring-cloud-gateway",main,"spring-cloud-gateway-server/src/main/java/org/springframework/cloud/gateway/filter/factory/AddRequestHeadersIfNotPresentGatewayFilterFactory.java","candidateValue.add(keyValue.getValue())"
github.com,"spring-cloud/spring-cloud-gateway",main,"spring-cloud-gateway-server/src/main/java/org/springframework/cloud/gateway/filter/factory/cache/postprocessor/SetMaxAgeHeaderAfterCacheExchangeMutator.java","replacedCacheControlHeaders.add(value)"
github.com,"spring-cloud/spring-cloud-gateway",main,"spring-cloud-gateway-server/src/main/java/org/springframework/cloud/gateway/filter/factory/cache/CachedResponse.java","this.body.add(byteBuffer)"
github.com,"spring-cloud/spring-cloud-gateway",main,"spring-cloud-gateway-server/src/main/java/org/springframework/cloud/gateway/filter/factory/RewriteResponseHeaderGatewayFilterFactory.java","rewrittenHeaders.add(rewriten)"
github.com,"spring-cloud/spring-cloud-gateway",main,"spring-cloud-gateway-server/src/main/java/org/springframework/cloud/gateway/filter/WeightCalculatorWebFilter.java","
config.ranges.add(0.0)"
github.com,"spring-cloud/spring-cloud-gateway",main,"spring-cloud-gateway-server/src/main/java/org/springframework/cloud/gateway/filter/WeightCalculatorWebFilter.java","config.ranges.add(range)"
github.com,"spring-cloud/spring-cloud-gateway",main,"spring-cloud-gateway-server/src/main/java/org/springframework/cloud/gateway/actuate/GatewayLegacyControllerEndpoint.java","filters.add(filter.toString())"
github.com,"spring-cloud/spring-cloud-gateway",main,"spring-cloud-gateway-server/src/main/java/org/springframework/cloud/gateway/actuate/GatewayLegacyControllerEndpoint.java","allRoutes.add(r)"
github.com,"spring-cloud/spring-cloud-gateway",main,"spring-cloud-gateway-server/src/main/java/org/springframework/cloud/gateway/actuate/GatewayControllerEndpoint.java","filters.add(gatewayFilter.toString())"
github.com,"spring-cloud/spring-cloud-gateway",main,"spring-cloud-gateway-server/src/main/java/org/springframework/cloud/gateway/handler/predicate/PathRoutePredicateFactory.java","pathPatterns.add(pathPattern)"
github.com,"spring-cloud/spring-cloud-gateway",main,"spring-cloud-gateway-server/src/main/java/org/springframework/cloud/gateway/handler/predicate/RemoteAddrRoutePredicateFactory.java","
sources.add(new IpSubnetFilterRule(ipAddress, cidrPrefix, IpFilterRuleType.ACCEPT))"
github.com,"spring-cloud/spring-cloud-gateway",main,"spring-cloud-gateway-server/src/main/java/org/springframework/cloud/gateway/route/RouteDefinition.java","this.predicates.add(new PredicateDefinition(args[i]))"
github.com,"spring-cloud/spring-cloud-gateway",main,"spring-cloud-gateway-server/src/main/java/org/springframework/cloud/gateway/route/builder/RouteLocatorBuilder.java","routes.add(route)"
github.com,"spring-cloud/spring-cloud-gateway",main,"spring-cloud-gateway-server/src/main/java/org/springframework/cloud/gateway/route/RouteDefinitionRouteLocator.java","ordered.add(gatewayFilter)"
github.com,"spring-cloud/spring-cloud-gateway",main,"spring-cloud-gateway-server/src/main/java/org/springframework/cloud/gateway/route/RouteDefinitionRouteLocator.java","ordered.add(new OrderedGatewayFilter(gatewayFilter, i + 1))"
github.com,"spring-cloud/spring-cloud-gateway",main,"spring-cloud-gateway-server/src/main/java/org/springframework/cloud/gateway/route/Route.java","this.gatewayFilters.add(gatewayFilter)"
github.com,"spring-cloud/spring-cloud-gateway",main,"spring-cloud-gateway-server/src/test/java/org/springframework/cloud/gateway/filter/headers/ForwardedHeadersFilterTests.java","expectedFor.add(Arrays.asList(map(""for"", ""\""_gazonk\"""")))"
github.com,"spring-cloud/spring-cloud-gateway",main,"spring-cloud-gateway-server/src/test/java/org/springframework/cloud/gateway/filter/headers/ForwardedHeadersFilterTests.java","expectedFor.add(Arrays.asList(map(""for"", ""192.0.2.60"", ""proto"", ""http"", ""by"", ""203.0.113.43"")))"
github.com,"spring-cloud/spring-cloud-gateway",main,"spring-cloud-gateway-server/src/test/java/org/springframework/cloud/gateway/filter/headers/ForwardedHeadersFilterTests.java","expectedFor.add(Arrays.asList(map(""for"", ""192.0.2.43""), map(""for"", ""198.51.100.17"")))"
github.com,"spring-cloud/spring-cloud-gateway",main,"spring-cloud-gateway-server/src/test/java/org/springframework/cloud/gateway/filter/headers/ForwardedHeadersFilterTests.java","expectedFor.add(Arrays.asList(map(""for"", ""12.34.56.78"", ""host"", ""example.com"", ""proto"", ""https""),
		map(""for"", ""23.45.67.89"")))"
github.com,"spring-cloud/spring-cloud-gateway",main,"spring-cloud-gateway-server/src/test/java/org/springframework/cloud/gateway/filter/headers/ForwardedHeadersFilterTests.java","expectedFor.add(Arrays.asList(map(""for"", ""12.34.56.78""), map(""for"", ""23.45.67.89"", ""secret"", ""egah2CGj55fSJFs""),
		map(""for"", ""10.1.2.3"")))"
github.com,"spring-cloud/spring-cloud-gateway",main,"spring-cloud-gateway-server/src/test/java/org/springframework/cloud/gateway/filter/headers/ForwardedHeadersFilterTests.java","expectedFor.add(Arrays.asList(map(""for"", ""\""[2001:db8:cafe::17]:4711\"""")))"
github.com,"spring-cloud/spring-cloud-gateway",main,"spring-cloud-gateway-server/src/test/java/org/springframework/cloud/gateway/filter/factory/cache/CacheKeyGeneratorTest.java","exceptions.add(e)"
github.com,"spring-cloud/spring-cloud-gateway",main,"spring-cloud-gateway-server/src/test/java/org/springframework/cloud/gateway/handler/predicate/PathRoutePredicatePathContainerAttrBenchMarkTests.java","predicates.add(predicate)"
github.com,"spring-cloud/spring-cloud-gateway",main,"spring-cloud-gateway-server/src/test/java/org/springframework/cloud/gateway/handler/predicate/GatewayPredicateVisitorTests.java","configs.add(p.getConfig())"
github.com,"spring-cloud/spring-cloud-gateway",main,"spring-cloud-gateway-server/src/test/java/org/springframework/cloud/gateway/handler/predicate/GatewayPredicateVisitorTests.java","configs.add(p.getConfig())"
github.com,"spring-cloud/spring-cloud-gateway",main,"spring-cloud-gateway-server/src/test/java/org/springframework/cloud/gateway/route/CachingRouteLocatorTests.java","resultEvents.add((RefreshRoutesResultEvent) o)"
github.com,"spring-cloud/spring-cloud-gateway",main,"spring-cloud-gateway-mvc/src/main/java/org/springframework/cloud/gateway/mvc/ProxyExchange.java",headerNames::add
github.com,"spring-cloud/spring-cloud-gateway",main,"spring-cloud-gateway-mvc/src/main/java/org/springframework/cloud/gateway/mvc/config/ProxyResponseAutoConfiguration.java","template.getMessageConverters().add(new ByteArrayHttpMessageConverter() {
	@Override
	public boolean supports(Class<?> clazz) {
		return true;
	}
})"
github.com,"spring-cloud/spring-cloud-gateway",main,"spring-cloud-gateway-mvc/src/main/java/org/springframework/cloud/gateway/mvc/config/ProxyResponseAutoConfiguration.java","argumentResolvers.add(context.getBean(ProxyExchangeArgumentResolver.class))"
github.com,"spring-cloud/spring-cloud-gateway",main,"spring-cloud-gateway-mvc/src/test/java/org/springframework/cloud/gateway/mvc/GetWithBodyRequestTests.java","template.getMessageConverters().add(new ByteArrayHttpMessageConverter() {
	@Override
	public boolean supports(Class<?> clazz) {
		return true;
	}
})"
github.com,"spring-projects/spring-integration",main,"spring-integration-sftp/src/main/java/org/springframework/integration/sftp/inbound/SftpStreamingMessageSource.java","canonicalFiles.add(new SftpFileInfo(file))"
github.com,"spring-projects/spring-integration",main,"spring-integration-sftp/src/main/java/org/springframework/integration/sftp/session/ResourceKnownHostsServerKeyVerifier.java","keys.add(new KnownHostsServerKeyVerifier.HostEntryPair(entry, resolveHostKey(entry)))"
github.com,"spring-projects/spring-integration",main,"spring-integration-sftp/src/main/java/org/springframework/integration/sftp/session/ResourceKnownHostsServerKeyVerifier.java","matches.add(match)"
github.com,"spring-projects/spring-integration",main,"spring-integration-sftp/src/test/java/org/springframework/integration/sftp/inbound/SftpInboundRemoteFileSystemSynchronizerTests.java","filters.add(persistFilter)"
github.com,"spring-projects/spring-integration",main,"spring-integration-sftp/src/test/java/org/springframework/integration/sftp/inbound/SftpInboundRemoteFileSystemSynchronizerTests.java","filters.add(patternFilter)"
github.com,"spring-projects/spring-integration",main,"spring-integration-sftp/src/test/java/org/springframework/integration/sftp/outbound/SftpOutboundTests.java","madeDirs.add(invocation.getArgument(0))"
github.com,"spring-projects/spring-integration",main,"spring-integration-sftp/src/test/java/org/springframework/integration/sftp/outbound/SftpServerOutboundTests.java","this.events.add((ApacheMinaSftpEvent) msg.getPayload())"
github.com,"spring-projects/spring-integration",main,"spring-integration-sftp/src/test/java/org/springframework/integration/sftp/session/SftpSessionFactoryTests.java","concurrentSessions.add(sftpSessionFactory.getSession())"
github.com,"spring-projects/spring-integration",main,"spring-integration-jms/src/test/java/org/springframework/integration/jms/JmsOutboundGatewayTests.java","errors.add(t)"
github.com,"spring-projects/spring-integration",main,"spring-integration-jms/src/test/java/org/springframework/integration/jms/SubscribableJmsChannelTests.java","receivedList1.add(message)"
github.com,"spring-projects/spring-integration",main,"spring-integration-jms/src/test/java/org/springframework/integration/jms/SubscribableJmsChannelTests.java","receivedList2.add(message)"
github.com,"spring-projects/spring-integration",main,"spring-integration-jms/src/test/java/org/springframework/integration/jms/SubscribableJmsChannelTests.java","receivedList1.add(message)"
github.com,"spring-projects/spring-integration",main,"spring-integration-jms/src/test/java/org/springframework/integration/jms/SubscribableJmsChannelTests.java","receivedList2.add(message)"
github.com,"spring-projects/spring-integration",main,"spring-integration-jms/src/test/java/org/springframework/integration/jms/SubscribableJmsChannelTests.java","receivedList1.add(message)"
github.com,"spring-projects/spring-integration",main,"spring-integration-jms/src/test/java/org/springframework/integration/jms/SubscribableJmsChannelTests.java","receivedList2.add(message)"
github.com,"spring-projects/spring-integration",main,"spring-integration-jms/src/test/java/org/springframework/integration/jms/SubscribableJmsChannelTests.java","receivedList1.add(message)"
github.com,"spring-projects/spring-integration",main,"spring-integration-jms/src/test/java/org/springframework/integration/jms/SubscribableJmsChannelTests.java","receivedList2.add(message)"
github.com,"spring-projects/spring-integration",main,"spring-integration-jms/src/test/java/org/springframework/integration/jms/SubscribableJmsChannelTests.java","logList.add(message)"
github.com,"spring-projects/spring-integration",main,"spring-integration-jms/src/test/java/org/springframework/integration/jms/PollableJmsChannelTests.java","interceptorList.add(interceptor)"
github.com,"spring-projects/spring-integration",main,"spring-integration-jms/src/test/java/org/springframework/integration/jms/PollableJmsChannelTests.java","interceptorList.add(interceptor)"
github.com,"spring-projects/spring-integration",main,"spring-integration-jms/src/test/java/org/springframework/integration/jms/config/JmsMessageHistoryTests.java","history.add(historyEvent)"
github.com,"spring-projects/spring-integration",main,"spring-integration-test/src/main/java/org/springframework/integration/test/mock/MockMessageHandler.java","this.messageFunctions.add(this.lastFunction)"
github.com,"spring-projects/spring-integration",main,"spring-integration-test/src/main/java/org/springframework/integration/test/mock/MockMessageHandler.java","this.messageFunctions.add(this.lastFunction)"
github.com,"spring-projects/spring-integration",main,"spring-integration-test/src/main/java/org/springframework/integration/test/mock/MockIntegration.java","messages.add(new GenericMessage<>(p))"
github.com,"spring-projects/spring-integration",main,"spring-integration-test/src/main/java/org/springframework/integration/test/context/MockIntegrationContext.java","this.autoStartupCandidates.add(endpoint)"
github.com,"spring-projects/spring-integration",main,"spring-integration-amqp/src/main/java/org/springframework/integration/amqp/inbound/AmqpMessageSource.java","payloads
					.add(this.messageConverter.fromMessage(fragment))"
github.com,"spring-projects/spring-integration",main,"spring-integration-amqp/src/main/java/org/springframework/integration/amqp/inbound/AmqpInboundChannelAdapter.java","payloads.add(this.converter.fromMessage(fragment))"
github.com,"spring-projects/spring-integration",main,"spring-integration-amqp/src/main/java/org/springframework/integration/amqp/inbound/AmqpInboundChannelAdapter.java","listHeaders.add(AmqpInboundChannelAdapter.this.headerMapper
						.toHeadersFromRequest(msg.getMessageProperties()))"
github.com,"spring-projects/spring-integration",main,"spring-integration-amqp/src/main/java/org/springframework/integration/amqp/inbound/AmqpInboundChannelAdapter.java","converted.add(createMessageFromAmqp(message, channel))"
github.com,"spring-projects/spring-integration",main,"spring-integration-amqp/src/main/java/org/springframework/integration/amqp/inbound/AmqpInboundChannelAdapter.java","converted.add(this.converter.fromMessage(message))"
github.com,"spring-projects/spring-integration",main,"spring-integration-amqp/src/main/java/org/springframework/integration/amqp/inbound/AmqpInboundGateway.java","payloads
						.add(AmqpInboundGateway.this.amqpMessageConverter.fromMessage(fragment))"
github.com,"spring-projects/spring-integration",main,"spring-integration-amqp/src/main/java/org/springframework/integration/amqp/support/DefaultAmqpHeaderMapper.java","STANDARD_HEADER_NAMES.add(AmqpHeaders.APP_ID)"
github.com,"spring-projects/spring-integration",main,"spring-integration-amqp/src/main/java/org/springframework/integration/amqp/support/DefaultAmqpHeaderMapper.java","STANDARD_HEADER_NAMES.add(AmqpHeaders.CLUSTER_ID)"
github.com,"spring-projects/spring-integration",main,"spring-integration-amqp/src/main/java/org/springframework/integration/amqp/support/DefaultAmqpHeaderMapper.java","STANDARD_HEADER_NAMES.add(AmqpHeaders.CONTENT_ENCODING)"
github.com,"spring-projects/spring-integration",main,"spring-integration-amqp/src/main/java/org/springframework/integration/amqp/support/DefaultAmqpHeaderMapper.java","STANDARD_HEADER_NAMES.add(AmqpHeaders.CONTENT_LENGTH)"
github.com,"spring-projects/spring-integration",main,"spring-integration-amqp/src/main/java/org/springframework/integration/amqp/support/DefaultAmqpHeaderMapper.java","STANDARD_HEADER_NAMES.add(AmqpHeaders.CONTENT_TYPE)"
github.com,"spring-projects/spring-integration",main,"spring-integration-amqp/src/main/java/org/springframework/integration/amqp/support/DefaultAmqpHeaderMapper.java","STANDARD_HEADER_NAMES.add(AmqpHeaders.CORRELATION_ID)"
github.com,"spring-projects/spring-integration",main,"spring-integration-amqp/src/main/java/org/springframework/integration/amqp/support/DefaultAmqpHeaderMapper.java","STANDARD_HEADER_NAMES.add(AmqpHeaders.DELAY)"
github.com,"spring-projects/spring-integration",main,"spring-integration-amqp/src/main/java/org/springframework/integration/amqp/support/DefaultAmqpHeaderMapper.java","STANDARD_HEADER_NAMES.add(AmqpHeaders.DELIVERY_MODE)"
github.com,"spring-projects/spring-integration",main,"spring-integration-amqp/src/main/java/org/springframework/integration/amqp/support/DefaultAmqpHeaderMapper.java","STANDARD_HEADER_NAMES.add(AmqpHeaders.DELIVERY_TAG)"
github.com,"spring-projects/spring-integration",main,"spring-integration-amqp/src/main/java/org/springframework/integration/amqp/support/DefaultAmqpHeaderMapper.java","STANDARD_HEADER_NAMES.add(AmqpHeaders.EXPIRATION)"
github.com,"spring-projects/spring-integration",main,"spring-integration-amqp/src/main/java/org/springframework/integration/amqp/support/DefaultAmqpHeaderMapper.java","STANDARD_HEADER_NAMES.add(AmqpHeaders.MESSAGE_COUNT)"
github.com,"spring-projects/spring-integration",main,"spring-integration-amqp/src/main/java/org/springframework/integration/amqp/support/DefaultAmqpHeaderMapper.java","STANDARD_HEADER_NAMES.add(AmqpHeaders.MESSAGE_ID)"
github.com,"spring-projects/spring-integration",main,"spring-integration-amqp/src/main/java/org/springframework/integration/amqp/support/DefaultAmqpHeaderMapper.java","STANDARD_HEADER_NAMES.add(AmqpHeaders.RECEIVED_DELAY)"
github.com,"spring-projects/spring-integration",main,"spring-integration-amqp/src/main/java/org/springframework/integration/amqp/support/DefaultAmqpHeaderMapper.java","STANDARD_HEADER_NAMES.add(AmqpHeaders.RECEIVED_DELIVERY_MODE)"
github.com,"spring-projects/spring-integration",main,"spring-integration-amqp/src/main/java/org/springframework/integration/amqp/support/DefaultAmqpHeaderMapper.java","STANDARD_HEADER_NAMES.add(AmqpHeaders.RECEIVED_EXCHANGE)"
github.com,"spring-projects/spring-integration",main,"spring-integration-amqp/src/main/java/org/springframework/integration/amqp/support/DefaultAmqpHeaderMapper.java","STANDARD_HEADER_NAMES.add(AmqpHeaders.RECEIVED_ROUTING_KEY)"
github.com,"spring-projects/spring-integration",main,"spring-integration-amqp/src/main/java/org/springframework/integration/amqp/support/DefaultAmqpHeaderMapper.java","STANDARD_HEADER_NAMES.add(AmqpHeaders.REDELIVERED)"
github.com,"spring-projects/spring-integration",main,"spring-integration-amqp/src/main/java/org/springframework/integration/amqp/support/DefaultAmqpHeaderMapper.java","STANDARD_HEADER_NAMES.add(AmqpHeaders.REPLY_TO)"
github.com,"spring-projects/spring-integration",main,"spring-integration-amqp/src/main/java/org/springframework/integration/amqp/support/DefaultAmqpHeaderMapper.java","STANDARD_HEADER_NAMES.add(AmqpHeaders.TIMESTAMP)"
github.com,"spring-projects/spring-integration",main,"spring-integration-amqp/src/main/java/org/springframework/integration/amqp/support/DefaultAmqpHeaderMapper.java","STANDARD_HEADER_NAMES.add(AmqpHeaders.TYPE)"
github.com,"spring-projects/spring-integration",main,"spring-integration-amqp/src/main/java/org/springframework/integration/amqp/support/DefaultAmqpHeaderMapper.java","STANDARD_HEADER_NAMES.add(AmqpHeaders.USER_ID)"
github.com,"spring-projects/spring-integration",main,"spring-integration-amqp/src/main/java/org/springframework/integration/amqp/support/DefaultAmqpHeaderMapper.java","STANDARD_HEADER_NAMES.add(JsonHeaders.TYPE_ID)"
github.com,"spring-projects/spring-integration",main,"spring-integration-amqp/src/main/java/org/springframework/integration/amqp/support/DefaultAmqpHeaderMapper.java","STANDARD_HEADER_NAMES.add(JsonHeaders.CONTENT_TYPE_ID)"
github.com,"spring-projects/spring-integration",main,"spring-integration-amqp/src/main/java/org/springframework/integration/amqp/support/DefaultAmqpHeaderMapper.java","STANDARD_HEADER_NAMES.add(JsonHeaders.KEY_TYPE_ID)"
github.com,"spring-projects/spring-integration",main,"spring-integration-amqp/src/main/java/org/springframework/integration/amqp/support/DefaultAmqpHeaderMapper.java","STANDARD_HEADER_NAMES.add(AmqpHeaders.SPRING_REPLY_CORRELATION)"
github.com,"spring-projects/spring-integration",main,"spring-integration-amqp/src/main/java/org/springframework/integration/amqp/support/DefaultAmqpHeaderMapper.java","STANDARD_HEADER_NAMES.add(AmqpHeaders.SPRING_REPLY_TO_STACK)"
github.com,"spring-projects/spring-integration",main,"spring-integration-amqp/src/test/java/org/springframework/integration/amqp/inbound/InboundEndpointTests.java","messages.add(new org.springframework.amqp.core.Message(""test1"".getBytes(), messageProperties))"
github.com,"spring-projects/spring-integration",main,"spring-integration-amqp/src/test/java/org/springframework/integration/amqp/inbound/InboundEndpointTests.java","messages.add(new org.springframework.amqp.core.Message(""test2"".getBytes(), messageProperties))"
github.com,"spring-projects/spring-integration",main,"spring-integration-amqp/src/test/java/org/springframework/integration/amqp/inbound/InboundEndpointTests.java","messages.add(new org.springframework.amqp.core.Message(""test1"".getBytes(), messageProperties))"
github.com,"spring-projects/spring-integration",main,"spring-integration-amqp/src/test/java/org/springframework/integration/amqp/inbound/InboundEndpointTests.java","messages.add(new org.springframework.amqp.core.Message(""test2"".getBytes(), messageProperties))"
github.com,"spring-projects/spring-integration",main,"spring-integration-amqp/src/test/java/org/springframework/integration/amqp/inbound/InboundEndpointTests.java","messages.add(new org.springframework.amqp.core.Message(""test1"".getBytes(), messageProperties))"
github.com,"spring-projects/spring-integration",main,"spring-integration-amqp/src/test/java/org/springframework/integration/amqp/inbound/InboundEndpointTests.java","messages.add(new org.springframework.amqp.core.Message(""test2"".getBytes(), messageProperties))"
github.com,"spring-projects/spring-integration",main,"spring-integration-amqp/src/test/java/org/springframework/integration/amqp/inbound/InboundEndpointTests.java","messages.add(new org.springframework.amqp.core.Message(""test1"".getBytes(), messageProperties))"
github.com,"spring-projects/spring-integration",main,"spring-integration-amqp/src/test/java/org/springframework/integration/amqp/inbound/InboundEndpointTests.java","messages.add(new org.springframework.amqp.core.Message(""test2"".getBytes(), messageProperties))"
github.com,"spring-projects/spring-integration",main,"spring-integration-amqp/src/test/java/org/springframework/integration/amqp/inbound/InboundEndpointTests.java","messages.add(new org.springframework.amqp.core.Message(""test1"".getBytes(), messageProperties))"
github.com,"spring-projects/spring-integration",main,"spring-integration-amqp/src/test/java/org/springframework/integration/amqp/inbound/InboundEndpointTests.java","messages.add(new org.springframework.amqp.core.Message(""test2"".getBytes(), messageProperties))"
github.com,"spring-projects/spring-integration",main,"spring-integration-amqp/src/test/java/org/springframework/integration/amqp/inbound/InboundEndpointTests.java","messages.add(new org.springframework.amqp.core.Message(""test1"".getBytes(), messageProperties))"
github.com,"spring-projects/spring-integration",main,"spring-integration-amqp/src/test/java/org/springframework/integration/amqp/inbound/InboundEndpointTests.java","messages.add(new org.springframework.amqp.core.Message(""test2"".getBytes(), messageProperties))"
github.com,"spring-projects/spring-integration",main,"spring-integration-amqp/src/test/java/org/springframework/integration/amqp/support/BoundRabbitChannelAdviceIntegrationTests.java","received.add((String) m.getPayload())"
github.com,"spring-projects/spring-integration",main,"spring-integration-amqp/src/test/java/org/springframework/integration/amqp/outbound/AmqpOutboundEndpointTests.java","correlationList.add(correlation)"
github.com,"spring-projects/spring-integration",main,"spring-integration-amqp/src/test/java/org/springframework/integration/amqp/channel/DispatcherHasNoSubscribersTests.java","logList.add(message)"
github.com,"spring-projects/spring-integration",main,"spring-integration-http/src/main/java/org/springframework/integration/http/inbound/HttpRequestHandlingEndpointSupport.java","this.defaultMessageConverters.add(new MultipartAwareFormHttpMessageConverter())"
github.com,"spring-projects/spring-integration",main,"spring-integration-http/src/main/java/org/springframework/integration/http/inbound/HttpRequestHandlingEndpointSupport.java","this.defaultMessageConverters.add(new ByteArrayHttpMessageConverter())"
github.com,"spring-projects/spring-integration",main,"spring-integration-http/src/main/java/org/springframework/integration/http/inbound/HttpRequestHandlingEndpointSupport.java","this.defaultMessageConverters.add(stringHttpMessageConverter)"
github.com,"spring-projects/spring-integration",main,"spring-integration-http/src/main/java/org/springframework/integration/http/inbound/HttpRequestHandlingEndpointSupport.java","this.defaultMessageConverters.add(new ResourceHttpMessageConverter())"
github.com,"spring-projects/spring-integration",main,"spring-integration-http/src/main/java/org/springframework/integration/http/inbound/HttpRequestHandlingEndpointSupport.java","this.defaultMessageConverters.add(sourceConverter)"
github.com,"spring-projects/spring-integration",main,"spring-integration-http/src/main/java/org/springframework/integration/http/inbound/HttpRequestHandlingEndpointSupport.java","this.defaultMessageConverters.add(new Jaxb2RootElementHttpMessageConverter())"
github.com,"spring-projects/spring-integration",main,"spring-integration-http/src/main/java/org/springframework/integration/http/inbound/HttpRequestHandlingEndpointSupport.java","this.defaultMessageConverters.add(new MappingJackson2HttpMessageConverter())"
github.com,"spring-projects/spring-integration",main,"spring-integration-http/src/main/java/org/springframework/integration/http/inbound/HttpRequestHandlingEndpointSupport.java","this.defaultMessageConverters.add(new AtomFeedHttpMessageConverter())"
github.com,"spring-projects/spring-integration",main,"spring-integration-http/src/main/java/org/springframework/integration/http/inbound/HttpRequestHandlingEndpointSupport.java","this.defaultMessageConverters.add(new RssChannelHttpMessageConverter())"
github.com,"spring-projects/spring-integration",main,"spring-integration-http/src/main/java/org/springframework/integration/http/support/DefaultHttpHeaderMapper.java","acceptableMediaTypes.add(MediaType.asMediaType((MimeType) type))"
github.com,"spring-projects/spring-integration",main,"spring-integration-http/src/main/java/org/springframework/integration/http/support/DefaultHttpHeaderMapper.java","acceptableCharsets.add((Charset) charset)"
github.com,"spring-projects/spring-integration",main,"spring-integration-http/src/main/java/org/springframework/integration/http/support/DefaultHttpHeaderMapper.java","acceptableCharsets.add(Charset.forName(charset2))"
github.com,"spring-projects/spring-integration",main,"spring-integration-http/src/main/java/org/springframework/integration/http/support/DefaultHttpHeaderMapper.java","ifNoneMatchList.add((String) match)"
github.com,"spring-projects/spring-integration",main,"spring-integration-http/src/test/java/org/springframework/integration/http/inbound/HttpRequestHandlingMessagingGatewayTests.java","converters.add(new SerializingHttpMessageConverter())"
github.com,"spring-projects/spring-integration",main,"spring-integration-http/src/test/java/org/springframework/integration/http/inbound/HttpRequestHandlingMessagingGatewayTests.java","supportedMediaTypes.add(MediaType.TEXT_HTML)"
github.com,"spring-projects/spring-integration",main,"spring-integration-http/src/test/java/org/springframework/integration/http/inbound/HttpRequestHandlingMessagingGatewayTests.java","messageConverters.add(messageConverter)"
github.com,"spring-projects/spring-integration",main,"spring-integration-http/src/test/java/org/springframework/integration/http/inbound/HttpRequestHandlingMessagingGatewayTests.java","this.contentTypeList.add(value)"
github.com,"spring-projects/spring-integration",main,"spring-integration-http/src/test/java/org/springframework/integration/http/outbound/CookieTests.java","allHeaders.add(headers)"
github.com,"spring-projects/spring-integration",main,"spring-integration-http/src/test/java/org/springframework/integration/http/outbound/HttpRequestExecutingMessageHandlerTests.java","list.add(null)"
github.com,"spring-projects/spring-integration",main,"spring-integration-http/src/test/java/org/springframework/integration/http/outbound/HttpRequestExecutingMessageHandlerTests.java","list.add(""5"")"
github.com,"spring-projects/spring-integration",main,"spring-integration-http/src/test/java/org/springframework/integration/http/outbound/HttpRequestExecutingMessageHandlerTests.java","list.add(null)"
github.com,"spring-projects/spring-integration",main,"spring-integration-http/src/test/java/org/springframework/integration/http/outbound/HttpRequestExecutingMessageHandlerTests.java","list.add(null)"
github.com,"spring-projects/spring-integration",main,"spring-integration-http/src/test/java/org/springframework/integration/http/outbound/HttpRequestExecutingMessageHandlerTests.java","list.add(5)"
github.com,"spring-projects/spring-integration",main,"spring-integration-http/src/test/java/org/springframework/integration/http/outbound/HttpRequestExecutingMessageHandlerTests.java","list.add(null)"
github.com,"spring-projects/spring-integration",main,"spring-integration-http/src/test/java/org/springframework/integration/http/outbound/HttpRequestExecutingMessageHandlerTests.java","listA.add(""1"")"
github.com,"spring-projects/spring-integration",main,"spring-integration-http/src/test/java/org/springframework/integration/http/outbound/HttpRequestExecutingMessageHandlerTests.java","listA.add(""2"")"
github.com,"spring-projects/spring-integration",main,"spring-integration-http/src/test/java/org/springframework/integration/http/outbound/HttpRequestExecutingMessageHandlerTests.java","listA.add(new City(""Philadelphia""))"
github.com,"spring-projects/spring-integration",main,"spring-integration-http/src/test/java/org/springframework/integration/http/outbound/HttpRequestExecutingMessageHandlerTests.java","listA.add(new City(""Ambler""))"
github.com,"spring-projects/spring-integration",main,"spring-integration-http/src/test/java/org/springframework/integration/http/outbound/HttpRequestExecutingMessageHandlerTests.java","converters.add(new SerializingHttpMessageConverter())"
github.com,"spring-projects/spring-integration",main,"spring-integration-http/src/test/java/org/springframework/integration/http/outbound/HttpRequestExecutingMessageHandlerTests.java","converters.add(new SerializingHttpMessageConverter())"
github.com,"spring-projects/spring-integration",main,"spring-integration-http/src/test/java/org/springframework/integration/http/config/HttpInboundGatewayParserTests.java","converters.add(serializingHttpMessageConverter)"
github.com,"spring-projects/spring-integration",main,"spring-integration-xml/src/main/java/org/springframework/integration/xml/xpath/XPathUtils.java","documents.add(document)"
github.com,"spring-projects/spring-integration",main,"spring-integration-xml/src/main/java/org/springframework/integration/xml/splitter/XPathMessageSplitter.java","splitStrings.add(result.toString())"
github.com,"spring-projects/spring-integration",main,"spring-integration-xml/src/main/java/org/springframework/integration/xml/splitter/XPathMessageSplitter.java","documents.add(document)"
github.com,"spring-projects/spring-integration",main,"spring-integration-xml/src/test/java/org/springframework/integration/xml/transformer/MarshallingTransformerTests.java","this.messages.add((Message<?>) source)"
github.com,"spring-projects/spring-integration",main,"spring-integration-xml/src/test/java/org/springframework/integration/xml/transformer/MarshallingTransformerTests.java","this.payloads.add(source)"
github.com,"spring-projects/spring-integration",main,"spring-integration-jmx/src/main/java/org/springframework/integration/monitor/IntegrationJmxAttributeSource.java","list.add(new PropertyValue(attrName, value))"
github.com,"spring-projects/spring-integration",main,"spring-integration-jmx/src/main/java/org/springframework/integration/jmx/NotificationListeningMessageProducer.java","objectNames.add(instance.getObjectName())"
github.com,"spring-projects/spring-integration",main,"spring-integration-jmx/src/main/java/org/springframework/integration/jmx/DefaultMBeanObjectConverter.java","converted.add(value)"
github.com,"spring-projects/spring-integration",main,"spring-integration-jmx/src/test/java/org/springframework/integration/jmx/NotificationPublishingMessageHandlerTests.java","this.notifications.add(notification)"
github.com,"spring-projects/spring-integration",main,"spring-integration-jmx/src/test/java/org/springframework/integration/jmx/config/TestBean.java","this.messages.add(text)"
github.com,"spring-projects/spring-integration",main,"spring-integration-jmx/src/test/java/org/springframework/integration/jmx/config/TestBean.java","this.messages.add(text)"
github.com,"spring-projects/spring-integration",main,"spring-integration-jmx/src/test/java/org/springframework/integration/jmx/config/TestBean.java","this.messages.add(bool + "" "" + time + "" "" + foo)"
github.com,"spring-projects/spring-integration",main,"spring-integration-jmx/src/test/java/org/springframework/integration/jmx/config/OperationInvokingOutboundGatewayTests.java","argList.add(false)"
github.com,"spring-projects/spring-integration",main,"spring-integration-jmx/src/test/java/org/springframework/integration/jmx/config/OperationInvokingOutboundGatewayTests.java","argList.add(123L)"
github.com,"spring-projects/spring-integration",main,"spring-integration-jmx/src/test/java/org/springframework/integration/jmx/config/OperationInvokingOutboundGatewayTests.java","argList.add(42)"
github.com,"spring-projects/spring-integration",main,"spring-integration-groovy/src/test/java/org/springframework/integration/groovy/RepeatProcessor.java","results.add(executor.submit(new Callable<Boolean>() {
	public Boolean call() {
		try {
			base.evaluate();
		}
		catch (Throwable t) {
			throw new IllegalStateException(""Failed on iteration: "" + count, t);
		}
		return true;
	}
}))"
github.com,"spring-projects/spring-integration",main,"spring-integration-jdbc/src/main/java/org/springframework/integration/jdbc/config/StoredProcParserUtils.java","
sqlParameterList.add(parameterBuilder.getBeanDefinition())"
github.com,"spring-projects/spring-integration",main,"spring-integration-jdbc/src/main/java/org/springframework/integration/jdbc/config/StoredProcParserUtils.java","procedureParameterList.add(parameterBuilder.getBeanDefinition())"
github.com,"spring-projects/spring-integration",main,"spring-integration-jdbc/src/test/java/org/springframework/integration/jdbc/StoredProcExecutorTests.java","sqlParameters.add(null)"
github.com,"spring-projects/spring-integration",main,"spring-integration-jdbc/src/test/java/org/springframework/integration/jdbc/StoredProcExecutorTests.java","procedureParameters.add(null)"
github.com,"spring-projects/spring-integration",main,"spring-integration-jdbc/src/test/java/org/springframework/integration/jdbc/StoredProcOutboundGatewayWithSpringContextIntegrationTests.java","
received.add(consumer.poll(2000))"
github.com,"spring-projects/spring-integration",main,"spring-integration-jdbc/src/test/java/org/springframework/integration/jdbc/store/JdbcMessageStoreChannelTests.java","messages.add(input)"
github.com,"spring-projects/spring-integration",main,"spring-integration-jdbc/src/test/java/org/springframework/integration/jdbc/store/JdbcMessageStoreChannelIntegrationTests.java","messages.add(input)"
github.com,"spring-projects/spring-integration",main,"spring-integration-jdbc/src/test/java/org/springframework/integration/jdbc/store/JdbcMessageStoreTests.java","messages.add(message)"
github.com,"spring-projects/spring-integration",main,"spring-integration-jdbc/src/test/java/org/springframework/integration/jdbc/store/JdbcMessageStoreChannelOnePollerIntegrationTests.java","messages.add(input)"
github.com,"spring-projects/spring-integration",main,"spring-integration-jdbc/src/test/java/org/springframework/integration/jdbc/StoredProcPollingChannelAdapterWithSpringContextIntegrationTests.java","
received.add(consumer.poll(2000))"
github.com,"spring-projects/spring-integration",main,"spring-integration-jdbc/src/test/java/org/springframework/integration/jdbc/StoredProcPollingChannelAdapterWithNamespaceIntegrationTests.java","
received.add(consumer.poll(60000))"
github.com,"spring-projects/spring-integration",main,"spring-integration-jdbc/src/test/java/org/springframework/integration/jdbc/leader/JdbcLockRegistryLeaderInitiatorTests.java","initiators.add(initiator)"
github.com,"spring-projects/spring-integration",main,"spring-integration-jdbc/src/test/java/org/springframework/integration/jdbc/storedproc/ProcedureParameterTests.java","procedureParameters.add(1, null)"
github.com,"spring-projects/spring-integration",main,"spring-integration-jdbc/src/test/java/org/springframework/integration/jdbc/storedproc/ProcedureParameterTests.java","procedureParameters.add(1, null)"
github.com,"spring-projects/spring-integration",main,"spring-integration-jdbc/src/test/java/org/springframework/integration/jdbc/storedproc/ProcedureParameterTests.java","procedureParameterList.add(new ProcedureParameter(""param1"", ""value1"", null))"
github.com,"spring-projects/spring-integration",main,"spring-integration-jdbc/src/test/java/org/springframework/integration/jdbc/storedproc/ProcedureParameterTests.java","procedureParameterList.add(new ProcedureParameter(""param2"", ""value1"", null))"
github.com,"spring-projects/spring-integration",main,"spring-integration-jdbc/src/test/java/org/springframework/integration/jdbc/storedproc/ProcedureParameterTests.java","procedureParameterList.add(new ProcedureParameter(""param3"", ""value1"", null))"
github.com,"spring-projects/spring-integration",main,"spring-integration-jdbc/src/test/java/org/springframework/integration/jdbc/storedproc/ProcedureParameterTests.java","procedureParameterList.add(new ProcedureParameter(""param4"", null, ""expression1""))"
github.com,"spring-projects/spring-integration",main,"spring-integration-jdbc/src/test/java/org/springframework/integration/jdbc/storedproc/ProcedureParameterTests.java","procedureParameterList.add(new ProcedureParameter(""param5"", null, ""expression2""))"
github.com,"spring-projects/spring-integration",main,"spring-integration-jdbc/src/test/java/org/springframework/integration/jdbc/lock/JdbcLockRegistryDifferentClientTests.java","locked.add(""1"")"
github.com,"spring-projects/spring-integration",main,"spring-integration-jdbc/src/test/java/org/springframework/integration/jdbc/lock/JdbcLockRegistryDifferentClientTests.java","locked.add(""2"")"
github.com,"spring-projects/spring-integration",main,"spring-integration-jdbc/src/test/java/org/springframework/integration/jdbc/lock/JdbcLockRegistryDifferentClientTests.java","tasks.add(task)"
github.com,"spring-projects/spring-integration",main,"spring-integration-jdbc/src/test/java/org/springframework/integration/jdbc/StoredProcMessageHandlerDerbyIntegrationTests.java","procedureParameters.add(new ProcedureParameter(""username"", null, ""payload.username.toUpperCase()""))"
github.com,"spring-projects/spring-integration",main,"spring-integration-jdbc/src/test/java/org/springframework/integration/jdbc/StoredProcMessageHandlerDerbyIntegrationTests.java","procedureParameters.add(new ProcedureParameter(""password"", null, ""payload.password.toUpperCase()""))"
github.com,"spring-projects/spring-integration",main,"spring-integration-jdbc/src/test/java/org/springframework/integration/jdbc/StoredProcMessageHandlerDerbyIntegrationTests.java","procedureParameters.add(new ProcedureParameter(""email"", null, ""payload.email.toUpperCase()""))"
github.com,"spring-projects/spring-integration",main,"spring-integration-jdbc/src/test/java/org/springframework/integration/jdbc/StoredProcMessageHandlerDerbyIntegrationTests.java","procedureParameters.add(new ProcedureParameter(""USERNAME"", null,
		""headers[business_id] + '_' + payload.username""))"
github.com,"spring-projects/spring-integration",main,"spring-integration-jdbc/src/test/java/org/springframework/integration/jdbc/StoredProcMessageHandlerDerbyIntegrationTests.java","procedureParameters.add(new ProcedureParameter(""password"", ""static_password"", null))"
github.com,"spring-projects/spring-integration",main,"spring-integration-jdbc/src/test/java/org/springframework/integration/jdbc/StoredProcMessageHandlerDerbyIntegrationTests.java","procedureParameters.add(new ProcedureParameter(""email"", ""static_email"", null))"
github.com,"spring-projects/spring-integration",main,"spring-integration-jdbc/src/test/java/org/springframework/integration/jdbc/StoredProcJavaConfigTests.java","procedureParameters.add(new ProcedureParameter(""beginRange"", 1, null))"
github.com,"spring-projects/spring-integration",main,"spring-integration-jdbc/src/test/java/org/springframework/integration/jdbc/StoredProcJavaConfigTests.java","procedureParameters.add(new ProcedureParameter(""endRange"", 10, null))"
github.com,"spring-projects/spring-integration",main,"spring-integration-jdbc/src/test/java/org/springframework/integration/jdbc/StoredProcJavaConfigTests.java","sqlParameters.add(new SqlParameter(""beginRange"", Types.INTEGER))"
github.com,"spring-projects/spring-integration",main,"spring-integration-jdbc/src/test/java/org/springframework/integration/jdbc/StoredProcJavaConfigTests.java","sqlParameters.add(new SqlParameter(""endRange"", Types.INTEGER))"
github.com,"spring-projects/spring-integration",main,"spring-integration-jdbc/src/test/java/org/springframework/integration/jdbc/StoredProcPollingChannelAdapterWithNamespace2IntegrationTests.java","
received.add(consumer.poll(60000))"
github.com,"spring-projects/spring-integration",main,"spring-integration-jdbc/src/test/java/org/springframework/integration/jdbc/StoredProcOutboundGatewayWithNamespaceIntegrationTests.java","
received.add(consumer.poll(2000))"
github.com,"spring-projects/spring-integration",main,"spring-integration-jdbc/src/test/java/org/springframework/integration/jdbc/mysql/MySqlJdbcMessageStoreMultipleChannelTests.java","res.add(message)"
github.com,"spring-projects/spring-integration",main,"spring-integration-jdbc/src/test/java/org/springframework/integration/jdbc/mysql/MySqlJdbcMessageStoreMultipleChannelTests.java","res.add(message)"
github.com,"spring-projects/spring-integration",main,"spring-integration-jdbc/src/test/java/org/springframework/integration/jdbc/channel/PostgresChannelMessageTableSubscriberTests.java","payloads.add(message.getPayload())"
github.com,"spring-projects/spring-integration",main,"spring-integration-jdbc/src/test/java/org/springframework/integration/jdbc/channel/PostgresChannelMessageTableSubscriberTests.java","payloads.add(message.getPayload())"
github.com,"spring-projects/spring-integration",main,"spring-integration-jdbc/src/test/java/org/springframework/integration/jdbc/channel/PostgresChannelMessageTableSubscriberTests.java","payloads.add(message.getPayload())"
github.com,"spring-projects/spring-integration",main,"spring-integration-mail/src/main/java/org/springframework/integration/mail/AbstractMailReceiver.java","filteredMessages.add(message)"
github.com,"spring-projects/spring-integration",main,"spring-integration-mail/src/main/java/org/springframework/integration/mail/AbstractMailReceiver.java","filteredMessages.add(message)"
github.com,"spring-projects/spring-integration",main,"spring-integration-mail/src/test/java/org/springframework/integration/mail/StubMailSender.java","this.sentMessages.add(simpleMessage)"
github.com,"spring-projects/spring-integration",main,"spring-integration-mail/src/test/java/org/springframework/integration/mail/StubJavaMailSender.java","this.sentMimeMessages.add(mimeMessage)"
github.com,"spring-projects/spring-integration",main,"spring-integration-mail/src/test/java/org/springframework/integration/mail/StubJavaMailSender.java","this.sentSimpleMailMessages.add(simpleMessage)"
github.com,"spring-projects/spring-integration",main,"spring-integration-mail/src/test/java/org/springframework/integration/mail/ImapMailReceiverTests.java","searches.add(message.substring(message.indexOf(SEARCH) + SEARCH.length()))"
github.com,"spring-projects/spring-integration",main,"spring-integration-mail/src/test/java/org/springframework/integration/mail/ImapMailReceiverTests.java","stores.add(message.substring(message.indexOf(STORE) + STORE.length()))"
github.com,"spring-projects/spring-integration",main,"spring-integration-file/src/main/java/org/springframework/integration/file/aggregator/FileAggregatingMessageGroupProcessor.java","payloads.add(message.getPayload())"
github.com,"spring-projects/spring-integration",main,"spring-integration-file/src/main/java/org/springframework/integration/file/remote/AbstractRemoteFileStreamingMessageSource.java","filesToReset.add(file)"
github.com,"spring-projects/spring-integration",main,"spring-integration-file/src/main/java/org/springframework/integration/file/remote/AbstractRemoteFileStreamingMessageSource.java","newList.add(filteredFiles.get(i))"
github.com,"spring-projects/spring-integration",main,"spring-integration-file/src/main/java/org/springframework/integration/file/remote/RemoteFileUtils.java","pathsToCreate.add(0, pathSegment)"
github.com,"spring-projects/spring-integration",main,"spring-integration-file/src/main/java/org/springframework/integration/file/remote/gateway/AbstractRemoteFileOutboundGateway.java","replies.add(path)"
github.com,"spring-projects/spring-integration",main,"spring-integration-file/src/main/java/org/springframework/integration/file/remote/gateway/AbstractRemoteFileOutboundGateway.java","results.add(getFilename(file))"
github.com,"spring-projects/spring-integration",main,"spring-integration-file/src/main/java/org/springframework/integration/file/remote/gateway/AbstractRemoteFileOutboundGateway.java","
lsFiles.add(fileToAdd)"
github.com,"spring-projects/spring-integration",main,"spring-integration-file/src/main/java/org/springframework/integration/file/remote/gateway/AbstractRemoteFileOutboundGateway.java","files.add(file)"
github.com,"spring-projects/spring-integration",main,"spring-integration-file/src/main/java/org/springframework/integration/file/remote/gateway/AbstractRemoteFileOutboundGateway.java","files.add(file)"
github.com,"spring-projects/spring-integration",main,"spring-integration-file/src/main/java/org/springframework/integration/file/filters/LastModifiedFileListFilter.java","list.add(file)"
github.com,"spring-projects/spring-integration",main,"spring-integration-file/src/main/java/org/springframework/integration/file/filters/AbstractMarkerFilePresentFileListFilter.java","results.add(file)"
github.com,"spring-projects/spring-integration",main,"spring-integration-file/src/main/java/org/springframework/integration/file/filters/AbstractFileListFilter.java","accepted.add(file)"
github.com,"spring-projects/spring-integration",main,"spring-integration-file/src/main/java/org/springframework/integration/file/config/FileListFilterFactoryBean.java","filtersNeeded.add(new IgnoreHiddenFileListFilter())"
github.com,"spring-projects/spring-integration",main,"spring-integration-file/src/main/java/org/springframework/integration/file/config/FileListFilterFactoryBean.java","filtersNeeded.add(new AcceptAllFileListFilter<File>())"
github.com,"spring-projects/spring-integration",main,"spring-integration-file/src/main/java/org/springframework/integration/file/config/FileListFilterFactoryBean.java","// preventDuplicates is either TRUE or NULL
		filtersNeeded.add(new AcceptOnceFileListFilter<File>())"
github.com,"spring-projects/spring-integration",main,"spring-integration-file/src/main/java/org/springframework/integration/file/config/FileListFilterFactoryBean.java","filtersNeeded.add(new AcceptOnceFileListFilter<File>())"
github.com,"spring-projects/spring-integration",main,"spring-integration-file/src/main/java/org/springframework/integration/file/config/FileListFilterFactoryBean.java","filtersNeeded.add(this.filter)"
github.com,"spring-projects/spring-integration",main,"spring-integration-file/src/main/java/org/springframework/integration/file/config/FileListFilterFactoryBean.java","// preventDuplicates is either FALSE or NULL
		filtersNeeded.add(this.filter)"
github.com,"spring-projects/spring-integration",main,"spring-integration-file/src/main/java/org/springframework/integration/file/config/FileListFilterFactoryBean.java","//preventDuplicates is either null or true
filtersNeeded.add(new AcceptOnceFileListFilter<File>())"
github.com,"spring-projects/spring-integration",main,"spring-integration-file/src/main/java/org/springframework/integration/file/config/FileListFilterFactoryBean.java","filtersNeeded.add(patternFilter)"
github.com,"spring-projects/spring-integration",main,"spring-integration-file/src/main/java/org/springframework/integration/file/config/FileListFilterFactoryBean.java","filtersNeeded.add(regexFilter)"
github.com,"spring-projects/spring-integration",main,"spring-integration-file/src/main/java/org/springframework/integration/file/config/FileParserUtils.java","filters.add(filter)"
github.com,"spring-projects/spring-integration",main,"spring-integration-file/src/main/java/org/springframework/integration/file/config/FileParserUtils.java","filters.add(persistentFilter)"
github.com,"spring-projects/spring-integration",main,"spring-integration-file/src/main/java/org/springframework/integration/file/splitter/FileSplitter.java","lines.add(iterator.next())"
github.com,"spring-projects/spring-integration",main,"spring-integration-file/src/main/java/org/springframework/integration/file/DefaultDirectoryScanner.java","defaultFilters.add(new IgnoreHiddenFileListFilter())"
github.com,"spring-projects/spring-integration",main,"spring-integration-file/src/main/java/org/springframework/integration/file/DefaultDirectoryScanner.java","defaultFilters.add(new AcceptOnceFileListFilter<>())"
github.com,"spring-projects/spring-integration",main,"spring-integration-file/src/test/java/org/springframework/integration/file/WatchServiceDirectoryScannerTests.java","filesForOverflow.add(File.createTempFile(""tmp"" + i, null, this.rootDir))"
github.com,"spring-projects/spring-integration",main,"spring-integration-file/src/test/java/org/springframework/integration/file/remote/gateway/RemoteFileOutboundGatewayTests.java","madeDirs.add(invocation.getArgument(0))"
github.com,"spring-projects/spring-integration",main,"spring-integration-file/src/test/java/org/springframework/integration/file/remote/gateway/RemoteFileOutboundGatewayTests.java","files.add(file1)"
github.com,"spring-projects/spring-integration",main,"spring-integration-file/src/test/java/org/springframework/integration/file/remote/gateway/RemoteFileOutboundGatewayTests.java","files.add(file2)"
github.com,"spring-projects/spring-integration",main,"spring-integration-file/src/test/java/org/springframework/integration/file/remote/StreamingInboundTests.java","infos.add(new StringFileInfo(file))"
github.com,"spring-projects/spring-integration",main,"spring-integration-file/src/test/java/org/springframework/integration/file/tail/FileTailingMessageProducerTests.java","events.add(tailEvent)"
github.com,"spring-projects/spring-integration",main,"spring-integration-file/src/test/java/org/springframework/integration/file/dsl/FileTests.java","evens.add(i)"
github.com,"spring-projects/spring-integration",main,"spring-integration-syslog/src/main/java/org/springframework/integration/syslog/RFC5424SyslogParser.java","fragments.add(r.getMarkedSegment())"
github.com,"spring-projects/spring-integration",main,"spring-integration-jpa/src/main/java/org/springframework/integration/jpa/core/DefaultJpaOperations.java","mergedEntities.add(entityManager.merge(iteratedEntity))"
github.com,"spring-projects/spring-integration",main,"spring-integration-jpa/src/main/java/org/springframework/integration/jpa/support/parametersource/BeanPropertyParameterSource.java","names.add(pd.getName())"
github.com,"spring-projects/spring-integration",main,"spring-integration-jpa/src/main/java/org/springframework/integration/jpa/support/parametersource/ExpressionEvaluatingParameterSourceFactory.java","ExpressionEvaluatingParameterSourceFactory.this.parameters.add(parameter)"
github.com,"spring-projects/spring-integration",main,"spring-integration-jpa/src/main/java/org/springframework/integration/jpa/dsl/JpaBaseOutboundEndpointSpec.java","this.jpaParameters.add(jpaParameter)"
github.com,"spring-projects/spring-integration",main,"spring-integration-jpa/src/main/java/org/springframework/integration/jpa/config/xml/JpaParserUtils.java","
parameterList.add(parameterBuilder.getBeanDefinition())"
github.com,"spring-projects/spring-integration",main,"spring-integration-jpa/src/test/java/org/springframework/integration/jpa/core/AbstractJpaOperationsTests.java","
students.add(student1)"
github.com,"spring-projects/spring-integration",main,"spring-integration-jpa/src/test/java/org/springframework/integration/jpa/core/AbstractJpaOperationsTests.java","students.add(student2)"
github.com,"spring-projects/spring-integration",main,"spring-integration-jpa/src/test/java/org/springframework/integration/jpa/core/AbstractJpaOperationsTests.java","students.add(student3)"
github.com,"spring-projects/spring-integration",main,"spring-integration-jpa/src/test/java/org/springframework/integration/jpa/core/AbstractJpaOperationsTests.java","
students.add(student1)"
github.com,"spring-projects/spring-integration",main,"spring-integration-jpa/src/test/java/org/springframework/integration/jpa/core/AbstractJpaOperationsTests.java","students.add(student2)"
github.com,"spring-projects/spring-integration",main,"spring-integration-jpa/src/test/java/org/springframework/integration/jpa/core/AbstractJpaOperationsTests.java","students.add(student3)"
github.com,"spring-projects/spring-integration",main,"spring-integration-jpa/src/test/java/org/springframework/integration/jpa/core/AbstractJpaOperationsTests.java","
students.add(student1)"
github.com,"spring-projects/spring-integration",main,"spring-integration-jpa/src/test/java/org/springframework/integration/jpa/core/AbstractJpaOperationsTests.java","students.add(student2)"
github.com,"spring-projects/spring-integration",main,"spring-integration-jpa/src/test/java/org/springframework/integration/jpa/core/AbstractJpaOperationsTests.java","students.add(student3)"
github.com,"spring-projects/spring-integration",main,"spring-integration-jpa/src/test/java/org/springframework/integration/jpa/core/AbstractJpaOperationsTests.java","
students.add(student1)"
github.com,"spring-projects/spring-integration",main,"spring-integration-jpa/src/test/java/org/springframework/integration/jpa/core/AbstractJpaOperationsTests.java","students.add(student2)"
github.com,"spring-projects/spring-integration",main,"spring-integration-jpa/src/test/java/org/springframework/integration/jpa/core/AbstractJpaOperationsTests.java","students.add(student3)"
github.com,"spring-projects/spring-integration",main,"spring-integration-jpa/src/test/java/org/springframework/integration/jpa/inbound/JpaPollingChannelAdapterTests.java","
received.add(consumer.poll(10000))"
github.com,"spring-projects/spring-integration",main,"spring-integration-jpa/src/test/java/org/springframework/integration/jpa/inbound/JpaPollingChannelAdapterTests.java","
received.add(consumer.poll(10000))"
github.com,"spring-projects/spring-integration",main,"spring-integration-jpa/src/test/java/org/springframework/integration/jpa/inbound/JpaPollingChannelAdapterTests.java","
received.add(consumer.poll(10000))"
github.com,"spring-projects/spring-integration",main,"spring-integration-jpa/src/test/java/org/springframework/integration/jpa/inbound/JpaPollingChannelAdapterTests.java","
received.add(consumer.poll(10000))"
github.com,"spring-projects/spring-integration",main,"spring-integration-jpa/src/test/java/org/springframework/integration/jpa/inbound/JpaPollingChannelAdapterTests.java","
received.add(consumer.poll(10000))"
github.com,"spring-projects/spring-integration",main,"spring-integration-jpa/src/test/java/org/springframework/integration/jpa/inbound/JpaPollingChannelAdapterTests.java","received.add(consumer.poll(100))"
github.com,"spring-projects/spring-integration",main,"spring-integration-jpa/src/test/java/org/springframework/integration/jpa/inbound/JpaPollingChannelAdapterTests.java","received.add(consumer.poll(10000))"
github.com,"spring-projects/spring-integration",main,"spring-integration-jpa/src/test/java/org/springframework/integration/jpa/inbound/JpaPollingChannelAdapterTests.java","
received.add(consumer.poll(10000))"
github.com,"spring-projects/spring-integration",main,"spring-integration-jpa/src/test/java/org/springframework/integration/jpa/inbound/JpaPollingChannelAdapterTests.java","
received.add(consumer.poll(10000))"
github.com,"spring-projects/spring-integration",main,"spring-integration-jpa/src/test/java/org/springframework/integration/jpa/support/parametersource/ExpressionEvaluatingParameterSourceFactoryTests.java","parameters.add(new JpaParameter(""spam"", null, ""#staticParameters['foo'].toUpperCase()""))"
github.com,"spring-projects/spring-integration",main,"spring-integration-jpa/src/test/java/org/springframework/integration/jpa/support/parametersource/ExpressionEvaluatingParameterSourceFactoryTests.java","parameters.add(new JpaParameter(""foo"", ""bar"", null))"
github.com,"spring-projects/spring-integration",main,"spring-integration-jpa/src/test/java/org/springframework/integration/jpa/support/parametersource/ExpressionEvaluatingParameterSourceFactoryTests.java","parameters.add(new JpaParameter(""foo"", null))"
github.com,"spring-projects/spring-integration",main,"spring-integration-jpa/src/test/java/org/springframework/integration/jpa/support/parametersource/ExpressionEvaluatingParameterSourceFactoryTests.java","parameters.add(new JpaParameter(""bar"", null))"
github.com,"spring-projects/spring-integration",main,"spring-integration-jpa/src/test/java/org/springframework/integration/jpa/support/parametersource/ExpressionEvaluatingParameterSourceFactoryTests.java","parameters.add(new JpaParameter(null, ""#root.toUpperCase()""))"
github.com,"spring-projects/spring-integration",main,"spring-integration-jpa/src/test/java/org/springframework/integration/jpa/support/parametersource/ExpressionEvaluatingParameterSourceFactoryTests.java","parameters.add(new JpaParameter(""bar"", null))"
github.com,"spring-projects/spring-integration",main,"spring-integration-jpa/src/test/java/org/springframework/integration/jpa/support/parametersource/ExpressionEvaluatingParameterSourceFactoryTests.java","
parameters.add(new JpaParameter(""bar"", null))"
github.com,"spring-projects/spring-integration",main,"spring-integration-jpa/src/test/java/org/springframework/integration/jpa/support/parametersource/ExpressionEvaluatingParameterSourceFactoryTests.java","parameters.add(new JpaParameter(null, ""#root.toUpperCase()""))"
github.com,"spring-projects/spring-integration",main,"spring-integration-ftp/src/main/java/org/springframework/integration/ftp/gateway/FtpOutboundGateway.java","canonicalFiles.add(new FtpFileInfo(file))"
github.com,"spring-projects/spring-integration",main,"spring-integration-ftp/src/main/java/org/springframework/integration/ftp/inbound/FtpStreamingMessageSource.java","canonicalFiles.add(new FtpFileInfo(file))"
github.com,"spring-projects/spring-integration",main,"spring-integration-ftp/src/test/java/org/springframework/integration/ftp/inbound/FtpInboundRemoteFileSystemSynchronizerTests.java","filters.add(persistFilter)"
github.com,"spring-projects/spring-integration",main,"spring-integration-ftp/src/test/java/org/springframework/integration/ftp/inbound/FtpInboundRemoteFileSystemSynchronizerTests.java","filters.add(patternFilter)"
github.com,"spring-projects/spring-integration",main,"spring-integration-ftp/src/test/java/org/springframework/integration/ftp/inbound/RotatingServersTests.java","StandardConfig.this.sessionSources.add(1)"
github.com,"spring-projects/spring-integration",main,"spring-integration-ftp/src/test/java/org/springframework/integration/ftp/inbound/RotatingServersTests.java","StandardConfig.this.sessionSources.add(2)"
github.com,"spring-projects/spring-integration",main,"spring-integration-ftp/src/test/java/org/springframework/integration/ftp/inbound/RotatingServersTests.java","StandardConfig.this.sessionSources.add(3)"
github.com,"spring-projects/spring-integration",main,"spring-integration-ftp/src/test/java/org/springframework/integration/ftp/inbound/RotatingServersTests.java","keyDirectories.add(new RotationPolicy.KeyDirectory(""one"", ""foo""))"
github.com,"spring-projects/spring-integration",main,"spring-integration-ftp/src/test/java/org/springframework/integration/ftp/inbound/RotatingServersTests.java","keyDirectories.add(new RotationPolicy.KeyDirectory(""one"", ""bar""))"
github.com,"spring-projects/spring-integration",main,"spring-integration-ftp/src/test/java/org/springframework/integration/ftp/inbound/RotatingServersTests.java","keyDirectories.add(new RotationPolicy.KeyDirectory(""two"", ""baz""))"
github.com,"spring-projects/spring-integration",main,"spring-integration-ftp/src/test/java/org/springframework/integration/ftp/inbound/RotatingServersTests.java","keyDirectories.add(new RotationPolicy.KeyDirectory(""two"", ""qux""))"
github.com,"spring-projects/spring-integration",main,"spring-integration-ftp/src/test/java/org/springframework/integration/ftp/inbound/RotatingServersTests.java","keyDirectories.add(new RotationPolicy.KeyDirectory(""three"", ""fiz""))"
github.com,"spring-projects/spring-integration",main,"spring-integration-ftp/src/test/java/org/springframework/integration/ftp/inbound/RotatingServersTests.java","keyDirectories.add(new RotationPolicy.KeyDirectory(""three"", ""buz""))"
github.com,"spring-projects/spring-integration",main,"spring-integration-ftp/src/test/java/org/springframework/integration/ftp/inbound/RotatingServersTests.java","keyDirectories.add(new RotationPolicy.KeyDirectory(""one"", ""foo""))"
github.com,"spring-projects/spring-integration",main,"spring-integration-ftp/src/test/java/org/springframework/integration/ftp/inbound/RotatingServersTests.java","keyDirectories.add(new RotationPolicy.KeyDirectory(""two"", ""baz""))"
github.com,"spring-projects/spring-integration",main,"spring-integration-ftp/src/test/java/org/springframework/integration/ftp/inbound/RotatingServersTests.java","keyDirectories.add(new RotationPolicy.KeyDirectory(""three"", ""fiz""))"
github.com,"spring-projects/spring-integration",main,"spring-integration-ftp/src/test/java/org/springframework/integration/ftp/outbound/FtpServerOutboundTests.java","this.events.add(event)"
github.com,"spring-projects/spring-integration",main,"spring-integration-ftp/src/test/java/org/springframework/integration/ftp/outbound/FtpServerOutboundTests.java","this.events.add(event)"
github.com,"spring-projects/spring-integration",main,"spring-integration-zip/src/main/java/org/springframework/integration/zip/transformer/ZipTransformer.java","entries.add(zipEntrySource)"
github.com,"spring-projects/spring-integration",main,"spring-integration-zip/src/main/java/org/springframework/integration/zip/transformer/ZipTransformer.java","entries.add(zipEntrySource)"
github.com,"spring-projects/spring-integration",main,"spring-integration-zip/src/main/java/org/springframework/integration/zip/splitter/UnZipResultSplitter.java","messageBuilders.add(messageBuilder)"
github.com,"spring-projects/spring-integration",main,"spring-integration-zip/src/test/java/org/springframework/integration/zip/transformer/ZipTransformerTests.java","
strings.add(string1ToCompress)"
github.com,"spring-projects/spring-integration",main,"spring-integration-zip/src/test/java/org/springframework/integration/zip/transformer/ZipTransformerTests.java","strings.add(string2ToCompress)"
github.com,"spring-projects/spring-integration",main,"spring-integration-zip/src/test/java/org/springframework/integration/zip/transformer/ZipTransformerTests.java","strings.add(string3ToCompress)"
github.com,"spring-projects/spring-integration",main,"spring-integration-zip/src/test/java/org/springframework/integration/zip/Zip2FileTests.java","
stringsToCompress.add(stringToCompress1)"
github.com,"spring-projects/spring-integration",main,"spring-integration-zip/src/test/java/org/springframework/integration/zip/Zip2FileTests.java","stringsToCompress.add(stringToCompress2)"
github.com,"spring-projects/spring-integration",main,"spring-integration-zip/src/test/java/org/springframework/integration/zip/Zip2FileTests.java","stringsToCompress.add(stringToCompress3)"
github.com,"spring-projects/spring-integration",main,"spring-integration-zip/src/test/java/org/springframework/integration/zip/Zip2FileTests.java","stringsToCompress.add(stringToCompress4)"
github.com,"spring-projects/spring-integration",main,"spring-integration-zip/src/test/java/org/springframework/integration/zip/Zip2FileTests.java","
objectsToCompress.add(stringToCompress)"
github.com,"spring-projects/spring-integration",main,"spring-integration-zip/src/test/java/org/springframework/integration/zip/Zip2FileTests.java","objectsToCompress.add(bytesToCompress)"
github.com,"spring-projects/spring-integration",main,"spring-integration-zip/src/test/java/org/springframework/integration/zip/Zip2FileTests.java","objectsToCompress.add(fileToCompress)"
github.com,"spring-projects/spring-integration",main,"spring-integration-websocket/src/main/java/org/springframework/integration/websocket/inbound/WebSocketInboundChannelAdapter.java","this.defaultConverters.add(new StringMessageConverter())"
github.com,"spring-projects/spring-integration",main,"spring-integration-websocket/src/main/java/org/springframework/integration/websocket/inbound/WebSocketInboundChannelAdapter.java","this.defaultConverters.add(new ByteArrayMessageConverter())"
github.com,"spring-projects/spring-integration",main,"spring-integration-websocket/src/main/java/org/springframework/integration/websocket/inbound/WebSocketInboundChannelAdapter.java","this.defaultConverters.add(converter)"
github.com,"spring-projects/spring-integration",main,"spring-integration-websocket/src/main/java/org/springframework/integration/websocket/inbound/WebSocketInboundChannelAdapter.java","converters.add(0, converter)"
github.com,"spring-projects/spring-integration",main,"spring-integration-websocket/src/main/java/org/springframework/integration/websocket/IntegrationWebSocketContainer.java","this.supportedProtocols.add(protocol.toLowerCase())"
github.com,"spring-projects/spring-integration",main,"spring-integration-websocket/src/main/java/org/springframework/integration/websocket/outbound/WebSocketOutboundMessageHandler.java","this.defaultConverters.add(new StringMessageConverter())"
github.com,"spring-projects/spring-integration",main,"spring-integration-websocket/src/main/java/org/springframework/integration/websocket/outbound/WebSocketOutboundMessageHandler.java","this.defaultConverters.add(new ByteArrayMessageConverter())"
github.com,"spring-projects/spring-integration",main,"spring-integration-websocket/src/main/java/org/springframework/integration/websocket/outbound/WebSocketOutboundMessageHandler.java","this.defaultConverters.add(converter)"
github.com,"spring-projects/spring-integration",main,"spring-integration-websocket/src/main/java/org/springframework/integration/websocket/outbound/WebSocketOutboundMessageHandler.java","converters.add(0, converter)"
github.com,"spring-projects/spring-integration",main,"spring-integration-websocket/src/main/java/org/springframework/integration/websocket/config/WebSocketAdapterParsingUtils.java","protocolHandlerList.add(new RuntimeBeanReference(id))"
github.com,"spring-projects/spring-integration",main,"spring-integration-websocket/src/main/java/org/springframework/integration/websocket/config/WebSocketAdapterParsingUtils.java","messageConverterList.add(new RuntimeBeanReference(id))"
github.com,"spring-projects/spring-integration",main,"spring-integration-websocket/src/main/java/org/springframework/integration/websocket/config/IntegrationDynamicWebSocketHandlerMapping.java","matches.add(pattern)"
github.com,"spring-projects/spring-integration",main,"spring-integration-websocket/src/main/java/org/springframework/integration/websocket/config/ServerWebSocketContainerParser.java","handshakeInterceptorList.add(new RuntimeBeanReference(id))"
github.com,"spring-projects/spring-integration",main,"spring-integration-websocket/src/main/java/org/springframework/integration/websocket/config/ServerWebSocketContainerParser.java","decoratorFactoryList.add(new RuntimeBeanReference(id))"
github.com,"spring-projects/spring-integration",main,"spring-integration-websocket/src/main/java/org/springframework/integration/websocket/config/ServerWebSocketContainerParser.java","transportHandlerList.add(new RuntimeBeanReference(id))"
github.com,"spring-projects/spring-integration",main,"spring-integration-hazelcast/src/main/java/org/springframework/integration/hazelcast/metadata/HazelcastMetadataStore.java","this.listeners.add(callback)"
github.com,"spring-projects/spring-integration",main,"spring-integration-hazelcast/src/test/java/org/springframework/integration/hazelcast/store/HazelcastMessageStoreTests.java","messages.add(message)"
github.com,"spring-projects/spring-integration",main,"spring-integration-hazelcast/src/test/java/org/springframework/integration/hazelcast/inbound/HazelcastDistributedListEventDrivenInboundChannelAdapterTests.java","edDistributedList1.add(new HazelcastIntegrationTestUser(1, ""TestName1"", ""TestSurname1""))"
github.com,"spring-projects/spring-integration",main,"spring-integration-hazelcast/src/test/java/org/springframework/integration/hazelcast/inbound/HazelcastDistributedListEventDrivenInboundChannelAdapterTests.java","edDistributedList2.add(user)"
github.com,"spring-projects/spring-integration",main,"spring-integration-hazelcast/src/test/java/org/springframework/integration/hazelcast/leader/LeaderInitiatorTests.java","initiators.add(initiator)"
github.com,"spring-projects/spring-integration",main,"spring-integration-hazelcast/src/test/java/org/springframework/integration/hazelcast/leader/LeaderInitiatorTests.java","this.events.add(event)"
github.com,"spring-projects/spring-integration",main,"spring-integration-hazelcast/src/test/java/org/springframework/integration/hazelcast/outbound/HazelcastOutboundChannelAdapterTests.java","userList.add(HazelcastOutboundChannelAdapterTestUtils.getTestUser(index))"
github.com,"spring-projects/spring-integration",main,"spring-integration-hazelcast/src/test/java/org/springframework/integration/hazelcast/IdempotentReceiverIntegrationTests.java","this.messages.add(message)"
github.com,"spring-projects/spring-integration",main,"spring-integration-stomp/src/main/java/org/springframework/integration/stomp/AbstractStompSessionManager.java","this.delegates.add(delegate)"
github.com,"spring-projects/spring-integration",main,"spring-integration-redis/src/main/java/org/springframework/integration/redis/store/RedisChannelPriorityMessageStore.java","list.add((String) key)"
github.com,"spring-projects/spring-integration",main,"spring-integration-redis/src/main/java/org/springframework/integration/redis/inbound/RedisInboundChannelAdapter.java","topicList.add(new ChannelTopic(topic))"
github.com,"spring-projects/spring-integration",main,"spring-integration-redis/src/main/java/org/springframework/integration/redis/inbound/RedisInboundChannelAdapter.java","topicList.add(new PatternTopic(pattern))"
github.com,"spring-projects/spring-integration",main,"spring-integration-redis/src/main/java/org/springframework/integration/redis/outbound/ExpressionArgumentsStrategy.java","expressions.add(PARSER.parseExpression(argumentExpression))"
github.com,"spring-projects/spring-integration",main,"spring-integration-redis/src/main/java/org/springframework/integration/redis/outbound/ExpressionArgumentsStrategy.java","arguments.add(argument)"
github.com,"spring-projects/spring-integration",main,"spring-integration-redis/src/main/java/org/springframework/integration/redis/outbound/RedisStoreWritingMessageHandler.java","list.add(payload)"
github.com,"spring-projects/spring-integration",main,"spring-integration-redis/src/main/java/org/springframework/integration/redis/outbound/RedisStoreWritingMessageHandler.java","list.add(payload)"
github.com,"spring-projects/spring-integration",main,"spring-integration-redis/src/test/java/org/springframework/integration/redis/store/RedisMessageStoreTests.java","messages.add(message)"
github.com,"spring-projects/spring-integration",main,"spring-integration-redis/src/test/java/org/springframework/integration/redis/store/RedisMessageGroupStoreTests.java","failures.add(""ADD"")"
github.com,"spring-projects/spring-integration",main,"spring-integration-redis/src/test/java/org/springframework/integration/redis/store/RedisMessageGroupStoreTests.java","failures.add(""REMOVE"")"
github.com,"spring-projects/spring-integration",main,"spring-integration-redis/src/test/java/org/springframework/integration/redis/store/RedisMessageGroupStoreTests.java","messages.add(message)"
github.com,"spring-projects/spring-integration",main,"spring-integration-redis/src/test/java/org/springframework/integration/redis/inbound/RedisQueueMessageDrivenEndpointTests.java","exceptionEvents.add((ApplicationEvent) event)"
github.com,"spring-projects/spring-integration",main,"spring-integration-redis/src/test/java/org/springframework/integration/redis/leader/RedisLockRegistryLeaderInitiatorTests.java","initiators.add(initiator)"
github.com,"spring-projects/spring-integration",main,"spring-integration-redis/src/test/java/org/springframework/integration/redis/outbound/RedisStoreOutboundChannelAdapterIntegrationTests.java","pepboys.add(""Manny"")"
github.com,"spring-projects/spring-integration",main,"spring-integration-redis/src/test/java/org/springframework/integration/redis/outbound/RedisStoreOutboundChannelAdapterIntegrationTests.java","pepboys.add(""Moe"")"
github.com,"spring-projects/spring-integration",main,"spring-integration-redis/src/test/java/org/springframework/integration/redis/outbound/RedisStoreOutboundChannelAdapterIntegrationTests.java","pepboys.add(""Jack"")"
github.com,"spring-projects/spring-integration",main,"spring-integration-redis/src/test/java/org/springframework/integration/redis/outbound/RedisStoreOutboundChannelAdapterIntegrationTests.java","pepboys.add(""Manny"")"
github.com,"spring-projects/spring-integration",main,"spring-integration-redis/src/test/java/org/springframework/integration/redis/outbound/RedisStoreOutboundChannelAdapterIntegrationTests.java","pepboys.add(""Moe"")"
github.com,"spring-projects/spring-integration",main,"spring-integration-redis/src/test/java/org/springframework/integration/redis/outbound/RedisStoreOutboundChannelAdapterIntegrationTests.java","pepboys.add(""Jack"")"
github.com,"spring-projects/spring-integration",main,"spring-integration-redis/src/test/java/org/springframework/integration/redis/outbound/RedisStoreWritingMessageHandlerTests.java","list.add(""Manny"")"
github.com,"spring-projects/spring-integration",main,"spring-integration-redis/src/test/java/org/springframework/integration/redis/outbound/RedisStoreWritingMessageHandlerTests.java","list.add(""Moe"")"
github.com,"spring-projects/spring-integration",main,"spring-integration-redis/src/test/java/org/springframework/integration/redis/outbound/RedisStoreWritingMessageHandlerTests.java","list.add(""Jack"")"
github.com,"spring-projects/spring-integration",main,"spring-integration-redis/src/test/java/org/springframework/integration/redis/outbound/RedisStoreWritingMessageHandlerTests.java","list.add(""Manny"")"
github.com,"spring-projects/spring-integration",main,"spring-integration-redis/src/test/java/org/springframework/integration/redis/outbound/RedisStoreWritingMessageHandlerTests.java","list.add(""Moe"")"
github.com,"spring-projects/spring-integration",main,"spring-integration-redis/src/test/java/org/springframework/integration/redis/outbound/RedisStoreWritingMessageHandlerTests.java","list.add(""Jack"")"
github.com,"spring-projects/spring-integration",main,"spring-integration-redis/src/test/java/org/springframework/integration/redis/outbound/RedisStoreWritingMessageHandlerTests.java","list.add(""Manny"")"
github.com,"spring-projects/spring-integration",main,"spring-integration-redis/src/test/java/org/springframework/integration/redis/outbound/RedisStoreWritingMessageHandlerTests.java","list.add(""Moe"")"
github.com,"spring-projects/spring-integration",main,"spring-integration-redis/src/test/java/org/springframework/integration/redis/outbound/RedisStoreWritingMessageHandlerTests.java","list.add(""Jack"")"
github.com,"spring-projects/spring-integration",main,"spring-integration-redis/src/test/java/org/springframework/integration/redis/outbound/RedisStoreWritingMessageHandlerTests.java","list.add(""Manny"")"
github.com,"spring-projects/spring-integration",main,"spring-integration-redis/src/test/java/org/springframework/integration/redis/outbound/RedisStoreWritingMessageHandlerTests.java","list.add(""Moe"")"
github.com,"spring-projects/spring-integration",main,"spring-integration-redis/src/test/java/org/springframework/integration/redis/outbound/RedisStoreWritingMessageHandlerTests.java","list.add(""Jack"")"
github.com,"spring-projects/spring-integration",main,"spring-integration-redis/src/test/java/org/springframework/integration/redis/outbound/RedisStoreWritingMessageHandlerTests.java","list.add(""Manny"")"
github.com,"spring-projects/spring-integration",main,"spring-integration-redis/src/test/java/org/springframework/integration/redis/outbound/RedisStoreWritingMessageHandlerTests.java","list.add(""Moe"")"
github.com,"spring-projects/spring-integration",main,"spring-integration-redis/src/test/java/org/springframework/integration/redis/outbound/RedisStoreWritingMessageHandlerTests.java","list.add(""Jack"")"
github.com,"spring-projects/spring-integration",main,"spring-integration-redis/src/test/java/org/springframework/integration/redis/outbound/RedisStoreWritingMessageHandlerTests.java","list.add(""Manny"")"
github.com,"spring-projects/spring-integration",main,"spring-integration-redis/src/test/java/org/springframework/integration/redis/outbound/RedisStoreWritingMessageHandlerTests.java","list.add(""Moe"")"
github.com,"spring-projects/spring-integration",main,"spring-integration-redis/src/test/java/org/springframework/integration/redis/outbound/RedisStoreWritingMessageHandlerTests.java","list.add(""Jack"")"
github.com,"spring-projects/spring-integration",main,"spring-integration-redis/src/test/java/org/springframework/integration/redis/outbound/RedisStoreWritingMessageHandlerTests.java","list.add(""Manny"")"
github.com,"spring-projects/spring-integration",main,"spring-integration-redis/src/test/java/org/springframework/integration/redis/outbound/RedisStoreWritingMessageHandlerTests.java","list.add(""Moe"")"
github.com,"spring-projects/spring-integration",main,"spring-integration-redis/src/test/java/org/springframework/integration/redis/outbound/RedisStoreWritingMessageHandlerTests.java","list.add(""Jack"")"
github.com,"spring-projects/spring-integration",main,"spring-integration-redis/src/test/java/org/springframework/integration/redis/outbound/RedisStoreWritingMessageHandlerTests.java","list.add(""Manny"")"
github.com,"spring-projects/spring-integration",main,"spring-integration-redis/src/test/java/org/springframework/integration/redis/outbound/RedisStoreWritingMessageHandlerTests.java","list.add(""Moe"")"
github.com,"spring-projects/spring-integration",main,"spring-integration-redis/src/test/java/org/springframework/integration/redis/outbound/RedisStoreWritingMessageHandlerTests.java","list.add(""Jack"")"
github.com,"spring-projects/spring-integration",main,"spring-integration-xmpp/src/main/java/org/springframework/integration/xmpp/support/DefaultXmppHeaderMapper.java","STANDARD_HEADER_NAMES.add(XmppHeaders.FROM)"
github.com,"spring-projects/spring-integration",main,"spring-integration-xmpp/src/main/java/org/springframework/integration/xmpp/support/DefaultXmppHeaderMapper.java","STANDARD_HEADER_NAMES.add(XmppHeaders.SUBJECT)"
github.com,"spring-projects/spring-integration",main,"spring-integration-xmpp/src/main/java/org/springframework/integration/xmpp/support/DefaultXmppHeaderMapper.java","STANDARD_HEADER_NAMES.add(XmppHeaders.THREAD)"
github.com,"spring-projects/spring-integration",main,"spring-integration-xmpp/src/main/java/org/springframework/integration/xmpp/support/DefaultXmppHeaderMapper.java","STANDARD_HEADER_NAMES.add(XmppHeaders.TO)"
github.com,"spring-projects/spring-integration",main,"spring-integration-xmpp/src/main/java/org/springframework/integration/xmpp/support/DefaultXmppHeaderMapper.java","STANDARD_HEADER_NAMES.add(XmppHeaders.TYPE)"
github.com,"spring-projects/spring-integration",main,"spring-integration-rsocket/src/main/java/org/springframework/integration/rsocket/IntegrationRSocketMessageHandler.java","handlers.add(integrationRSocketPayloadReturnValueHandler)"
github.com,"spring-projects/spring-integration",main,"spring-integration-ws/src/main/java/org/springframework/integration/ws/DefaultSoapHeaderMapper.java","STANDARD_HEADER_NAMES.add(WebServiceHeaders.SOAP_ACTION)"
github.com,"spring-projects/spring-integration",main,"spring-integration-security/src/test/java/org/springframework/integration/security/TestHandler.java","sentMessages.add(message)"
github.com,"spring-projects/spring-integration",main,"spring-integration-kafka/src/main/java/org/springframework/integration/kafka/inbound/KafkaMessageSource.java","toCommit.add(info)"
github.com,"spring-projects/spring-integration",main,"spring-integration-debezium/src/test/java/org/springframework/integration/debezium/dsl/DebeziumDslTests.java","
headerKeys.add(m.getHeaders().keySet())"
github.com,"spring-projects/spring-integration",main,"spring-integration-debezium/src/test/java/org/springframework/integration/debezium/dsl/DebeziumDslTests.java","payloads.add(new String((byte[]) m.getPayload()))"
github.com,"spring-projects/spring-integration",main,"spring-integration-debezium/src/test/java/org/springframework/integration/debezium/dsl/DebeziumDslTests.java","bachPayloads.add(new String(ce.value()))"
github.com,"spring-projects/spring-integration",main,"spring-integration-debezium/src/test/java/org/springframework/integration/debezium/dsl/DebeziumDslTests.java","batchHeaderKeys
		.add(ce.headers().stream().map(Header::getKey).collect(Collectors.toList()))"
github.com,"spring-projects/spring-integration",main,"spring-integration-mongodb/src/main/java/org/springframework/integration/mongodb/store/AbstractConfigurableMongoDbMessageStore.java","customConverters.add(new MessageToBinaryConverter())"
github.com,"spring-projects/spring-integration",main,"spring-integration-mongodb/src/main/java/org/springframework/integration/mongodb/store/AbstractConfigurableMongoDbMessageStore.java","customConverters.add(new BinaryToMessageConverter())"
github.com,"spring-projects/spring-integration",main,"spring-integration-mongodb/src/main/java/org/springframework/integration/mongodb/store/MongoDbMessageStore.java","messageGroups.add(getMessageGroup(groupId))"
github.com,"spring-projects/spring-integration",main,"spring-integration-mongodb/src/main/java/org/springframework/integration/mongodb/store/MongoDbMessageStore.java","converters.add(new MessageHistoryToDocumentConverter())"
github.com,"spring-projects/spring-integration",main,"spring-integration-mongodb/src/main/java/org/springframework/integration/mongodb/store/MongoDbMessageStore.java","converters.add(new DocumentToGenericMessageConverter())"
github.com,"spring-projects/spring-integration",main,"spring-integration-mongodb/src/main/java/org/springframework/integration/mongodb/store/MongoDbMessageStore.java","converters.add(new DocumentToMutableMessageConverter())"
github.com,"spring-projects/spring-integration",main,"spring-integration-mongodb/src/main/java/org/springframework/integration/mongodb/store/MongoDbMessageStore.java","converters.add(docToErrorMessageConverter)"
github.com,"spring-projects/spring-integration",main,"spring-integration-mongodb/src/main/java/org/springframework/integration/mongodb/store/MongoDbMessageStore.java","converters.add(new DocumentToAdviceMessageConverter())"
github.com,"spring-projects/spring-integration",main,"spring-integration-mongodb/src/main/java/org/springframework/integration/mongodb/store/MongoDbMessageStore.java","converters.add(new ThrowableToBytesConverter())"
github.com,"spring-projects/spring-integration",main,"spring-integration-mongodb/src/main/java/org/springframework/integration/mongodb/store/MongoDbMessageStore.java","dbList.add(historyProperty)"
github.com,"spring-projects/spring-integration",main,"spring-integration-mongodb/src/test/java/org/springframework/integration/mongodb/store/AbstractMongoDbMessageGroupStoreTests.java","messages.add(message)"
github.com,"spring-projects/spring-integration",main,"spring-integration-cassandra/src/test/java/org/springframework/integration/cassandra/test/domain/BookSampler.java","books.add(new Book(UUID.randomUUID().toString(), ""Spring Data Cassandra Guide"", ""Cassandra Guru puppy"",
		i * 10 + 5, LocalDate.now(), true))"
github.com,"spring-projects/spring-integration",main,"spring-integration-cassandra/src/test/java/org/springframework/integration/cassandra/test/domain/BookSampler.java","books.add(getBook())"
github.com,"spring-projects/spring-integration",main,"spring-integration-cassandra/src/test/java/org/springframework/integration/cassandra/config/CassandraOutboundAdapterIntegrationTests.java","l.add(b.isbn())"
github.com,"spring-projects/spring-integration",main,"spring-integration-cassandra/src/test/java/org/springframework/integration/cassandra/config/CassandraOutboundAdapterIntegrationTests.java","l.add(b.title())"
github.com,"spring-projects/spring-integration",main,"spring-integration-cassandra/src/test/java/org/springframework/integration/cassandra/config/CassandraOutboundAdapterIntegrationTests.java","l.add(b.author())"
github.com,"spring-projects/spring-integration",main,"spring-integration-cassandra/src/test/java/org/springframework/integration/cassandra/config/CassandraOutboundAdapterIntegrationTests.java","l.add(b.pages())"
github.com,"spring-projects/spring-integration",main,"spring-integration-cassandra/src/test/java/org/springframework/integration/cassandra/config/CassandraOutboundAdapterIntegrationTests.java","l.add(b.saleDate())"
github.com,"spring-projects/spring-integration",main,"spring-integration-cassandra/src/test/java/org/springframework/integration/cassandra/config/CassandraOutboundAdapterIntegrationTests.java","l.add(b.isInStock())"
github.com,"spring-projects/spring-integration",main,"spring-integration-cassandra/src/test/java/org/springframework/integration/cassandra/config/CassandraOutboundAdapterIntegrationTests.java","ingestBooks.add(l)"
github.com,"spring-projects/spring-integration",main,"spring-integration-test-support/src/main/java/org/springframework/integration/test/matcher/MapContentMatchers.java","matchers.add(Matchers.hasEntry(Matchers.is(entry.getKey()), (Matcher<V>) value))"
github.com,"spring-projects/spring-integration",main,"spring-integration-test-support/src/main/java/org/springframework/integration/test/matcher/MapContentMatchers.java","matchers.add(Matchers.hasEntry(entry.getKey(), value))"
github.com,"spring-projects/spring-integration",main,"spring-integration-zookeeper/src/main/java/org/springframework/integration/zookeeper/metadata/ZookeeperMetadataStore.java","this.listeners.add(listener)"
github.com,"spring-projects/spring-integration",main,"spring-integration-zookeeper/src/test/java/org/springframework/integration/zookeeper/metadata/ZookeeperMetadataStoreTests.java","notifiedChanges.add(Arrays.asList(""add"", key, value))"
github.com,"spring-projects/spring-integration",main,"spring-integration-zookeeper/src/test/java/org/springframework/integration/zookeeper/metadata/ZookeeperMetadataStoreTests.java","notifiedChanges.add(Arrays.asList(""remove"", key, oldValue))"
github.com,"spring-projects/spring-integration",main,"spring-integration-zookeeper/src/test/java/org/springframework/integration/zookeeper/metadata/ZookeeperMetadataStoreTests.java","notifiedChanges.add(Arrays.asList(""update"", key, newValue))"
github.com,"spring-projects/spring-integration",main,"spring-integration-zookeeper/src/test/java/org/springframework/integration/zookeeper/metadata/ZookeeperMetadataStoreTests.java","notifiedChanges.add(Arrays.asList(""add"", key, value))"
github.com,"spring-projects/spring-integration",main,"spring-integration-zookeeper/src/test/java/org/springframework/integration/zookeeper/metadata/ZookeeperMetadataStoreTests.java","notifiedChanges.add(Arrays.asList(""remove"", key, oldValue))"
github.com,"spring-projects/spring-integration",main,"spring-integration-zookeeper/src/test/java/org/springframework/integration/zookeeper/metadata/ZookeeperMetadataStoreTests.java","notifiedChanges.add(Arrays.asList(""update"", key, newValue))"
github.com,"spring-projects/spring-integration",main,"spring-integration-zookeeper/src/test/java/org/springframework/integration/zookeeper/config/LeaderInitiatorFactoryBeanTests.java","events.add((AbstractLeaderEvent) event)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/config/GlobalChannelInterceptorProcessor.java","tempInterceptors.add(globalChannelInterceptorWrapper)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/config/IntegrationComponentScanRegistrar.java","this.defaultFilters.add(new AnnotationTypeFilter(MessagingGateway.class, true))"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/config/IntegrationComponentScanRegistrar.java","typeFilters.add(new AnnotationTypeFilter(annotationType))"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/config/IntegrationComponentScanRegistrar.java","typeFilters.add(new AssignableTypeFilter(filterClass))"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/config/IntegrationComponentScanRegistrar.java","typeFilters.add(typeFilter)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/config/IntegrationComponentScanRegistrar.java","typeFilters.add(new AspectJTypeFilter(expression, this.resourceLoader.getClassLoader()))"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/config/IntegrationComponentScanRegistrar.java","typeFilters.add(new RegexPatternTypeFilter(Pattern.compile(expression)))"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/config/AbstractMethodAnnotationPostProcessor.java","this.messageHandlerAttributes.add(SEND_TIMEOUT_ATTRIBUTE)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/config/AbstractMethodAnnotationPostProcessor.java","adviceChain.add((Advice) adviceChainBean)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/config/xml/ChainParser.java","handlerList.add(gwBuilder.getBeanDefinition())"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/config/xml/ChainParser.java","handlerList.add(childBeanMetadata)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/config/xml/RecipientListRouterParser.java","recipientList.add(recipientBuilder.getBeanDefinition())"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/config/xml/SelectorChainParser.java","selectors.add(new RuntimeBeanReference(ref))"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/config/xml/SelectorChainParser.java","selectors.add(buildMethodInvokingSelector(parserContext, ref, method))"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/config/xml/SelectorChainParser.java","selectors.add(buildSelectorChain(parserContext, child))"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/config/xml/ChannelInterceptorParser.java","interceptors.add(new RuntimeBeanReference(holder.getBeanName()))"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/config/xml/ChannelInterceptorParser.java","interceptors.add(new RuntimeBeanReference(ref))"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/config/xml/ChannelInterceptorParser.java","interceptors.add(new RuntimeBeanReference(interceptorBeanName))"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/config/xml/PollerParser.java","triggerBeanNames.add(triggerAttribute)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/config/xml/PollerParser.java","triggerBeanNames.add(triggerBeanName)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/config/xml/PollerParser.java","triggerBeanNames.add(triggerBeanName)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/config/xml/IntegrationNamespaceUtils.java","adviceChain.add(configureTransactionAttributes(txElement, handleMessageAdvice))"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/config/xml/IntegrationNamespaceUtils.java","// NOSONAR never null
					adviceChain.add(new RuntimeBeanReference(holder.getBeanName()))"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/config/xml/IntegrationNamespaceUtils.java","adviceChain.add(new RuntimeBeanReference(ref))"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/config/xml/IntegrationNamespaceUtils.java","adviceChain.add(customBeanDefinition)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/config/xml/GatewayParser.java","headers.add(header)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/config/MessagingAnnotationBeanPostProcessor.java","this.methodsToPostProcessAfterContextInitialization.add(() ->
		postProcessMethodAndRegisterEndpointIfAny(bean, beanName, method, annotationType, annotations,
				postProcessor, methodToPostProcess))"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/config/MessagingAnnotationBeanPostProcessor.java","messagingAnnotations::add"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/config/IdempotentReceiverAutoProxyCreatorInitializer.java","idempotentEndpointsMapping.add(idempotentEndpoint)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/config/IdempotentReceiverAutoProxyCreatorInitializer.java","idempotentEndpointsMapping.add(idempotentEndpoint)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/config/IdempotentReceiverAutoProxyCreator.java","interceptors.add(idempotentReceiverInterceptor)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/config/IdempotentReceiverAutoProxyCreator.java","endpoints.add(endpoint)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/splitter/DefaultMessageSplitter.java","tokens.add(tokenizer.nextToken())"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/channel/AbstractMessageChannel.java","this.interceptors.add(interceptor)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/channel/AbstractMessageChannel.java","this.interceptors.add(index, interceptor)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/channel/QueueChannel.java","clearedMessages.add(message)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/channel/QueueChannel.java","purgedMessages.add(message)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/expression/ParentContextTests.java","evalContexts.add(ExpressionUtils.createStandardEvaluationContext(this.beanFactory))"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/handler/advice/AdvisedMessageHandlerTests.java","adviceChain.add(advice)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/handler/advice/AdvisedMessageHandlerTests.java","adviceChain.add(new AbstractRequestHandlerAdvice() {

	@Override
	protected Object doInvoke(ExecutionCallback callback, Object target, Message<?> message) {
		compName.set(((AbstractReplyProducingMessageHandler.RequestHandler) target).getAdvisedHandler()
				.getComponentName());
		return callback.execute();
	}

})"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/handler/advice/AdvisedMessageHandlerTests.java","adviceChain.add(advice)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/handler/advice/AdvisedMessageHandlerTests.java","adviceChain.add(advice)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/handler/advice/AdvisedMessageHandlerTests.java","adviceChain.add(advice)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/handler/advice/AdvisedMessageHandlerTests.java","adviceChain.add(advice)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/handler/advice/AdvisedMessageHandlerTests.java","adviceChain.add(advice)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/handler/advice/AdvisedMessageHandlerTests.java","adviceChain.add(advice)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/handler/advice/AdvisedMessageHandlerTests.java","adviceChain.add(advice)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/handler/advice/AdvisedMessageHandlerTests.java","adviceChain.add(advice)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/handler/advice/AdvisedMessageHandlerTests.java","
adviceChain.add(new RequestHandlerRetryAdvice())"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/handler/advice/AdvisedMessageHandlerTests.java","adviceChain.add((MethodInterceptor) invocation -> {
	counter.getAndDecrement();
	throw new RuntimeException(""intentional"");
})"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/handler/advice/AdvisedMessageHandlerTests.java","adviceChain.add(new AbstractRequestHandlerAdvice() {

	@Override
	protected Object doInvoke(ExecutionCallback callback, Object target, Message<?> message) {
		outerCounter.incrementAndGet();
		return callback.execute();
	}
})"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/handler/advice/AdvisedMessageHandlerTests.java","adviceChain.add(expressionAdvice)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/handler/advice/AdvisedMessageHandlerTests.java","adviceChain.add(new RequestHandlerRetryAdvice())"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/handler/advice/AdvisedMessageHandlerTests.java","adviceChain.add((MethodInterceptor) invocation -> {
	throw new RuntimeException(""intentional: "" + counter.incrementAndGet());
})"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/handler/advice/AdvisedMessageHandlerTests.java","
adviceChain.add(new RequestHandlerRetryAdvice())"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/handler/advice/AdvisedMessageHandlerTests.java","adviceChain.add(expressionAdvice)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/handler/advice/AdvisedMessageHandlerTests.java","adviceChain.add((MethodInterceptor) invocation -> {
	throw new RuntimeException(""intentional: "" + counter.incrementAndGet());
})"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/handler/advice/AdvisedMessageHandlerTests.java","adviceChain.add(new AbstractRequestHandlerAdvice() {

	@Override
	protected Object doInvoke(ExecutionCallback callback, Object target, Message<?> message) {
		Object result = callback.execute();
		discardedWithinAdvice.set(discardChannel.receive(0));
		return result;
	}
})"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/handler/advice/AdvisedMessageHandlerTests.java","adviceChain.add(new AbstractRequestHandlerAdvice() {

	@Override
	protected Object doInvoke(ExecutionCallback callback, Object target, Message<?> message) {
		Object result = callback.execute();
		discardedWithinAdvice.set(discardChannel.receive(0));
		adviceCalled.set(true);
		return result;
	}
})"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/handler/advice/AdvisedMessageHandlerTests.java","adviceChain.add(advice)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/handler/MessageHandlerChainTests.java","handlers.add(producer1)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/handler/MessageHandlerChainTests.java","handlers.add(producer2)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/handler/MessageHandlerChainTests.java","handlers.add(producer3)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/handler/MessageHandlerChainTests.java","handlers.add(producer1)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/handler/MessageHandlerChainTests.java","handlers.add(producer2)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/handler/MessageHandlerChainTests.java","handlers.add(handler3)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/handler/MessageHandlerChainTests.java","handlers.add(producer1)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/handler/MessageHandlerChainTests.java","handlers.add(producer2)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/handler/MessageHandlerChainTests.java","handlers.add(handler3)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/handler/MessageHandlerChainTests.java","handlers.add(producer1)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/handler/MessageHandlerChainTests.java","handlers.add(producer2)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/handler/MessageHandlerChainTests.java","handlers.add(producer3)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/handler/MessageHandlerChainTests.java","handlers.add(producer1)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/handler/MessageHandlerChainTests.java","handlers.add(producer2)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/handler/MessageHandlerChainTests.java","handlers.add(producer3)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/handler/MessageHandlerChainTests.java","handlers.add(producer1)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/handler/MessageHandlerChainTests.java","handlers.add(producer2)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/handler/MessageHandlerChainTests.java","handlers.add(producer1)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/router/RouterTests.java","
listWithListOfChannelNames.add(channelNames1)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/router/RouterTests.java","listWithListOfChannelNames.add(channelNames2)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/router/RouterTests.java","
listWithListOfChannelNames.add(channelNames1)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/router/RouterTests.java","listWithListOfChannelNames.add(channelNames2)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/router/RouterConcurrencyTests.java","returns.add(requiredConversionService)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/router/MethodInvokingRouterTests.java","results.add(""foo-channel"")"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/router/MethodInvokingRouterTests.java","results.add(""bar-channel"")"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/router/MethodInvokingRouterTests.java","results.add(""foo-channel"")"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/router/MethodInvokingRouterTests.java","results.add(""bar-channel"")"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/router/MethodInvokingRouterTests.java","results.add(channelResolver.resolveDestination(""foo-channel""))"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/router/MethodInvokingRouterTests.java","results.add(channelResolver.resolveDestination(""bar-channel""))"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/router/MethodInvokingRouterTests.java","results.add(channelResolver.resolveDestination(""foo-channel""))"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/router/MethodInvokingRouterTests.java","results.add(channelResolver.resolveDestination(""bar-channel""))"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/router/RecipientListRouterTests.java","channels.add(channel1)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/router/RecipientListRouterTests.java","channels.add(channel2)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/router/RecipientListRouterTests.java","channels.add(channel1)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/router/RecipientListRouterTests.java","channels.add(channel2)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/router/RecipientListRouterTests.java","channels.add(channelA)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/router/RecipientListRouterTests.java","channels.add(channelB)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/router/RecipientListRouterTests.java","channels.add(channelC)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/router/RecipientListRouterTests.java","channels.add(channelA)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/router/RecipientListRouterTests.java","channels.add(channelB)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/router/RecipientListRouterTests.java","channels.add(channelC)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/router/RecipientListRouterTests.java","channels.add(channelA)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/router/RecipientListRouterTests.java","channels.add(channelB)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/router/RecipientListRouterTests.java","channels.add(channelC)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/router/RecipientListRouterTests.java","channels.add(channelA)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/router/RecipientListRouterTests.java","channels.add(channelB)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/router/RecipientListRouterTests.java","channels.add(channelC)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/router/RecipientListRouterTests.java","channels.add(channelA)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/router/RecipientListRouterTests.java","channels.add(channelB)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/router/RecipientListRouterTests.java","channels.add(channelC)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/router/RecipientListRouterTests.java","channels.add(channelA)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/router/RecipientListRouterTests.java","channels.add(channelB)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/router/RecipientListRouterTests.java","channels.add(channelC)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/router/RecipientListRouterTests.java","channels.add(channelA)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/router/RecipientListRouterTests.java","channels.add(channelB)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/router/RecipientListRouterTests.java","channels.add(channelA)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/router/RecipientListRouterTests.java","channels.add(channelB)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/router/RecipientListRouterTests.java","recipients.add(new Recipient(channel1, new AlwaysTrueSelector()))"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/router/RecipientListRouterTests.java","recipients.add(new Recipient(channel2, new AlwaysFalseSelector()))"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/router/RecipientListRouterTests.java","recipients.add(new Recipient(channel3))"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/router/RecipientListRouterTests.java","recipients.add(new Recipient(channel4))"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/router/RecipientListRouterTests.java","recipients.add(new Recipient(channel5, new AlwaysFalseSelector()))"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/router/RecipientListRouterTests.java","recipients.add(new Recipient(channel, new AlwaysFalseSelector()))"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/router/RecipientListRouterTests.java","recipients.add(new Recipient(new DirectChannel(), new AlwaysFalseSelector()))"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/router/config/SplitterAggregatorTests.java","values.add(this.count.incrementAndGet())"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/config/SourcePollingChannelAdapterFactoryBeanTests.java","adviceChain.add((MethodInterceptor) invocation -> {
	adviceApplied.set(true);
	return invocation.proceed();
})"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/config/SourcePollingChannelAdapterFactoryBeanTests.java","adviceChain.add((MethodInterceptor) invocation -> {
	adviceApplied.set(true);
	return invocation.proceed();
})"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/config/SourcePollingChannelAdapterFactoryBeanTests.java","adviceChain.add((MethodInterceptor) invocation -> {
	count.incrementAndGet();
	return invocation.proceed();
})"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/config/xml/ObjectToMapTransformerParserTests.java","departments.add(""HR"")"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/config/xml/ObjectToMapTransformerParserTests.java","departments.add(""IT"")"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/config/xml/ObjectToMapTransformerParserTests.java","listTestData.add(""hello"")"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/config/xml/ObjectToMapTransformerParserTests.java","listTestData.add(""blah"")"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/config/xml/ObjectToMapTransformerParserTests.java","remarks.add(remarksA)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/config/xml/ObjectToMapTransformerParserTests.java","remarks.add(remarksB)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/config/xml/DelegatingConsumerParserTests.java","channels.add(replyChannel)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/config/AggregatorParserTests.java","outboundMessages.add(createMessage(""123"", ""id1"", 3, 1, null))"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/config/AggregatorParserTests.java","outboundMessages.add(createMessage(""789"", ""id1"", 3, 3, null))"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/config/AggregatorParserTests.java","outboundMessages.add(createMessage(""456"", ""id1"", 3, 2, null))"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/config/AggregatorParserTests.java","outboundMessages.add(createMessage(""123"", ""id1"", 3, 1, null))"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/config/AggregatorParserTests.java","outboundMessages.add(createMessage(""789"", ""id1"", 3, 3, null))"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/config/AggregatorParserTests.java","outboundMessages.add(createMessage(""456"", ""id1"", 3, 2, null))"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/config/AggregatorParserTests.java","outboundMessages.add(createMessage(""123"", ""id1"", 3, 1, null))"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/config/AggregatorParserTests.java","outboundMessages.add(createMessage(""789"", ""id1"", 3, 3, null))"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/config/AggregatorParserTests.java","outboundMessages.add(createMessage(""456"", ""id1"", 3, 2, null))"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/config/AggregatorParserTests.java","outboundMessages.add(MessageBuilder.withPayload(""123"").setHeader(""foo"", ""1"").build())"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/config/AggregatorParserTests.java","outboundMessages.add(MessageBuilder.withPayload(""456"").setHeader(""foo"", ""1"").build())"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/config/AggregatorParserTests.java","outboundMessages.add(MessageBuilder.withPayload(""789"").setHeader(""foo"", ""1"").build())"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/config/AggregatorParserTests.java","outboundMessages.add(createMessage(1L, ""id1"", 3, 1, null))"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/config/AggregatorParserTests.java","outboundMessages.add(createMessage(2L, ""id1"", 3, 3, null))"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/config/AggregatorParserTests.java","outboundMessages.add(createMessage(3L, ""id1"", 3, 2, null))"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/config/annotation/MessagingAnnotationsWithBeanAnnotationTests.java","collector()::add"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/config/annotation/MessagingAnnotationsWithBeanAnnotationTests.java","stringCollector()::add"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/config/annotation/MessagingAnnotationsWithBeanAnnotationTests.java","collector()::add"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/config/annotation/SubscriberOrderTests.java","this.calls.add(methodNumber)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/expression/ReloadableResourceBundleExpressionSource.java","// Entry for fallback locale that isn't already in filenames list.
filenames.add(fallbackFilename)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/expression/ReloadableResourceBundleExpressionSource.java","filenames.add(basename)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/expression/ReloadableResourceBundleExpressionSource.java","result.add(0, temp.toString())"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/expression/ReloadableResourceBundleExpressionSource.java","result.add(0, temp.toString())"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/expression/ReloadableResourceBundleExpressionSource.java","result.add(0, temp.toString())"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/expression/ControlBusMethodFilter.java","supportedMethods.add(method)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/handler/advice/CacheRequestHandlerAdvice.java","this.cacheOperations.add(builder.build())"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/handler/support/IntegrationMessageHandlerMethodFactory.java","resolvers.add(new PayloadExpressionArgumentResolver())"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/handler/support/IntegrationMessageHandlerMethodFactory.java","resolvers.add(new NullAwarePayloadArgumentResolver(this.messageConverter))"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/handler/support/IntegrationMessageHandlerMethodFactory.java","resolvers.add(new PayloadsArgumentResolver())"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/handler/support/IntegrationMessageHandlerMethodFactory.java","resolvers.add(new CollectionArgumentResolver(true))"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/handler/support/IntegrationMessageHandlerMethodFactory.java","resolvers.add(new MapArgumentResolver())"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/handler/support/IntegrationMessageHandlerMethodFactory.java","resolvers.add(new ContinuationHandlerMethodArgumentResolver())"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/handler/support/MessagingMethodInvokerHelper.java","this.handlerMethodsList.add(
		Collections.singletonMap(this.handlerMethod.targetParameterType, this.handlerMethod))"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/handler/support/MessagingMethodInvokerHelper.java","//TODO Consider to use global option to determine a precedence of methods
this.handlerMethodsList.add(this.handlerMethods)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/handler/support/MessagingMethodInvokerHelper.java","this.handlerMethodsList.add(this.handlerMessageMethods)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/handler/ExpressionCommandMessageProcessor.java","candidates.add(method)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/history/MessageHistory.java","components.add(metadata)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/router/PayloadTypeRouter.java","matches.add((isArray) ? candidate + ARRAY_SUFFIX : candidate)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/router/PayloadTypeRouter.java","// candidate tied with current winner, keep track
matches.add(candidate)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/router/RecipientListRouter.java","result.add(recipient.getChannel())"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/util/SimplePoolTests.java","allocated.add(pool.getItem())"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/util/SimplePoolTests.java","allocated.add(pool.getItem())"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/util/SimplePoolTests.java","allocated.add(pool.getItem())"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/core/MessageHistoryTests.java","history.add(new Properties())"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/store/SimpleMessageGroupTests.java","messages.add(m1)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/store/SimpleMessageGroupTests.java","messages.add(null)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/store/SimpleMessageGroupTests.java","messages.add(m2)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/store/MessageStoreReaperTests.java","groups.add(group)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/store/MessageStoreTests.java","list.add(group.getOne().getPayload().toString())"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/store/SimpleMessageStoreTests.java","list.add(group.getOne().getPayload().toString())"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/store/SimpleMessageStoreTests.java","messages.add(message)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/aggregator/AbstractCorrelatingMessageHandlerTests.java","/*
 * Executes when group 'bar' completes normally
 */
outputMessages.add(message)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/aggregator/AbstractCorrelatingMessageHandlerTests.java","/*
 * Executes when group 'bar' completes normally
 */
outputMessages.add(message)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/aggregator/AbstractCorrelatingMessageHandlerTests.java","/*
 * Executes when group 'bar' completes normally
 */
outputMessages.add(message)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/aggregator/AbstractCorrelatingMessageHandlerTests.java","/*
 * Executes when group 'bar' completes normally
 */
outputMessages.add(message)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/aggregator/MethodInvokingReleaseStrategyTests.java","messages.add(new GenericMessage<>(""123""))"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/aggregator/MethodInvokingReleaseStrategyTests.java","messages.add(new GenericMessage<>(""456""))"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/aggregator/MethodInvokingReleaseStrategyTests.java","messages.add(new GenericMessage<>(""789""))"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/aggregator/ResequencingMessageGroupProcessorTests.java","messages.add(message1)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/aggregator/ResequencingMessageGroupProcessorTests.java","messages.add(message2)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/aggregator/ResequencingMessageGroupProcessorTests.java","messages.add(message3)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/aggregator/ResequencingMessageGroupProcessorTests.java","messages.add(message1)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/aggregator/ResequencingMessageGroupProcessorTests.java","messages.add(message2)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/aggregator/ResequencingMessageGroupProcessorTests.java","messages.add(message3)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/aggregator/MethodInvokingMessageGroupProcessorTests.java","this.messagesUpForProcessing.add(MessageBuilder.withPayload(1).build())"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/aggregator/MethodInvokingMessageGroupProcessorTests.java","this.messagesUpForProcessing.add(MessageBuilder.withPayload(2).build())"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/aggregator/MethodInvokingMessageGroupProcessorTests.java","this.messagesUpForProcessing.add(MessageBuilder.withPayload(4).build())"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/aggregator/MethodInvokingMessageGroupProcessorTests.java","result.add(flag)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/aggregator/MethodInvokingMessageGroupProcessorTests.java","result.add(flag)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/aggregator/MethodInvokingMessageGroupProcessorTests.java","messagesUpForProcessing.add(MessageBuilder.withPayload(3).setHeader(""foo"", Arrays.asList(101, 102)).build())"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/aggregator/MethodInvokingMessageGroupProcessorTests.java","result.add(flag)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/aggregator/MethodInvokingMessageGroupProcessorTests.java","result.add(flag)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/aggregator/MethodInvokingMessageGroupProcessorTests.java","this.messagesUpForProcessing.add(
		MessageBuilder.withPayload(3)
				.setHeader(""foo"", Arrays.asList(101, 102))
				.build())"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/aggregator/scenarios/AggregatorReplyChannelTests.java","this.list.add(""foo"")"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/aggregator/scenarios/AggregatorReplyChannelTests.java","this.list.add(""bar"")"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/aggregator/scenarios/AggregationResendTests.java","list.add(""foo"")"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/aggregator/scenarios/AggregationResendTests.java","list.add(""bar"")"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/aggregator/scenarios/AggregationResendTests.java","list.add(""baz"")"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/aggregator/ExpressionEvaluatingMessageGroupProcessorTests.java","messages.add(MessageBuilder.withPayload(i + 1).setHeader(""foo"", ""bar"").build())"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/aggregator/AggregatorTests.java","expiryEvents.add((MessageGroupExpiredEvent) event)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/aggregator/AggregatorTests.java","payloads.add(message.getPayload())"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/transformer/ObjectToMapTransformerTests.java","datesA.add(new Date(System.currentTimeMillis() + 10000))"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/transformer/ObjectToMapTransformerTests.java","datesA.add(new Date(System.currentTimeMillis() + 20000))"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/transformer/ObjectToMapTransformerTests.java","datesB.add(new Date(System.currentTimeMillis() + 30000))"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/transformer/ObjectToMapTransformerTests.java","datesB.add(new Date(System.currentTimeMillis() + 40000))"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/transformer/ObjectToMapTransformerTests.java","listOfDates.add(datesA)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/transformer/ObjectToMapTransformerTests.java","listOfDates.add(datesB)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/transformer/ObjectToMapTransformerTests.java","departments.add(""HR"")"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/transformer/ObjectToMapTransformerTests.java","departments.add(""IT"")"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/transformer/ObjectToMapTransformerTests.java","listTestData.add(""hello"")"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/transformer/ObjectToMapTransformerTests.java","listTestData.add(""blah"")"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/transformer/ObjectToMapTransformerTests.java","remarks.add(remarksA)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/transformer/ObjectToMapTransformerTests.java","remarks.add(remarksB)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/support/MessageScenariosTests.java","
scenarios.add(scenario1)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/support/MessageScenariosTests.java","
scenarios.add(scenario2)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/support/MessageScenariosTests.java","
scenarios.add(scenario3)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/dispatcher/OrderedAwareCopyOnWriteArraySetTests.java","tempList.add(o1)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/dispatcher/OrderedAwareCopyOnWriteArraySetTests.java","tempList.add(o2)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/dispatcher/OrderedAwareCopyOnWriteArraySetTests.java","tempList.add(o3)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/dispatcher/OrderedAwareCopyOnWriteArraySetTests.java","tempList.add(o4)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/dispatcher/OrderedAwareCopyOnWriteArraySetTests.java","tempList.add(o5)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/dispatcher/OrderedAwareCopyOnWriteArraySetTests.java","tempList.add(o6)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/dispatcher/OrderedAwareCopyOnWriteArraySetTests.java","tempList.add(o7)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/dispatcher/OrderedAwareCopyOnWriteArraySetTests.java","tempList.add(o8)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/dispatcher/OrderedAwareCopyOnWriteArraySetTests.java","tempList.add(o9)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/dispatcher/OrderedAwareCopyOnWriteArraySetTests.java","tempList.add(o10)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/dispatcher/OrderedAwareCopyOnWriteArraySetTests.java","
tempList.add(o1)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/dispatcher/OrderedAwareCopyOnWriteArraySetTests.java","tempList.add(o2)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/dispatcher/OrderedAwareCopyOnWriteArraySetTests.java","tempList.add(o3)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/dispatcher/OrderedAwareCopyOnWriteArraySetTests.java","tempList.add(o4)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/dispatcher/OrderedAwareCopyOnWriteArraySetTests.java","tempList.add(o5)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/dispatcher/OrderedAwareCopyOnWriteArraySetTests.java","tempList.add(o6)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/dispatcher/OrderedAwareCopyOnWriteArraySetTests.java","tempList.add(o7)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/dispatcher/OrderedAwareCopyOnWriteArraySetTests.java","tempList.add(o8)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/dispatcher/OrderedAwareCopyOnWriteArraySetTests.java","tempList.add(o9)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/dispatcher/OrderedAwareCopyOnWriteArraySetTests.java","tempList.add(o10)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/dispatcher/OrderedAwareCopyOnWriteArraySetTests.java","tempList2.add(foo6)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/dispatcher/OrderedAwareCopyOnWriteArraySetTests.java","tempList2.add(foo5)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/dispatcher/OrderedAwareCopyOnWriteArraySetTests.java","tempList2.add(new Foo(30))"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/dispatcher/OrderedAwareCopyOnWriteArraySetTests.java","tempList2.add(new Foo(10))"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/dispatcher/OrderedAwareCopyOnWriteArraySetTests.java","tempList2.add(1)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/dispatcher/OrderedAwareCopyOnWriteArraySetTests.java","tempList2.add(new Foo(28))"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/dispatcher/OrderedAwareCopyOnWriteArraySetTests.java","tempList2.add(10)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/dispatcher/OrderedAwareCopyOnWriteArraySetTests.java","tempList2.add(13)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/dispatcher/OrderedAwareCopyOnWriteArraySetTests.java","tempList2.add(new Foo(63))"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/dispatcher/BroadcastingDispatcherTests.java","this.messageList.add(message)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/dsl/publishsubscribe/PublishSubscribeTests.java","subscribersOrderedCall().add(2)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/dsl/publishsubscribe/PublishSubscribeTests.java","subscribersOrderedCall().add(3)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/dsl/publishsubscribe/PublishSubscribeTests.java","subscribersOrderedCall().add(0)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/dsl/publishsubscribe/PublishSubscribeTests.java","subscribersOrderedCall().add(1)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/dsl/publishsubscribe/PublishSubscribeTests.java","subscribersOrderedCall().add(4)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/dsl/publishsubscribe/PublishSubscribeTests.java","subscribersOrderedCall().add(5)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/dsl/reactivestreams/ReactiveStreamsTests.java","results.add(p)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/dsl/flows/IntegrationFlowTests.java","outputStringList.add(""Pre send transform: "" + message.getPayload())"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/dsl/flows/IntegrationFlowTests.java","outputStringList.add(""Post send transform: "" + message.getPayload())"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/dsl/flows/IntegrationFlowTests.java","outputStringList.add(""Pre send handle: "" + message.getPayload())"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/dsl/flows/IntegrationFlowTests.java","outputStringList.add(""Post send handle: "" + message.getPayload())"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/dsl/flows/IntegrationFlowTests.java","outputStringList.add(""Handle: "" + m.getPayload())"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/dsl/manualflow/ManualFlowTests.java","flowRegistrations.add(registration.register())"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/dsl/correlation/CorrelationHandlerTests.java","first.add(""1,2,3"")"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/dsl/correlation/CorrelationHandlerTests.java","first.add(""4,5,6"")"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/dsl/correlation/CorrelationHandlerTests.java","second.add(""7,8,9"")"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/dsl/correlation/CorrelationHandlerTests.java","second.add(""10,11,12"")"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/endpoint/ProducerAndConsumerAutoStartupTests.java","received.add(this.consumer.poll(10000))"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/endpoint/PollerAdviceTests.java","adviceChain.add(advice)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/endpoint/PollerAdviceTests.java","adviceChain.add(advice)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/endpoint/PollerAdviceTests.java","callOrder.add(""c"")"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/endpoint/PollerAdviceTests.java","callOrder.add(""a"")"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/endpoint/PollerAdviceTests.java","
adviceChain.add((MethodInterceptor) invocation -> {
	callOrder.add(""a"");
	latch.get().countDown();
	return invocation.proceed();
})"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/endpoint/PollerAdviceTests.java","callOrder.add(""b"")"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/endpoint/PollerAdviceTests.java","callOrder.add(""d"")"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/endpoint/PollerAdviceTests.java","adviceChain.add(new TestSourceAdvice())"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/endpoint/PollerAdviceTests.java","triggerPeriods.add(trigger.getDuration().toMillis())"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/endpoint/PollerAdviceTests.java","triggerPeriods.add(trigger.getDuration().toMillis())"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/endpoint/PollerAdviceTests.java","overridePresent.add(TestUtils.getPropertyValue(compoundTrigger, ""override""))"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/endpoint/ReactiveInboundChannelAdapterTests.java",dates::add
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/endpoint/ReactiveInboundChannelAdapterTests.java",dates::add
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/endpoint/ReactiveInboundChannelAdapterTests.java",dates::add
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/endpoint/ExpressionEvaluatingMessageSourceIntegrationTests.java","messages.add(channel.receive(1000))"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/selector/MessageSelectorChain.java","this.selectors.add(selector)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/selector/MessageSelectorChain.java","this.selectors.add(index, selector)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/selector/PayloadTypeSelector.java","this.acceptedTypes.add(type)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/support/MutableMessageBuilder.java","headersToRemove.add(pattern)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/support/MutableMessageBuilder.java","matchingHeaderNames.add(header.getKey())"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/support/SmartLifecycleRoleController.java","
componentsInRole.add(lifecycle)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/support/AbstractIntegrationMessageBuilder.java","incomingSequenceDetails.add(Arrays.asList(incomingCorrelationId,
		getSequenceNumber(), getSequenceSize()))"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/support/converter/ConfigurableCompositeMessageConverter.java","getConverters().add(new GenericMessageConverter(conversionService))"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/support/converter/ConfigurableCompositeMessageConverter.java","converters.add(mappingJackson2MessageConverter)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/support/converter/ConfigurableCompositeMessageConverter.java","converters.add(new ByteArrayMessageConverter())"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/support/converter/ConfigurableCompositeMessageConverter.java","converters.add(new ObjectStringMessageConverter())"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/dispatcher/PartitionedDispatcher.java","this.executors.add(executor)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/dispatcher/UnicastingDispatcher.java","exceptions.add(runtimeException)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/codec/kryo/KryoClassMapRegistrar.java","registrations.add(
		new Registration(entry.getValue(), KRYO.getSerializer(entry.getValue()), entry.getKey()))"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/codec/kryo/CompositeKryoRegistrar.java","ids.add(registration.getId())"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/codec/kryo/CompositeKryoRegistrar.java","types.add(registration.getType())"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/codec/kryo/KryoClassListRegistrar.java","registrations.add(new Registration(this.registeredClasses.get(i),
		KRYO.getSerializer(this.registeredClasses.get(i)), i + this.initialValue))"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/mapping/AbstractHeaderMapper.java","matchers.add(new ContentBasedHeaderMatcher(true, this.requestHeaderNames))"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/mapping/AbstractHeaderMapper.java","matchers.add(new ContentBasedHeaderMatcher(true, this.replyHeaderNames))"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/mapping/AbstractHeaderMapper.java","matchers.add(new PrefixBasedMatcher(false, this.standardHeaderPrefix))"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/mapping/AbstractHeaderMapper.java","// negative matchers get priority
matchers.add(0, new SinglePatternBasedHeaderMatcher(thePattern, negate))"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/mapping/AbstractHeaderMapper.java","matchers.add(new SinglePatternBasedHeaderMatcher(thePattern, negate))"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/util/FixedMethodFilter.java","filteredList.add(this.method)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/util/UniqueMethodFilter.java","this.uniqueMethods.add(org.springframework.util.ClassUtils.getMostSpecificMethod(method, targetClass))"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/util/AnnotatedMethodFilter.java","annotatedCandidates.add(method)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/util/AnnotatedMethodFilter.java","fallbackCandidates.add(method)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/util/MessagingAnnotationUtils.java","annotationChain.add(ann)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/util/MessagingAnnotationUtils.java","annotationChain.add(ann)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/util/AcceptOnceCollectionFilter.java","filteredElements.add(element)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/store/MessageGroupMetadata.java","this.messageIds.add(message.getHeaders().getId())"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/store/MessageGroupMetadata.java","this.messageIds.add(messageId)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/store/AbstractKeyValueMessageStore.java","ids.add(messageToRemove.getHeaders().getId())"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/store/AbstractKeyValueMessageStore.java","messageIds.add(this.messagePrefix + id)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/store/AbstractKeyValueMessageStore.java","messages.add(getMessage(messageIds.next()))"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/store/MessageGroupQueue.java","list.add(message)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/aggregator/ResequencingMessageGroupProcessor.java","partialSequence.add(message)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/aggregator/DefaultAggregatingMessageGroupProcessor.java","payloads.add(message.getPayload())"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/gateway/GatewayMethodInboundMessageMapper.java","parameterList.add(methodParameter)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/transformer/support/RoutingSlipHeaderValueMessageProcessor.java","routingSlipValues.add(entry)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/transformer/support/RoutingSlipHeaderValueMessageProcessor.java","routingSlipValues.add(strategy)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/main/java/org/springframework/integration/transformer/support/RoutingSlipHeaderValueMessageProcessor.java","routingSlipValues.add(path)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/splitter/SpelSplitterIntegrationTests.java","this.numbers.add(i)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/splitter/DynamicExpressionSplitterIntegrationTests.java","this.numbers.add(i)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/splitter/SplitterIntegrationTests.java","this.receivedWords.add(string)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/splitter/MethodInvokingSplitterTests.java","messages.add(new GenericMessage<String>(s))"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/splitter/MethodInvokingSplitterTests.java","messageBuilders.add(builder)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/splitter/MethodInvokingSplitterTests.java","messages.add(new GenericMessage<>(s))"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/channel/MixedDispatcherConfigurationScenarioTests.java","exceptionRegistry.add(e2)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/channel/MixedDispatcherConfigurationScenarioTests.java","verify(exceptionRegistry, times(TOTAL_EXECUTIONS)).add(any(Exception.class))"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/channel/MixedDispatcherConfigurationScenarioTests.java","exceptionRegistry.add(e)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/channel/MixedDispatcherConfigurationScenarioTests.java","verify(exceptionRegistry, times(TOTAL_EXECUTIONS)).add(any(Exception.class))"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/channel/MixedDispatcherConfigurationScenarioTests.java","exceptionRegistry.add(e2)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/channel/MixedDispatcherConfigurationScenarioTests.java","verify(exceptionRegistry, times(14)).add(any(Exception.class))"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/channel/MixedDispatcherConfigurationScenarioTests.java","exceptionRegistry.add(e)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/channel/MixedDispatcherConfigurationScenarioTests.java","verify(exceptionRegistry, times(14)).add(any(Exception.class))"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/channel/MixedDispatcherConfigurationScenarioTests.java","exceptionRegistry.add(e2)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/channel/MixedDispatcherConfigurationScenarioTests.java","verify(exceptionRegistry, never()).add(any(Exception.class))"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/channel/P2pChannelTests.java","logs.add(invocation.getArgument(0))"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/channel/reactive/FluxMessageChannelTests.java",results::add
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/channel/reactive/ReactiveStreamsConsumerTests.java","result.add(m)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/channel/reactive/ReactiveStreamsConsumerTests.java","result.add(m)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/channel/interceptor/GlobalChannelInterceptorTests.java","interceptorNames.add(interceptor.toString())"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/channel/interceptor/GlobalChannelInterceptorTests.java","interceptorNames.add(interceptor.toString())"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/channel/interceptor/ChannelInterceptorTests.java","messages.add(message)"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/channel/config/ThreadLocalChannelParserTests.java","otherThreadResults.add(simpleChannel.receive(0))"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/channel/config/ThreadLocalChannelParserTests.java","otherThreadResults.add(channelWithInterceptor.receive(0))"
github.com,"spring-projects/spring-integration",main,"spring-integration-core/src/test/java/org/springframework/integration/json/JsonTransformersSymmetricalTests.java","payload.add(person)"
github.com,"spring-projects/spring-integration",main,"spring-integration-smb/src/main/java/org/springframework/integration/smb/inbound/SmbStreamingMessageSource.java","canonicalFiles.add(new SmbFileInfo(file))"
github.com,"spring-projects/spring-integration",main,"spring-integration-smb/src/main/java/org/springframework/integration/smb/outbound/SmbOutboundGateway.java","canonicalFiles.add(new SmbFileInfo(file))"
github.com,"spring-projects/spring-integration",main,"spring-integration-smb/src/test/java/org/springframework/integration/smb/inbound/SmbInboundRemoteFileSystemSynchronizerTests.java","smbFiles.add(file)"
github.com,"spring-projects/spring-integration",main,"spring-integration-smb/src/test/java/org/springframework/integration/smb/dsl/SmbTests.java","files.add(file1)"
github.com,"spring-projects/spring-integration",main,"spring-integration-smb/src/test/java/org/springframework/integration/smb/dsl/SmbTests.java","files.add(file2)"
github.com,"spring-projects/spring-integration",main,"spring-integration-mqtt/src/main/java/org/springframework/integration/mqtt/support/MqttHeaderMapper.java","target.getUserProperties().add(new UserProperty(name, (String) value))"
github.com,"spring-projects/spring-integration",main,"spring-integration-mqtt/src/test/java/org/springframework/integration/mqtt/Mqttv5BackToBackTests.java","this.events.add(event)"
github.com,"spring-projects/spring-integration",main,"spring-integration-ip/src/main/java/org/springframework/integration/ip/tcp/connection/TcpConnectionSupport.java","this.senders.add(senderToRegister)"
github.com,"spring-projects/spring-integration",main,"spring-integration-ip/src/main/java/org/springframework/integration/ip/tcp/connection/AbstractConnectionFactory.java","this.senders.add(senderToRegister)"
github.com,"spring-projects/spring-integration",main,"spring-integration-ip/src/main/java/org/springframework/integration/ip/tcp/connection/AbstractConnectionFactory.java","openConnectionIds.add(entry.getKey())"
github.com,"spring-projects/spring-integration",main,"spring-integration-ip/src/test/java/org/springframework/integration/ip/tcp/TcpOutboundGatewayTests.java","sockets.add(socket)"
github.com,"spring-projects/spring-integration",main,"spring-integration-ip/src/test/java/org/springframework/integration/ip/tcp/TcpOutboundGatewayTests.java","replies.add(reply)"
github.com,"spring-projects/spring-integration",main,"spring-integration-ip/src/test/java/org/springframework/integration/ip/tcp/TcpOutboundGatewayTests.java","factories.add(factory1)"
github.com,"spring-projects/spring-integration",main,"spring-integration-ip/src/test/java/org/springframework/integration/ip/tcp/TcpOutboundGatewayTests.java","factories.add(factory2)"
github.com,"spring-projects/spring-integration",main,"spring-integration-ip/src/test/java/org/springframework/integration/ip/tcp/TcpOutboundGatewayTests.java","factories.add(cachingFactory1)"
github.com,"spring-projects/spring-integration",main,"spring-integration-ip/src/test/java/org/springframework/integration/ip/tcp/TcpOutboundGatewayTests.java","factories.add(cachingFactory2)"
github.com,"spring-projects/spring-integration",main,"spring-integration-ip/src/test/java/org/springframework/integration/ip/tcp/TcpOutboundGatewayTests.java","sockets.add(socket1)"
github.com,"spring-projects/spring-integration",main,"spring-integration-ip/src/test/java/org/springframework/integration/ip/tcp/TcpOutboundGatewayTests.java","sockets.add(server.accept())"
github.com,"spring-projects/spring-integration",main,"spring-integration-ip/src/test/java/org/springframework/integration/ip/tcp/TcpOutboundGatewayTests.java","sockets.add(server.accept())"
github.com,"spring-projects/spring-integration",main,"spring-integration-ip/src/test/java/org/springframework/integration/ip/tcp/connection/ConnectionEventTests.java","theEvent.add((TcpConnectionEvent) event)"
github.com,"spring-projects/spring-integration",main,"spring-integration-ip/src/test/java/org/springframework/integration/ip/tcp/connection/CachingClientConnectionFactoryTests.java","connectionIds.add((String) m.getHeaders().get(IpHeaders.CONNECTION_ID))"
github.com,"spring-projects/spring-integration",main,"spring-integration-ip/src/test/java/org/springframework/integration/ip/tcp/connection/CachingClientConnectionFactoryTests.java","factories.add(factory1)"
github.com,"spring-projects/spring-integration",main,"spring-integration-ip/src/test/java/org/springframework/integration/ip/tcp/connection/CachingClientConnectionFactoryTests.java","factories.add(factory2)"
github.com,"spring-projects/spring-integration",main,"spring-integration-ip/src/test/java/org/springframework/integration/ip/tcp/connection/CachingClientConnectionFactoryTests.java","factories.add(factory1)"
github.com,"spring-projects/spring-integration",main,"spring-integration-ip/src/test/java/org/springframework/integration/ip/tcp/connection/CachingClientConnectionFactoryTests.java","factories.add(factory2)"
github.com,"spring-projects/spring-integration",main,"spring-integration-ip/src/test/java/org/springframework/integration/ip/tcp/connection/CachingClientConnectionFactoryTests.java","factories.add(factory1)"
github.com,"spring-projects/spring-integration",main,"spring-integration-ip/src/test/java/org/springframework/integration/ip/tcp/connection/CachingClientConnectionFactoryTests.java","factories.add(factory2)"
github.com,"spring-projects/spring-integration",main,"spring-integration-ip/src/test/java/org/springframework/integration/ip/tcp/connection/CachingClientConnectionFactoryTests.java","connectionIds.add((String) message.getHeaders().get(IpHeaders.CONNECTION_ID))"
github.com,"spring-projects/spring-integration",main,"spring-integration-ip/src/test/java/org/springframework/integration/ip/tcp/connection/TcpNioConnectionTests.java","events.add((IpIntegrationEvent) e)"
github.com,"spring-projects/spring-integration",main,"spring-integration-ip/src/test/java/org/springframework/integration/ip/tcp/connection/TcpNioConnectionTests.java","messages.add(m)"
github.com,"spring-projects/spring-integration",main,"spring-integration-ip/src/test/java/org/springframework/integration/ip/tcp/connection/TcpNioConnectionTests.java","sockets.add(socket)"
github.com,"spring-projects/spring-integration",main,"spring-integration-ip/src/test/java/org/springframework/integration/ip/tcp/connection/TcpNioConnectionReadTests.java","responses.add(message)"
github.com,"spring-projects/spring-integration",main,"spring-integration-ip/src/test/java/org/springframework/integration/ip/tcp/connection/TcpNioConnectionReadTests.java","responses.add(message)"
github.com,"spring-projects/spring-integration",main,"spring-integration-ip/src/test/java/org/springframework/integration/ip/tcp/connection/TcpNioConnectionReadTests.java","responses.add(message)"
github.com,"spring-projects/spring-integration",main,"spring-integration-ip/src/test/java/org/springframework/integration/ip/tcp/connection/TcpNioConnectionReadTests.java","responses.add(message)"
github.com,"spring-projects/spring-integration",main,"spring-integration-ip/src/test/java/org/springframework/integration/ip/tcp/connection/TcpNioConnectionReadTests.java","added.add(connection)"
github.com,"spring-projects/spring-integration",main,"spring-integration-ip/src/test/java/org/springframework/integration/ip/tcp/connection/TcpNioConnectionReadTests.java","removed.add(connection)"
github.com,"spring-projects/spring-integration",main,"spring-integration-ip/src/test/java/org/springframework/integration/ip/tcp/connection/TcpNioConnectionReadTests.java","added.add(connection)"
github.com,"spring-projects/spring-integration",main,"spring-integration-ip/src/test/java/org/springframework/integration/ip/tcp/connection/TcpNioConnectionReadTests.java","removed.add(connection)"
github.com,"spring-projects/spring-integration",main,"spring-integration-ip/src/test/java/org/springframework/integration/ip/tcp/connection/TcpNioConnectionReadTests.java","added.add(connection)"
github.com,"spring-projects/spring-integration",main,"spring-integration-ip/src/test/java/org/springframework/integration/ip/tcp/connection/TcpNioConnectionReadTests.java","removed.add(connection)"
github.com,"spring-projects/spring-integration",main,"spring-integration-ip/src/test/java/org/springframework/integration/ip/tcp/connection/TcpNioConnectionReadTests.java","added.add(connection)"
github.com,"spring-projects/spring-integration",main,"spring-integration-ip/src/test/java/org/springframework/integration/ip/tcp/connection/TcpNioConnectionReadTests.java","removed.add(connection)"
github.com,"spring-projects/spring-integration",main,"spring-integration-ip/src/test/java/org/springframework/integration/ip/tcp/connection/TcpNioConnectionReadTests.java","added.add(connection)"
github.com,"spring-projects/spring-integration",main,"spring-integration-ip/src/test/java/org/springframework/integration/ip/tcp/connection/TcpNioConnectionReadTests.java","removed.add(connection)"
github.com,"spring-projects/spring-integration",main,"spring-integration-ip/src/test/java/org/springframework/integration/ip/tcp/connection/TcpNioConnectionReadTests.java","added.add(connection)"
github.com,"spring-projects/spring-integration",main,"spring-integration-ip/src/test/java/org/springframework/integration/ip/tcp/connection/TcpNioConnectionReadTests.java","removed.add(connection)"
github.com,"spring-projects/spring-integration",main,"spring-integration-ip/src/test/java/org/springframework/integration/ip/tcp/connection/SocketSupportTests.java","messages.add(message)"
github.com,"spring-projects/spring-integration",main,"spring-integration-ip/src/test/java/org/springframework/integration/ip/tcp/connection/SocketSupportTests.java","messages.add(message)"
github.com,"spring-projects/spring-integration",main,"spring-integration-ip/src/test/java/org/springframework/integration/ip/tcp/connection/SocketSupportTests.java","messages.add(message)"
github.com,"spring-projects/spring-integration",main,"spring-integration-ip/src/test/java/org/springframework/integration/ip/tcp/connection/SocketSupportTests.java","messages.add(message)"
github.com,"spring-projects/spring-integration",main,"spring-integration-ip/src/test/java/org/springframework/integration/ip/tcp/connection/SocketSupportTests.java","messages.add(message)"
github.com,"spring-projects/spring-integration",main,"spring-integration-ip/src/test/java/org/springframework/integration/ip/tcp/connection/SocketSupportTests.java","messages.add(message)"
github.com,"spring-projects/spring-integration",main,"spring-integration-ip/src/test/java/org/springframework/integration/ip/tcp/connection/ConnectionFactoryTests.java","events.add((IpIntegrationEvent) event)"
github.com,"spring-projects/spring-integration",main,"spring-integration-ip/src/test/java/org/springframework/integration/ip/tcp/connection/TcpSenderTests.java","addOrder.add(this.instance)"
github.com,"spring-projects/spring-integration",main,"spring-integration-ip/src/test/java/org/springframework/integration/ip/tcp/connection/TcpSenderTests.java","remOrder.add(this.instance)"
github.com,"spring-projects/spring-integration",main,"spring-integration-ip/src/test/java/org/springframework/integration/ip/tcp/connection/TcpSenderTests.java","addOrder.add(99)"
github.com,"spring-projects/spring-integration",main,"spring-integration-ip/src/test/java/org/springframework/integration/ip/tcp/connection/TcpSenderTests.java","passedConnectionsToSenderViaAddNewConnection.add(connection)"
github.com,"spring-projects/spring-integration",main,"spring-integration-ip/src/test/java/org/springframework/integration/ip/tcp/connection/TcpSenderTests.java","remOrder.add(99)"
github.com,"spring-projects/spring-integration",main,"spring-integration-ip/src/test/java/org/springframework/integration/ip/tcp/connection/FailoverClientConnectionFactoryTests.java","factories.add(factory1)"
github.com,"spring-projects/spring-integration",main,"spring-integration-ip/src/test/java/org/springframework/integration/ip/tcp/connection/FailoverClientConnectionFactoryTests.java","factories.add(factory2)"
github.com,"spring-projects/spring-integration",main,"spring-integration-ip/src/test/java/org/springframework/integration/ip/tcp/connection/FailoverClientConnectionFactoryTests.java","factories.add(factory1)"
github.com,"spring-projects/spring-integration",main,"spring-integration-ip/src/test/java/org/springframework/integration/ip/tcp/connection/FailoverClientConnectionFactoryTests.java","factories.add(factory2)"
github.com,"spring-projects/spring-integration",main,"spring-integration-ip/src/test/java/org/springframework/integration/ip/tcp/connection/FailoverClientConnectionFactoryTests.java","factories.add(factory1)"
github.com,"spring-projects/spring-integration",main,"spring-integration-ip/src/test/java/org/springframework/integration/ip/tcp/connection/FailoverClientConnectionFactoryTests.java","factories.add(factory2)"
github.com,"spring-projects/spring-integration",main,"spring-integration-ip/src/test/java/org/springframework/integration/ip/tcp/connection/FailoverClientConnectionFactoryTests.java","factories.add(factory1)"
github.com,"spring-projects/spring-integration",main,"spring-integration-ip/src/test/java/org/springframework/integration/ip/tcp/connection/FailoverClientConnectionFactoryTests.java","factories.add(factory2)"
github.com,"spring-projects/spring-integration",main,"spring-integration-ip/src/test/java/org/springframework/integration/ip/tcp/connection/FailoverClientConnectionFactoryTests.java","factories.add(factory1)"
github.com,"spring-projects/spring-integration",main,"spring-integration-ip/src/test/java/org/springframework/integration/ip/tcp/connection/FailoverClientConnectionFactoryTests.java","factories.add(factory2)"
github.com,"spring-projects/spring-integration",main,"spring-integration-ip/src/test/java/org/springframework/integration/ip/tcp/connection/FailoverClientConnectionFactoryTests.java","factories.add(factory1)"
github.com,"spring-projects/spring-integration",main,"spring-integration-ip/src/test/java/org/springframework/integration/ip/tcp/connection/FailoverClientConnectionFactoryTests.java","factories.add(factory2)"
github.com,"spring-projects/spring-integration",main,"spring-integration-ip/src/test/java/org/springframework/integration/ip/tcp/connection/FailoverClientConnectionFactoryTests.java","factories.add(factory1)"
github.com,"spring-projects/spring-integration",main,"spring-integration-ip/src/test/java/org/springframework/integration/ip/tcp/connection/FailoverClientConnectionFactoryTests.java","factories.add(factory2)"
github.com,"spring-projects/spring-integration",main,"spring-integration-ip/src/test/java/org/springframework/integration/ip/tcp/connection/FailoverClientConnectionFactoryTests.java","factories.add(cachingFactory1)"
github.com,"spring-projects/spring-integration",main,"spring-integration-ip/src/test/java/org/springframework/integration/ip/tcp/connection/FailoverClientConnectionFactoryTests.java","factories.add(cachingFactory2)"
github.com,"spring-projects/spring-integration",main,"spring-integration-ip/src/test/java/org/springframework/integration/ip/tcp/connection/FailoverClientConnectionFactoryTests.java","clientFactories.add(cachingClient)"
github.com,"spring-projects/spring-integration",main,"spring-integration-ip/src/test/java/org/springframework/integration/ip/tcp/connection/FailoverClientConnectionFactoryTests.java","factories.add(cachingFactory1)"
github.com,"spring-projects/spring-integration",main,"spring-integration-ip/src/test/java/org/springframework/integration/ip/tcp/connection/FailoverClientConnectionFactoryTests.java","factories.add(cachingFactory2)"
github.com,"spring-projects/spring-integration",main,"spring-integration-ip/src/test/java/org/springframework/integration/ip/tcp/connection/FailoverClientConnectionFactoryTests.java","factories.add(client1)"
github.com,"spring-projects/spring-integration",main,"spring-integration-ip/src/test/java/org/springframework/integration/ip/tcp/connection/FailoverClientConnectionFactoryTests.java","factories.add(client2)"
github.com,"spring-projects/spring-integration",main,"spring-integration-ip/src/test/java/org/springframework/integration/ip/tcp/TcpSendingMessageHandlerTests.java","serverSockets.add(socket)"
github.com,"spring-projects/spring-integration",main,"spring-integration-ip/src/test/java/org/springframework/integration/ip/tcp/TcpReceivingChannelAdapterTests.java","sockets.add(socket1)"
github.com,"spring-cloud/spring-cloud-security",main,"spring-cloud-security/src/main/java/org/springframework/cloud/security/oauth2/client/OAuth2LoadBalancerClientAutoConfiguration.java","interceptors.add(loadBalancerInterceptor)"
github.com,"spring-cloud/spring-cloud-security",main,"spring-cloud-security/src/main/java/org/springframework/cloud/security/oauth2/client/OAuth2LoadBalancerClientAutoConfiguration.java","interceptors.add(loadBalancerInterceptor)"
github.com,"spring-cloud/spring-cloud-circuitbreaker",main,"spring-cloud-circuitbreaker-resilience4j/src/test/java/org/springframework/cloud/circuitbreaker/resilience4j/Resilience4JCircuitBreakerIntegrationTest.java","this.contexts.add(context)"
github.com,"spring-projects/spring-session-data-geode",main,"samples/javaconfig/gemfire-p2p/src/integration-test/java/sample/pages/HomePage.java","rows.add(new Attribute(tr))"
github.com,"spring-projects/spring-session-data-geode",main,"samples/xml/gemfire-clientserver/src/integration-test/java/sample/pages/HomePage.java","rows.add(new Attribute(tr))"
github.com,"spring-projects/spring-session-data-geode",main,"samples/boot/gemfire/src/integration-test/java/sample/pages/HomePage.java","rows.add(new Attribute(tr))"
github.com,"spring-projects/spring-session-data-geode",main,"buildSrc/src/main/groovy/io/spring/gradle/convention/SpringDependencyManagementConventionsPlugin.groovy","dependencyManagementFiles.add(new File(dir, DEPENDENCY_MANAGEMENT_RESOURCE))"
github.com,"spring-projects/spring-session-data-geode",main,"samples/xml/gemfire-p2p/src/integration-test/java/sample/pages/HomePage.java","rows.add(new Attribute(tr))"
github.com,"spring-projects/spring-session-data-geode",main,"spring-session-data-geode/src/integration-test/java/org/springframework/session/data/gemfire/AbstractGemFireIntegrationTests.java","
commandLine.add(javaExe)"
github.com,"spring-projects/spring-session-data-geode",main,"spring-session-data-geode/src/integration-test/java/org/springframework/session/data/gemfire/AbstractGemFireIntegrationTests.java","commandLine.add(""-server"")"
github.com,"spring-projects/spring-session-data-geode",main,"spring-session-data-geode/src/integration-test/java/org/springframework/session/data/gemfire/AbstractGemFireIntegrationTests.java","commandLine.add(""-ea"")"
github.com,"spring-projects/spring-session-data-geode",main,"spring-session-data-geode/src/integration-test/java/org/springframework/session/data/gemfire/AbstractGemFireIntegrationTests.java","commandLine.add(String.format(""-Dgemfire.log-file=%1$s"", GEMFIRE_LOG_FILE_NAME))"
github.com,"spring-projects/spring-session-data-geode",main,"spring-session-data-geode/src/integration-test/java/org/springframework/session/data/gemfire/AbstractGemFireIntegrationTests.java","commandLine.add(String.format(""-Dgemfire.log-level=%1$s"", GEMFIRE_LOG_LEVEL))"
github.com,"spring-projects/spring-session-data-geode",main,"spring-session-data-geode/src/integration-test/java/org/springframework/session/data/gemfire/AbstractGemFireIntegrationTests.java","commandLine.add(String.format(""-Dgemfire.Query.VERBOSE=%1$s"", GEMFIRE_QUERY_DEBUG))"
github.com,"spring-projects/spring-session-data-geode",main,"spring-session-data-geode/src/integration-test/java/org/springframework/session/data/gemfire/AbstractGemFireIntegrationTests.java","commandLine.add(""-classpath"")"
github.com,"spring-projects/spring-session-data-geode",main,"spring-session-data-geode/src/integration-test/java/org/springframework/session/data/gemfire/AbstractGemFireIntegrationTests.java","commandLine.add(classpath)"
github.com,"spring-projects/spring-session-data-geode",main,"spring-session-data-geode/src/integration-test/java/org/springframework/session/data/gemfire/AbstractGemFireIntegrationTests.java","commandLine.add(type.getName())"
github.com,"spring-projects/spring-session-data-geode",main,"spring-session-data-geode/src/integration-test/java/org/springframework/session/data/gemfire/MultiThreadedHighlyConcurrentClientServerHttpSessionAccessIntegrationTests.java","
this.sessionAttributeNames.add(attributeName)"
github.com,"spring-projects/spring-session-data-geode",main,"spring-session-data-geode/src/integration-test/java/org/springframework/session/data/gemfire/MultiThreadedHighlyConcurrentClientServerHttpSessionAccessIntegrationTests.java","this.sessionAttributeNames.add(attributeName)"
github.com,"spring-projects/spring-session-data-geode",main,"samples/javaconfig/gemfire-clientserver/src/integration-test/java/sample/pages/HomePage.java","rows.add(new Attribute(tr))"
github.com,"spring-projects/spring-kafka",main,"spring-kafka-test/src/main/java/org/springframework/kafka/test/EmbeddedKafkaBroker.java","this.kafkaServers.add(server)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka-test/src/main/java/org/springframework/kafka/test/EmbeddedKafkaBroker.java","addresses.add(new BrokerAddress(LOOPBACK, kafkaPort))"
github.com,"spring-projects/spring-kafka",main,"spring-kafka-test/src/main/java/org/springframework/kafka/test/rule/Log4j2LevelAdjuster.java","this.classes.add(getClass())"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/DefaultErrorHandlerSeekAfterCommitExceptionTests.java","this.contents.add(in)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/DefaultErrorHandlerSeekAfterCommitExceptionTests.java","this.deliveries.add(delivery)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/CommonContainerStoppingErrorHandler2Tests.java","this.contents.add(in)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/retrytopic/RetryTopicIntegrationTests.java","this.topics.add(receivedTopic)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/retrytopic/RetryTopicIntegrationTests.java","this.topics.add(record.topic())"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/retrytopic/RetryTopicIntegrationTests.java","this.topics.add(receivedTopic)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/retrytopic/RetryTopicIntegrationTests.java","this.topics.add(record.topic())"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/retrytopic/RetryTopicIntegrationTests.java","knownTopics.add(receivedTopic)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/retrytopic/DeliveryHeaderTests.java","
this.attempts.add(List.of(delivery, retryAttempts == null ? 1 : retryAttempts))"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/retrytopic/DefaultDestinationTopicProcessorTests.java","processedProps.add(props)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/retrytopic/RetryTopicExceptionRoutingIntegrationTests.java","nonBlockingFatalExceptions.add(ShouldSkipBothRetriesException.class)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/support/transaction/ResourcelessTransactionManager.java","resources.add(transaction)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/support/ExponentialBackOffWithMaxRetriesTests.java","delays.add(boEx.nextBackOff())"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/support/ExponentialBackOffWithMaxRetriesTests.java","delays.add(boEx.nextBackOff())"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/support/ExponentialBackOffWithMaxRetriesTests.java","delays.add(boEx.nextBackOff())"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/support/converter/BatchMessageConverterTests.java","consumerRecords.add(new ConsumerRecord<>(""topic1"", 0, 1, 1487694048607L,
		TimestampType.CREATE_TIME, 2, 3, ""key1"", ""value1"", kHeaders, Optional.empty()))"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/support/converter/BatchMessageConverterTests.java","consumerRecords.add(new ConsumerRecord<>(""topic1"", 0, 2, 1487694048608L,
		TimestampType.CREATE_TIME, 2, 3, ""key2"", ""value2"", kHeaders, Optional.empty()))"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/support/converter/BatchMessageConverterTests.java","consumerRecords.add(new ConsumerRecord<>(""topic1"", 0, 3, 1487694048609L,
		TimestampType.CREATE_TIME, 2, 3, ""key3"", ""value3"", kHeaders, Optional.empty()))"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/streams/Configurer2Tests.java","callOrder.add(1)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/streams/Configurer1Tests.java","callOrder.add(3)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/streams/Configurer1Tests.java","callOrder.add(1)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/streams/Configurer1Tests.java","callOrder.add(2)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/streams/KafkaStreamsBranchTests.java","trueValues.add(trueRecord.value())"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/streams/KafkaStreamsBranchTests.java","falseValues.add(falseRecord.value())"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/config/RecordMessagingMessageListenerAdapterTests.java","methods.add(method)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/config/RecordMessagingMessageListenerAdapterTests.java","methods.add(method)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/main/java/org/springframework/kafka/support/KafkaStreamBrancher.java","this.predicateList.add(Objects.requireNonNull(predicate))"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/main/java/org/springframework/kafka/support/KafkaStreamBrancher.java","this.consumerList.add(Objects.requireNonNull(consumer))"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/main/java/org/springframework/kafka/support/KafkaStreamBrancher.java","this.predicateList.add((k, v) -> true)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/main/java/org/springframework/kafka/support/KafkaStreamBrancher.java","this.consumerList.add(this.defaultConsumer)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/main/java/org/springframework/kafka/support/AbstractKafkaHeaderMapper.java","this.matchers.add(new NeverMatchHeaderMatcher(
		KafkaHeaders.ACKNOWLEDGMENT,
		KafkaHeaders.CONSUMER,
		KafkaHeaders.KEY,
		KafkaHeaders.OFFSET,
		KafkaHeaders.PARTITION,
		KafkaHeaders.RAW_DATA,
		KafkaHeaders.RECEIVED_KEY,
		KafkaHeaders.RECEIVED_PARTITION,
		KafkaHeaders.RECEIVED_TIMESTAMP,
		KafkaHeaders.RECEIVED_TOPIC,
		KafkaHeaders.TIMESTAMP,
		KafkaHeaders.TIMESTAMP_TYPE,
		KafkaHeaders.BATCH_CONVERTED_HEADERS,
		KafkaHeaders.NATIVE_HEADERS,
		KafkaHeaders.TOPIC,
		KafkaHeaders.DELIVERY_ATTEMPT,
		KafkaHeaders.LISTENER_INFO,
		KafkaHeaders.GROUP_ID))"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/main/java/org/springframework/kafka/support/AbstractKafkaHeaderMapper.java","this.matchers.add(new SimplePatternBasedHeaderMatcher(pattern))"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/main/java/org/springframework/kafka/support/converter/BatchMessagingMessageConverter.java","payloads.add(obtainPayload(type, record, conversionFailures))"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/main/java/org/springframework/kafka/support/converter/BatchMessagingMessageConverter.java","keys.add(record.key())"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/main/java/org/springframework/kafka/support/converter/BatchMessagingMessageConverter.java","topics.add(record.topic())"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/main/java/org/springframework/kafka/support/converter/BatchMessagingMessageConverter.java","partitions.add(record.partition())"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/main/java/org/springframework/kafka/support/converter/BatchMessagingMessageConverter.java","offsets.add(record.offset())"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/main/java/org/springframework/kafka/support/converter/BatchMessagingMessageConverter.java","timestampTypes.add(record.timestampType().name())"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/main/java/org/springframework/kafka/support/converter/BatchMessagingMessageConverter.java","timestamps.add(record.timestamp())"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/main/java/org/springframework/kafka/support/converter/BatchMessagingMessageConverter.java","convertedHeaders.add(converted)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/main/java/org/springframework/kafka/support/converter/BatchMessagingMessageConverter.java","natives.add(record.headers())"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/main/java/org/springframework/kafka/support/converter/BatchMessagingMessageConverter.java","raws.add(record)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/main/java/org/springframework/kafka/support/converter/BatchMessagingMessageConverter.java","conversionFailures.add(null)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/main/java/org/springframework/kafka/support/converter/BatchMessagingMessageConverter.java","conversionFailures.add(ex)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/main/java/org/springframework/kafka/annotation/KafkaListenerAnnotationBeanPostProcessor.java","checkedMethods.add(checked)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/main/java/org/springframework/kafka/annotation/KafkaListenerAnnotationBeanPostProcessor.java","result.add(str)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/main/java/org/springframework/kafka/annotation/KafkaListenerAnnotationBeanPostProcessor.java","result.add(new TopicPartitionOffset(topic, partition))"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/main/java/org/springframework/kafka/annotation/KafkaListenerAnnotationBeanPostProcessor.java","result.add(new TopicPartitionOffset(topic, intgr))"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/main/java/org/springframework/kafka/annotation/KafkaListenerAnnotationBeanPostProcessor.java","parts.add(i)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/main/java/org/springframework/kafka/annotation/KafkaListenerAnnotationBeanPostProcessor.java","parts.add(p)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/main/java/org/springframework/kafka/annotation/KafkaListenerAnnotationBeanPostProcessor.java","// Has to be at the end - look at PayloadMethodArgumentResolver documentation
customArgumentsResolver.add(new KafkaNullAwarePayloadArgumentResolver(messageConverter, validator))"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/main/java/org/springframework/kafka/annotation/RetryableTopicAnnotationProcessor.java","classes.add((Class<? extends Throwable>) clazz)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/main/java/org/springframework/kafka/streams/KafkaStreamsMicrometerListener.java","streamsTags.add(new ImmutableTag(""spring.id"", id))"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/main/java/org/springframework/kafka/streams/messaging/MessagingProcessor.java","headerList.add(header.key())"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/main/java/org/springframework/kafka/streams/messaging/MessagingTransformer.java","headerList.add(header.key())"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/main/java/org/springframework/kafka/config/KafkaListenerEndpointRegistrar.java","this.endpointDescriptors.add(descriptor)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/main/java/org/springframework/kafka/config/KafkaListenerEndpointRegistry.java","containerGroup.add(container)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/main/java/org/springframework/kafka/config/StreamsBuilderFactoryBean.java","this.listeners.add(listener)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/main/java/org/springframework/kafka/config/MultiMethodKafkaListenerEndpoint.java","invocableHandlerMethods.add(handler)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/core/DefaultKafkaConsumerFactoryTests.java","adds.add(id)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/core/DefaultKafkaConsumerFactoryTests.java","removals.add(id)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/core/DefaultKafkaProducerFactoryTests.java","adds.add(id)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/core/DefaultKafkaProducerFactoryTests.java","removals.add(id)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/core/KafkaTemplateTests.java","records.add(record)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/core/KafkaTemplateTests.java","meta.add(recordMetadata)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/requestreply/ReplyingKafkaTemplateTests.java","records.add(record)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/ConcurrentMessageListenerContainerMockTests.java","order.add(""tx"")"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/ConcurrentMessageListenerContainerMockTests.java","order.add(""interceptor"")"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/ConcurrentMessageListenerContainerMockTests.java","order.add(""success"")"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/ConcurrentMessageListenerContainerMockTests.java","order.add(""failure"")"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/ConcurrentMessageListenerContainerMockTests.java","order.add(""interceptor"")"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/ConcurrentMessageListenerContainerMockTests.java","order.add(""success"")"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/ConcurrentMessageListenerContainerMockTests.java","order.add(""failure"")"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/ConcurrentMessageListenerContainerMockTests.java","order.add(""tx"")"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/ConcurrentMessageListenerContainerMockTests.java","order.add(""interceptor"")"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/ConcurrentMessageListenerContainerMockTests.java","order.add(""success"")"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/ConcurrentMessageListenerContainerMockTests.java","order.add(""b.interceptor"")"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/ConcurrentMessageListenerContainerMockTests.java","order.add(""b.success"")"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/ConcurrentMessageListenerContainerMockTests.java","recordsDelivered.add((ConsumerRecord) rec)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/DefaultErrorHandlerNoSeeksBatchAckTests.java","this.contents.add(in)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/ContainerPauseImmediateTests.java","this.contents.add(in)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/CommonContainerStoppingErrorHandler1Tests.java","this.contents.add(in)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/FallbackBatchErrorHandlerIntegrationTests.java","events.add(e)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/ManualNackBatchTxTests.java","this.contents.add(in)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/SeekToCurrentOnErrorBatchModeTXTests.java","this.contents.add(in)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/adapter/BatchListenerWithRecordAdapterTests.java","records.add(new ConsumerRecord<String, String>(""foo"", 0, 0, null, ""foo""))"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/adapter/BatchListenerWithRecordAdapterTests.java","records.add(barRecord)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/adapter/BatchListenerWithRecordAdapterTests.java","records.add(new ConsumerRecord<String, String>(""foo"", 0, 2, null, ""baz""))"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/adapter/BatchListenerWithRecordAdapterTests.java","records.add(new ConsumerRecord<String, String>(""foo"", 0, 0, null, ""foo""))"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/adapter/BatchListenerWithRecordAdapterTests.java","records.add(barRecord)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/adapter/BatchListenerWithRecordAdapterTests.java","records.add(new ConsumerRecord<String, String>(""foo"", 0, 2, null, ""baz""))"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/adapter/BatchListenerWithRecordAdapterTests.java","values1.add(data)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/adapter/BatchListenerWithRecordAdapterTests.java","values2.add(data.value())"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/DefaultErrorHandlerBatchTests.java","records1.add(new ConsumerRecord(""foo"", 0, 0L, 0L, TimestampType.NO_TIMESTAMP_TYPE, 0, 0, null, ""foo"",
		new RecordHeaders(), Optional.empty()))"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/DefaultErrorHandlerBatchTests.java","records1.add(new ConsumerRecord(""foo"", 0, 1L, 0L, TimestampType.NO_TIMESTAMP_TYPE, 0, 0, null, ""bar"",
		new RecordHeaders(), Optional.empty()))"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/DefaultErrorHandlerBatchTests.java","records2.add(new ConsumerRecord(""foo"", 0, 2L, 0L, TimestampType.NO_TIMESTAMP_TYPE, 0, 0, null, ""baz"",
		new RecordHeaders(), Optional.empty()))"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/DefaultErrorHandlerBatchTests.java","records3.add(new ConsumerRecord(""foo"", 0, 3L, 0L, TimestampType.NO_TIMESTAMP_TYPE, 0, 0, null, ""qux"",
		new RecordHeaders(), Optional.empty()))"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/DefaultErrorHandlerBatchTests.java","records3.add(new ConsumerRecord(""foo"", 0, 4L, 0L, TimestampType.NO_TIMESTAMP_TYPE, 0, 0, null, ""fiz"",
		new RecordHeaders(), Optional.empty()))"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/DefaultErrorHandlerBatchTests.java","records3.add(new ConsumerRecord(""foo"", 0, 5L, 0L, TimestampType.NO_TIMESTAMP_TYPE, 0, 0, null, ""buz"",
		new RecordHeaders(), Optional.empty()))"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/LoggingErrorHandlerTests.java","this.contents.add(in)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/ManualNackRecordZeroSleepTests.java","this.contents.add(in)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/FailedRecordTrackerTests.java","records.add(rec)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/ContainerGroupSequencerTests.java","this.order.add(""one"")"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/ContainerGroupSequencerTests.java","this.receivedAt.add(System.currentTimeMillis())"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/ContainerGroupSequencerTests.java","this.order.add(""two"")"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/ContainerGroupSequencerTests.java","this.receivedAt.add(System.currentTimeMillis())"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/ContainerGroupSequencerTests.java","this.order.add(""three"")"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/ContainerGroupSequencerTests.java","this.receivedAt.add(System.currentTimeMillis())"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/ContainerGroupSequencerTests.java","this.order.add(""four"")"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/ContainerGroupSequencerTests.java","this.receivedAt.add(System.currentTimeMillis())"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/DefaultErrorHandlerNoSeeksRecordAckTests.java","this.contents.add(in)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/DefaultErrorHandlerNoSeeksRecordAckTests.java","this.deliveries.add(delivery)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/SeekToCurrentOnErrorBatchModeTests.java","this.contents.add(in)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/DefaultErrorHandlerNoSeeksRecordAckNoResumePartitionTests.java","this.contents.add(in)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/DefaultErrorHandlerNoSeeksRecordAckNoResumePartitionTests.java","this.deliveries.add(delivery)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/KafkaMessageListenerContainerTests.java","recordTime.add(System.currentTimeMillis())"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/KafkaMessageListenerContainerTests.java","advised.add(""one"")"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/KafkaMessageListenerContainerTests.java","advised.add(""two"")"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/KafkaMessageListenerContainerTests.java","acks.add(ack)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/KafkaMessageListenerContainerTests.java","acks.add(ack)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/KafkaMessageListenerContainerTests.java","acks.add(ack)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/KafkaMessageListenerContainerTests.java","committed.add(offsets.values().iterator().next().offset())"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/KafkaMessageListenerContainerTests.java","acks.add(acknowledgment)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/KafkaMessageListenerContainerTests.java","messages.add(message.value())"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/KafkaMessageListenerContainerTests.java","messages6.add(message.value())"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/KafkaMessageListenerContainerTests.java","counts.add(new AtomicInteger())"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/KafkaMessageListenerContainerTests.java","counts.add(new AtomicInteger())"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/KafkaMessageListenerContainerTests.java","received.add(record)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/KafkaMessageListenerContainerTests.java","received.add(record)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/KafkaMessageListenerContainerTests.java","received.add(record)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/KafkaMessageListenerContainerTests.java","log.add((String) ((Supplier<Object>) inv.getArgument(0)).get())"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/KafkaMessageListenerContainerTests.java","received.add(record)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/KafkaMessageListenerContainerTests.java","counts.add(new AtomicInteger())"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/KafkaMessageListenerContainerTests.java","counts.add(new AtomicInteger())"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/KafkaMessageListenerContainerTests.java","commits.add(invoc.getArgument(0, Map.class))"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/KafkaMessageListenerContainerTests.java","commits.add(invoc.getArgument(0, Map.class))"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/DefaultErrorHandlerSeekAfterCommitExceptionBatchAckTests.java","this.contents.add(in)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/DefaultErrorHandlerSeekAfterCommitExceptionBatchAckTests.java","this.deliveries.add(delivery)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/PauseContainerManualAssignmentTests.java","this.contents.add(in)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/SeekToCurrentOnErrorRecordModeTXTests.java","this.contents.add(in)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/DefaultErrorHandlerNoSeeksRecordAckNoResumeContainerPausedTests.java","this.contents.add(in)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/MockConsumerTests.java","this.contents.add(in)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/ManualNackPauseResumeTests.java","this.contents.add(in)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/ManualNackPauseResumeTests.java","this.pauseEvents.add(event)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/ManualNackPauseResumeTests.java","this.resumeEvents.add(event)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/ConcurrentMessageListenerContainerTests.java","payloads.add(message.value())"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/SeekToCurrentRecovererTests.java","records.add(new ConsumerRecord<>(""foo"", 0, 0, null, ""foo""))"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/SeekToCurrentRecovererTests.java","records.add(new ConsumerRecord<>(""foo"", 0, 1, null, ""bar""))"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/SeekToCurrentRecovererTests.java","records.add(new ConsumerRecord<>(""foo"", 0, 0, null, ""foo""))"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/SeekToCurrentRecovererTests.java","records.add(new ConsumerRecord<>(""foo"", 0, 1, null, ""bar""))"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/SeekToCurrentRecovererTests.java","records.add(new ConsumerRecord<>(""foo"", 0, 0, null, ""foo""))"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/SeekToCurrentRecovererTests.java","records.add(new ConsumerRecord<>(""foo"", 0, 1, null, ""bar""))"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/SeekToCurrentRecovererTests.java","records.add(new ConsumerRecord<>(""foo"", 0, 0, null, ""foo""))"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/SeekToCurrentRecovererTests.java","records.add(new ConsumerRecord<>(""foo"", 1, 0, null, ""bar""))"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/SeekToCurrentRecovererTests.java","records.add(new ConsumerRecord<>(""foo"", 0, 0, null, ""foo""))"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/SeekToCurrentRecovererTests.java","records.add(new ConsumerRecord<>(""foo"", 0, 1, null, ""bar""))"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/ManualNackRecordTests.java","this.contents.add(in)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/RemainingRecordsErrorHandlerTests.java","this.contents.add(in)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/FallbackBatchErrorHandlerTests.java","recovered.add(cr)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/FallbackBatchErrorHandlerTests.java","recovered.add(cr)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/FallbackBatchErrorHandlerTests.java","recovered.add(cr)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/FallbackBatchErrorHandlerTests.java","recovered.add(cr)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/FallbackBatchErrorHandlerTests.java","recovered.add(cr)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/SeekToCurrentOnErrorRecordModeTests.java","this.contents.add(in)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/test/java/org/springframework/kafka/listener/SeekToCurrentOnErrorRecordModeTests.java","this.deliveries.add(delivery)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/main/java/org/springframework/kafka/core/DefaultKafkaConsumerFactory.java","this.listeners.add(listener)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/main/java/org/springframework/kafka/core/DefaultKafkaConsumerFactory.java","this.listeners.add(listener)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/main/java/org/springframework/kafka/core/DefaultKafkaConsumerFactory.java","this.listeners.add(index, listener)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/main/java/org/springframework/kafka/core/DefaultKafkaConsumerFactory.java","this.postProcessors.add(postProcessor)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/main/java/org/springframework/kafka/core/DefaultKafkaConsumerFactory.java","inaccessible.add(nextElement)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/main/java/org/springframework/kafka/core/MicrometerProducerListener.java","producerTags.add(new ImmutableTag(""spring.id"", id))"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/main/java/org/springframework/kafka/core/KafkaAdmin.java","configMismatchesEntries.add(actualConfigParameter)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/main/java/org/springframework/kafka/core/KafkaAdmin.java","alterConfigOperations.add(
		new AlterConfigOp(
				new ConfigEntry(mismatchConfigEntry.name(),
						desiredConfigs.get(mismatchConfigEntry.name())),
				OpType.SET))"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/main/java/org/springframework/kafka/core/KafkaAdmin.java","topicsToAdd.add(topic)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/main/java/org/springframework/kafka/core/KafkaTemplate.java","consumerRecords.add(one)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/main/java/org/springframework/kafka/core/MicrometerConsumerListener.java","consumerTags.add(new ImmutableTag(""spring.id"", id))"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/main/java/org/springframework/kafka/core/DefaultKafkaProducerFactory.java","this.listeners.add(listener)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/main/java/org/springframework/kafka/core/DefaultKafkaProducerFactory.java","this.listeners.add(listener)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/main/java/org/springframework/kafka/core/DefaultKafkaProducerFactory.java","this.listeners.add(index, listener)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/main/java/org/springframework/kafka/core/DefaultKafkaProducerFactory.java","this.postProcessors.add(postProcessor)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/main/java/org/springframework/kafka/requestreply/AggregatingReplyingKafkaTemplate.java","completed.add(done)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/main/java/org/springframework/kafka/listener/adapter/BatchMessagingMessageListenerAdapter.java","messages.add(toMessagingMessage(cRecord, acknowledgment, consumer))"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/main/java/org/springframework/kafka/listener/KafkaMessageListenerContainer.java","records.add(iterator.next())"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/main/java/org/springframework/kafka/listener/KafkaMessageListenerContainer.java","offs.add(rec.offset())"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/main/java/org/springframework/kafka/listener/KafkaMessageListenerContainer.java","deferred.add(cRecord)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/main/java/org/springframework/kafka/listener/KafkaMessageListenerContainer.java","list.add(iterator.next())"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/main/java/org/springframework/kafka/listener/KafkaMessageListenerContainer.java","toSeek.add(cRecord)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/main/java/org/springframework/kafka/listener/KafkaMessageListenerContainer.java","unprocessed.add(cRecord)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/main/java/org/springframework/kafka/listener/KafkaMessageListenerContainer.java","unprocessed.add(iterator.next())"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/main/java/org/springframework/kafka/listener/KafkaMessageListenerContainer.java","remaining.computeIfAbsent(new TopicPartition(next.topic(), next.partition()),
		tp -> new ArrayList<ConsumerRecord<K, V>>()).add(next)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/main/java/org/springframework/kafka/listener/KafkaMessageListenerContainer.java","list.add(next)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/main/java/org/springframework/kafka/listener/KafkaMessageListenerContainer.java","records.add(cRecord)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/main/java/org/springframework/kafka/listener/KafkaMessageListenerContainer.java","records.add(iterator.next())"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/main/java/org/springframework/kafka/listener/KafkaMessageListenerContainer.java","records.computeIfAbsent(new TopicPartition(cRecord.topic(), cRecord.partition()),
		tp -> new ArrayList<ConsumerRecord<K, V>>()).add(cRecord)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/main/java/org/springframework/kafka/listener/KafkaMessageListenerContainer.java","records.computeIfAbsent(new TopicPartition(next.topic(), next.partition()),
		tp -> new ArrayList<ConsumerRecord<K, V>>()).add(next)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/main/java/org/springframework/kafka/listener/KafkaMessageListenerContainer.java","toAck.add(cRecord)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/main/java/org/springframework/kafka/listener/KafkaMessageListenerContainer.java","newRecords.computeIfAbsent(new TopicPartition(cRecord.topic(), cRecord.partition()),
		tp -> new LinkedList<>()).add(cRecord)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/main/java/org/springframework/kafka/listener/ConcurrentMessageListenerContainer.java","this.containers.add(container)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/main/java/org/springframework/kafka/listener/ConcurrentMessageListenerContainer.java","this.executors.add(exec)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/main/java/org/springframework/kafka/listener/FailedBatchProcessor.java","toCommit.add(record)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/main/java/org/springframework/kafka/listener/FailedBatchProcessor.java","remaining.add(record)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/main/java/org/springframework/kafka/listener/FailedBatchProcessor.java","remains.computeIfAbsent(new TopicPartition(rec.topic(), rec.partition()),
					tp -> new ArrayList<ConsumerRecord<K, V>>()).add((ConsumerRecord<K, V>) rec)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/main/java/org/springframework/kafka/listener/AbstractConsumerSeekAware.java","this.callbacksToTopic.computeIfAbsent(threadCallback, key -> new LinkedList<>()).add(tp)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/main/java/org/springframework/kafka/retrytopic/DefaultDestinationTopicProcessor.java","topicDestinations.add(new DestinationTopic(destinationTopicName, destinationTopicProperties))"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/main/java/org/springframework/kafka/retrytopic/BackOffValuesGenerator.java","this.backoffValues.add(backOffPeriod)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/main/java/org/springframework/kafka/retrytopic/RetryTopicConfigurationBuilder.java","this.includeTopicNames.add(topicName)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/main/java/org/springframework/kafka/retrytopic/RetryTopicConfigurationBuilder.java","this.excludeTopicNames.add(topicName)"
github.com,"spring-projects/spring-kafka",main,"spring-kafka/src/main/java/org/springframework/kafka/support/CompositeProducerListener.java","this.delegates.add(delegate)"
github.com,"moderneinc/spring-petclinic",2.0.0,"src/test/java/org/springframework/samples/petclinic/owner/PetTypeFormatterTests.java","petTypes.add(new PetType() {
    {
        setName(""Dog"");
    }
})"
github.com,"moderneinc/spring-petclinic",2.0.0,"src/test/java/org/springframework/samples/petclinic/owner/PetTypeFormatterTests.java","petTypes.add(new PetType() {
    {
        setName(""Bird"");
    }
})"
github.com,"spring-projects/spring-ws",main,"spring-ws-security/src/main/java/org/springframework/ws/soap/security/wss4j2/Wss4jSecurityInterceptor.java","handlerResults.add(0, rResult)"
github.com,"spring-projects/spring-ws",main,"spring-xml/src/main/java/org/springframework/xml/dom/DomContentHandler.java","elements.add(element)"
github.com,"spring-projects/spring-ws",main,"spring-xml/src/main/java/org/springframework/xml/xsd/commons/CommonsXsdSchemaCollection.java","xmlSchemas.add(xmlSchema)"
github.com,"spring-projects/spring-ws",main,"spring-xml/src/main/java/org/springframework/xml/xsd/commons/CommonsXsdSchemaCollection.java","xmlSchemas.add(importedSchema)"
github.com,"spring-projects/spring-ws",main,"spring-xml/src/main/java/org/springframework/xml/xpath/JaxenXPathExpressionFactory.java","results.add(nodeMapper.mapNode(node, i))"
github.com,"spring-projects/spring-ws",main,"spring-xml/src/main/java/org/springframework/xml/xpath/Jaxp13XPathTemplate.java","nodes.add(result.item(i))"
github.com,"spring-projects/spring-ws",main,"spring-xml/src/main/java/org/springframework/xml/xpath/Jaxp13XPathTemplate.java","results.add(nodeMapper.mapNode(nodes.item(i), i))"
github.com,"spring-projects/spring-ws",main,"spring-xml/src/main/java/org/springframework/xml/xpath/Jaxp13XPathExpressionFactory.java","result.add(nodeList.item(i))"
github.com,"spring-projects/spring-ws",main,"spring-xml/src/main/java/org/springframework/xml/xpath/Jaxp13XPathExpressionFactory.java","results.add(nodeMapper.mapNode(nodes.item(i), i))"
github.com,"spring-projects/spring-ws",main,"spring-xml/src/main/java/org/springframework/xml/xpath/JaxenXPathTemplate.java","results.add(nodeMapper.mapNode(node, i))"
github.com,"spring-projects/spring-ws",main,"spring-xml/src/main/java/org/springframework/xml/validation/Jaxp13ValidatorFactory.java","errors.add(ex)"
github.com,"spring-projects/spring-ws",main,"spring-xml/src/main/java/org/springframework/xml/validation/Jaxp13ValidatorFactory.java","errors.add(ex)"
github.com,"spring-projects/spring-ws",main,"spring-xml/src/main/java/org/springframework/xml/validation/Jaxp15ValidatorFactory.java","errors.add(ex)"
github.com,"spring-projects/spring-ws",main,"spring-xml/src/main/java/org/springframework/xml/validation/Jaxp15ValidatorFactory.java","errors.add(ex)"
github.com,"spring-projects/spring-ws",main,"spring-ws-core/src/test/java/org/springframework/ws/client/support/interceptor/ClientInterceptorAdapterTest.java","
bits.add(""handled request"")"
github.com,"spring-projects/spring-ws",main,"spring-ws-core/src/test/java/org/springframework/ws/client/support/interceptor/ClientInterceptorAdapterTest.java","
bits.add(""handled response"")"
github.com,"spring-projects/spring-ws",main,"spring-ws-core/src/test/java/org/springframework/ws/client/support/interceptor/ClientInterceptorAdapterTest.java","
bits.add(""handled fault"")"
github.com,"spring-projects/spring-ws",main,"spring-ws-core/src/test/java/org/springframework/ws/client/support/interceptor/ClientInterceptorAdapterTest.java","bits.add(""handled afterCompletion"")"
github.com,"spring-projects/spring-ws",main,"spring-ws-core/src/test/java/org/springframework/ws/config/annotation/WsConfigurationSupportTest.java","interceptors.add(new MyInterceptor())"
github.com,"spring-projects/spring-ws",main,"spring-ws-core/src/test/java/org/springframework/ws/config/annotation/WsConfigurerAdapterTest.java","interceptors.add(new MyInterceptor())"
github.com,"spring-projects/spring-ws",main,"spring-ws-core/src/test/java/org/springframework/ws/config/annotation/WsConfigurerAdapterTest.java","argumentResolvers.add(new MyMethodArgumentResolver())"
github.com,"spring-projects/spring-ws",main,"spring-ws-core/src/test/java/org/springframework/ws/config/annotation/WsConfigurerAdapterTest.java","returnValueHandlers.add(new MyReturnValueHandler())"
github.com,"spring-projects/spring-ws",main,"spring-ws-core/src/main/java/org/springframework/ws/config/AnnotationDrivenBeanDefinitionParser.java","
argumentResolvers.add(createBeanDefinition(MessageContextMethodArgumentResolver.class, source))"
github.com,"spring-projects/spring-ws",main,"spring-ws-core/src/main/java/org/springframework/ws/config/AnnotationDrivenBeanDefinitionParser.java","argumentResolvers.add(createBeanDefinition(XPathParamMethodArgumentResolver.class, source))"
github.com,"spring-projects/spring-ws",main,"spring-ws-core/src/main/java/org/springframework/ws/config/AnnotationDrivenBeanDefinitionParser.java","argumentResolvers.add(createBeanDefinition(SoapMethodArgumentResolver.class, source))"
github.com,"spring-projects/spring-ws",main,"spring-ws-core/src/main/java/org/springframework/ws/config/AnnotationDrivenBeanDefinitionParser.java","argumentResolvers.add(createBeanDefinition(SoapHeaderElementMethodArgumentResolver.class, source))"
github.com,"spring-projects/spring-ws",main,"spring-ws-core/src/main/java/org/springframework/ws/config/AnnotationDrivenBeanDefinitionParser.java","argumentResolvers.add(domProcessor)"
github.com,"spring-projects/spring-ws",main,"spring-ws-core/src/main/java/org/springframework/ws/config/AnnotationDrivenBeanDefinitionParser.java","returnValueHandlers.add(domProcessor)"
github.com,"spring-projects/spring-ws",main,"spring-ws-core/src/main/java/org/springframework/ws/config/AnnotationDrivenBeanDefinitionParser.java","argumentResolvers.add(sourceProcessor)"
github.com,"spring-projects/spring-ws",main,"spring-ws-core/src/main/java/org/springframework/ws/config/AnnotationDrivenBeanDefinitionParser.java","returnValueHandlers.add(sourceProcessor)"
github.com,"spring-projects/spring-ws",main,"spring-ws-core/src/main/java/org/springframework/ws/config/AnnotationDrivenBeanDefinitionParser.java","argumentResolvers.add(dom4jProcessor)"
github.com,"spring-projects/spring-ws",main,"spring-ws-core/src/main/java/org/springframework/ws/config/AnnotationDrivenBeanDefinitionParser.java","returnValueHandlers.add(dom4jProcessor)"
github.com,"spring-projects/spring-ws",main,"spring-ws-core/src/main/java/org/springframework/ws/config/AnnotationDrivenBeanDefinitionParser.java","argumentResolvers.add(xmlRootElementProcessor)"
github.com,"spring-projects/spring-ws",main,"spring-ws-core/src/main/java/org/springframework/ws/config/AnnotationDrivenBeanDefinitionParser.java","returnValueHandlers.add(xmlRootElementProcessor)"
github.com,"spring-projects/spring-ws",main,"spring-ws-core/src/main/java/org/springframework/ws/config/AnnotationDrivenBeanDefinitionParser.java","argumentResolvers.add(jaxbElementProcessor)"
github.com,"spring-projects/spring-ws",main,"spring-ws-core/src/main/java/org/springframework/ws/config/AnnotationDrivenBeanDefinitionParser.java","returnValueHandlers.add(jaxbElementProcessor)"
github.com,"spring-projects/spring-ws",main,"spring-ws-core/src/main/java/org/springframework/ws/config/AnnotationDrivenBeanDefinitionParser.java","argumentResolvers.add(jdomProcessor)"
github.com,"spring-projects/spring-ws",main,"spring-ws-core/src/main/java/org/springframework/ws/config/AnnotationDrivenBeanDefinitionParser.java","returnValueHandlers.add(jdomProcessor)"
github.com,"spring-projects/spring-ws",main,"spring-ws-core/src/main/java/org/springframework/ws/config/AnnotationDrivenBeanDefinitionParser.java","argumentResolvers.add(createBeanDefinition(StaxPayloadMethodArgumentResolver.class, source))"
github.com,"spring-projects/spring-ws",main,"spring-ws-core/src/main/java/org/springframework/ws/config/AnnotationDrivenBeanDefinitionParser.java","argumentResolvers.add(xomProcessor)"
github.com,"spring-projects/spring-ws",main,"spring-ws-core/src/main/java/org/springframework/ws/config/AnnotationDrivenBeanDefinitionParser.java","returnValueHandlers.add(xomProcessor)"
github.com,"spring-projects/spring-ws",main,"spring-ws-core/src/main/java/org/springframework/ws/config/AnnotationDrivenBeanDefinitionParser.java","argumentResolvers.add(marshallingProcessorDef)"
github.com,"spring-projects/spring-ws",main,"spring-ws-core/src/main/java/org/springframework/ws/config/AnnotationDrivenBeanDefinitionParser.java","returnValueHandlers.add(marshallingProcessorDef)"
github.com,"spring-projects/spring-ws",main,"spring-ws-core/src/main/java/org/springframework/ws/config/DynamicWsdlBeanDefinitionParser.java","xsds.add(schema.getAttribute(""location""))"
github.com,"spring-projects/spring-ws",main,"spring-ws-core/src/main/java/org/springframework/ws/soap/addressing/server/AbstractAddressingEndpointMapping.java","interceptors.add(addressingInterceptor)"
github.com,"spring-projects/spring-ws",main,"spring-ws-core/src/main/java/org/springframework/ws/soap/addressing/server/AbstractAddressingEndpointMapping.java","interceptors.add(smartInterceptor)"
github.com,"spring-projects/spring-ws",main,"spring-ws-core/src/main/java/org/springframework/ws/soap/saaj/SaajSoap12Header.java","result.add(saajHeaderElement)"
github.com,"spring-projects/spring-ws",main,"spring-ws-core/src/main/java/org/springframework/ws/soap/saaj/SaajSoap11Header.java","result.add(saajHeaderElement)"
github.com,"spring-projects/spring-ws",main,"spring-ws-core/src/main/java/org/springframework/ws/soap/server/SoapMessageDispatcher.java","notUnderstoodHeaderNames.add(headerName)"
github.com,"spring-projects/spring-ws",main,"spring-ws-core/src/main/java/org/springframework/ws/soap/server/endpoint/mapping/SoapActionAnnotationMethodEndpointMapping.java","result.add(soapAction.value())"
github.com,"spring-projects/spring-ws",main,"spring-ws-core/src/main/java/org/springframework/ws/soap/server/endpoint/mapping/SoapActionAnnotationMethodEndpointMapping.java","result.add(soapAction.value())"
github.com,"spring-projects/spring-ws",main,"spring-ws-core/src/main/java/org/springframework/ws/soap/server/endpoint/adapter/method/SoapHeaderElementMethodArgumentResolver.java","result.add(e)"
github.com,"spring-projects/spring-ws",main,"spring-ws-core/src/main/java/org/springframework/ws/server/endpoint/mapping/PayloadRootAnnotationMethodEndpointMapping.java","result.add(getQNameFromAnnotation(payloadRoot))"
github.com,"spring-projects/spring-ws",main,"spring-ws-core/src/main/java/org/springframework/ws/server/endpoint/mapping/PayloadRootAnnotationMethodEndpointMapping.java","result.add(getQNameFromAnnotation(payloadRoot))"
github.com,"spring-projects/spring-ws",main,"spring-ws-core/src/main/java/org/springframework/ws/server/endpoint/mapping/AbstractEndpointMapping.java","interceptors.add(smartInterceptor)"
github.com,"spring-projects/spring-ws",main,"spring-ws-core/src/main/java/org/springframework/ws/server/endpoint/adapter/DefaultMethodEndpointAdapter.java","methodArgumentResolvers.add(new DomPayloadMethodProcessor())"
github.com,"spring-projects/spring-ws",main,"spring-ws-core/src/main/java/org/springframework/ws/server/endpoint/adapter/DefaultMethodEndpointAdapter.java","methodArgumentResolvers.add(new MessageContextMethodArgumentResolver())"
github.com,"spring-projects/spring-ws",main,"spring-ws-core/src/main/java/org/springframework/ws/server/endpoint/adapter/DefaultMethodEndpointAdapter.java","methodArgumentResolvers.add(new SourcePayloadMethodProcessor())"
github.com,"spring-projects/spring-ws",main,"spring-ws-core/src/main/java/org/springframework/ws/server/endpoint/adapter/DefaultMethodEndpointAdapter.java","methodArgumentResolvers.add(new XPathParamMethodArgumentResolver())"
github.com,"spring-projects/spring-ws",main,"spring-ws-core/src/main/java/org/springframework/ws/server/endpoint/adapter/DefaultMethodEndpointAdapter.java","methodArgumentResolvers.add(new Dom4jPayloadMethodProcessor())"
github.com,"spring-projects/spring-ws",main,"spring-ws-core/src/main/java/org/springframework/ws/server/endpoint/adapter/DefaultMethodEndpointAdapter.java","methodArgumentResolvers.add(new XmlRootElementPayloadMethodProcessor())"
github.com,"spring-projects/spring-ws",main,"spring-ws-core/src/main/java/org/springframework/ws/server/endpoint/adapter/DefaultMethodEndpointAdapter.java","methodArgumentResolvers.add(new JaxbElementPayloadMethodProcessor())"
github.com,"spring-projects/spring-ws",main,"spring-ws-core/src/main/java/org/springframework/ws/server/endpoint/adapter/DefaultMethodEndpointAdapter.java","methodArgumentResolvers.add(new JDomPayloadMethodProcessor())"
github.com,"spring-projects/spring-ws",main,"spring-ws-core/src/main/java/org/springframework/ws/server/endpoint/adapter/DefaultMethodEndpointAdapter.java","methodArgumentResolvers.add(new StaxPayloadMethodArgumentResolver())"
github.com,"spring-projects/spring-ws",main,"spring-ws-core/src/main/java/org/springframework/ws/server/endpoint/adapter/DefaultMethodEndpointAdapter.java","methodArgumentResolvers.add(new XomPayloadMethodProcessor())"
github.com,"spring-projects/spring-ws",main,"spring-ws-core/src/main/java/org/springframework/ws/server/endpoint/adapter/DefaultMethodEndpointAdapter.java","methodArgumentResolvers.add(BeanUtils.instantiateClass(methodArgumentResolverClass))"
github.com,"spring-projects/spring-ws",main,"spring-ws-core/src/main/java/org/springframework/ws/server/endpoint/adapter/DefaultMethodEndpointAdapter.java","methodReturnValueHandlers.add(new DomPayloadMethodProcessor())"
github.com,"spring-projects/spring-ws",main,"spring-ws-core/src/main/java/org/springframework/ws/server/endpoint/adapter/DefaultMethodEndpointAdapter.java","methodReturnValueHandlers.add(new SourcePayloadMethodProcessor())"
github.com,"spring-projects/spring-ws",main,"spring-ws-core/src/main/java/org/springframework/ws/server/endpoint/adapter/DefaultMethodEndpointAdapter.java","methodReturnValueHandlers.add(new Dom4jPayloadMethodProcessor())"
github.com,"spring-projects/spring-ws",main,"spring-ws-core/src/main/java/org/springframework/ws/server/endpoint/adapter/DefaultMethodEndpointAdapter.java","methodReturnValueHandlers.add(new XmlRootElementPayloadMethodProcessor())"
github.com,"spring-projects/spring-ws",main,"spring-ws-core/src/main/java/org/springframework/ws/server/endpoint/adapter/DefaultMethodEndpointAdapter.java","methodReturnValueHandlers.add(new JaxbElementPayloadMethodProcessor())"
github.com,"spring-projects/spring-ws",main,"spring-ws-core/src/main/java/org/springframework/ws/server/endpoint/adapter/DefaultMethodEndpointAdapter.java","methodReturnValueHandlers.add(new JDomPayloadMethodProcessor())"
github.com,"spring-projects/spring-ws",main,"spring-ws-core/src/main/java/org/springframework/ws/server/endpoint/adapter/DefaultMethodEndpointAdapter.java","methodReturnValueHandlers.add(new XomPayloadMethodProcessor())"
github.com,"spring-projects/spring-ws",main,"spring-ws-core/src/main/java/org/springframework/ws/support/DefaultStrategiesHelper.java","result.add(strategy)"
github.com,"spring-projects/spring-ws",main,"spring-ws-support/src/main/java/org/springframework/ws/transport/mail/MailSenderConnection.java","headers.add(header.getName())"
github.com,"spring-projects/spring-ws",main,"spring-ws-support/src/main/java/org/springframework/ws/transport/mail/MailReceiverConnection.java","headers.add(header.getName())"
github.com,"spring-projects/spring-ws",main,"spring-ws-support/src/main/java/org/springframework/ws/transport/jms/support/JmsTransportUtils.java","results.add(header)"
github.com,"spring-projects/spring-ws",main,"spring-ws-test/src/main/java/org/springframework/ws/test/client/MockWebServiceMessageSender.java","expectedConnections.add(connection)"
github.com,"spring-projects/spring-ws",main,"spring-ws-test/src/main/java/org/springframework/ws/test/client/MockSenderConnection.java","requestMatchers.add(requestMatcher)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-samples/showcase/src/test/java/demo/showcase/ShowcaseTests.java","statesEntered.add(state)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-samples/showcase/src/test/java/demo/showcase/ShowcaseTests.java","statesExited.add(state)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-samples/showcase/src/test/java/demo/showcase/ShowcaseTests.java","transitions.add(transition)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-kryo/src/test/java/org/springframework/statemachine/kryo/StateMachineContextSerializerTests.java","childs.add(child)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-kryo/src/test/java/org/springframework/statemachine/kryo/StateMachineContextSerializerTests.java","childsFrom.add(childFrom)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-kryo/src/test/java/org/springframework/statemachine/kryo/KryoStateMachineSerialisationServiceTests.java","childs.add(child1)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-kryo/src/test/java/org/springframework/statemachine/kryo/KryoStateMachineSerialisationServiceTests.java","childs.add(child2)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-zookeeper/src/main/java/org/springframework/statemachine/zookeeper/ZookeeperStateMachineEnsemble.java","joined.add(stateMachine)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-zookeeper/src/main/java/org/springframework/statemachine/zookeeper/ZookeeperStateMachineEnsemble.java","joined.add(stateMachine)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-zookeeper/src/test/java/org/springframework/statemachine/zookeeper/ZookeeperStateMachineEnsembleTests.java","events.add(context)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-zookeeper/src/test/java/org/springframework/statemachine/zookeeper/ZookeeperStateMachineEnsembleTests.java","errors.add(exception)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-zookeeper/src/test/java/org/springframework/statemachine/zookeeper/ZookeeperStateMachinePersistTests.java","childs.add(child)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-samples/persist/src/test/java/demo/persist/PersistTests.java","statesEntered.add(state)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-samples/persist/src/test/java/demo/persist/PersistTests.java","statesExited.add(state)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-samples/persist/src/test/java/demo/persist/PersistTests.java","transitions.add(transition)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-uml/src/main/java/org/springframework/statemachine/uml/ResourcerResolver.java","holders.add(new Holder(resource.getFile().toURI()))"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-uml/src/main/java/org/springframework/statemachine/uml/ResourcerResolver.java","holders.add(new Holder(f.toURI(), f.toPath()))"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-uml/src/main/java/org/springframework/statemachine/uml/support/UmlModelParser.java","seenStateData.add(key)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-uml/src/main/java/org/springframework/statemachine/uml/support/UmlModelParser.java","seenEntryData.add(key)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-uml/src/main/java/org/springframework/statemachine/uml/support/UmlModelParser.java","seenExitData.add(key)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-uml/src/main/java/org/springframework/statemachine/uml/support/UmlModelParser.java","seenTransitionData.add(key)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-uml/src/main/java/org/springframework/statemachine/uml/support/UmlModelParser.java","list.add(resolveName(transition.getTarget()))"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-uml/src/main/java/org/springframework/statemachine/uml/support/UmlModelParser.java","list.add(resolveName(transition.getSource()))"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-uml/src/main/java/org/springframework/statemachine/uml/support/UmlModelParser.java","entrys.add(Actions.from(bean))"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-uml/src/main/java/org/springframework/statemachine/uml/support/UmlModelParser.java","entrys.add(Actions.from(new SpelExpressionAction<String, String>(parser.parseExpression(expression))))"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-uml/src/main/java/org/springframework/statemachine/uml/support/UmlModelParser.java","exits.add(Actions.from(bean))"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-uml/src/main/java/org/springframework/statemachine/uml/support/UmlModelParser.java","exits.add(Actions.from(new SpelExpressionAction<String, String>(parser.parseExpression(expression))))"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-uml/src/main/java/org/springframework/statemachine/uml/support/UmlModelParser.java","stateActions.add(Actions.from(bean))"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-uml/src/main/java/org/springframework/statemachine/uml/support/UmlModelParser.java","stateActions.add(Actions.from(new SpelExpressionAction<String, String>(parser.parseExpression(expression))))"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-uml/src/main/java/org/springframework/statemachine/uml/support/UmlModelParser.java","entrys.add(Actions.from(bean))"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-uml/src/main/java/org/springframework/statemachine/uml/support/UmlModelParser.java","exits.add(Actions.from(bean))"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-uml/src/main/java/org/springframework/statemachine/uml/support/UmlModelParser.java","stateActions.add(Actions.from(bean))"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-uml/src/main/java/org/springframework/statemachine/uml/support/UmlUtils.java","actions.add(action)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-uml/src/main/java/org/springframework/statemachine/uml/support/UmlUtils.java","actions.add(action)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-uml/src/main/java/org/springframework/statemachine/uml/support/UmlUtils.java","events.add(signal.getName())"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-uml/src/test/java/org/springframework/statemachine/uml/UmlStateMachineModelFactoryTests.java","entered.add(state.getId())"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-uml/src/test/java/org/springframework/statemachine/uml/UmlStateMachineModelFactoryTests.java","exited.add(state.getId())"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-samples/washer/src/test/java/demo/washer/WasherTests.java","statesEntered.add(state)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-samples/washer/src/test/java/demo/washer/WasherTests.java","statesExited.add(state)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-samples/washer/src/test/java/demo/washer/WasherTests.java","transitions.add(transition)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-build-tests/src/test/java/org/springframework/statemachine/buildtests/LinkedRegionsTests.java","statesEntered.add(state.getId())"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-recipes/src/main/java/org/springframework/statemachine/recipes/tasks/TasksHandler.java","tasks.add(new TaskWrapper(null, id, runnable))"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-recipes/src/main/java/org/springframework/statemachine/recipes/tasks/TasksHandler.java","tasks.add(new TaskWrapper(parent, id, runnable))"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-recipes/src/main/java/org/springframework/statemachine/recipes/tasks/TasksHandler.java","currentContext.getChilds().add(context)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-recipes/src/test/java/org/springframework/statemachine/recipes/TasksHandlerTests.java","childs.add(child)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-recipes/src/test/java/org/springframework/statemachine/recipes/TasksHandlerTests.java","childs.add(child)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-recipes/src/test/java/org/springframework/statemachine/recipes/TasksHandlerTests.java","statesEntered.add(state)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-recipes/src/test/java/org/springframework/statemachine/recipes/TasksHandlerTests.java","statesExited.add(state)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-recipes/src/test/java/org/springframework/statemachine/recipes/TestStateMachinePersist.java","contexts.add(context)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-recipes/src/test/java/org/springframework/statemachine/recipes/PersistStateMachineHandlerTests.java","listeners.add(new TestPersistStateChangeListener())"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-recipes/src/test/java/org/springframework/statemachine/recipes/PersistStateMachineHandlerTests.java","states.add(state)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-data/redis/src/test/java/org/springframework/statemachine/data/redis/RedisRepositoryTests.java",states::add
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-data/redis/src/test/java/org/springframework/statemachine/data/redis/RedisRepositoryTests.java",transitions::add
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-samples/cdplayer/src/test/java/demo/cdplayer/CdPlayerTests.java","statesEntered.add(state)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-samples/cdplayer/src/test/java/demo/cdplayer/CdPlayerTests.java","statesExited.add(state)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-test/src/main/java/org/springframework/statemachine/test/support/LatchStateMachineListener.java","this.stateChanged.add(new StateChangedWrapper<>(from, to))"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-test/src/main/java/org/springframework/statemachine/test/support/LatchStateMachineListener.java","this.stateEntered.add(state)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-test/src/main/java/org/springframework/statemachine/test/support/LatchStateMachineListener.java","this.stateExited.add(state)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-test/src/main/java/org/springframework/statemachine/test/support/LatchStateMachineListener.java","this.eventNotAccepted.add(event)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-test/src/main/java/org/springframework/statemachine/test/support/LatchStateMachineListener.java","this.transition.add(transition)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-test/src/main/java/org/springframework/statemachine/test/support/LatchStateMachineListener.java","this.transitionStarted.add(transition)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-test/src/main/java/org/springframework/statemachine/test/support/LatchStateMachineListener.java","this.transitionEnded.add(transition)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-test/src/main/java/org/springframework/statemachine/test/support/LatchStateMachineListener.java","this.stateMachineStarted.add(stateMachine)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-test/src/main/java/org/springframework/statemachine/test/support/LatchStateMachineListener.java","this.stateMachineStopped.add(stateMachine)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-test/src/main/java/org/springframework/statemachine/test/support/LatchStateMachineListener.java","this.extendedStateChanged.add(new ExtendedStateChangedWrapper(key, value))"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-test/src/main/java/org/springframework/statemachine/test/StateMachineTestPlanBuilder.java","this.sendEvent.add(event)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-test/src/main/java/org/springframework/statemachine/test/StateMachineTestPlanBuilder.java","this.sendEvent.add(event)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-test/src/main/java/org/springframework/statemachine/test/StateMachineTestPlanBuilder.java","this.sendMessage.add(event)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-test/src/main/java/org/springframework/statemachine/test/StateMachineTestPlanBuilder.java","this.sendMessage.add(event)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-test/src/main/java/org/springframework/statemachine/test/StateMachineTestPlanBuilder.java","steps.add(new StateMachineTestPlanStep<S, E>(sendEvent, sendMessage, sendEventMachineId, sendEventToAll,
		sendEventParallel, expectStates, expectStateChanged, expectStateEntered, expectStateExited,
		expectEventNotAccepted, expectTransition, expectTransitionStarted, expectTransitionEnded,
		expectStateMachineStarted, expectStateMachineStopped, expectVariableKeys,
		expectVariableMatchers, expectVariables, expectExtendedStateChanged,
		expectStatesEntrered, expectStatesExited))"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-test/src/main/java/org/springframework/statemachine/test/StateMachineTestPlan.java","sendVia.add(stateMachines.get(step.sendEventMachineId))"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-test/src/main/java/org/springframework/statemachine/test/StateMachineTestPlan.java","sendVia.add(stateMachines.values().iterator().next())"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-test/src/main/java/org/springframework/statemachine/test/StateMachineTestPlan.java","sendVia.add(stateMachines.get(step.sendEventMachineId))"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-test/src/main/java/org/springframework/statemachine/test/StateMachineTestPlan.java","sendVia.add(stateMachines.values().iterator().next())"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-test/src/main/java/org/springframework/statemachine/test/StateMachineTestPlan.java","joins.add(t)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-samples/datajpamultipersist/src/main/java/demo/datajpamultipersist/StateMachineController.java","events.add(t.getEvent())"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-autoconfigure/src/main/java/org/springframework/statemachine/boot/actuate/InMemoryStateMachineTraceRepository.java","this.traces.add(0, trace)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-autoconfigure/src/main/java/org/springframework/statemachine/boot/actuate/InMemoryStateMachineTraceRepository.java","this.traces.add(trace)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-samples/web/src/main/java/demo/web/StateMachineController.java","list.add(new StateMachineEvent(state.toString()))"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-samples/web/src/main/java/demo/web/StateMachineController.java","list.add(new StateMachineEvent(state.toString()))"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/test/java/org/springframework/statemachine/config/common/annotation/importing/SimpleImportingConfiguration.java","types.add(EnableImportingTest.class)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/config/configuration/StateMachineFactoryConfiguration.java","types.add(EnableStateMachineFactory.class)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/config/configuration/StateMachineConfiguration.java","types.add(EnableStateMachine.class)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/config/configurers/DefaultConfigurationConfigurer.java","this.listeners.add(listener)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/config/configurers/DefaultJunctionTransitionConfigurer.java","junctions.add(first)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/config/configurers/DefaultJunctionTransitionConfigurer.java","junctions.add(last)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/config/configurers/DefaultJunctionTransitionConfigurer.java","thens.add(new JunctionData<S, E>(source, target, guard, actions))"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/config/configurers/DefaultForkTransitionConfigurer.java","targets.add(target)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/config/configurers/DefaultJoinTransitionConfigurer.java","this.sources.add(source)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/config/configurers/DefaultChoiceTransitionConfigurer.java","choices.add(first)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/config/configurers/DefaultChoiceTransitionConfigurer.java","choices.add(last)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/config/configurers/DefaultChoiceTransitionConfigurer.java","thens.add(new ChoiceData<S, E>(source, target, guard, actions))"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/config/builders/StateMachineConfigurationBuilder.java","interceptorsCopy.add(interceptor)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/config/common/annotation/configuration/AutowireBeanFactoryObjectPostProcessor.java","disposableBeans.add((DisposableBean) result)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/config/common/annotation/configuration/AutowireBeanFactoryObjectPostProcessor.java","lifecycleBeans.add((Lifecycle) result)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/config/common/annotation/AbstractConfiguredAnnotationBuilder.java","configs.add(configurer)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/config/common/annotation/AbstractConfiguredAnnotationBuilder.java","configs.add(configurer)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/config/common/annotation/AnnotationConfigurerAdapter.java","this.postProcessors.add(objectPostProcessor)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/test/java/org/springframework/statemachine/StateMachineResetTests.java","childs.add(stateMachineContext1)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/test/java/org/springframework/statemachine/StateMachineResetTests.java","childs.add(stateMachineContext2)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/test/java/org/springframework/statemachine/StateMachineResetTests.java","childs.add(stateMachineContext1)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/test/java/org/springframework/statemachine/StateMachineResetTests.java","childs.add(stateMachineContext2)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/test/java/org/springframework/statemachine/state/ExitEntryStateTests.java","entered.add(state.getId())"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/test/java/org/springframework/statemachine/state/ExitEntryStateTests.java","exited.add(state.getId())"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/test/java/org/springframework/statemachine/state/JoinPseudoStateTests.java","joins.add(Collections.singletonList(s1))"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/test/java/org/springframework/statemachine/state/JoinPseudoStateTests.java","joins.add(Collections.singletonList(s2))"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/test/java/org/springframework/statemachine/state/JoinPseudoStateTests.java","joins.add(Arrays.asList(s11, s12))"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/test/java/org/springframework/statemachine/state/JoinPseudoStateTests.java","joins.add(Arrays.asList(s21, s22))"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/test/java/org/springframework/statemachine/state/JoinStateTests.java","transitions.add(transition)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/test/java/org/springframework/statemachine/state/ChoiceStateTests.java","entered.add(state)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/test/java/org/springframework/statemachine/state/ChoiceStateTests.java","exited.add(state)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/test/java/org/springframework/statemachine/StateMachineTests.java","entered.add(state)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/test/java/org/springframework/statemachine/StateMachineTests.java","exited.add(state)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/test/java/org/springframework/statemachine/transition/LocalTransitionTests.java","entered.add(state.getId())"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/test/java/org/springframework/statemachine/transition/LocalTransitionTests.java","exited.add(state.getId())"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/test/java/org/springframework/statemachine/transition/TransitionOrderTests.java","statesEntered.add(state.getId())"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/test/java/org/springframework/statemachine/listener/ListenerTests.java","states.add(new Holder(from, to))"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/test/java/org/springframework/statemachine/listener/ListenerTests.java","extended.add(new Holder2(key, value))"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/test/java/org/springframework/statemachine/access/StateMachineAccessTests.java","list.add(MockStateMachine.this)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/test/java/org/springframework/statemachine/ReactiveTests.java","ers.add(er)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/test/java/org/springframework/statemachine/AbstractStateMachineTests.java","stateContexts.add(context)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/test/java/org/springframework/statemachine/support/StateContextExpressionMethodsTests.java","events.add(event)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/test/java/org/springframework/statemachine/support/StateChangeInterceptorTests.java","preStateChangeStates2.add(state)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/test/java/org/springframework/statemachine/support/StateChangeInterceptorTests.java","postStateChangeStates2.add(state)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/test/java/org/springframework/statemachine/persist/StateMachinePersistTests4.java","tos.add(to)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/test/java/org/springframework/statemachine/persist/StateMachinePersistTests4.java","transitions.add(transition)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/test/java/org/springframework/statemachine/StateContextTests.java","contexts.add(stateContext)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/test/java/org/springframework/statemachine/event/StateMachineEventTests.java","stateChangedEvents.add(event)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/test/java/org/springframework/statemachine/event/StateMachineEventTests.java","eventNotAcceptedEvents.add(event)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/test/java/org/springframework/statemachine/event/StateMachineEventTests.java","eventNotAccepted.add(event)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/test/java/org/springframework/statemachine/config/common/annotation/simple/SimpleTestConfiguration2.java","types.add(EnableSimpleTest2.class)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/state/RegionState.java","ids.add(getId())"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/state/RegionState.java","states.add(this)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/state/AbstractSimpleState.java","states.add(this)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/state/JoinPseudoState.java","this.track.add(new ArrayList<State<S,E>>(list))"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/state/JoinPseudoState.java","track.add(new ArrayList<State<S,E>>(list))"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/state/AbstractState.java","completionListeners.add(listener)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/state/AbstractState.java","scheduledActions.add(new ScheduledAction(subscription, timeout, System.currentTimeMillis()))"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/state/StateMachineState.java","states.add(this)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/listener/OrderedComposite.java","ordered.add(item)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/listener/OrderedComposite.java","ordered.add(item)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/listener/OrderedComposite.java","unordered.add(item)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/security/StateMachineSecurityInterceptor.java","configAttributes.add(new SecurityConfig(attribute))"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/security/StateMachineSecurityInterceptor.java","configAttributes.add(new TransitionExpressionConfigAttribute(expressionParser.parseExpression(rule.getExpression())))"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/security/StateMachineSecurityInterceptor.java","configAttributes.add(new SecurityConfig(attribute))"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/security/StateMachineSecurityInterceptor.java","configAttributes.add(new EventExpressionConfigAttribute(expressionParser.parseExpression(rule.getExpression())))"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/security/StateMachineSecurityInterceptor.java","voters.add(new TransitionExpressionVoter())"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/security/StateMachineSecurityInterceptor.java","voters.add(new TransitionVoter<Object, Object>())"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/security/StateMachineSecurityInterceptor.java","voters.add(new RoleVoter())"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/security/StateMachineSecurityInterceptor.java","voters.add(new EventExpressionVoter<Object>())"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/security/StateMachineSecurityInterceptor.java","voters.add(new EventVoter<Object>())"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/security/StateMachineSecurityInterceptor.java","voters.add(new RoleVoter())"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/processor/StateMachineMethodInvokerHelper.java","
// TODO Consider to use global option to determine a precedence of
// methods
this.handlerMethodsList.add(this.handlerMethods)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/processor/StateMachineMethodInvokerHelper.java","this.handlerMethodsList.add(this.handlerMessageMethods)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/processor/StateMachineAnnotationPostProcessor.java","annotationChain.add(ann)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/processor/StateMachineAnnotationPostProcessor.java","annotationChain.add(ann)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/processor/StateMachineHandlerCallHelper.java","handlersList.add(entry.handler)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/processor/StateMachineHandlerCallHelper.java","handlersList.add(entry.handler)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/processor/StateMachineHandlerCallHelper.java","handlersList.add(entry.handler)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/processor/StateMachineHandlerCallHelper.java","handlersList.add(entry.handler)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/processor/StateMachineHandlerCallHelper.java","handlersList.add(entry.handler)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/processor/StateMachineHandlerCallHelper.java","handlersList.add(entry.handler)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/processor/StateMachineHandlerCallHelper.java","handlersList.add(entry.handler)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/processor/StateMachineHandlerCallHelper.java","handlersList.add(entry.handler)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/processor/StateMachineHandlerCallHelper.java","handlersList.add(entry.handler)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/processor/StateMachineHandlerCallHelper.java","handlersList.add(entry.handler)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/processor/StateMachineHandlerCallHelper.java","handlersList.add(entry.handler)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/processor/StateMachineHandlerCallHelper.java","handlersList.add(entry.handler)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/processor/StateMachineHandlerCallHelper.java","list.add(cacheEntry)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/processor/StateMachineHandlerCallHelper.java","results.add(handler.handle(runtime))"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/support/FixedMethodFilter.java","filteredList.add(this.method)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/support/UniqueMethodFilter.java","this.uniqueMethods.add(org.springframework.util.ClassUtils.getMostSpecificMethod(method, targetClass))"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/support/ReactiveStateMachineExecutor.java","trans.add(initialTransition)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/support/ReactiveStateMachineExecutor.java","trans.add(tra)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/support/ReactiveStateMachineExecutor.java","trans.add(t)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/support/ReactiveStateMachineExecutor.java","transWithGuards.add(t)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/support/StateMachineInterceptorList.java","interceptors.add(interceptor)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/support/AnnotatedMethodFilter.java","annotatedCandidates.add(method)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/support/AnnotatedMethodFilter.java","fallbackCandidates.add(method)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/support/OrderedCompositeItem.java","ordered.add(item)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/support/OrderedCompositeItem.java","ordered.add(item)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/support/OrderedCompositeItem.java","unordered.add(item)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/support/tree/Tree.java","notMapped.add(new DataWrap<T>(data, id, parent))"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/support/tree/Tree.java","root.getChildren().add(n)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/support/tree/Tree.java","node.getChildren().add(n)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/support/AbstractStateMachine.java","triggerlessTransitions.add(transition)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/support/AbstractStateMachine.java","list.add(AbstractStateMachine.this)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/support/AbstractStateMachine.java","list.add((StateMachineAccess<S, E>)submachine)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/support/AbstractStateMachine.java","list.add((StateMachineAccess<S, E>) region)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/support/AbstractStateMachine.java","monos.add(mono)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/support/AbstractStateMachine.java","monos.add(resetMono)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/support/AbstractStateMachine.java","monos.add(mono)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/support/AbstractStateMachine.java","monos.add(mono)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/support/AbstractStateMachine.java","monos.add(mono)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/support/AbstractStateMachine.java","monos.add(mono)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/support/AbstractStateMachine.java","listeners.add(new PseudoStateListener<S, E>() {

	@Override
	public void onContext(PseudoStateContext<S, E> context) {
		PseudoState<S, E> pseudoState = context.getPseudoState();
		State<S, E> toStateOrig = findStateWithPseudoState(pseudoState);
		StateContext<S, E> stateContext = buildStateContext(Stage.STATE_EXIT, null, null, getRelayStateMachine());
		Mono<State<S, E>> toState = followLinkedPseudoStates(toStateOrig, stateContext);
		// TODO: try to find matching transition based on direct link.
		// should make this built-in in pseudostates
		toState
			.flatMap(toState2 -> {
				return Mono.defer(() -> {
					Transition<S, E> t = findTransition(toStateOrig, toState2);
					return switchToState(toState2, null, t, getRelayStateMachine());
				});
			})
			.then()
			.and(pseudoState.exit(stateContext))
			// TODO: REACTOR should remove fire and forget sub
			.subscribe();
	}
})"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/persist/AbstractStateMachinePersister.java","childs.add(buildStateMachineContext(submachine))"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/persist/AbstractStateMachinePersister.java","childs.add(buildStateMachineContext(rsm))"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/persist/AbstractPersistingStateMachineInterceptor.java","// realistically we can only add refs because reqions are independent
// and when restoring, those child contexts need to get dehydrated
childRefs.add(r.getId())"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/config/AbstractStateMachineFactory.java","machines.add(machine)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/config/AbstractStateMachineFactory.java","machines.add(m)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/config/AbstractStateMachineFactory.java","machines.add(machine)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/config/AbstractStateMachineFactory.java","out.add(transitionData)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/config/AbstractStateMachineFactory.java","out.add(transitionData)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/config/AbstractStateMachineFactory.java","holderList.add(new HolderListItem<S, E>((S)stateData.getParent(), containingStateHolder))"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/config/AbstractStateMachineFactory.java","holderList.add(new HolderListItem<S, E>((S)stateData.getParent(), containingStateHolder))"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/config/AbstractStateMachineFactory.java","holderList.add(new HolderListItem<S, E>(c.getTarget(), holder))"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/config/AbstractStateMachineFactory.java","choices.add(new ChoiceStateData<S, E>(holder, c.getGuard(), Actions.from(c.getActions())))"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/config/AbstractStateMachineFactory.java","holderList.add(new HolderListItem<S, E>(c.getTarget(), holder))"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/config/AbstractStateMachineFactory.java","junctions.add(new JunctionStateData<S, E>(holder, c.getGuard(), Actions.from(c.getActions())))"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/config/AbstractStateMachineFactory.java","holderList.add(new HolderListItem<S, E>(entry.getTarget(), holder))"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/config/AbstractStateMachineFactory.java","forks.add(stateMap.get(fs))"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/config/AbstractStateMachineFactory.java","j.add(ss3)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/config/AbstractStateMachineFactory.java","joins.add(j)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/config/AbstractStateMachineFactory.java","joins.add(Collections.singletonList(stateMap.get(fs)))"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/config/AbstractStateMachineFactory.java","holderList.add(new HolderListItem<S, E>(tt.getTarget(), holder))"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/config/AbstractStateMachineFactory.java","joinTargets.add(new JoinStateData<S, E>(holder, tt.getGuard()))"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-core/src/main/java/org/springframework/statemachine/config/AbstractStateMachineFactory.java","((AbstractState<S, E>)stateMap.get(source)).getTriggers().add(trigger)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-samples/tasks/src/test/java/demo/tasks/TasksTests.java","statesEntered.add(state)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-samples/tasks/src/test/java/demo/tasks/TasksTests.java","statesExited.add(state)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-samples/turnstile/src/test/java/demo/turnstile/TurnstileTests.java","statesEntered.add(state)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-samples/turnstile/src/test/java/demo/turnstile/TurnstileTests.java","statesExited.add(state)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-samples/turnstile/src/test/java/demo/turnstile/TurnstileTests.java","transitions.add(transition)"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-data/src/main/java/org/springframework/statemachine/data/RepositoryStateMachineModelFactory.java","list.add(t.getTarget().getState())"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-data/src/main/java/org/springframework/statemachine/data/RepositoryStateMachineModelFactory.java","list.add(t.getSource().getState())"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-data/src/main/java/org/springframework/statemachine/data/RepositoryStateMachinePersist.java","contexts.add(serialisationService
		.deserialiseStateMachineContext(repositoryStateMachine.getStateMachineContext()))"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-samples/deploy/src/main/java/demo/deploy/StateMachineLogListener.java","messages.add(""Enter "" + stateContext.getTarget().getId())"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-samples/deploy/src/main/java/demo/deploy/StateMachineLogListener.java","messages.add(""ERROR got exception "" + stateContext.getExtendedState().getVariables().get(""error""))"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-samples/deploy/src/main/java/demo/deploy/StateMachineLogListener.java","messages.add(""Exit "" + stateContext.getSource().getId())"
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-data/mongodb/src/test/java/org/springframework/statemachine/data/mongodb/MongoDbRepositoryTests.java",states::add
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-data/mongodb/src/test/java/org/springframework/statemachine/data/mongodb/MongoDbRepositoryTests.java",transitions::add
github.com,"spring-projects/spring-statemachine",main,"spring-statemachine-samples/datajpa/src/main/java/demo/datajpa/StateMachineController.java","events.add(t.getEvent())"
github.com,"spring-cloud/spring-cloud-task",main,"spring-cloud-task-batch/src/main/java/org/springframework/cloud/task/batch/partition/TaskLauncherHandler.java","arguments.add(formatArgument(DeployerPartitionHandler.SPRING_CLOUD_TASK_JOB_EXECUTION_ID,
		String.valueOf(workerStepExecution.getJobExecution().getId())))"
github.com,"spring-cloud/spring-cloud-task",main,"spring-cloud-task-batch/src/main/java/org/springframework/cloud/task/batch/partition/TaskLauncherHandler.java","arguments.add(formatArgument(DeployerPartitionHandler.SPRING_CLOUD_TASK_STEP_EXECUTION_ID,
		String.valueOf(workerStepExecution.getId())))"
github.com,"spring-cloud/spring-cloud-task",main,"spring-cloud-task-batch/src/main/java/org/springframework/cloud/task/batch/partition/TaskLauncherHandler.java","arguments.add(formatArgument(DeployerPartitionHandler.SPRING_CLOUD_TASK_STEP_NAME, this.stepName))"
github.com,"spring-cloud/spring-cloud-task",main,"spring-cloud-task-batch/src/main/java/org/springframework/cloud/task/batch/partition/TaskLauncherHandler.java","arguments.add(formatArgument(DeployerPartitionHandler.SPRING_CLOUD_TASK_NAME,
		String.format(""%s_%s_%s"", this.taskExecution.getTaskName(),
				workerStepExecution.getJobExecution().getJobInstance().getJobName(),
				workerStepExecution.getStepName())))"
github.com,"spring-cloud/spring-cloud-task",main,"spring-cloud-task-batch/src/main/java/org/springframework/cloud/task/batch/partition/TaskLauncherHandler.java","arguments.add(formatArgument(DeployerPartitionHandler.SPRING_CLOUD_TASK_PARENT_EXECUTION_ID,
		String.valueOf(this.taskExecution.getExecutionId())))"
github.com,"spring-cloud/spring-cloud-task",main,"spring-cloud-task-batch/src/main/java/org/springframework/cloud/task/batch/partition/TaskLauncherHandler.java","arguments.add(formatArgument(DeployerPartitionHandler.SPRING_CLOUD_TASK_EXECUTION_ID,
		String.valueOf(partitionTaskExecution.getExecutionId())))"
github.com,"spring-cloud/spring-cloud-task",main,"spring-cloud-task-batch/src/main/java/org/springframework/cloud/task/batch/handler/TaskJobLauncherApplicationRunner.java","this.jobExecutionList.add(execution)"
github.com,"spring-cloud/spring-cloud-task",main,"spring-cloud-task-batch/src/main/java/org/springframework/cloud/task/batch/handler/TaskJobLauncherApplicationRunner.java","failedJobExecutions.add(jobExecution)"
github.com,"spring-cloud/spring-cloud-task",main,"spring-cloud-task-batch/src/test/java/org/springframework/cloud/task/batch/partition/SimpleCommandLineArgsProviderTests.java","appendedValues.add(""one"")"
github.com,"spring-cloud/spring-cloud-task",main,"spring-cloud-task-batch/src/test/java/org/springframework/cloud/task/batch/partition/SimpleCommandLineArgsProviderTests.java","appendedValues.add(""two"")"
github.com,"spring-cloud/spring-cloud-task",main,"spring-cloud-task-batch/src/test/java/org/springframework/cloud/task/batch/partition/SimpleCommandLineArgsProviderTests.java","appendedValues.add(""three"")"
github.com,"spring-cloud/spring-cloud-task",main,"spring-cloud-task-batch/src/test/java/org/springframework/cloud/task/batch/listener/TaskBatchExecutionListenerTests.java","jobNames.add(""job1"")"
github.com,"spring-cloud/spring-cloud-task",main,"spring-cloud-task-batch/src/test/java/org/springframework/cloud/task/batch/listener/TaskBatchExecutionListenerTests.java","jobNames.add(""job2"")"
github.com,"spring-cloud/spring-cloud-task",main,"spring-cloud-task-batch/src/test/java/org/springframework/cloud/task/batch/listener/TaskBatchExecutionListenerTests.java","jobNames.add(""TESTOBJECT"")"
github.com,"spring-cloud/spring-cloud-task",main,"spring-cloud-task-integration-tests/src/test/java/org/springframework/cloud/task/listener/TaskEventTests.java","results.add(target.receive(10000, bindingName))"
github.com,"spring-cloud/spring-cloud-task",main,"spring-cloud-task-integration-tests/src/test/java/org/springframework/cloud/task/listener/BatchExecutionEventTests.java","results.add(target.receive(10000, bindingName))"
github.com,"spring-cloud/spring-cloud-task",main,"spring-cloud-task-core/src/main/java/org/springframework/cloud/task/listener/TaskLifecycleListener.java","this.taskExecutionListeners.add(this.taskListenerExecutorObjectFactory.getObject())"
github.com,"spring-cloud/spring-cloud-task",main,"spring-cloud-task-core/src/main/java/org/springframework/cloud/task/repository/dao/MapTaskExecutionDao.java","taskNamesAsList.add(taskName)"
github.com,"spring-cloud/spring-cloud-task",main,"spring-cloud-task-core/src/main/java/org/springframework/cloud/task/repository/dao/JdbcTaskExecutionDao.java","taskNamesAsList.add(taskName)"
github.com,"spring-cloud/spring-cloud-task",main,"spring-cloud-task-core/src/main/java/org/springframework/cloud/task/repository/dao/JdbcTaskExecutionDao.java","params.add(rs.getString(2))"
github.com,"spring-cloud/spring-cloud-task",main,"spring-cloud-task-core/src/test/java/org/springframework/cloud/task/util/TestDBUtils.java","arguments.add((String) row.get(""TASK_PARAM""))"
github.com,"spring-cloud/spring-cloud-task",main,"spring-cloud-task-core/src/test/java/org/springframework/cloud/task/util/TaskExecutionCreator.java","params.add(UUID.randomUUID().toString())"
github.com,"spring-cloud/spring-cloud-task",main,"spring-cloud-task-core/src/test/java/org/springframework/cloud/task/util/TaskExecutionCreator.java","params.add(UUID.randomUUID().toString())"
github.com,"spring-cloud/spring-cloud-task",main,"spring-cloud-task-core/src/test/java/org/springframework/cloud/task/util/TestVerifierUtils.java","args.add(UUID.randomUUID().toString())"
github.com,"spring-cloud/spring-cloud-task",main,"spring-cloud-task-core/src/test/java/org/springframework/cloud/task/listener/TaskListenerExecutorObjectFactoryTests.java","TaskListenerExecutorObjectFactoryTests.taskExecutionListenerResults.add(taskExecution)"
github.com,"spring-cloud/spring-cloud-task",main,"spring-cloud-task-core/src/test/java/org/springframework/cloud/task/listener/TaskListenerExecutorObjectFactoryTests.java","TaskListenerExecutorObjectFactoryTests.taskExecutionListenerResults.add(taskExecution)"
github.com,"spring-cloud/spring-cloud-task",main,"spring-cloud-task-core/src/test/java/org/springframework/cloud/task/listener/TaskListenerExecutorObjectFactoryTests.java","TaskListenerExecutorObjectFactoryTests.taskExecutionListenerResults.add(taskExecution)"
github.com,"spring-cloud/spring-cloud-task",main,"spring-cloud-task-core/src/test/java/org/springframework/cloud/task/listener/TaskLifecycleListenerTests.java","startupOrderList.add(this.id)"
github.com,"spring-cloud/spring-cloud-task",main,"spring-cloud-task-core/src/test/java/org/springframework/cloud/task/listener/TaskLifecycleListenerTests.java","endOrderList.add(this.id)"
github.com,"spring-cloud/spring-cloud-task",main,"spring-cloud-task-core/src/test/java/org/springframework/cloud/task/listener/TaskLifecycleListenerTests.java","failOrderList.add(this.id)"
github.com,"spring-cloud/spring-cloud-task",main,"spring-cloud-task-core/src/test/java/org/springframework/cloud/task/repository/support/SimpleTaskExplorerTests.java","taskNamesAsList.add(taskExecution.getTaskName())"
github.com,"spring-cloud/spring-cloud-task",main,"spring-cloud-task-core/src/test/java/org/springframework/cloud/task/repository/support/SimpleTaskExplorerTests.java","sortedExecIds.add(iterator.next().getExecutionId())"
github.com,"spring-cloud/spring-cloud-task",main,"spring-cloud-starter-single-step-batch-job/src/main/java/org/springframework/cloud/task/batch/autoconfigure/kafka/KafkaItemReaderAutoConfiguration.java","kafkaItemReaderProperties.getPartitions().add(0)"
github.com,"spring-cloud/spring-cloud-task",main,"spring-cloud-starter-single-step-batch-job/src/main/java/org/springframework/cloud/task/batch/autoconfigure/flatfile/FlatFileItemWriterAutoConfiguration.java","fields.add(item.get(name))"
github.com,"spring-cloud/spring-cloud-task",main,"spring-cloud-starter-single-step-batch-job/src/main/java/org/springframework/cloud/task/batch/autoconfigure/flatfile/FlatFileItemReaderAutoConfiguration.java","ranges.add(rangeConverter.convert(range))"
github.com,"spring-cloud/spring-cloud-task",main,"spring-cloud-starter-single-step-batch-job/src/test/java/org/springframework/cloud/task/batch/autoconfigure/jdbc/JdbcBatchItemWriterAutoConfigurationTests.java","
items.add(Collections.singletonMap(""item_name"", ""foo""))"
github.com,"spring-cloud/spring-cloud-task",main,"spring-cloud-starter-single-step-batch-job/src/test/java/org/springframework/cloud/task/batch/autoconfigure/jdbc/JdbcBatchItemWriterAutoConfigurationTests.java","items.add(Collections.singletonMap(""item_name"", ""bar""))"
github.com,"spring-cloud/spring-cloud-task",main,"spring-cloud-starter-single-step-batch-job/src/test/java/org/springframework/cloud/task/batch/autoconfigure/jdbc/JdbcBatchItemWriterAutoConfigurationTests.java","items.add(Collections.singletonMap(""item_name"", ""baz""))"
github.com,"spring-cloud/spring-cloud-task",main,"spring-cloud-starter-single-step-batch-job/src/test/java/org/springframework/cloud/task/batch/autoconfigure/jdbc/JdbcBatchItemWriterAutoConfigurationTests.java","
items.add(Collections.singletonMap(""item_foo"", ""foo""))"
github.com,"spring-cloud/spring-cloud-task",main,"spring-cloud-starter-single-step-batch-job/src/test/java/org/springframework/cloud/task/batch/autoconfigure/jdbc/JdbcBatchItemWriterAutoConfigurationTests.java","items.add(Collections.singletonMap(""item_foo"", ""bar""))"
github.com,"spring-cloud/spring-cloud-task",main,"spring-cloud-starter-single-step-batch-job/src/test/java/org/springframework/cloud/task/batch/autoconfigure/jdbc/JdbcBatchItemWriterAutoConfigurationTests.java","items.add(Collections.singletonMap(""item_foo"", ""baz""))"
github.com,"spring-cloud/spring-cloud-task",main,"spring-cloud-starter-single-step-batch-job/src/test/java/org/springframework/cloud/task/batch/autoconfigure/kafka/KafkaItemWriterTests.java","result.add((Map<String, Object>) cs.value())"
github.com,"spring-cloud/spring-cloud-task",main,"spring-cloud-starter-single-step-batch-job/src/test/java/org/springframework/cloud/task/batch/autoconfigure/kafka/KafkaItemWriterTests.java","firstNames.add((String) s.get(""first_name""))"
github.com,"spring-cloud/spring-cloud-task",main,"spring-cloud-starter-single-step-batch-job/src/test/java/org/springframework/cloud/task/batch/autoconfigure/kafka/KafkaItemWriterTests.java","itemReaderList.add(prepMap)"
github.com,"spring-cloud/spring-cloud-task",main,"spring-cloud-starter-single-step-batch-job/src/test/java/org/springframework/cloud/task/batch/autoconfigure/kafka/KafkaItemReaderAutoConfigurationTests.java","results.add(writtenItems.get(i).get(""first_name""))"
github.com,"spring-cloud/spring-cloud-task",main,"spring-cloud-starter-single-step-batch-job/src/test/java/org/springframework/cloud/task/batch/autoconfigure/rabbit/AmqpItemWriterAutoConfigurationTests.java","itemReaderList.add(prepMap)"
github.com,"spring-cloud/spring-cloud-task",main,"spring-cloud-starter-single-step-batch-job/src/test/java/org/springframework/cloud/task/batch/autoconfigure/flatfile/FlatFileItemWriterAutoConfigurationTests.java","
items.add(Collections.singletonMap(""item"", ""foo""))"
github.com,"spring-cloud/spring-cloud-task",main,"spring-cloud-starter-single-step-batch-job/src/test/java/org/springframework/cloud/task/batch/autoconfigure/flatfile/FlatFileItemWriterAutoConfigurationTests.java","items.add(Collections.singletonMap(""item"", ""bar""))"
github.com,"spring-cloud/spring-cloud-task",main,"spring-cloud-starter-single-step-batch-job/src/test/java/org/springframework/cloud/task/batch/autoconfigure/flatfile/FlatFileItemWriterAutoConfigurationTests.java","items.add(Collections.singletonMap(""item"", ""baz""))"
github.com,"spring-cloud/spring-cloud-task",main,"spring-cloud-starter-single-step-batch-job/src/test/java/org/springframework/cloud/task/batch/autoconfigure/flatfile/FlatFileItemWriterAutoConfigurationTests.java","
items.add(Collections.singletonMap(""item"", ""foo""))"
github.com,"spring-cloud/spring-cloud-task",main,"spring-cloud-starter-single-step-batch-job/src/test/java/org/springframework/cloud/task/batch/autoconfigure/flatfile/FlatFileItemWriterAutoConfigurationTests.java","items.add(Collections.singletonMap(""item"", ""bar""))"
github.com,"spring-cloud/spring-cloud-task",main,"spring-cloud-starter-single-step-batch-job/src/test/java/org/springframework/cloud/task/batch/autoconfigure/flatfile/FlatFileItemWriterAutoConfigurationTests.java","items.add(Collections.singletonMap(""item"", ""baz""))"
github.com,"spring-cloud/spring-cloud-task",main,"spring-cloud-starter-single-step-batch-job/src/test/java/org/springframework/cloud/task/batch/autoconfigure/flatfile/FlatFileItemWriterAutoConfigurationTests.java","
items.add(Collections.singletonMap(""item"", ""foo""))"
github.com,"spring-cloud/spring-cloud-task",main,"spring-cloud-starter-single-step-batch-job/src/test/java/org/springframework/cloud/task/batch/autoconfigure/flatfile/FlatFileItemWriterAutoConfigurationTests.java","items.add(Collections.singletonMap(""item"", ""bar""))"
github.com,"spring-cloud/spring-cloud-task",main,"spring-cloud-starter-single-step-batch-job/src/test/java/org/springframework/cloud/task/batch/autoconfigure/flatfile/FlatFileItemWriterAutoConfigurationTests.java","items.add(Collections.singletonMap(""item"", ""baz""))"
github.com,"spring-cloud/spring-cloud-task",main,"spring-cloud-starter-single-step-batch-job/src/test/java/org/springframework/cloud/task/batch/autoconfigure/flatfile/FlatFileItemWriterAutoConfigurationTests.java","
items.add(Collections.singletonMap(""item"", ""foo""))"
github.com,"spring-cloud/spring-cloud-task",main,"spring-cloud-starter-single-step-batch-job/src/test/java/org/springframework/cloud/task/batch/autoconfigure/flatfile/FlatFileItemWriterAutoConfigurationTests.java","items.add(Collections.singletonMap(""item"", ""bar""))"
github.com,"spring-cloud/spring-cloud-task",main,"spring-cloud-starter-single-step-batch-job/src/test/java/org/springframework/cloud/task/batch/autoconfigure/flatfile/FlatFileItemWriterAutoConfigurationTests.java","items.add(Collections.singletonMap(""item"", ""baz""))"
github.com,"spring-cloud/spring-cloud-task",main,"spring-cloud-starter-single-step-batch-job/src/test/java/org/springframework/cloud/task/batch/autoconfigure/flatfile/FlatFileItemWriterAutoConfigurationTests.java","
fields.add(((String) item.get(""item"")).substring(0, 1))"
github.com,"spring-cloud/spring-cloud-task",main,"spring-cloud-starter-single-step-batch-job/src/test/java/org/springframework/cloud/task/batch/autoconfigure/flatfile/FlatFileItemWriterAutoConfigurationTests.java","
items.add(Collections.singletonMap(""item"", ""foo""))"
github.com,"spring-cloud/spring-cloud-task",main,"spring-cloud-starter-single-step-batch-job/src/test/java/org/springframework/cloud/task/batch/autoconfigure/flatfile/FlatFileItemWriterAutoConfigurationTests.java","items.add(Collections.singletonMap(""item"", ""bar""))"
github.com,"spring-cloud/spring-cloud-task",main,"spring-cloud-starter-single-step-batch-job/src/test/java/org/springframework/cloud/task/batch/autoconfigure/flatfile/FlatFileItemWriterAutoConfigurationTests.java","items.add(Collections.singletonMap(""item"", ""tooLong""))"
github.com,"spring-cloud/spring-cloud-task",main,"spring-cloud-starter-single-step-batch-job/src/test/java/org/springframework/cloud/task/batch/autoconfigure/flatfile/FlatFileItemWriterAutoConfigurationTests.java","
fields.add(((String) item.get(""item"")).substring(0, 1))"
github.com,"spring-cloud/spring-cloud-task",main,"spring-cloud-starter-single-step-batch-job/src/test/java/org/springframework/cloud/task/batch/autoconfigure/flatfile/FlatFileItemWriterAutoConfigurationTests.java","
items.add(Collections.singletonMap(""item"", ""foo""))"
github.com,"spring-cloud/spring-cloud-task",main,"spring-cloud-starter-single-step-batch-job/src/test/java/org/springframework/cloud/task/batch/autoconfigure/flatfile/FlatFileItemWriterAutoConfigurationTests.java","items.add(Collections.singletonMap(""item"", ""bar""))"
github.com,"spring-cloud/spring-cloud-task",main,"spring-cloud-starter-single-step-batch-job/src/test/java/org/springframework/cloud/task/batch/autoconfigure/flatfile/FlatFileItemWriterAutoConfigurationTests.java","items.add(Collections.singletonMap(""item"", ""baz""))"
github.com,"spring-cloud/spring-cloud-task",main,"spring-cloud-starter-single-step-batch-job/src/test/java/org/springframework/cloud/task/batch/autoconfigure/flatfile/FlatFileItemReaderAutoConfigurationTests.java","lines.add(line)"
github.com,"spring-cloud/spring-cloud-task",main,"spring-cloud-starter-single-step-batch-job/src/test/java/org/springframework/cloud/task/batch/autoconfigure/SingleStepJobAutoConfigurationTests.java","
items.add(Collections.singletonMap(""item"", ""foo""))"
github.com,"spring-cloud/spring-cloud-task",main,"spring-cloud-starter-single-step-batch-job/src/test/java/org/springframework/cloud/task/batch/autoconfigure/SingleStepJobAutoConfigurationTests.java","items.add(Collections.singletonMap(""item"", ""bar""))"
github.com,"spring-cloud/spring-cloud-task",main,"spring-cloud-starter-single-step-batch-job/src/test/java/org/springframework/cloud/task/batch/autoconfigure/SingleStepJobAutoConfigurationTests.java","items.add(Collections.singletonMap(""item"", ""baz""))"
github.com,"spring-cloud/spring-cloud-task",main,"spring-cloud-task-samples/partitioned-batch-job/src/main/java/io/spring/JobConfiguration.java","commandLineArgs.add(""--spring.profiles.active=worker"")"
github.com,"spring-cloud/spring-cloud-task",main,"spring-cloud-task-samples/partitioned-batch-job/src/main/java/io/spring/JobConfiguration.java","commandLineArgs.add(""--spring.cloud.task.initialize-enabled=false"")"
github.com,"spring-cloud/spring-cloud-task",main,"spring-cloud-task-samples/partitioned-batch-job/src/main/java/io/spring/JobConfiguration.java","commandLineArgs.add(""--spring.batch.initializer.enabled=false"")"
github.com,"spring-cloud/spring-cloud-task",main,"spring-cloud-task-samples/taskprocessor/src/test/java/io/spring/TaskProcessorApplicationTests.java","results.add(target.receive(10000, bindingName))"
github.com,"spring-cloud/spring-cloud-task",main,"spring-cloud-task-stream/src/main/java/org/springframework/cloud/task/batch/listener/support/StepExecutionEvent.java","this.failureExceptions.add(throwable)"
github.com,"spring-cloud/spring-cloud-task",main,"spring-cloud-task-stream/src/main/java/org/springframework/cloud/task/batch/listener/support/JobExecutionEvent.java","this.failureExceptions.add(t)"
github.com,"spring-cloud/spring-cloud-task",main,"spring-cloud-task-stream/src/test/java/org/springframework/cloud/task/launcher/TaskLaunchRequestTests.java","args.add(""foo"")"
github.com,"spring-cloud/spring-cloud-task",main,"spring-cloud-task-stream/src/test/java/org/springframework/cloud/task/launcher/TaskLauncherFunctionTests.java","commandLineArgs.add(PARAM1)"
github.com,"spring-cloud/spring-cloud-task",main,"spring-cloud-task-stream/src/test/java/org/springframework/cloud/task/launcher/TaskLauncherFunctionTests.java","commandLineArgs.add(PARAM2)"
github.com,"spring-cloud/spring-cloud-task",main,"spring-cloud-task-stream/src/test/java/org/springframework/cloud/task/batch/listener/EventListenerTests.java","testList.add(""Hello"")"
github.com,"spring-cloud/spring-cloud-task",main,"spring-cloud-task-stream/src/test/java/org/springframework/cloud/task/batch/listener/EventListenerTests.java","testList.add(""World"")"
github.com,"spring-cloud/spring-cloud-task",main,"spring-cloud-task-stream/src/test/java/org/springframework/cloud/task/batch/listener/EventListenerTests.java","testList.add(""foo"")"
github.com,"spring-cloud/spring-cloud-task",main,"spring-cloud-task-stream/src/test/java/org/springframework/cloud/task/batch/listener/EventListenerTests.java","results.add(target.receive(10000, bindingName))"
github.com,"spring-cloud/spring-cloud-task",main,"spring-cloud-task-stream/src/test/java/org/springframework/cloud/task/batch/listener/JobExecutionEventTests.java","stepsExecutions.add(new StepExecution(""foo"", jobExecution))"
github.com,"spring-cloud/spring-cloud-task",main,"spring-cloud-task-stream/src/test/java/org/springframework/cloud/task/batch/listener/JobExecutionEventTests.java","stepsExecutions.add(new StepExecution(""bar"", jobExecution))"
github.com,"spring-cloud/spring-cloud-task",main,"spring-cloud-task-stream/src/test/java/org/springframework/cloud/task/batch/listener/JobExecutionEventTests.java","stepsExecutions.add(new StepExecution(""baz"", jobExecution))"
github.com,"spring-cloud/spring-cloud-task",main,"spring-cloud-task-samples/batch-events/src/test/java/io/spring/cloud/BatchEventsApplicationTests.java","results.add(target.receive(10000, bindingName))"
