repositoryOrigin,repositoryPath,repositoryBranch,parser,sourcePath,exceptionType,treeType,snippet,stackTrace
github.com,rahulsom/waena,master,KotlinParser,"plugin/src/main/kotlin/com/github/rahulsom/waena/WaenaPublishedPlugin.kt",AssertionError,,,"java.lang.AssertionError: null
  org.openrewrite.java.tree.TypeTree.build(TypeTree.java:95)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitResolvedQualifier(KotlinParserVisitor.kt:2358)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4398)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitGetClassCall(KotlinParserVisitor.kt:1788)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4387)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitPropertyAccessExpression(KotlinParserVisitor.kt:2067)
  ..."
github.com,Gleethos/neureka,master,GroovyParser,"src/main/resources/scripting_setup.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/main/resources/scripting_setup.groovy at cursor position 3424. The next 10 characters in the original source are `(inputs.to`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,KotlinParser,"src/test/kotlin/Kotlin_Compatibility_Unit_Testing.kt","UnsupportedOperationException","org.jetbrains.kotlin.KtRealSourceElementKind@75605c6","internal class
Kotlin_Compatibility_Unit_Testing {

    @BeforeEach
    fun setupSpec()
    {
        Neureka.get().reset()

        // Configure printing of tensors to be more compact:
        Neureka.get().settings().view().ndArrays {
            it.isScientific = true
            it.isMultiline = false
            it.hasGradient = true
            it.cellSize = 1
            it.hasValue = true
            it.hasRecursiveGraph = false
            it.hasDerivatives = true
            it.hasShape = true
            it.isCellBound = false
            it.postfix = """"
            it.prefix = """"
            it.hasSlimNumbers = false
        }
    }

    @Test
    fun operator_overloading_works_for_scalars_in_kotlin()
    {
        listOf(
            Pair(-4.0, { t1 : Tensor<Double>, t2 : Tensor<Double> -> t1 * t2 }),
            Pair( 3.0, { t1 : Tensor<Double>, t2 : Tensor<Double> -> t1 + t2 }),
            Pair(-4.0, { t1 : Tensor<Double>, t2 : Tensor<Double> -> t1 / t2 }),
            Pair( 5.0, { t1 : Tensor<Double>, t2 : Tensor<Double> -> t1 - t2 })
        )
        .forEach { pair ->

            val expected = pair.first
            val exec     = pair.second

            val t1 : Tensor<Double> = Tensor.of( 4.0  ).setRqsGradient(true)
            val t2 : Tensor<Double> = Tensor.of( -1.0 )

            // When:
            val t3 = exec(t1, t2)

            // Then:
            assert( t3.size() == 1 )

            // And:
            assert( t3.toList().all { it == expected } )

            // When:
            val graphNode = t3[GraphNode::class.java]

            // Then:
            assert( graphNode != null )
            assert( graphNode.usesAD() )

        }
    }

    @Test
    fun tensor_operations_translate_to_custom_ComplexNumber_type_written_in_kotlin()
    {
        // Given :
        val a : Tensor<ComplexNumber> = Tensor.of(
                                        DataType.of(ComplexNumber::class.java),
                                        Shape.of(3, 2),
                                        { _ : Int, indices : IntArray -> ComplexNumber( indices[0].toDouble(), indices[1].toDouble() ) }
                                    )
        val b : Tensor<ComplexNumber> = Tensor.of(
                                        DataType.of(ComplexNumber::class.java),
                                        Shape.of(3, 2),
                                        { _ : Int, indices : IntArray -> ComplexNumber( indices[1].toDouble(), indices[0].toDouble() ) }
                                    )

        // Expect:
        assert(a.toString() == ""(3x2):[0.0+0.0i, 0.0+1.0i, 1.0+0.0i, 1.0+1.0i, 2.0+0.0i, 2.0+1.0i]"")
        assert(b.toString() == ""(3x2):[0.0+0.0i, 1.0+0.0i, 0.0+1.0i, 1.0+1.0i, 0.0+2.0i, 1.0+2.0i]"")
        assert( !a.isVirtual )
        assert( !b.isVirtual )
        assert((a+b).toString() == ""(3x2):[0.0+0.0i, 1.0+1.0i, 1.0+1.0i, 2.0+2.0i, 2.0+2.0i, 3.0+3.0i]"")
        assert((a-b).toString() == ""(3x2):[0.0+0.0i, -1.0+1.0i, 1.0-1.0i, 0.0+0.0i, 2.0-2.0i, 1.0-1.0i]"")
        assert((a*b).toString() == ""(3x2):[0.0+0.0i, 0.0+1.0i, 0.0+1.0i, 0.0+2.0i, 0.0+4.0i, 0.0+5.0i]"")
    }

    @Test
    fun optimization_is_being_called()
    {
        listOf(
            Pair( -3.0, { g : Tensor<Double> -> g - 4.0 } ), // 'g' will always be 1
            Pair(  5.0, { g : Tensor<Double> -> g + 4.0 } ),
            Pair( 0.25, { g : Tensor<Double> -> g / 4.0 } ),
            Pair(  4.0, { g : Tensor<Double> -> g * 4.0 } ),
            Pair(  0.0, { g : Tensor<Double> -> g % 1   } )
        )
        .forEach { pair ->

            // Given :
            val expected = pair.first
            val exec = pair.second
            val weightVal = 2.0
            val w: Tensor<Double> = Tensor.of(weightVal).setRqsGradient(true)

            // When :
            w.set( Optimizer.ofGradient( { g -> exec(g) } ) ).backward()

            // Then :
            assert(w.toString() == ""(1):[$weightVal]:g:[1.0]"")

            // When :
            w.applyGradient()

            // Then :
            assert(w.toString() == ""(1):[""+(expected+weightVal)+""]:g:[null]"")
        }
    }

    @Test
    fun we_can_use_the_subscription_operator_to_slice_tensors()
    {
        // Given :
        val t : Tensor<ComplexNumber> = Tensor.of(
                        DataType.of(ComplexNumber::class.java),
                        Shape.of(2, 3, 4),
                        { _, i -> ComplexNumber( i[0].toDouble(), i[1].toDouble() + i[2].toDouble()/10 ) }
                    )

        // When :
        val e1 = t[1, 2, 0]
        val e2 = t[0, 1, 2]
        val e3 = t[16]

        // Then :
        assert(e1.toString() == ""(1x1x1):[1.0+2.0i]"")
        assert(e2.toString() == ""(1x1x1):[0.0+1.2i]"")
        assert(e3.toString() == ""(1x1x1):[1.0+1.0i]"")

        // When :
        val slice = t[0..1, 2..2, 1..3]

        // Then :
        assert(
            t.toString({ it.isMultiline = true }).trim() == """"""
            (2x3x4):[
               [
                  [ 0.0+0.0i, 0.0+0.1i, 0.0+0.2i, 0.0+0.3i ],
                  [ 0.0+1.0i, 0.0+1.1i, 0.0+1.2i, 0.0+1.3i ],
                  [ 0.0+2.0i, 0.0+2.1i, 0.0+2.2i, 0.0+2.3i ]
               ],
               [
                  [ 1.0+0.0i, 1.0+0.1i, 1.0+0.2i, 1.0+0.3i ],
                  [ 1.0+1.0i, 1.0+1.1i, 1.0+1.2i, 1.0+1.3i ],
                  [ 1.0+2.0i, 1.0+2.1i, 1.0+2.2i, 1.0+2.3i ]
               ]
            ]
            """"""
            .trimIndent()
        )
        // And :
        assert(
            slice.toString({ it.isMultiline = true }) ==
            """"""
                (2x1x3):[
                   [
                      [ 0.0+2.1i, 0.0+2.2i, 0.0+2.3i ]
                   ],
                   [
                      [ 1.0+2.1i, 1.0+2.2i, 1.0+2.3i ]
                   ]
                ]
            """"""
            .trimIndent()
        )

        // When :
        t.mut[intArrayOf(1, 2, 0)] = ComplexNumber(0.0, 0.0)
        t.mut[0, 1, 2] = ComplexNumber(73.0, 666.0)
        t.mut[16] = ComplexNumber(42.0, 24.0)

        // Then :
        assert(e1.toString() == ""(1x1x1):[0.0+0.0i]"")
        assert(e2.toString() == ""(1x1x1):[73.0+666.0i]"")
        assert(e3.toString() == ""(1x1x1):[42.0+24.0i]"")

        // When : ... the missing index will be 0 padded (so this is [1, 2, 0])
        t.mut[1, 2] = ComplexNumber(42.0, 666.0)

        // Then :
        assert(e1.toString() == ""(1x1x1):[42.0+666.0i]"")

        // When :
        slice.mut.minusAssign( slice * ComplexNumber(-4.0, -2.0) )

        // Then :
        assert(
            t.toString({ it.isMultiline = true }).trim() == """"""
                (2x3x4):[
                   [
                      [ 0.0+0.0i, 0.0+0.1i, 0.0+0.2i, 0.0+0.3i ],
                      [ 0.0+1.0i, 0.0+1.1i, 73.0+666.0i, 0.0+1.3i ],
                      [ 0.0+2.0i, -4.2+10.5i, -4.4+11.0i, -4.6+11.5i ]
                   ],
                   [
                      [ 1.0+0.0i, 1.0+0.1i, 1.0+0.2i, 1.0+0.3i ],
                      [ 42.0+24.0i, 1.0+1.1i, 1.0+1.2i, 1.0+1.3i ],
                      [ 42.0+666.0i, 0.7999999999999998+12.5i, 0.5999999999999996+13.0i, 0.40000000000000036+13.5i ]
                   ]
                ]
            """"""
            .trimIndent()
        )

        // When :
        slice.mut.assign(slice - ComplexNumber(-1.0,2.0))

        // Then :
        assert(
            t.toString({ it.isMultiline = true }).trim() == """"""
                (2x3x4):[
                   [
                      [ 0.0+0.0i, 0.0+0.1i, 0.0+0.2i, 0.0+0.3i ],
                      [ 0.0+1.0i, 0.0+1.1i, 73.0+666.0i, 0.0+1.3i ],
                      [ 0.0+2.0i, -3.2+8.5i, -3.4000000000000004+9.0i, -3.5999999999999996+9.5i ]
                   ],
                   [
                      [ 1.0+0.0i, 1.0+0.1i, 1.0+0.2i, 1.0+0.3i ],
                      [ 42.0+24.0i, 1.0+1.1i, 1.0+1.2i, 1.0+1.3i ],
                      [ 42.0+666.0i, 1.7999999999999998+10.5i, 1.5999999999999996+11.0i, 1.4000000000000004+11.5i ]
                   ]
                ]
            """"""
            .trimIndent()
        )

    }

    @Test
    fun we_can_use_the_subscription_operator_to_slice_nd_arrays()
    {
        // Given :
        val n : Nda<String> = Nda.of(String::class.java)
                                            .withShape(2, 3, 4)
                                            .andWhere { _, i ->
                                                ""${i[0].toDouble()}+${(i[1].toDouble() + i[2].toDouble() / 10)}i""
                                            }

        // When :
        val e1 = n[1, 2, 0]
        val e2 = n[0, 1, 2]
        val e3 = n[16]

        // Then :
        assert(e1.toString() == ""(1x1x1):[1.0+2.0i]"")
        assert(e2.toString() == ""(1x1x1):[0.0+1.2i]"")
        assert(e3.toString() == ""(1x1x1):[1.0+1.0i]"")

        // When :
        val slice = n[0..1, 2..2, 1..3]

        // Then :
        assert(
            n.toString({ it.isMultiline = true }).trim() == """"""
            (2x3x4):[
               [
                  [ 0.0+0.0i, 0.0+0.1i, 0.0+0.2i, 0.0+0.3i ],
                  [ 0.0+1.0i, 0.0+1.1i, 0.0+1.2i, 0.0+1.3i ],
                  [ 0.0+2.0i, 0.0+2.1i, 0.0+2.2i, 0.0+2.3i ]
               ],
               [
                  [ 1.0+0.0i, 1.0+0.1i, 1.0+0.2i, 1.0+0.3i ],
                  [ 1.0+1.0i, 1.0+1.1i, 1.0+1.2i, 1.0+1.3i ],
                  [ 1.0+2.0i, 1.0+2.1i, 1.0+2.2i, 1.0+2.3i ]
               ]
            ]
            """"""
            .trimIndent()
        )
        // And :
        assert(
            slice.toString({ it.isMultiline = true }) ==
            """"""
                (2x1x3):[
                   [
                      [ 0.0+2.1i, 0.0+2.2i, 0.0+2.3i ]
                   ],
                   [
                      [ 1.0+2.1i, 1.0+2.2i, 1.0+2.3i ]
                   ]
                ]
            """"""
            .trimIndent()
        )

        // When :
        n.mut[intArrayOf(1, 2, 0)] = ""0.0+0.0i""
        n.mut[0, 1, 2] = ""73.0+666.0i""
        n.mut[16] = ""42.0+24.0i""

        // Then :
        assert(e1.toString() == ""(1x1x1):[0.0+0.0i]"")
        assert(e2.toString() == ""(1x1x1):[73.0+666.0i]"")
        assert(e3.toString() == ""(1x1x1):[42.0+24.0i]"")

        // When : ... the missing index will be 0 padded (so this is [1, 2, 0])
        n.mut[1, 2] = ""42.0+666.0i""

        // Then :
        assert(e1.toString() == ""(1x1x1):[42.0+666.0i]"")

        // When :
        slice.mut.assign(slice.map { it.toUpperCase() })

        // Then :
        assert(
            n.toString({ it.isMultiline = true }).trim() == """"""
                (2x3x4):[
                   [
                      [ 0.0+0.0i, 0.0+0.1i, 0.0+0.2i, 0.0+0.3i ],
                      [ 0.0+1.0i, 0.0+1.1i, 73.0+666.0i, 0.0+1.3i ],
                      [ 0.0+2.0i, 0.0+2.1I, 0.0+2.2I, 0.0+2.3I ]
                   ],
                   [
                      [ 1.0+0.0i, 1.0+0.1i, 1.0+0.2i, 1.0+0.3i ],
                      [ 42.0+24.0i, 1.0+1.1i, 1.0+1.2i, 1.0+1.3i ],
                      [ 42.0+666.0i, 1.0+2.1I, 1.0+2.2I, 1.0+2.3I ]
                   ]
                ]
            """"""
            .trimIndent()
        )

    }

    @Test
    fun convenience_methods_in_function_API_are_consistent()
    {
        listOf(
            Pair( ""(1):[4.0]"", { Function.of(""i0 * 4 - 3"").with(Arg.DerivIdx.of(0))(Tensor.of(5.0)) } ),
            Pair( ""(1):[4.0]"", { Function.of(""i0 * 4 + 3"").with(Arg.DerivIdx.of(0))(Tensor.of(5.0)) } ),
            Pair( ""(1):[3.0]"", { Function.of(""i0 * 4 - 3 - i0"").with(Arg.DerivIdx.of(0))(Tensor.of(5.0)) } ),
            Pair( ""(1):[5.0]"", { Function.of(""i0 * 4 + 3 + i0"").with(Arg.DerivIdx.of(0))(Tensor.of(5.0)) } ),
            Pair( ""(1):[6.0]"", { Function.of(""(i0 - 4) * 3 * i0"").with(Arg.DerivIdx.of(0))(Tensor.of(3.0)) } ),
            Pair( ""(1):[-1.0]"", { Function.of(""(i0 - 4) * (1 - i0) * i0"").with(Arg.DerivIdx.of(0))(Tensor.of(3.0)) } ),
            Pair( ""(1):[0.22222]"", { Function.of(""(i0 - 4) / 2 / i0"").with(Arg.DerivIdx.of(0))(Tensor.of(3.0)) } ),
            Pair( ""(1):[-0.30555]"", { Function.of(""(i0 - 4) / (1 - i0) / i0"").with(Arg.DerivIdx.of(0))(
                Tensor.of(3.0)) } ),
            Pair( ""(1):[-0.66666]"", { Function.of(""12 / 2 / i0"").with(Arg.DerivIdx.of(0))(Tensor.of(3.0)) } ),
            Pair( ""(1):[4.0]"", { Function.of(""i0 * 4 - 3"").invoke(Call.to(CPU.get()).with(Tensor.of(5.0)).andArgs( Arg.DerivIdx.of(0) )) } ),
            Pair( ""(1):[6.0]"", { Function.of(""i0 * i0"").execute(Args.of(Arg.DerivIdx.of(0)), Tensor.of(3.0)) } )
        )
        .forEach { pair ->
            // Given :
            val expected = pair.first
            val exec = pair.second

            // When :
            val t = exec()

            // Then :
            assert(t.toString() == expected)
        }
    }

    @Test
    fun settings_API_for_formatting_tensors_is_convenient_in_kotlin()
    {
        // Given:
        val viewSettings = Neureka.get().settings().view()
        // And :
        viewSettings.ndArrays {
                        it.isCellBound = true
                        it.hasSlimNumbers = false
                        it.prefix = ""§""
                        it.postfix = ""!""
                        it.isMultiline = true
                        it.isScientific = true
                        it.isLegacy = true
                        it.hasGradient = true
                        it.hasShape = false
                        it.cellSize = 8
                        it.rowLimit = 30
                    }
        // When :
        val t = Tensor.of(Float::class.java)
                        .withShape(2, 4, 3)
                        .andWhere { i, index -> index.sum().toFloat()/i  }

        // Then :
        assert(t.toString() == """"""§:(
   (
      (    NaN  ,    1.0  ,    1.0   ),
      (  0.33333,    0.5  ,  0.60000 ),
      (  0.33333,  0.42857,    0.5   ),
      (  0.33333,  0.40000,  0.45454 )
   ),
   (
      (  0.08333,  0.15384,  0.21428 ),
      (  0.13333,  0.1875 ,  0.23529 ),
      (  0.16666,  0.21052,   0.25   ),
      (  0.19047,  0.22727,  0.26086 )
   )
)!"""""")

        // When :
        viewSettings.ndArrays {
            it.isCellBound = true
            it.hasSlimNumbers = true
            it.prefix = ""..""
            it.postfix = ""°°""
            it.isMultiline = false
            it.isScientific = true
            it.isLegacy = false
            it.hasGradient = true
            it.hasShape = true
            it.cellSize = 4
            it.rowLimit = 6
        }

        // Then :
        assert(t.toString() == ""..(2x4x3):[ NaN,   1 ,   1 , .3..,  .5 , .6.., ... + 18 more]°°"")

        // When :
        Neureka.get().reset()

        // Then :
        assert(t.toString() == """"""
            (2x4x3):[
               [
                  [   NaN ,   1.0 ,   1.0  ],
                  [ 0.33333,   0.5 , 0.60000 ],
                  [ 0.33333, 0.42857,   0.5  ],
                  [ 0.33333, 0.40000, 0.45454 ]
               ],
               [
                  [ 0.08333, 0.15384, 0.21428 ],
                  [ 0.13333, 0.1875, 0.23529 ],
                  [ 0.16666, 0.21052,  0.25  ],
                  [ 0.19047, 0.22727, 0.26086 ]
               ]
            ]"""""".trimIndent())
    }


    @Test
    fun settings_API_for_formatting_tensors_allows_us_to_configure_the_indent()
    {
        // Given:
        val viewSettings = Neureka.get().settings().view()
        // And :
        viewSettings.ndArrays {
            it.isCellBound = true
            it.hasSlimNumbers = true
            it.isMultiline = true
            it.prefix = ""START\n""
            it.postfix = ""\nEND""
            it.isScientific = true
            it.isLegacy = false
            it.hasGradient = true
            it.hasShape = true
            it.cellSize = 6
            it.rowLimit = 5
            it.hasDerivatives = true
            it.hasRecursiveGraph = true
        }
        // When :
        val t = Tensor.of(Double::class.java)
                    .withShape(2, 3, 9)
                    .andWhere { i, index -> index.sum().toDouble()/i  }
                    .setRqsGradient(true)

        // And :
        val o = t * Tensor.of(6.0)

        // And :
        o.backward(2.0)

        // Then :
        assert(t.toString() == """"""
                                    START
                                    (2x3x9):[
                                       [
                                          [   NaN ,    1  ,    1  , ..4 more..,    1  ,    1   ],
                                          [ .11111,   .2  , .27272, ..4 more..,   .5  , .52941 ],
                                          [ .11111, .15789,   .2  , ..4 more..,   .36 , .38461 ]
                                       ],
                                       [
                                          [ .03703, .07142, .10344, ..4 more.., .23529, .25714 ],
                                          [ .05555, .08108, .10526, ..4 more.., .20930, .22727 ],
                                          [ .06666, .08695, .10638, ..4 more.., .19230, .20754 ]
                                       ]
                                    ]:g:[
                                       [
                                          [   12  ,   12  ,   12  , ..4 more..,   12  ,   12   ],
                                          [   12  ,   12  ,   12  , ..4 more..,   12  ,   12   ],
                                          [   12  ,   12  ,   12  , ..4 more..,   12  ,   12   ]
                                       ],
                                       [
                                          [   12  ,   12  ,   12  , ..4 more..,   12  ,   12   ],
                                          [   12  ,   12  ,   12  , ..4 more..,   12  ,   12   ],
                                          [   12  ,   12  ,   12  , ..4 more..,   12  ,   12   ]
                                       ]
                                    ]
                                    END
                                """""".trimIndent())
    }


    @Test
    fun we_can_create_nd_arrays_with_a_fluent_builder_api()
    {
        val nda : Nda<Int> =
                    Nda.of(Int::class.java)
                        .withShape(2, 3)
                        .andWhere { _, indices -> indices.sum()/2  }

        assert((0..5).all { (nda.rawData as IntArray)[it] == arrayOf(0,0,1,0,1,1)[it] })
        assert((0..5).all { (nda.rawItems as IntArray)[it] == arrayOf(0,0,1,0,1,1)[it] })
    }

}","java.lang.UnsupportedOperationException: FirVarargArgumentsExpression is not supported at cursor: 1, 2, 0]
        val e2 = t[0,in file: /home/ubuntu/jenkins-agent/workspace/cli-ingest/Gleethos_neureka_master/src/test/kotlin/Kotlin_Compatibility_Unit_Testing.kt
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitVarargArgumentsExpression(KotlinParserVisitor.kt:4254)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4462)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.mapKotlinBinaryOperation(KotlinParserVisitor.kt:1512)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitFunctionCall(KotlinParserVisitor.kt:1021)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4385)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitProperty(KotlinParserVisitor.kt:1957)
  ..."
github.com,Gleethos/neureka,master,GroovyParser,"src/test/resources/benchmark.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/resources/benchmark.groovy, cursor position likely inaccurate.
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:163)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/Example_Spec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/Example_Spec.groovy at cursor position 3334. The next 10 characters in the original source are `{
        `
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/st/NN_Concepts_Spec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/st/NN_Concepts_Spec.groovy at cursor position 1094. The next 10 characters in the original source are `.reshape( `
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/st/Benchmark_System_Test.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/st/Benchmark_System_Test.groovy at cursor position 1751. The next 10 characters in the original source are `.withShape`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/st/Training_NNs_Spec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/st/Training_NNs_Spec.groovy at cursor position 1401. The next 10 characters in the original source are `.reshape( `
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/st/tests/SimpleNNSystemTest.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/st/tests/SimpleNNSystemTest.groovy at cursor position 150. The next 10 characters in the original source are `
        C`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/st/tests/StandaloneBenchmark.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/st/tests/StandaloneBenchmark.groovy at cursor position 1300. The next 10 characters in the original source are `expected

`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/st/Broad_System_Test.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/st/Broad_System_Test.groovy at cursor position 862. The next 10 characters in the original source are `}

    def`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/ut/utility/Utility_Spec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/ut/utility/Utility_Spec.groovy at cursor position 690. The next 10 characters in the original source are `}    || fl`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/ut/utility/DataConverter_Spec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/ut/utility/DataConverter_Spec.groovy at cursor position 480. The next 10 characters in the original source are `== [-50, 2`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/ut/utility/Cleaner_Testing.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/ut/utility/Cleaner_Testing.groovy at cursor position 1128. The next 10 characters in the original source are `.withShape`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/ut/utility/ListReader_Spec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/ut/utility/ListReader_Spec.groovy at cursor position 1024. The next 10 characters in the original source are `->o)

    `
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/ut/utility/ListReader_Exception_Spec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/ut/utility/ListReader_Exception_Spec.groovy at cursor position 552. The next 10 characters in the original source are `->o)

    `
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/ut/utility/FileHandle_Spec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/ut/utility/FileHandle_Spec.groovy at cursor position 2472. The next 10 characters in the original source are `then : 'Th`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/ut/neureka/Neureka_Spec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/ut/neureka/Neureka_Spec.groovy at cursor position 2946. The next 10 characters in the original source are `}


    de`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/ut/tensors/Tensor_Gradient_Spec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/ut/tensors/Tensor_Gradient_Spec.groovy at cursor position 3184. The next 10 characters in the original source are `and : 'A s`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/ut/tensors/Tensor_Version_Spec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/ut/tensors/Tensor_Version_Spec.groovy at cursor position 9392. The next 10 characters in the original source are `then :
   `
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/ut/tensors/DimTrim_Spec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/ut/tensors/DimTrim_Spec.groovy at cursor position 969. The next 10 characters in the original source are `.axis(0).a`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/ut/tensors/Functional_Tensor_Spec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/ut/tensors/Functional_Tensor_Spec.groovy at cursor position 5702. The next 10 characters in the original source are `:[-2.0, -1`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/ut/tensors/Expression_Based_Tensor_Instantiation_Spec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/ut/tensors/Expression_Based_Tensor_Instantiation_Spec.groovy at cursor position 2505. The next 10 characters in the original source are `Tensor<Dou`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/ut/tensors/Tensor_Slicing_Spec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/ut/tensors/Tensor_Slicing_Spec.groovy at cursor position 2051. The next 10 characters in the original source are `.axis(1).f`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/ut/tensors/Tensor_State_Spec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/ut/tensors/Tensor_State_Spec.groovy at cursor position 14389. The next 10 characters in the original source are `.axis(0).a`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/ut/tensors/Tensor_Conversion_Spec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/ut/tensors/Tensor_Conversion_Spec.groovy at cursor position 731. The next 10 characters in the original source are `== 42
    `
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/ut/tensors/Tensor_Layout_Spec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/ut/tensors/Tensor_Layout_Spec.groovy at cursor position 3237. The next 10 characters in the original source are `.withShape`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/ut/tensors/Reshape_Spec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/ut/tensors/Reshape_Spec.groovy at cursor position 1291. The next 10 characters in the original source are `== [6, 7, `
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/ut/tensors/exceptions/Tensor_Exception_Spec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/ut/tensors/exceptions/Tensor_Exception_Spec.groovy at cursor position 1876. The next 10 characters in the original source are `}

    def`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/ut/tensors/exceptions/Tensor_Delete_Exception_Spec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/ut/tensors/exceptions/Tensor_Delete_Exception_Spec.groovy at cursor position 1055. The next 10 characters in the original source are `exception.`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/ut/tensors/Tensor_Stats_Spec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/ut/tensors/Tensor_Stats_Spec.groovy at cursor position 1005. The next 10 characters in the original source are `+ ""(I[0])""`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/ut/tensors/Tensor_Operation_Spec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/ut/tensors/Tensor_Operation_Spec.groovy at cursor position 16878. The next 10 characters in the original source are `})

      `
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/ut/tensors/Tensor_Generics_Spec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/ut/tensors/Tensor_Generics_Spec.groovy at cursor position 2156. The next 10 characters in the original source are `== String.`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/ut/tensors/Fluent_Tensor_Creation_Spec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/ut/tensors/Fluent_Tensor_Creation_Spec.groovy at cursor position 786. The next 10 characters in the original source are `and : '...`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/ut/tensors/Tensor_IO_Spec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/ut/tensors/Tensor_IO_Spec.groovy at cursor position 5591. The next 10 characters in the original source are `.vector(42`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/ut/tensors/Tensor_Instantiation_Spec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/ut/tensors/Tensor_Instantiation_Spec.groovy at cursor position 1657. The next 10 characters in the original source are `expect : '`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/ut/tensors/Copy_Spec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/ut/tensors/Copy_Spec.groovy at cursor position 1573. The next 10 characters in the original source are `then : 'Th`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/ut/tensors/Tensor_Convolution_Spec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/ut/tensors/Tensor_Convolution_Spec.groovy at cursor position 2369. The next 10 characters in the original source are `and: 'A 2D`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/ut/tensors/Functional_Nda_Spec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/ut/tensors/Functional_Nda_Spec.groovy at cursor position 5931. The next 10 characters in the original source are `:[-2.0, -1`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/ut/tensors/Tensor_As_Container_Spec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/ut/tensors/Tensor_As_Container_Spec.groovy at cursor position 8741. The next 10 characters in the original source are `{
        `
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/ut/tensors/Tensor_Interop_Spec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/ut/tensors/Tensor_Interop_Spec.groovy at cursor position 1598. The next 10 characters in the original source are `and : 'The`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/ut/tensors/Tensor_Device_Spec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/ut/tensors/Tensor_Device_Spec.groovy at cursor position 2577. The next 10 characters in the original source are `var t = Te`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/ut/tensors/Tensor_Assign_Spec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/ut/tensors/Tensor_Assign_Spec.groovy at cursor position 676. The next 10 characters in the original source are `when : 'We`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/ut/tensors/Tensor_Dot_Product_Spec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/ut/tensors/Tensor_Dot_Product_Spec.groovy at cursor position 3038. The next 10 characters in the original source are `.to( devic`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/ut/miscellaneous/Weired_NN_Spec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/ut/miscellaneous/Weired_NN_Spec.groovy at cursor position 1993. The next 10 characters in the original source are `and :
    `
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/ut/device/OpenCL_Spec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/ut/device/OpenCL_Spec.groovy at cursor position 2014. The next 10 characters in the original source are `as OpenCLD`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/ut/device/OpenCLDevice_Spec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/ut/device/OpenCLDevice_Spec.groovy at cursor position 2486. The next 10 characters in the original source are `.to(device`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/ut/device/FileDevice_Spec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/ut/device/FileDevice_Spec.groovy at cursor position 6412. The next 10 characters in the original source are `:[\n' +
  `
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/ut/device/OpenCLDevice_Exception_Spec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/ut/device/OpenCLDevice_Exception_Spec.groovy at cursor position 1695. The next 10 characters in the original source are `== s.mut.d`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/ut/device/Cross_Device_IO_Spec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/ut/device/Cross_Device_IO_Spec.groovy at cursor position 976. The next 10 characters in the original source are `and : 'We `
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/ut/device/Cross_Device_Type_Spec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/ut/device/Cross_Device_Type_Spec.groovy at cursor position 3271. The next 10 characters in the original source are `then : '..`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/ut/device/internal/CLFunctionCompiler_Spec.groovy",NullPointerException,,,"java.lang.NullPointerException: null
  org.codehaus.groovy.ast.tools.GenericsUtils.parameterizeSAM(GenericsUtils.java:936)
  org.codehaus.groovy.transform.stc.StaticTypeCheckingVisitor.inferClosureParameterTypes(StaticTypeCheckingVisitor.java:2989)
  org.codehaus.groovy.transform.stc.StaticTypeCheckingVisitor.visitMethodCallArguments(StaticTypeCheckingVisitor.java:2800)
  org.codehaus.groovy.transform.stc.StaticTypeCheckingVisitor.visitMethodCallExpression(StaticTypeCheckingVisitor.java:3535)
  org.codehaus.groovy.ast.expr.MethodCallExpression.visit(MethodCallExpression.java:76)
  org.codehaus.groovy.ast.CodeVisitorSupport.visitExpressionStatement(CodeVisitorSupport.java:117)
  org.codehaus.groovy.ast.ClassCodeVisitorSupport.visitExpressionStatement(ClassCodeVisitorSupport.java:200)
  org.codehaus.groovy.transform.stc.StaticTypeCheckingVisitor.visitExpressionStatement(StaticTypeCheckingVisitor.java:2190)
  ..."
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/ut/device/internal/OpenCL_Kernel_Unit_Spec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/ut/device/internal/OpenCL_Kernel_Unit_Spec.groovy at cursor position 786. The next 10 characters in the original source are `.withShape`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/ut/device/internal/CPU_Kernel_Spec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/ut/device/internal/CPU_Kernel_Spec.groovy at cursor position 889. The next 10 characters in the original source are `.running(M`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/ut/device/internal/OpenCL_Data_Spec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/ut/device/internal/OpenCL_Data_Spec.groovy at cursor position 960. The next 10 characters in the original source are `var slice `
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/ut/device/CPU_Spec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/ut/device/CPU_Spec.groovy at cursor position 2212. The next 10 characters in the original source are `, -2)

   `
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/ut/dtype/NumericType_Spec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/ut/dtype/NumericType_Spec.groovy at cursor position 2943. The next 10 characters in the original source are `expect : '`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/ut/dtype/DataType_Spec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/ut/dtype/DataType_Spec.groovy at cursor position 1217. The next 10 characters in the original source are `== targetC`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/ut/ndim/Shape_Spec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/ut/ndim/Shape_Spec.groovy at cursor position 973. The next 10 characters in the original source are `== 2
     `
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/ut/ndim/Tensor_Slice_Permute_Spec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/ut/ndim/Tensor_Slice_Permute_Spec.groovy at cursor position 2120. The next 10 characters in the original source are `== ""(5x8):`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/ut/ndim/Nda_Permute_Spec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/ut/ndim/Nda_Permute_Spec.groovy at cursor position 1811. The next 10 characters in the original source are `then : 'Th`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/ut/ndim/Tensor_NDConfiguration_Spec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/ut/ndim/Tensor_NDConfiguration_Spec.groovy at cursor position 2686. The next 10 characters in the original source are `Tensor<Obj`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/ut/ndim/Tensor_Permute_Spec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/ut/ndim/Tensor_Permute_Spec.groovy at cursor position 2155. The next 10 characters in the original source are `then : 'Th`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/ut/ndim/NDConfiguration_Spec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/ut/ndim/NDConfiguration_Spec.groovy at cursor position 2392. The next 10 characters in the original source are `and : '2 c`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/ut/ndas/Nda_Inplace_Framing_Spec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/ut/ndas/Nda_Inplace_Framing_Spec.groovy at cursor position 962. The next 10 characters in the original source are `:[\n"" +
  `
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/ut/ndas/Nda_Reshape_Spec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/ut/ndas/Nda_Reshape_Spec.groovy at cursor position 1328. The next 10 characters in the original source are `== [1, 2, `
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/ut/ndas/Nda_Items_Spec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/ut/ndas/Nda_Items_Spec.groovy at cursor position 1219. The next 10 characters in the original source are `expect : '`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/ut/ndas/Nda_Assign_Spec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/ut/ndas/Nda_Assign_Spec.groovy at cursor position 650. The next 10 characters in the original source are `when : 'We`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/ut/ndas/Nda_Mutation_Spec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/ut/ndas/Nda_Mutation_Spec.groovy at cursor position 1131. The next 10 characters in the original source are `{
        `
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/ut/ndas/Nda_Framing_Spec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/ut/ndas/Nda_Framing_Spec.groovy at cursor position 1581. The next 10 characters in the original source are `.withShape`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/ut/ndas/Nda_Instantiation_Spec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/ut/ndas/Nda_Instantiation_Spec.groovy at cursor position 896. The next 10 characters in the original source are `then : '..`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/ut/introductions/Tensor_NDArray_Spec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/ut/introductions/Tensor_NDArray_Spec.groovy at cursor position 1808. The next 10 characters in the original source are `.withShape`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/ut/math/BackendContext_Spec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/ut/math/BackendContext_Spec.groovy at cursor position 2854. The next 10 characters in the original source are `when : 'We`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/ut/math/Tensor_Function_Spec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/ut/math/Tensor_Function_Spec.groovy at cursor position 6546. The next 10 characters in the original source are `and : ""A n`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/ut/math/ConCat_Spec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/ut/math/ConCat_Spec.groovy at cursor position 4195. The next 10 characters in the original source are `.setRqsGra`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/ut/math/Function_Exception_Spec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/ut/math/Function_Exception_Spec.groovy at cursor position 1040. The next 10 characters in the original source are `hich is no`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/ut/math/Function_Spec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/ut/math/Function_Spec.groovy at cursor position 825. The next 10 characters in the original source are `]
        `
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/ut/math/Function_Scalar_Spec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/ut/math/Function_Scalar_Spec.groovy at cursor position 849. The next 10 characters in the original source are `assert f.d`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/ut/math/Function_Parsing_Spec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/ut/math/Function_Parsing_Spec.groovy at cursor position 6725. The next 10 characters in the original source are `""
        `
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/ut/autograd/AD_And_Computation_Graph_Spec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/ut/autograd/AD_And_Computation_Graph_Spec.groovy at cursor position 1421. The next 10 characters in the original source are `"")

      `
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/ut/autograd/Autograd_Explained.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/ut/autograd/Autograd_Explained.groovy at cursor position 5185. The next 10 characters in the original source are `.contains(`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/ut/autograd/internal/GraphNode_Tensor_Exception_Unit_Tests.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/ut/autograd/internal/GraphNode_Tensor_Exception_Unit_Tests.groovy at cursor position 694. The next 10 characters in the original source are `}

    def`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/ut/autograd/internal/GraphNode_Instantiation_Exception_Unit_Tests.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/ut/autograd/internal/GraphNode_Instantiation_Exception_Unit_Tests.groovy at cursor position 3526. The next 10 characters in the original source are `Tensor[] i`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/ut/autograd/Autograd_Tensor_Spec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/ut/autograd/Autograd_Tensor_Spec.groovy at cursor position 1750. The next 10 characters in the original source are `, 3).setRq`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/ut/autograd/JITProp_Autograd_Tensor_Spec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/ut/autograd/JITProp_Autograd_Tensor_Spec.groovy at cursor position 1686. The next 10 characters in the original source are `.setRqsGra`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/ut/autograd/Autograd_NN_Spec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/ut/autograd/Autograd_NN_Spec.groovy at cursor position 22227. The next 10 characters in the original source are `.setRqsGra`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/ut/autograd/Autograd_Flags_Explained.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/ut/autograd/Autograd_Flags_Explained.groovy at cursor position 7126. The next 10 characters in the original source are `.settings(`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/ut/framing/Tensor_Framing_Spec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/ut/framing/Tensor_Framing_Spec.groovy at cursor position 6572. The next 10 characters in the original source are `== ""[3x4]:`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/ut/optimization/ADAM_Spec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/ut/optimization/ADAM_Spec.groovy at cursor position 2226. The next 10 characters in the original source are `and : 'The`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/ut/optimization/Momentum_Spec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/ut/optimization/Momentum_Spec.groovy at cursor position 2082. The next 10 characters in the original source are `and : 'The`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/ut/optimization/RMSProp_Spec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/ut/optimization/RMSProp_Spec.groovy at cursor position 2070. The next 10 characters in the original source are `and : 'The`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/ut/optimization/AdaGrad_Spec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/ut/optimization/AdaGrad_Spec.groovy at cursor position 1772. The next 10 characters in the original source are `and : 'The`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/ut/backend/core/Randomization_Spec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/ut/backend/core/Randomization_Spec.groovy at cursor position 1567. The next 10 characters in the original source are `var seed =`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/ut/backend/core/OpenCL_Backend_Spec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/ut/backend/core/OpenCL_Backend_Spec.groovy at cursor position 1241. The next 10 characters in the original source are `}

}
`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/ut/backend/core/Backend_Functional_Algorithm_Spec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/ut/backend/core/Backend_Functional_Algorithm_Spec.groovy at cursor position 1122. The next 10 characters in the original source are `and : 'The`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/ut/backend/core/InternalMatMulTest.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/ut/backend/core/InternalMatMulTest.groovy at cursor position 301. The next 10 characters in the original source are `
        R`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/ut/backend/core/Matrix_Multiplication_Spec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/ut/backend/core/Matrix_Multiplication_Spec.groovy at cursor position 2281. The next 10 characters in the original source are `{
        `
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/ut/backend/core/Backend_Algorithm_Implementation_Spec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/ut/backend/core/Backend_Algorithm_Implementation_Spec.groovy at cursor position 3898. The next 10 characters in the original source are `>> tensor
`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/ut/backend/core/Backend_Algorithm_AD_Spec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/ut/backend/core/Backend_Algorithm_AD_Spec.groovy at cursor position 1120. The next 10 characters in the original source are `!alg.toStr`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/ut/backend/Backend_MatMul_Extension_Spec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/ut/backend/Backend_MatMul_Extension_Spec.groovy at cursor position 2194. The next 10 characters in the original source are `;
        `
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/ut/backend/Matrix_Multiplication_Spec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/ut/backend/Matrix_Multiplication_Spec.groovy at cursor position 871. The next 10 characters in the original source are `.withShape`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/ut/backend/Backend_Extension_Spec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/ut/backend/Backend_Extension_Spec.groovy at cursor position 2692. The next 10 characters in the original source are `output
   `
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/it/Cross_Device_Spec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/it/Cross_Device_Spec.groovy at cursor position 4308. The next 10 characters in the original source are `.canAccess`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/it/Eleven_Lines_NN_System_Spec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/it/Eleven_Lines_NN_System_Spec.groovy at cursor position 5660. The next 10 characters in the original source are `== [-0.910`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/it/Calculus_Stress_Test.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/it/Calculus_Stress_Test.groovy at cursor position 1656. The next 10 characters in the original source are `,  2d..3d `
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,GroovyParser,"src/test/groovy/it/Cross_Device_Sliced_Tensor_System_Test.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/it/Cross_Device_Sliced_Tensor_System_Test.groovy at cursor position 8027. The next 10 characters in the original source are `(b.NDConf.`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Gleethos/neureka,master,JsonParser,"src/test/resources/templates/spec-template.json",NullPointerException,,,"java.lang.NullPointerException: null
  org.openrewrite.json.internal.JsonParserVisitor.visitValue(JsonParserVisitor.java:230)
  org.openrewrite.json.internal.JsonParserVisitor.lambda$visitJson5$1(JsonParserVisitor.java:112)
  org.openrewrite.json.internal.JsonParserVisitor.convert(JsonParserVisitor.java:277)
  org.openrewrite.json.internal.JsonParserVisitor.visitJson5(JsonParserVisitor.java:103)"
github.com,Gleethos/neureka,master,JsonParser,"src/test/resources/templates/summary-template.json",NullPointerException,,,"java.lang.NullPointerException: null
  org.openrewrite.json.internal.JsonParserVisitor.visitValue(JsonParserVisitor.java:230)
  org.openrewrite.json.internal.JsonParserVisitor.lambda$visitJson5$1(JsonParserVisitor.java:112)
  org.openrewrite.json.internal.JsonParserVisitor.convert(JsonParserVisitor.java:277)
  org.openrewrite.json.internal.JsonParserVisitor.visitJson5(JsonParserVisitor.java:103)"
github.com,Gleethos/neureka,master,GroovyParser,build.gradle,GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse build.gradle at cursor position 11606. The next 10 characters in the original source are `)
    outp`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Starlight220/KoJni,main,KotlinParser,"src/main/kotlin/io/github/starlight/kojni/JniFunction.kt",IllegalStateException,,,"java.lang.IllegalStateException: src/main/kotlin/io/github/starlight/kojni/JniFunction.kt is not print idempotent.
  org.openrewrite.Parser.requirePrintEqualsInput(Parser.java:51)"
github.com,"patrick-choe/mojang-spigot-remapper",main,KotlinParser,"src/main/kotlin/io/github/patrick/gradle/remapper/RemapTask.kt",IllegalArgumentException,"org.jetbrains.kotlin.KtRealSourceElementKind@37446779","abstract class RemapTask : DefaultTask() {
    @get:Input
    abstract val version: Property<String>

    @get:Input
    @get:Optional
    abstract val action: Property<Action>

    @get:Input
    @get:Optional
    abstract val skip: Property<Boolean>

    @get:Input
    @get:Optional
    abstract val inputTask: Property<AbstractArchiveTask>

    @get:Input
    @get:Optional
    abstract val archiveClassifier: Property<String>

    @get:Input
    @get:Optional
    abstract val archiveName: Property<String>

    @get:InputDirectory
    @get:Optional
    abstract val archiveDirectory: DirectoryProperty

    @TaskAction
    fun execute() {
        if (skip.orNull != true) {
            val task = inputTask.orNull ?: project.tasks.named(""jar"").get() as AbstractArchiveTask
            val archiveFile = task.archiveFile.get().asFile

            val version =
                version.orNull ?: throw IllegalStateException(""Version should be specified for ${project.path}."")

            val targetFile = File(
                archiveDirectory.orNull?.asFile ?: archiveFile.parentFile,
                archiveName.orNull ?: archiveClassifier.orNull?.let { classifier ->
                    task.fileNameWithClassifier(classifier)
                } ?: archiveFile.name
            )

            var fromFile = archiveFile
            var toFile = Files.createTempFile(null, "".jar"").toFile()

            val action = action.getOrElse(Action.MOJANG_TO_SPIGOT)
            val iterator = action.procedures.iterator()
            var shouldRemove = false
            while (iterator.hasNext()) {
                val procedure = iterator.next()
                procedure.remap(project, version, fromFile, toFile)

                if (shouldRemove) {
                    fromFile.delete()

                }

                if (iterator.hasNext()) {
                    fromFile = toFile
                    toFile = Files.createTempFile(null, "".jar"").toFile()
                    shouldRemove = true
                }
            }

            toFile.copyTo(targetFile, true)
            toFile.delete()
            println(""Successfully obfuscate jar (${project.name}, $action)"")
        }
    }

    private companion object {
        private fun AbstractArchiveTask.fileNameWithClassifier(classifier: String): String {
            return ""${archiveBaseName.get()}-${archiveVersion.get()}-$classifier.jar""
        }

        private val nullOutputStream = PrintStream(object : OutputStream() {
            override fun write(b: Int) {}
        })
    }

    enum class Action(internal vararg val procedures: ActualProcedure) {
        MOJANG_TO_SPIGOT(ActualProcedure.MOJANG_OBF, ActualProcedure.OBF_SPIGOT),
        MOJANG_TO_OBF(ActualProcedure.MOJANG_OBF),
        OBF_TO_MOJANG(ActualProcedure.OBF_MOJANG),
        OBF_TO_SPIGOT(ActualProcedure.OBF_SPIGOT),
        SPIGOT_TO_MOJANG(ActualProcedure.SPIGOT_OBF, ActualProcedure.OBF_MOJANG),
        SPIGOT_TO_OBF(ActualProcedure.SPIGOT_OBF);
    }

    internal enum class ActualProcedure(
        private val mapping: (version: String) -> String,
        private val inheritance: (version: String) -> String,
        private val reversed: Boolean = false
    ) {
        MOJANG_OBF(
            { version -> ""org.spigotmc:minecraft-server:$version-R0.1-SNAPSHOT:maps-mojang@txt"" },
            { version -> ""org.spigotmc:spigot:$version-R0.1-SNAPSHOT:remapped-mojang"" },
            true
        ),
        OBF_MOJANG(
            { version -> ""org.spigotmc:minecraft-server:$version-R0.1-SNAPSHOT:maps-mojang@txt"" },
            { version -> ""org.spigotmc:spigot:$version-R0.1-SNAPSHOT:remapped-obf"" }
        ),
        SPIGOT_OBF(
            { version -> ""org.spigotmc:minecraft-server:$version-R0.1-SNAPSHOT:maps-spigot@csrg"" },
            { version -> ""org.spigotmc:spigot:$version-R0.1-SNAPSHOT"" },
            true
        ),
        OBF_SPIGOT(
            { version -> ""org.spigotmc:minecraft-server:$version-R0.1-SNAPSHOT:maps-spigot@csrg"" },
            { version -> ""org.spigotmc:spigot:$version-R0.1-SNAPSHOT:remapped-obf"" }
        );

        fun remap(project: Project, version: String, jarFile: File, outputFile: File) {
            val dependencies = project.dependencies

            val mappingFile =
                project.configurations.detachedConfiguration(dependencies.create(mapping(version))).singleFile
            val inheritanceFiles =
                project.configurations.detachedConfiguration(dependencies.create(inheritance(version))).files.toList()

            Jar.init(jarFile).use { inputJar ->
                // ignore SS multiple main class err
                val err = System.err
                System.setErr(nullOutputStream)

                Jar.init(inheritanceFiles).use { inheritanceJar ->
                    val mapping = JarMapping()
                    mapping.loadMappings(mappingFile.canonicalPath, reversed, false, null, null)

                    val provider = JointProvider()
                    provider.add(JarProvider(inputJar))
                    provider.add(JarProvider(inheritanceJar))
                    mapping.setFallbackInheritanceProvider(provider)

                    val mapper = JarRemapper(mapping)
                    mapper.remapJar(inputJar, outputFile)
                }

                System.setErr(err)
            }
        }
    }
}","java.lang.IllegalArgumentException: Unsupported ConeTypeProjection org.jetbrains.kotlin.fir.types.ConeCapturedType
  org.openrewrite.kotlin.KotlinTypeSignatureBuilder.coneTypeProjectionSignature(KotlinTypeSignatureBuilder.kt:380)
  org.openrewrite.kotlin.KotlinTypeSignatureBuilder.parameterizedTypeRef(KotlinTypeSignatureBuilder.kt:294)
  org.openrewrite.kotlin.KotlinTypeSignatureBuilder.resolveSignature(KotlinTypeSignatureBuilder.kt:170)
  org.openrewrite.kotlin.KotlinTypeSignatureBuilder.signature(KotlinTypeSignatureBuilder.kt:98)
  org.openrewrite.kotlin.KotlinTypeSignatureBuilder.resolveSignature(KotlinTypeSignatureBuilder.kt:136)
  org.openrewrite.kotlin.KotlinTypeSignatureBuilder.signature(KotlinTypeSignatureBuilder.kt:98)
  org.openrewrite.kotlin.KotlinTypeMapping.type(KotlinTypeMapping.kt:78)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.createIdentifier(KotlinParserVisitor.kt:4487)
  ..."
github.com,"anatawa12/compile-time-constant",master,KotlinParser,"src/main/kotlin/com/anatawa12/compileTimeConstant/CreateConstantsTask.kt",IllegalArgumentException,"org.jetbrains.kotlin.KtRealSourceElementKind@7e2a7d5","@CacheableTask
open class CreateConstantsTask() : DefaultTask() {
    private val alwaysGenerateJarFile get() = project.extensions
        .findByType(CompileTimeConstantExtension::class.java)
        ?.alwaysGenerateJarFile
        ?: false

    init {
        inputs.property(""alwaysGenerateJarFile"", Callable { alwaysGenerateJarFile })
    }

    @get:Internal
    val configurationName = project.objects.property(String::class.java)

    @get:Input
    var sourceSetName: String? = null
        set(value) {
            field = value
            output = File(project.buildDir, ""compile-time-constant/constants-$sourceSetName.jar"")
        }

    @get:OutputFile
    var output: File = File(project.buildDir, ""compile-time-constant/constants-$sourceSetName.jar"")
        private set

    @get:Input
    var constantsClass: String = """"

    @get:Input
    val values: Map<String, Serializable>
        get() = _values.toMap()

    private val _values: MutableMap<String, Serializable> = mutableMapOf()

    fun values(pairs: Map<String, Serializable>) {
        for ((_, value) in pairs) {
            when (value) {
                is Int -> {}
                is Byte -> {}
                is Char -> {}
                is Short -> {}
                is Boolean -> {}
                is Float -> {}
                is Long -> {}
                is Double -> {}
                is String -> {}
                else -> throw IllegalArgumentException(""value expected primitive type or String. but ${value.javaClass.simpleName}"")
            }
        }
        _values.putAll(pairs)
    }

    @TaskAction
    fun createConstants() {
        val constantsClass = constantsClass.replace('.', '/')
        if (constantsClass == """") {
            System.err.println(""No value has been specified for property 'constantsClass'."")
            if (alwaysGenerateJarFile) generateEmptyJarFile()
            return
        }
        val cw = ClassWriter(COMPUTE_FRAMES)
        val cv = cw as ClassVisitor
        cv.visit(V1_6, ACC_PUBLIC + ACC_FINAL + ACC_SUPER, constantsClass, null, ""java/lang/Object"", null)
        for ((name, value) in values) {
            val descriptor = when (value) {
                is Int -> INT_TYPE.descriptor
                is Byte -> BYTE_TYPE.descriptor
                is Char -> CHAR_TYPE.descriptor
                is Short -> SHORT_TYPE.descriptor
                is Boolean -> BOOLEAN_TYPE.descriptor
                is Float -> FLOAT_TYPE.descriptor
                is Long -> LONG_TYPE.descriptor
                is Double -> DOUBLE_TYPE.descriptor
                is String -> ""L${""java/lang/String""};""
                else -> throw IllegalArgumentException(""value must be primitive type or String"")
            }
            val fv = cv.visitField(ACC_PUBLIC + ACC_STATIC + ACC_FINAL, name, descriptor, null, value)
            fv.visitAnnotation(""L${""javax/annotation/Nonnull""};"", true).visitEnd()
            fv.visitEnd()
        }
        val mv = cv.visitMethod(ACC_PRIVATE, ""<init>"", ""()V"", null, null)
        mv.visitCode()
        mv.visitVarInsn(ALOAD, 0)
        mv.visitMethodInsn(INVOKESPECIAL, ""java/lang/Object"", ""<init>"", ""()V"", false)
        mv.visitMaxs(1, 1)
        mv.visitEnd()
        cv.visitEnd()
        output.parentFile.mkdirs()
        ZipOutputStream(output.outputStream()).use { zipOut ->
            zipOut.putNextEntry(ZipEntry(""$constantsClass.class""))
            zipOut.write(cw.toByteArray())
            zipOut.closeEntry()
        }
    }

    private fun generateEmptyJarFile() {
        output.parentFile.mkdirs()
        ZipOutputStream(output.outputStream()).use {}
    }
}","java.lang.IllegalArgumentException: Unsupported condition type.
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitWhenBranch(KotlinParserVisitor.kt:3200)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4417)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitWhenExpression(KotlinParserVisitor.kt:3323)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4418)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitBlock(KotlinParserVisitor.kt:766)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitBlock(KotlinParserVisitor.kt:705)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4372)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.mapForLoop(KotlinParserVisitor.kt:4619)
  ..."
github.com,"anatawa12/compile-time-constant",master,KotlinParser,"src/main/kotlin/com/anatawa12/compileTimeConstant/apply.kt",IllegalStateException,,,"java.lang.IllegalStateException: src/main/kotlin/com/anatawa12/compileTimeConstant/apply.kt is not print idempotent.
  org.openrewrite.Parser.requirePrintEqualsInput(Parser.java:51)"
github.com,"svok/kotlin-jar2npm-plugin",master,KotlinParser,"jar2npm-plugin/src/test/kotlin/com/crowdproj/plugins/jar2npm/KotlinJar2NpmPluginTest.kt",AssertionError,,,"java.lang.AssertionError: null
  org.openrewrite.java.tree.TypeTree.build(TypeTree.java:95)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitResolvedQualifier(KotlinParserVisitor.kt:2358)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4398)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.mapFunctionCall(KotlinParserVisitor.kt:1116)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitFunctionCall(KotlinParserVisitor.kt:1026)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4385)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  ..."
github.com,joke/spock-mockable,main,GroovyParser,"examples/spring/src/test/groovy/io/github/joke/spockmockable/tests/ControllerTest.groovy","MultipleCompilationErrorsException",,,"org.codehaus.groovy.control.MultipleCompilationErrorsException: startup failed:
Could not instantiate global transform class org.spockframework.compiler.SpockTransform specified at jar:file:/home/ubuntu/.gradle/caches/modules-2/files-2.1/org.spockframework/spock-core/2.3-groovy-4.0/8861b2590bb8e4709b052fb4ed6da3de98e734d9/spock-core-2.3-groovy-4.0.jar!/META-INF/services/org.codehaus.groovy.transform.ASTTransformation  because of exception org.spockframework.util.IncompatibleGroovyVersionException: The Spock compiler plugin cannot execute because Spock 2.3.0-groovy-4.0 is not compatible with Groovy 3.0.10. For more information (including enforce mode), see https://docs.spockframework.org (section 'Known Issues').
Spock artifact: file:/home/ubuntu/.gradle/caches/modules-2/files-2.1/org.spockframework/spock-core/2.3-groovy-4.0/8861b2590bb8e4709b052fb4ed6da3de98e734d9/spock-core-2.3-groovy-4.0.jar
Groovy artifact: file:/home/ubuntu/.gradle/wrapper/dists/gradle-7.5.1-all/1ehga6e77gqps5uk2kc5kf1vc/gradle-7.5.1/lib/groovy-3.0.10.jar

1 error

  org.codehaus.groovy.control.ErrorCollector.failIfErrors(ErrorCollector.java:292)
  org.codehaus.groovy.control.ProcessingUnit.completePhase(ProcessingUnit.java:139)
  org.codehaus.groovy.control.ProcessingUnit.gotoPhase(ProcessingUnit.java:155)
  org.codehaus.groovy.control.CompilationUnit.compile(CompilationUnit.java:621)"
github.com,joke/spock-mockable,main,GroovyParser,"examples/spring/src/test/groovy/io/github/joke/spockmockable/tests/ControllerTestFromBase.groovy","MultipleCompilationErrorsException",,,"org.codehaus.groovy.control.MultipleCompilationErrorsException: startup failed:
Could not instantiate global transform class org.spockframework.compiler.SpockTransform specified at jar:file:/home/ubuntu/.gradle/caches/modules-2/files-2.1/org.spockframework/spock-core/2.3-groovy-4.0/8861b2590bb8e4709b052fb4ed6da3de98e734d9/spock-core-2.3-groovy-4.0.jar!/META-INF/services/org.codehaus.groovy.transform.ASTTransformation  because of exception org.spockframework.util.IncompatibleGroovyVersionException: The Spock compiler plugin cannot execute because Spock 2.3.0-groovy-4.0 is not compatible with Groovy 3.0.10. For more information (including enforce mode), see https://docs.spockframework.org (section 'Known Issues').
Spock artifact: file:/home/ubuntu/.gradle/caches/modules-2/files-2.1/org.spockframework/spock-core/2.3-groovy-4.0/8861b2590bb8e4709b052fb4ed6da3de98e734d9/spock-core-2.3-groovy-4.0.jar
Groovy artifact: file:/home/ubuntu/.gradle/wrapper/dists/gradle-7.5.1-all/1ehga6e77gqps5uk2kc5kf1vc/gradle-7.5.1/lib/groovy-3.0.10.jar

1 error

  org.codehaus.groovy.control.ErrorCollector.failIfErrors(ErrorCollector.java:292)
  org.codehaus.groovy.control.ProcessingUnit.completePhase(ProcessingUnit.java:139)
  org.codehaus.groovy.control.ProcessingUnit.gotoPhase(ProcessingUnit.java:155)
  org.codehaus.groovy.control.CompilationUnit.compile(CompilationUnit.java:621)"
github.com,joke/spock-mockable,main,GroovyParser,"examples/spring/src/test/groovy/io/github/joke/spockmockable/tests/ControllerTestBase.groovy","MultipleCompilationErrorsException",,,"org.codehaus.groovy.control.MultipleCompilationErrorsException: startup failed:
Could not instantiate global transform class org.spockframework.compiler.SpockTransform specified at jar:file:/home/ubuntu/.gradle/caches/modules-2/files-2.1/org.spockframework/spock-core/2.3-groovy-4.0/8861b2590bb8e4709b052fb4ed6da3de98e734d9/spock-core-2.3-groovy-4.0.jar!/META-INF/services/org.codehaus.groovy.transform.ASTTransformation  because of exception org.spockframework.util.IncompatibleGroovyVersionException: The Spock compiler plugin cannot execute because Spock 2.3.0-groovy-4.0 is not compatible with Groovy 3.0.10. For more information (including enforce mode), see https://docs.spockframework.org (section 'Known Issues').
Spock artifact: file:/home/ubuntu/.gradle/caches/modules-2/files-2.1/org.spockframework/spock-core/2.3-groovy-4.0/8861b2590bb8e4709b052fb4ed6da3de98e734d9/spock-core-2.3-groovy-4.0.jar
Groovy artifact: file:/home/ubuntu/.gradle/wrapper/dists/gradle-7.5.1-all/1ehga6e77gqps5uk2kc5kf1vc/gradle-7.5.1/lib/groovy-3.0.10.jar

1 error

  org.codehaus.groovy.control.ErrorCollector.failIfErrors(ErrorCollector.java:292)
  org.codehaus.groovy.control.ProcessingUnit.completePhase(ProcessingUnit.java:139)
  org.codehaus.groovy.control.ProcessingUnit.gotoPhase(ProcessingUnit.java:155)
  org.codehaus.groovy.control.CompilationUnit.compile(CompilationUnit.java:621)"
github.com,joke/spock-mockable,main,GroovyParser,"tests/src/test/groovy/io/github/joke/tests/StaticTest.groovy","MultipleCompilationErrorsException",,,"org.codehaus.groovy.control.MultipleCompilationErrorsException: startup failed:
Could not instantiate global transform class org.spockframework.compiler.SpockTransform specified at jar:file:/home/ubuntu/.gradle/caches/modules-2/files-2.1/org.spockframework/spock-core/2.3-groovy-4.0/8861b2590bb8e4709b052fb4ed6da3de98e734d9/spock-core-2.3-groovy-4.0.jar!/META-INF/services/org.codehaus.groovy.transform.ASTTransformation  because of exception org.spockframework.util.IncompatibleGroovyVersionException: The Spock compiler plugin cannot execute because Spock 2.3.0-groovy-4.0 is not compatible with Groovy 3.0.10. For more information (including enforce mode), see https://docs.spockframework.org (section 'Known Issues').
Spock artifact: file:/home/ubuntu/.gradle/caches/modules-2/files-2.1/org.spockframework/spock-core/2.3-groovy-4.0/8861b2590bb8e4709b052fb4ed6da3de98e734d9/spock-core-2.3-groovy-4.0.jar
Groovy artifact: file:/home/ubuntu/.gradle/wrapper/dists/gradle-7.5.1-all/1ehga6e77gqps5uk2kc5kf1vc/gradle-7.5.1/lib/groovy-3.0.10.jar

1 error

  org.codehaus.groovy.control.ErrorCollector.failIfErrors(ErrorCollector.java:292)
  org.codehaus.groovy.control.ProcessingUnit.completePhase(ProcessingUnit.java:139)
  org.codehaus.groovy.control.ProcessingUnit.gotoPhase(ProcessingUnit.java:155)
  org.codehaus.groovy.control.CompilationUnit.compile(CompilationUnit.java:621)"
github.com,joke/spock-mockable,main,GroovyParser,"tests/src/test/groovy/io/github/joke/tests/TransformationTest.groovy","MultipleCompilationErrorsException",,,"org.codehaus.groovy.control.MultipleCompilationErrorsException: startup failed:
Could not instantiate global transform class org.spockframework.compiler.SpockTransform specified at jar:file:/home/ubuntu/.gradle/caches/modules-2/files-2.1/org.spockframework/spock-core/2.3-groovy-4.0/8861b2590bb8e4709b052fb4ed6da3de98e734d9/spock-core-2.3-groovy-4.0.jar!/META-INF/services/org.codehaus.groovy.transform.ASTTransformation  because of exception org.spockframework.util.IncompatibleGroovyVersionException: The Spock compiler plugin cannot execute because Spock 2.3.0-groovy-4.0 is not compatible with Groovy 3.0.10. For more information (including enforce mode), see https://docs.spockframework.org (section 'Known Issues').
Spock artifact: file:/home/ubuntu/.gradle/caches/modules-2/files-2.1/org.spockframework/spock-core/2.3-groovy-4.0/8861b2590bb8e4709b052fb4ed6da3de98e734d9/spock-core-2.3-groovy-4.0.jar
Groovy artifact: file:/home/ubuntu/.gradle/wrapper/dists/gradle-7.5.1-all/1ehga6e77gqps5uk2kc5kf1vc/gradle-7.5.1/lib/groovy-3.0.10.jar

1 error

  org.codehaus.groovy.control.ErrorCollector.failIfErrors(ErrorCollector.java:292)
  org.codehaus.groovy.control.ProcessingUnit.completePhase(ProcessingUnit.java:139)
  org.codehaus.groovy.control.ProcessingUnit.gotoPhase(ProcessingUnit.java:155)
  org.codehaus.groovy.control.CompilationUnit.compile(CompilationUnit.java:621)"
github.com,joke/spock-mockable,main,GroovyParser,"tests/src/test/groovy/io/github/joke/tests/HierarchyrTest.groovy","MultipleCompilationErrorsException",,,"org.codehaus.groovy.control.MultipleCompilationErrorsException: startup failed:
Could not instantiate global transform class org.spockframework.compiler.SpockTransform specified at jar:file:/home/ubuntu/.gradle/caches/modules-2/files-2.1/org.spockframework/spock-core/2.3-groovy-4.0/8861b2590bb8e4709b052fb4ed6da3de98e734d9/spock-core-2.3-groovy-4.0.jar!/META-INF/services/org.codehaus.groovy.transform.ASTTransformation  because of exception org.spockframework.util.IncompatibleGroovyVersionException: The Spock compiler plugin cannot execute because Spock 2.3.0-groovy-4.0 is not compatible with Groovy 3.0.10. For more information (including enforce mode), see https://docs.spockframework.org (section 'Known Issues').
Spock artifact: file:/home/ubuntu/.gradle/caches/modules-2/files-2.1/org.spockframework/spock-core/2.3-groovy-4.0/8861b2590bb8e4709b052fb4ed6da3de98e734d9/spock-core-2.3-groovy-4.0.jar
Groovy artifact: file:/home/ubuntu/.gradle/wrapper/dists/gradle-7.5.1-all/1ehga6e77gqps5uk2kc5kf1vc/gradle-7.5.1/lib/groovy-3.0.10.jar

1 error

  org.codehaus.groovy.control.ErrorCollector.failIfErrors(ErrorCollector.java:292)
  org.codehaus.groovy.control.ProcessingUnit.completePhase(ProcessingUnit.java:139)
  org.codehaus.groovy.control.ProcessingUnit.gotoPhase(ProcessingUnit.java:155)
  org.codehaus.groovy.control.CompilationUnit.compile(CompilationUnit.java:621)"
github.com,joke/spock-mockable,main,GroovyParser,"examples/spock/src/test/groovy/io/github/joke/examples/MockablePackageTest.groovy","MultipleCompilationErrorsException",,,"org.codehaus.groovy.control.MultipleCompilationErrorsException: startup failed:
Could not instantiate global transform class org.spockframework.compiler.SpockTransform specified at jar:file:/home/ubuntu/.gradle/caches/modules-2/files-2.1/org.spockframework/spock-core/2.3-groovy-4.0/8861b2590bb8e4709b052fb4ed6da3de98e734d9/spock-core-2.3-groovy-4.0.jar!/META-INF/services/org.codehaus.groovy.transform.ASTTransformation  because of exception org.spockframework.util.IncompatibleGroovyVersionException: The Spock compiler plugin cannot execute because Spock 2.3.0-groovy-4.0 is not compatible with Groovy 3.0.10. For more information (including enforce mode), see https://docs.spockframework.org (section 'Known Issues').
Spock artifact: file:/home/ubuntu/.gradle/caches/modules-2/files-2.1/org.spockframework/spock-core/2.3-groovy-4.0/8861b2590bb8e4709b052fb4ed6da3de98e734d9/spock-core-2.3-groovy-4.0.jar
Groovy artifact: file:/home/ubuntu/.gradle/wrapper/dists/gradle-7.5.1-all/1ehga6e77gqps5uk2kc5kf1vc/gradle-7.5.1/lib/groovy-3.0.10.jar

1 error

  org.codehaus.groovy.control.ErrorCollector.failIfErrors(ErrorCollector.java:292)
  org.codehaus.groovy.control.ProcessingUnit.completePhase(ProcessingUnit.java:139)
  org.codehaus.groovy.control.ProcessingUnit.gotoPhase(ProcessingUnit.java:155)
  org.codehaus.groovy.control.CompilationUnit.compile(CompilationUnit.java:621)"
github.com,joke/spock-mockable,main,GroovyParser,"examples/spock/src/test/groovy/io/github/joke/examples/StaticTest.groovy","MultipleCompilationErrorsException",,,"org.codehaus.groovy.control.MultipleCompilationErrorsException: startup failed:
Could not instantiate global transform class org.spockframework.compiler.SpockTransform specified at jar:file:/home/ubuntu/.gradle/caches/modules-2/files-2.1/org.spockframework/spock-core/2.3-groovy-4.0/8861b2590bb8e4709b052fb4ed6da3de98e734d9/spock-core-2.3-groovy-4.0.jar!/META-INF/services/org.codehaus.groovy.transform.ASTTransformation  because of exception org.spockframework.util.IncompatibleGroovyVersionException: The Spock compiler plugin cannot execute because Spock 2.3.0-groovy-4.0 is not compatible with Groovy 3.0.10. For more information (including enforce mode), see https://docs.spockframework.org (section 'Known Issues').
Spock artifact: file:/home/ubuntu/.gradle/caches/modules-2/files-2.1/org.spockframework/spock-core/2.3-groovy-4.0/8861b2590bb8e4709b052fb4ed6da3de98e734d9/spock-core-2.3-groovy-4.0.jar
Groovy artifact: file:/home/ubuntu/.gradle/wrapper/dists/gradle-7.5.1-all/1ehga6e77gqps5uk2kc5kf1vc/gradle-7.5.1/lib/groovy-3.0.10.jar

1 error

  org.codehaus.groovy.control.ErrorCollector.failIfErrors(ErrorCollector.java:292)
  org.codehaus.groovy.control.ProcessingUnit.completePhase(ProcessingUnit.java:139)
  org.codehaus.groovy.control.ProcessingUnit.gotoPhase(ProcessingUnit.java:155)
  org.codehaus.groovy.control.CompilationUnit.compile(CompilationUnit.java:621)"
github.com,joke/spock-mockable,main,GroovyParser,"examples/spock/src/test/groovy/io/github/joke/examples/MockTest.groovy","MultipleCompilationErrorsException",,,"org.codehaus.groovy.control.MultipleCompilationErrorsException: startup failed:
Could not instantiate global transform class org.spockframework.compiler.SpockTransform specified at jar:file:/home/ubuntu/.gradle/caches/modules-2/files-2.1/org.spockframework/spock-core/2.3-groovy-4.0/8861b2590bb8e4709b052fb4ed6da3de98e734d9/spock-core-2.3-groovy-4.0.jar!/META-INF/services/org.codehaus.groovy.transform.ASTTransformation  because of exception org.spockframework.util.IncompatibleGroovyVersionException: The Spock compiler plugin cannot execute because Spock 2.3.0-groovy-4.0 is not compatible with Groovy 3.0.10. For more information (including enforce mode), see https://docs.spockframework.org (section 'Known Issues').
Spock artifact: file:/home/ubuntu/.gradle/caches/modules-2/files-2.1/org.spockframework/spock-core/2.3-groovy-4.0/8861b2590bb8e4709b052fb4ed6da3de98e734d9/spock-core-2.3-groovy-4.0.jar
Groovy artifact: file:/home/ubuntu/.gradle/wrapper/dists/gradle-7.5.1-all/1ehga6e77gqps5uk2kc5kf1vc/gradle-7.5.1/lib/groovy-3.0.10.jar

1 error

  org.codehaus.groovy.control.ErrorCollector.failIfErrors(ErrorCollector.java:292)
  org.codehaus.groovy.control.ProcessingUnit.completePhase(ProcessingUnit.java:139)
  org.codehaus.groovy.control.ProcessingUnit.gotoPhase(ProcessingUnit.java:155)
  org.codehaus.groovy.control.CompilationUnit.compile(CompilationUnit.java:621)"
github.com,joke/spock-mockable,main,GroovyParser,"examples/spock/src/test/groovy/io/github/joke/examples/MockableClassTest.groovy","MultipleCompilationErrorsException",,,"org.codehaus.groovy.control.MultipleCompilationErrorsException: startup failed:
Could not instantiate global transform class org.spockframework.compiler.SpockTransform specified at jar:file:/home/ubuntu/.gradle/caches/modules-2/files-2.1/org.spockframework/spock-core/2.3-groovy-4.0/8861b2590bb8e4709b052fb4ed6da3de98e734d9/spock-core-2.3-groovy-4.0.jar!/META-INF/services/org.codehaus.groovy.transform.ASTTransformation  because of exception org.spockframework.util.IncompatibleGroovyVersionException: The Spock compiler plugin cannot execute because Spock 2.3.0-groovy-4.0 is not compatible with Groovy 3.0.10. For more information (including enforce mode), see https://docs.spockframework.org (section 'Known Issues').
Spock artifact: file:/home/ubuntu/.gradle/caches/modules-2/files-2.1/org.spockframework/spock-core/2.3-groovy-4.0/8861b2590bb8e4709b052fb4ed6da3de98e734d9/spock-core-2.3-groovy-4.0.jar
Groovy artifact: file:/home/ubuntu/.gradle/wrapper/dists/gradle-7.5.1-all/1ehga6e77gqps5uk2kc5kf1vc/gradle-7.5.1/lib/groovy-3.0.10.jar

1 error

  org.codehaus.groovy.control.ErrorCollector.failIfErrors(ErrorCollector.java:292)
  org.codehaus.groovy.control.ProcessingUnit.completePhase(ProcessingUnit.java:139)
  org.codehaus.groovy.control.ProcessingUnit.gotoPhase(ProcessingUnit.java:155)
  org.codehaus.groovy.control.CompilationUnit.compile(CompilationUnit.java:621)"
github.com,joke/spock-mockable,main,GroovyParser,"examples/spock/src/test/groovy/io/github/joke/examples/StubTest.groovy","MultipleCompilationErrorsException",,,"org.codehaus.groovy.control.MultipleCompilationErrorsException: startup failed:
Could not instantiate global transform class org.spockframework.compiler.SpockTransform specified at jar:file:/home/ubuntu/.gradle/caches/modules-2/files-2.1/org.spockframework/spock-core/2.3-groovy-4.0/8861b2590bb8e4709b052fb4ed6da3de98e734d9/spock-core-2.3-groovy-4.0.jar!/META-INF/services/org.codehaus.groovy.transform.ASTTransformation  because of exception org.spockframework.util.IncompatibleGroovyVersionException: The Spock compiler plugin cannot execute because Spock 2.3.0-groovy-4.0 is not compatible with Groovy 3.0.10. For more information (including enforce mode), see https://docs.spockframework.org (section 'Known Issues').
Spock artifact: file:/home/ubuntu/.gradle/caches/modules-2/files-2.1/org.spockframework/spock-core/2.3-groovy-4.0/8861b2590bb8e4709b052fb4ed6da3de98e734d9/spock-core-2.3-groovy-4.0.jar
Groovy artifact: file:/home/ubuntu/.gradle/wrapper/dists/gradle-7.5.1-all/1ehga6e77gqps5uk2kc5kf1vc/gradle-7.5.1/lib/groovy-3.0.10.jar

1 error

  org.codehaus.groovy.control.ErrorCollector.failIfErrors(ErrorCollector.java:292)
  org.codehaus.groovy.control.ProcessingUnit.completePhase(ProcessingUnit.java:139)
  org.codehaus.groovy.control.ProcessingUnit.gotoPhase(ProcessingUnit.java:155)
  org.codehaus.groovy.control.CompilationUnit.compile(CompilationUnit.java:621)"
github.com,joke/spock-mockable,main,GroovyParser,"examples/spock/src/test/groovy/io/github/joke/examples/SpyTest.groovy","MultipleCompilationErrorsException",,,"org.codehaus.groovy.control.MultipleCompilationErrorsException: startup failed:
Could not instantiate global transform class org.spockframework.compiler.SpockTransform specified at jar:file:/home/ubuntu/.gradle/caches/modules-2/files-2.1/org.spockframework/spock-core/2.3-groovy-4.0/8861b2590bb8e4709b052fb4ed6da3de98e734d9/spock-core-2.3-groovy-4.0.jar!/META-INF/services/org.codehaus.groovy.transform.ASTTransformation  because of exception org.spockframework.util.IncompatibleGroovyVersionException: The Spock compiler plugin cannot execute because Spock 2.3.0-groovy-4.0 is not compatible with Groovy 3.0.10. For more information (including enforce mode), see https://docs.spockframework.org (section 'Known Issues').
Spock artifact: file:/home/ubuntu/.gradle/caches/modules-2/files-2.1/org.spockframework/spock-core/2.3-groovy-4.0/8861b2590bb8e4709b052fb4ed6da3de98e734d9/spock-core-2.3-groovy-4.0.jar
Groovy artifact: file:/home/ubuntu/.gradle/wrapper/dists/gradle-7.5.1-all/1ehga6e77gqps5uk2kc5kf1vc/gradle-7.5.1/lib/groovy-3.0.10.jar

1 error

  org.codehaus.groovy.control.ErrorCollector.failIfErrors(ErrorCollector.java:292)
  org.codehaus.groovy.control.ProcessingUnit.completePhase(ProcessingUnit.java:139)
  org.codehaus.groovy.control.ProcessingUnit.gotoPhase(ProcessingUnit.java:155)
  org.codehaus.groovy.control.CompilationUnit.compile(CompilationUnit.java:621)"
github.com,joke/spock-mockable,main,GroovyParser,"spock-mockable/src/test/groovy/io/github/joke/spockmockable/agent/TransformationStarterTest.groovy","MultipleCompilationErrorsException",,,"org.codehaus.groovy.control.MultipleCompilationErrorsException: startup failed:
Could not instantiate global transform class org.spockframework.compiler.SpockTransform specified at jar:file:/home/ubuntu/.gradle/caches/modules-2/files-2.1/org.spockframework/spock-core/2.3-groovy-4.0/8861b2590bb8e4709b052fb4ed6da3de98e734d9/spock-core-2.3-groovy-4.0.jar!/META-INF/services/org.codehaus.groovy.transform.ASTTransformation  because of exception org.spockframework.util.IncompatibleGroovyVersionException: The Spock compiler plugin cannot execute because Spock 2.3.0-groovy-4.0 is not compatible with Groovy 3.0.10. For more information (including enforce mode), see https://docs.spockframework.org (section 'Known Issues').
Spock artifact: file:/home/ubuntu/.gradle/caches/modules-2/files-2.1/org.spockframework/spock-core/2.3-groovy-4.0/8861b2590bb8e4709b052fb4ed6da3de98e734d9/spock-core-2.3-groovy-4.0.jar
Groovy artifact: file:/home/ubuntu/.gradle/wrapper/dists/gradle-7.5.1-all/1ehga6e77gqps5uk2kc5kf1vc/gradle-7.5.1/lib/groovy-3.0.10.jar

1 error

  org.codehaus.groovy.control.ErrorCollector.failIfErrors(ErrorCollector.java:292)
  org.codehaus.groovy.control.ProcessingUnit.completePhase(ProcessingUnit.java:139)
  org.codehaus.groovy.control.ProcessingUnit.gotoPhase(ProcessingUnit.java:155)
  org.codehaus.groovy.control.CompilationUnit.compile(CompilationUnit.java:621)"
github.com,joke/spock-mockable,main,GroovyParser,"spock-mockable/src/test/groovy/io/github/joke/spockmockable/agent/RedefinitionListenerTest.groovy","MultipleCompilationErrorsException",,,"org.codehaus.groovy.control.MultipleCompilationErrorsException: startup failed:
Could not instantiate global transform class org.spockframework.compiler.SpockTransform specified at jar:file:/home/ubuntu/.gradle/caches/modules-2/files-2.1/org.spockframework/spock-core/2.3-groovy-4.0/8861b2590bb8e4709b052fb4ed6da3de98e734d9/spock-core-2.3-groovy-4.0.jar!/META-INF/services/org.codehaus.groovy.transform.ASTTransformation  because of exception org.spockframework.util.IncompatibleGroovyVersionException: The Spock compiler plugin cannot execute because Spock 2.3.0-groovy-4.0 is not compatible with Groovy 3.0.10. For more information (including enforce mode), see https://docs.spockframework.org (section 'Known Issues').
Spock artifact: file:/home/ubuntu/.gradle/caches/modules-2/files-2.1/org.spockframework/spock-core/2.3-groovy-4.0/8861b2590bb8e4709b052fb4ed6da3de98e734d9/spock-core-2.3-groovy-4.0.jar
Groovy artifact: file:/home/ubuntu/.gradle/wrapper/dists/gradle-7.5.1-all/1ehga6e77gqps5uk2kc5kf1vc/gradle-7.5.1/lib/groovy-3.0.10.jar

1 error

  org.codehaus.groovy.control.ErrorCollector.failIfErrors(ErrorCollector.java:292)
  org.codehaus.groovy.control.ProcessingUnit.completePhase(ProcessingUnit.java:139)
  org.codehaus.groovy.control.ProcessingUnit.gotoPhase(ProcessingUnit.java:155)
  org.codehaus.groovy.control.CompilationUnit.compile(CompilationUnit.java:621)"
github.com,joke/spock-mockable,main,GroovyParser,"spock-mockable/src/test/groovy/io/github/joke/spockmockable/agent/ReferenceLoaderTest.groovy","MultipleCompilationErrorsException",,,"org.codehaus.groovy.control.MultipleCompilationErrorsException: startup failed:
Could not instantiate global transform class org.spockframework.compiler.SpockTransform specified at jar:file:/home/ubuntu/.gradle/caches/modules-2/files-2.1/org.spockframework/spock-core/2.3-groovy-4.0/8861b2590bb8e4709b052fb4ed6da3de98e734d9/spock-core-2.3-groovy-4.0.jar!/META-INF/services/org.codehaus.groovy.transform.ASTTransformation  because of exception org.spockframework.util.IncompatibleGroovyVersionException: The Spock compiler plugin cannot execute because Spock 2.3.0-groovy-4.0 is not compatible with Groovy 3.0.10. For more information (including enforce mode), see https://docs.spockframework.org (section 'Known Issues').
Spock artifact: file:/home/ubuntu/.gradle/caches/modules-2/files-2.1/org.spockframework/spock-core/2.3-groovy-4.0/8861b2590bb8e4709b052fb4ed6da3de98e734d9/spock-core-2.3-groovy-4.0.jar
Groovy artifact: file:/home/ubuntu/.gradle/wrapper/dists/gradle-7.5.1-all/1ehga6e77gqps5uk2kc5kf1vc/gradle-7.5.1/lib/groovy-3.0.10.jar

1 error

  org.codehaus.groovy.control.ErrorCollector.failIfErrors(ErrorCollector.java:292)
  org.codehaus.groovy.control.ProcessingUnit.completePhase(ProcessingUnit.java:139)
  org.codehaus.groovy.control.ProcessingUnit.gotoPhase(ProcessingUnit.java:155)
  org.codehaus.groovy.control.CompilationUnit.compile(CompilationUnit.java:621)"
github.com,joke/spock-mockable,main,GroovyParser,"spock-mockable/src/test/groovy/io/github/joke/spockmockable/agent/ClassTransformerTest.groovy","MultipleCompilationErrorsException",,,"org.codehaus.groovy.control.MultipleCompilationErrorsException: startup failed:
Could not instantiate global transform class org.spockframework.compiler.SpockTransform specified at jar:file:/home/ubuntu/.gradle/caches/modules-2/files-2.1/org.spockframework/spock-core/2.3-groovy-4.0/8861b2590bb8e4709b052fb4ed6da3de98e734d9/spock-core-2.3-groovy-4.0.jar!/META-INF/services/org.codehaus.groovy.transform.ASTTransformation  because of exception org.spockframework.util.IncompatibleGroovyVersionException: The Spock compiler plugin cannot execute because Spock 2.3.0-groovy-4.0 is not compatible with Groovy 3.0.10. For more information (including enforce mode), see https://docs.spockframework.org (section 'Known Issues').
Spock artifact: file:/home/ubuntu/.gradle/caches/modules-2/files-2.1/org.spockframework/spock-core/2.3-groovy-4.0/8861b2590bb8e4709b052fb4ed6da3de98e734d9/spock-core-2.3-groovy-4.0.jar
Groovy artifact: file:/home/ubuntu/.gradle/wrapper/dists/gradle-7.5.1-all/1ehga6e77gqps5uk2kc5kf1vc/gradle-7.5.1/lib/groovy-3.0.10.jar

1 error

  org.codehaus.groovy.control.ErrorCollector.failIfErrors(ErrorCollector.java:292)
  org.codehaus.groovy.control.ProcessingUnit.completePhase(ProcessingUnit.java:139)
  org.codehaus.groovy.control.ProcessingUnit.gotoPhase(ProcessingUnit.java:155)
  org.codehaus.groovy.control.CompilationUnit.compile(CompilationUnit.java:621)"
github.com,joke/spock-mockable,main,GroovyParser,"spock-mockable/src/test/groovy/io/github/joke/spockmockable/ast/SpecificationProcessorTest.groovy","MultipleCompilationErrorsException",,,"org.codehaus.groovy.control.MultipleCompilationErrorsException: startup failed:
Could not instantiate global transform class org.spockframework.compiler.SpockTransform specified at jar:file:/home/ubuntu/.gradle/caches/modules-2/files-2.1/org.spockframework/spock-core/2.3-groovy-4.0/8861b2590bb8e4709b052fb4ed6da3de98e734d9/spock-core-2.3-groovy-4.0.jar!/META-INF/services/org.codehaus.groovy.transform.ASTTransformation  because of exception org.spockframework.util.IncompatibleGroovyVersionException: The Spock compiler plugin cannot execute because Spock 2.3.0-groovy-4.0 is not compatible with Groovy 3.0.10. For more information (including enforce mode), see https://docs.spockframework.org (section 'Known Issues').
Spock artifact: file:/home/ubuntu/.gradle/caches/modules-2/files-2.1/org.spockframework/spock-core/2.3-groovy-4.0/8861b2590bb8e4709b052fb4ed6da3de98e734d9/spock-core-2.3-groovy-4.0.jar
Groovy artifact: file:/home/ubuntu/.gradle/wrapper/dists/gradle-7.5.1-all/1ehga6e77gqps5uk2kc5kf1vc/gradle-7.5.1/lib/groovy-3.0.10.jar

1 error

  org.codehaus.groovy.control.ErrorCollector.failIfErrors(ErrorCollector.java:292)
  org.codehaus.groovy.control.ProcessingUnit.completePhase(ProcessingUnit.java:139)
  org.codehaus.groovy.control.ProcessingUnit.gotoPhase(ProcessingUnit.java:155)
  org.codehaus.groovy.control.CompilationUnit.compile(CompilationUnit.java:621)"
github.com,joke/spock-mockable,main,GroovyParser,"spock-mockable/src/test/groovy/io/github/joke/spockmockable/ast/SourceUnitProcessorTest.groovy","MultipleCompilationErrorsException",,,"org.codehaus.groovy.control.MultipleCompilationErrorsException: startup failed:
Could not instantiate global transform class org.spockframework.compiler.SpockTransform specified at jar:file:/home/ubuntu/.gradle/caches/modules-2/files-2.1/org.spockframework/spock-core/2.3-groovy-4.0/8861b2590bb8e4709b052fb4ed6da3de98e734d9/spock-core-2.3-groovy-4.0.jar!/META-INF/services/org.codehaus.groovy.transform.ASTTransformation  because of exception org.spockframework.util.IncompatibleGroovyVersionException: The Spock compiler plugin cannot execute because Spock 2.3.0-groovy-4.0 is not compatible with Groovy 3.0.10. For more information (including enforce mode), see https://docs.spockframework.org (section 'Known Issues').
Spock artifact: file:/home/ubuntu/.gradle/caches/modules-2/files-2.1/org.spockframework/spock-core/2.3-groovy-4.0/8861b2590bb8e4709b052fb4ed6da3de98e734d9/spock-core-2.3-groovy-4.0.jar
Groovy artifact: file:/home/ubuntu/.gradle/wrapper/dists/gradle-7.5.1-all/1ehga6e77gqps5uk2kc5kf1vc/gradle-7.5.1/lib/groovy-3.0.10.jar

1 error

  org.codehaus.groovy.control.ErrorCollector.failIfErrors(ErrorCollector.java:292)
  org.codehaus.groovy.control.ProcessingUnit.completePhase(ProcessingUnit.java:139)
  org.codehaus.groovy.control.ProcessingUnit.gotoPhase(ProcessingUnit.java:155)
  org.codehaus.groovy.control.CompilationUnit.compile(CompilationUnit.java:621)"
github.com,joke/spock-mockable,main,GroovyParser,"spock-mockable/src/test/groovy/io/github/joke/spockmockable/ast/ClassCollectorTest.groovy","MultipleCompilationErrorsException",,,"org.codehaus.groovy.control.MultipleCompilationErrorsException: startup failed:
Could not instantiate global transform class org.spockframework.compiler.SpockTransform specified at jar:file:/home/ubuntu/.gradle/caches/modules-2/files-2.1/org.spockframework/spock-core/2.3-groovy-4.0/8861b2590bb8e4709b052fb4ed6da3de98e734d9/spock-core-2.3-groovy-4.0.jar!/META-INF/services/org.codehaus.groovy.transform.ASTTransformation  because of exception org.spockframework.util.IncompatibleGroovyVersionException: The Spock compiler plugin cannot execute because Spock 2.3.0-groovy-4.0 is not compatible with Groovy 3.0.10. For more information (including enforce mode), see https://docs.spockframework.org (section 'Known Issues').
Spock artifact: file:/home/ubuntu/.gradle/caches/modules-2/files-2.1/org.spockframework/spock-core/2.3-groovy-4.0/8861b2590bb8e4709b052fb4ed6da3de98e734d9/spock-core-2.3-groovy-4.0.jar
Groovy artifact: file:/home/ubuntu/.gradle/wrapper/dists/gradle-7.5.1-all/1ehga6e77gqps5uk2kc5kf1vc/gradle-7.5.1/lib/groovy-3.0.10.jar

1 error

  org.codehaus.groovy.control.ErrorCollector.failIfErrors(ErrorCollector.java:292)
  org.codehaus.groovy.control.ProcessingUnit.completePhase(ProcessingUnit.java:139)
  org.codehaus.groovy.control.ProcessingUnit.gotoPhase(ProcessingUnit.java:155)
  org.codehaus.groovy.control.CompilationUnit.compile(CompilationUnit.java:621)"
github.com,joke/spock-mockable,main,GroovyParser,"spock-mockable/src/test/groovy/io/github/joke/spockmockable/ast/IsolationAnnotatorTest.groovy","MultipleCompilationErrorsException",,,"org.codehaus.groovy.control.MultipleCompilationErrorsException: startup failed:
Could not instantiate global transform class org.spockframework.compiler.SpockTransform specified at jar:file:/home/ubuntu/.gradle/caches/modules-2/files-2.1/org.spockframework/spock-core/2.3-groovy-4.0/8861b2590bb8e4709b052fb4ed6da3de98e734d9/spock-core-2.3-groovy-4.0.jar!/META-INF/services/org.codehaus.groovy.transform.ASTTransformation  because of exception org.spockframework.util.IncompatibleGroovyVersionException: The Spock compiler plugin cannot execute because Spock 2.3.0-groovy-4.0 is not compatible with Groovy 3.0.10. For more information (including enforce mode), see https://docs.spockframework.org (section 'Known Issues').
Spock artifact: file:/home/ubuntu/.gradle/caches/modules-2/files-2.1/org.spockframework/spock-core/2.3-groovy-4.0/8861b2590bb8e4709b052fb4ed6da3de98e734d9/spock-core-2.3-groovy-4.0.jar
Groovy artifact: file:/home/ubuntu/.gradle/wrapper/dists/gradle-7.5.1-all/1ehga6e77gqps5uk2kc5kf1vc/gradle-7.5.1/lib/groovy-3.0.10.jar

1 error

  org.codehaus.groovy.control.ErrorCollector.failIfErrors(ErrorCollector.java:292)
  org.codehaus.groovy.control.ProcessingUnit.completePhase(ProcessingUnit.java:139)
  org.codehaus.groovy.control.ProcessingUnit.gotoPhase(ProcessingUnit.java:155)
  org.codehaus.groovy.control.CompilationUnit.compile(CompilationUnit.java:621)"
github.com,joke/spock-mockable,main,GroovyParser,"spock-mockable/src/test/groovy/io/github/joke/spockmockable/hooks/EngineTest.groovy","MultipleCompilationErrorsException",,,"org.codehaus.groovy.control.MultipleCompilationErrorsException: startup failed:
Could not instantiate global transform class org.spockframework.compiler.SpockTransform specified at jar:file:/home/ubuntu/.gradle/caches/modules-2/files-2.1/org.spockframework/spock-core/2.3-groovy-4.0/8861b2590bb8e4709b052fb4ed6da3de98e734d9/spock-core-2.3-groovy-4.0.jar!/META-INF/services/org.codehaus.groovy.transform.ASTTransformation  because of exception org.spockframework.util.IncompatibleGroovyVersionException: The Spock compiler plugin cannot execute because Spock 2.3.0-groovy-4.0 is not compatible with Groovy 3.0.10. For more information (including enforce mode), see https://docs.spockframework.org (section 'Known Issues').
Spock artifact: file:/home/ubuntu/.gradle/caches/modules-2/files-2.1/org.spockframework/spock-core/2.3-groovy-4.0/8861b2590bb8e4709b052fb4ed6da3de98e734d9/spock-core-2.3-groovy-4.0.jar
Groovy artifact: file:/home/ubuntu/.gradle/wrapper/dists/gradle-7.5.1-all/1ehga6e77gqps5uk2kc5kf1vc/gradle-7.5.1/lib/groovy-3.0.10.jar

1 error

  org.codehaus.groovy.control.ErrorCollector.failIfErrors(ErrorCollector.java:292)
  org.codehaus.groovy.control.ProcessingUnit.completePhase(ProcessingUnit.java:139)
  org.codehaus.groovy.control.ProcessingUnit.gotoPhase(ProcessingUnit.java:155)
  org.codehaus.groovy.control.CompilationUnit.compile(CompilationUnit.java:621)"
github.com,joke/spock-mockable,main,GroovyParser,"spock-mockable/src/test/groovy/io/github/joke/spockmockable/hooks/StaticMockExtensionTest.groovy","MultipleCompilationErrorsException",,,"org.codehaus.groovy.control.MultipleCompilationErrorsException: startup failed:
Could not instantiate global transform class org.spockframework.compiler.SpockTransform specified at jar:file:/home/ubuntu/.gradle/caches/modules-2/files-2.1/org.spockframework/spock-core/2.3-groovy-4.0/8861b2590bb8e4709b052fb4ed6da3de98e734d9/spock-core-2.3-groovy-4.0.jar!/META-INF/services/org.codehaus.groovy.transform.ASTTransformation  because of exception org.spockframework.util.IncompatibleGroovyVersionException: The Spock compiler plugin cannot execute because Spock 2.3.0-groovy-4.0 is not compatible with Groovy 3.0.10. For more information (including enforce mode), see https://docs.spockframework.org (section 'Known Issues').
Spock artifact: file:/home/ubuntu/.gradle/caches/modules-2/files-2.1/org.spockframework/spock-core/2.3-groovy-4.0/8861b2590bb8e4709b052fb4ed6da3de98e734d9/spock-core-2.3-groovy-4.0.jar
Groovy artifact: file:/home/ubuntu/.gradle/wrapper/dists/gradle-7.5.1-all/1ehga6e77gqps5uk2kc5kf1vc/gradle-7.5.1/lib/groovy-3.0.10.jar

1 error

  org.codehaus.groovy.control.ErrorCollector.failIfErrors(ErrorCollector.java:292)
  org.codehaus.groovy.control.ProcessingUnit.completePhase(ProcessingUnit.java:139)
  org.codehaus.groovy.control.ProcessingUnit.gotoPhase(ProcessingUnit.java:155)
  org.codehaus.groovy.control.CompilationUnit.compile(CompilationUnit.java:621)"
github.com,joke/spock-mockable,main,GroovyParser,build.gradle,IllegalStateException,,,"java.lang.IllegalStateException: build.gradle is not print idempotent.
  org.openrewrite.Parser.requirePrintEqualsInput(Parser.java:51)"
github.com,joke/spock-mockable,main,GroovyParser,"examples/kotlin/src/test/groovy/io/github/joke/spockmockable/tests/PersonTest.groovy","MultipleCompilationErrorsException",,,"org.codehaus.groovy.control.MultipleCompilationErrorsException: startup failed:
Could not instantiate global transform class org.spockframework.compiler.SpockTransform specified at jar:file:/home/ubuntu/.gradle/caches/modules-2/files-2.1/org.spockframework/spock-core/2.3-groovy-4.0/8861b2590bb8e4709b052fb4ed6da3de98e734d9/spock-core-2.3-groovy-4.0.jar!/META-INF/services/org.codehaus.groovy.transform.ASTTransformation  because of exception org.spockframework.util.IncompatibleGroovyVersionException: The Spock compiler plugin cannot execute because Spock 2.3.0-groovy-4.0 is not compatible with Groovy 3.0.10. For more information (including enforce mode), see https://docs.spockframework.org (section 'Known Issues').
Spock artifact: file:/home/ubuntu/.gradle/caches/modules-2/files-2.1/org.spockframework/spock-core/2.3-groovy-4.0/8861b2590bb8e4709b052fb4ed6da3de98e734d9/spock-core-2.3-groovy-4.0.jar
Groovy artifact: file:/home/ubuntu/.gradle/wrapper/dists/gradle-7.5.1-all/1ehga6e77gqps5uk2kc5kf1vc/gradle-7.5.1/lib/groovy-3.0.10.jar

1 error

  org.codehaus.groovy.control.ErrorCollector.failIfErrors(ErrorCollector.java:292)
  org.codehaus.groovy.control.ProcessingUnit.completePhase(ProcessingUnit.java:139)
  org.codehaus.groovy.control.ProcessingUnit.gotoPhase(ProcessingUnit.java:155)
  org.codehaus.groovy.control.CompilationUnit.compile(CompilationUnit.java:621)"
github.com,joke/spock-mockable,main,GroovyParser,"examples/kotlin/src/test/groovy/io/github/joke/spockmockable/tests/MockableClassTest.groovy","MultipleCompilationErrorsException",,,"org.codehaus.groovy.control.MultipleCompilationErrorsException: startup failed:
Could not instantiate global transform class org.spockframework.compiler.SpockTransform specified at jar:file:/home/ubuntu/.gradle/caches/modules-2/files-2.1/org.spockframework/spock-core/2.3-groovy-4.0/8861b2590bb8e4709b052fb4ed6da3de98e734d9/spock-core-2.3-groovy-4.0.jar!/META-INF/services/org.codehaus.groovy.transform.ASTTransformation  because of exception org.spockframework.util.IncompatibleGroovyVersionException: The Spock compiler plugin cannot execute because Spock 2.3.0-groovy-4.0 is not compatible with Groovy 3.0.10. For more information (including enforce mode), see https://docs.spockframework.org (section 'Known Issues').
Spock artifact: file:/home/ubuntu/.gradle/caches/modules-2/files-2.1/org.spockframework/spock-core/2.3-groovy-4.0/8861b2590bb8e4709b052fb4ed6da3de98e734d9/spock-core-2.3-groovy-4.0.jar
Groovy artifact: file:/home/ubuntu/.gradle/wrapper/dists/gradle-7.5.1-all/1ehga6e77gqps5uk2kc5kf1vc/gradle-7.5.1/lib/groovy-3.0.10.jar

1 error

  org.codehaus.groovy.control.ErrorCollector.failIfErrors(ErrorCollector.java:292)
  org.codehaus.groovy.control.ProcessingUnit.completePhase(ProcessingUnit.java:139)
  org.codehaus.groovy.control.ProcessingUnit.gotoPhase(ProcessingUnit.java:155)
  org.codehaus.groovy.control.CompilationUnit.compile(CompilationUnit.java:621)"
github.com,joke/spock-mockable,main,GroovyParser,"examples/kotlin/src/test/groovy/io/github/joke/spockmockable/tests/PersonTestWithMockablePackage.groovy","MultipleCompilationErrorsException",,,"org.codehaus.groovy.control.MultipleCompilationErrorsException: startup failed:
Could not instantiate global transform class org.spockframework.compiler.SpockTransform specified at jar:file:/home/ubuntu/.gradle/caches/modules-2/files-2.1/org.spockframework/spock-core/2.3-groovy-4.0/8861b2590bb8e4709b052fb4ed6da3de98e734d9/spock-core-2.3-groovy-4.0.jar!/META-INF/services/org.codehaus.groovy.transform.ASTTransformation  because of exception org.spockframework.util.IncompatibleGroovyVersionException: The Spock compiler plugin cannot execute because Spock 2.3.0-groovy-4.0 is not compatible with Groovy 3.0.10. For more information (including enforce mode), see https://docs.spockframework.org (section 'Known Issues').
Spock artifact: file:/home/ubuntu/.gradle/caches/modules-2/files-2.1/org.spockframework/spock-core/2.3-groovy-4.0/8861b2590bb8e4709b052fb4ed6da3de98e734d9/spock-core-2.3-groovy-4.0.jar
Groovy artifact: file:/home/ubuntu/.gradle/wrapper/dists/gradle-7.5.1-all/1ehga6e77gqps5uk2kc5kf1vc/gradle-7.5.1/lib/groovy-3.0.10.jar

1 error

  org.codehaus.groovy.control.ErrorCollector.failIfErrors(ErrorCollector.java:292)
  org.codehaus.groovy.control.ProcessingUnit.completePhase(ProcessingUnit.java:139)
  org.codehaus.groovy.control.ProcessingUnit.gotoPhase(ProcessingUnit.java:155)
  org.codehaus.groovy.control.CompilationUnit.compile(CompilationUnit.java:621)"
github.com,joke/spock-mockable,main,GroovyParser,"examples/kotlin/src/test/groovy/io/github/joke/spockmockable/tests/CompanyTest.groovy","MultipleCompilationErrorsException",,,"org.codehaus.groovy.control.MultipleCompilationErrorsException: startup failed:
Could not instantiate global transform class org.spockframework.compiler.SpockTransform specified at jar:file:/home/ubuntu/.gradle/caches/modules-2/files-2.1/org.spockframework/spock-core/2.3-groovy-4.0/8861b2590bb8e4709b052fb4ed6da3de98e734d9/spock-core-2.3-groovy-4.0.jar!/META-INF/services/org.codehaus.groovy.transform.ASTTransformation  because of exception org.spockframework.util.IncompatibleGroovyVersionException: The Spock compiler plugin cannot execute because Spock 2.3.0-groovy-4.0 is not compatible with Groovy 3.0.10. For more information (including enforce mode), see https://docs.spockframework.org (section 'Known Issues').
Spock artifact: file:/home/ubuntu/.gradle/caches/modules-2/files-2.1/org.spockframework/spock-core/2.3-groovy-4.0/8861b2590bb8e4709b052fb4ed6da3de98e734d9/spock-core-2.3-groovy-4.0.jar
Groovy artifact: file:/home/ubuntu/.gradle/wrapper/dists/gradle-7.5.1-all/1ehga6e77gqps5uk2kc5kf1vc/gradle-7.5.1/lib/groovy-3.0.10.jar

1 error

  org.codehaus.groovy.control.ErrorCollector.failIfErrors(ErrorCollector.java:292)
  org.codehaus.groovy.control.ProcessingUnit.completePhase(ProcessingUnit.java:139)
  org.codehaus.groovy.control.ProcessingUnit.gotoPhase(ProcessingUnit.java:155)
  org.codehaus.groovy.control.CompilationUnit.compile(CompilationUnit.java:621)"
github.com,"dimamura/assertj-generator-gradle-plugin",master,KotlinParser,"src/main/kotlin/com/github/fhermansson/gradle/assertj/plugin/GenerateAssertions.kt","IndexOutOfBoundsException","org.jetbrains.kotlin.KtRealSourceElementKind@78d9917b","open class GenerateAssertions : DefaultTask(), ProjectEvaluationListener {

    @get:Internal
    val extension: AssertjGeneratorExtension by lazy {
        project.extensions.getByType(AssertjGeneratorExtension::class.java)
    }

    val classPath: FileCollection
        @InputFiles
        @CompileClasspath
        get() = sourceSet!!.runtimeClasspath
    /**
     * What kinds of entry point classes to generate.
     */
    var entryPointTypes: Array<AssertionsEntryPointType>? = null
        @Internal
        get() = field ?: extension.entryPointTypes

    val entryPointTypesAsSet
        @Input
        get() = entryPointTypes!!.toSet()
    /**
     * Output directory for generated classes.
     * Any type accepted by Project.file(Object).
     */
    var outputDir: Any? = null
        @Input
        get() = field ?: extension.outputDir ?: ""src/${testSourceSet!!.name}/generated-java""

    val resolvedOutputDir: File
        @OutputDirectory
        get() = project.file(outputDir!!)

    /**
     * The sourceSet containing classes to generate assertions for.
     */
    var sourceSet: SourceSet? = null
        @Input
        get() = field ?: extension.sourceSet

    /**
     * The target sourceSet for generated assertions.
     */
    var testSourceSet: SourceSet? = null
        @Input
        get() = field ?: extension.testSourceSet

    /**
     * Destination package for entry point classes. The generator will choose if null.
     */
    var entryPointPackage: String? = null
        @Input
        @Optional
        get() = field ?: extension.entryPointPackage

    /**
     * Entry point classes inherit from core Assertj classes
     */
    var entryPointInherits: Boolean? = null
        @Input
        get() = field ?: extension.entryPointInherits

    /**
     * Classes and packages to generate assertions for.
     */
    var classOrPackageNames: Array<String>? = null
        @Input
        get() = field ?: extension.classOrPackageNames

    /**
     * Clean output directory before generating assertions.
     */
    var cleanOutputDir: Boolean? = null
        @Input
        get() = field ?: extension.cleanOutputDir

    init {
        group = ""assertj""
        description = ""Generate Assertj Assertions""
        project.gradle.addProjectEvaluationListener(this)
    }

    private fun getTemplate(entryPointType: AssertionsEntryPointType): Template {
        val templateType = when (entryPointType) {
            AssertionsEntryPointType.STANDARD -> Template.Type.ASSERTIONS_ENTRY_POINT_CLASS
            AssertionsEntryPointType.BDD -> Template.Type.BDD_ASSERTIONS_ENTRY_POINT_CLASS
            AssertionsEntryPointType.SOFT -> Template.Type.SOFT_ASSERTIONS_ENTRY_POINT_CLASS
            AssertionsEntryPointType.JUNIT_SOFT -> Template.Type.JUNIT_SOFT_ASSERTIONS_ENTRY_POINT_CLASS
            AssertionsEntryPointType.BDD_SOFT -> Template.Type.BDD_SOFT_ASSERTIONS_ENTRY_POINT_CLASS
            AssertionsEntryPointType.JUNIT_BDD_SOFT -> Template.Type.JUNIT_BDD_SOFT_ASSERTIONS_ENTRY_POINT_CLASS
            AssertionsEntryPointType.AUTO_CLOSEABLE_SOFT -> Template.Type.AUTO_CLOSEABLE_SOFT_ASSERTIONS_ENTRY_POINT_CLASS
            AssertionsEntryPointType.AUTO_CLOSEABLE_BDD_SOFT -> Template.Type.AUTO_CLOSEABLE_BDD_SOFT_ASSERTIONS_ENTRY_POINT_CLASS
        }

        val fileName = ""${entryPointType.name.toLowerCase()}_assertions_entry_point_class.txt""
        val templateContent = this.javaClass.classLoader.getResource(fileName).readText()
        return Template(templateType, templateContent)
    }

    override fun afterEvaluate(project: Project, state: ProjectState) {
        if (project == this.project) {
            val sourceClassesTaskName = sourceSet!!.classesTaskName
            dependsOn.add(sourceClassesTaskName)
            testSourceSet!!.java.srcDir(resolvedOutputDir)
            listOf(""java"", ""kotlin"", ""groovy"").forEach {
                project.getTasksByName(testSourceSet!!.getCompileTaskName(it), false).forEach {
                    it.dependsOn(this)
                }
            }
            project.extensions.findByType(IdeaModel::class.java)
                ?.module?.generatedSourceDirs?.add(resolvedOutputDir)
        }
    }

    override fun beforeEvaluate(project: Project?) {
    }

    @TaskAction
    fun generateAssertions() {
        if (cleanOutputDir!!) {
            project.delete(resolvedOutputDir)
        }
        val descriptionConverter = ClassToClassDescriptionConverter()
        val assertionGenerator = BaseAssertionGenerator()
        assertionGenerator.setDirectoryWhereAssertionFilesAreGenerated(File(resolvedOutputDir.absolutePath))
        if (entryPointInherits!!) {
            entryPointTypesAsSet.forEach {
                assertionGenerator.register(getTemplate(it))
            }
        }
        val classLoader = URLClassLoader(classPath.map { it.toURI().toURL() }.toTypedArray())
        val classes = ClassUtil.collectClasses(classLoader, *classOrPackageNames!!)
        val classDescriptions = classes.map { descriptionConverter.convertToClassDescription(it) }.toSet()
        val generatedAssertions = classDescriptions.map { assertionGenerator.generateCustomAssertionFor(it) }.toSet()

        val entryPoints =
            if (generatedAssertions.isEmpty())
                emptySet<File>()
            else
                entryPointTypesAsSet.map {
                    assertionGenerator.generateAssertionsEntryPointClassFor(classDescriptions, it, entryPointPackage)
                }.toSet()

        logger.lifecycle(
            ""Generated ${generatedAssertions.size} assertion classes, "" +
                ""${entryPoints.size} entry point classes in $resolvedOutputDir""
        )
    }
}","java.lang.IndexOutOfBoundsException: Index: 1, Size: 1
  java.util.Collections$SingletonList.get(Collections.java:4817)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4341)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitPropertyAccessor(KotlinParserVisitor.kt:2175)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4393)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitProperty(KotlinParserVisitor.kt:1975)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4391)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitRegularClass(KotlinParserVisitor.kt:4026)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4395)
  ..."
github.com,"nebula-plugins/nebula-dependency-base-plugin",main,GroovyParser,"src/test/groovy/com/netflix/nebula/dependencybase/DependencyManagementSpec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/com/netflix/nebula/dependencybase/DependencyManagementSpec.groovy at cursor position 1008. The next 10 characters in the original source are `{
        `
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"nebula-plugins/nebula-dependency-base-plugin",main,GroovyParser,build.gradle,GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse build.gradle at cursor position 858. The next 10 characters in the original source are `'nebula-pl`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,Foso/Cabret-Log,master,KotlinParser,"testproject/src/commonMain/kotlin/test/Common.kt","UnsupportedOperationException","org.jetbrains.kotlin.KtRealSourceElementKind@660ac8dd","@DebugLog
fun commonLog(name:String){

}","java.lang.UnsupportedOperationException: FirErrorTypeRef is not supported at cursor: DebugLog
fun commonLog(name:Stin file: /home/ubuntu/jenkins-agent/workspace/cli-ingest/Foso_Cabret-Log_master/testproject/src/commonMain/kotlin/test/Common.kt
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitErrorTypeRef(KotlinParserVisitor.kt:4315)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4361)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitAnnotationCall(KotlinParserVisitor.kt:301)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4364)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.mapModifierList(KotlinParserVisitor.kt:4148)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitSimpleFunction(KotlinParserVisitor.kt:2396)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4402)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitFile(KotlinParserVisitor.kt:166)"
github.com,Foso/Cabret-Log,master,KotlinParser,"cabret-compiler-runtime/src/main/java/de/jensklingenberg/cabret/compiler/CabretLogTransformer.kt","UnsupportedOperationException","org.jetbrains.kotlin.KtRealSourceElementKind@480e8faf","class CabretLogTransformer(
    private val context: IrPluginContext,
    private val messageCollector: MessageCollector,
    val irFactory: IrFactory,
) : IrElementTransformerVoidWithContext(), FileLoweringPass {

    private val debugLogAnnoation: String = DebugLog::class.java.name
    private val logReturnEnabled = true


    private val classMonotonic =
        context.referenceClass(FqName(""kotlin.time.TimeSource.Monotonic""))!!

    private val funMarkNow =
        context.referenceFunctions(FqName(""kotlin.time.TimeSource.markNow""))
            .single()

    private val funElapsedNow =
        context.referenceFunctions(FqName(""kotlin.time.TimeMark.elapsedNow""))
            .single()


    override fun lower(irFile: IrFile) {
        irFile.transformChildrenVoid()
    }

    override fun visitSimpleFunction(declaration: IrSimpleFunction): IrStatement {

        if (validateSignature(declaration)) {
            return super.visitSimpleFunction(transformFunction(declaration))

        }
        return super.visitSimpleFunction(declaration)
    }

    private fun validateSignature(declaration: IrSimpleFunction): Boolean =
        declaration.hasAnnotation(FqName(debugLogAnnoation))


    private fun transformFunction(irSimpleFunction: IrSimpleFunction): IrSimpleFunction {

        val cabretLogHandlerSymbol: IrClassSymbol =
            context.referenceClass(FqName(LogHandler::class.java.name)) ?: return irSimpleFunction

        val debugLogData = mapToDebugLog(irSimpleFunction)

        /**
         * Find the symbol for onLog(), we need it to create the irCall
         */

        irSimpleFunction.body = irFactory.createBlockBody(UNDEFINED_OFFSET, UNDEFINED_OFFSET) {
            with(context.irBuilder(irSimpleFunction.symbol)) {

                val onLogSymbol = cabretLogHandlerSymbol.getFunctions(LogHandler::onLog.name)
                    .first { it.owner.valueParameters.size == 3 }

                irBlockBody {
                    //
                    val startTimer = irTemporary(irCall(funMarkNow).also { call ->
                        call.dispatchReceiver = irGetObject(classMonotonic)
                    })
                    statements += addStartTimer(startTimer)

                    statements += addParameterLogging(
                        irSimpleFunction,
                        cabretLogHandlerSymbol,
                        debugLogData,
                        onLogSymbol
                    )

                    if (logReturnEnabled) {
                        transformReturnValue(irSimpleFunction, cabretLogHandlerSymbol, startTimer, debugLogData)
                    }

                    //Add all other statements of the body
                    statements += irSimpleFunction.body?.statements ?: emptyList()
                }
            }
        }

        return irSimpleFunction
    }

    /**
     * TODO: I need to find better way read the arguments from the Annotation
     *
     */
    fun mapToDebugLog(irSimpleFunction: IrSimpleFunction): DebugLogData {
        val annotation = irSimpleFunction.getAnnotation(FqName(DebugLog::class.java.name))!!
        fun findByName(name: String): Pair<IrValueParameter, IrExpression>? {
            return annotation.getArgumentsWithIr().find { it.first.name.asString() == name }
        }

        val logLevelString =
            (findByName(DebugLog::logLevel.name)?.second as? IrGetEnumValueImpl)?.symbol?.signature?.asPublic()?.declarationFqName?.substringAfterLast(
                "".""
            ) ?: """"

        val logLevel = Cabret.LogLevel.values().find { it.name == logLevelString } ?: Cabret.LogLevel.DEBUG

        val tag = (findByName((DebugLog::tag.name))?.second as? IrConstImpl<String>)?.value
            ?: irSimpleFunction.parentClassOrNull?.name?.asString() ?: irSimpleFunction.file.name

        return DebugLogData(tag = tag, logLevel = logLevel)
    }

    private fun IrBlockBodyBuilder.addParameterLogging(
        irSimpleFunction: IrSimpleFunction,
        cabretLogHandlerSymbol: IrClassSymbol,
        debugLogData: DebugLogData,
        onLogSymbol: IrSimpleFunctionSymbol
    ) = buildStatement(UNDEFINED_OFFSET, UNDEFINED_OFFSET) {


        irCall(
            onLogSymbol
        ).apply {
            dispatchReceiver = irGetObject(cabretLogHandlerSymbol)

            val msgConcat = irConcat()
            msgConcat.addArgument(irString(""-> ${irSimpleFunction.name}( ""))
            //Read all parameter names and add them to the logstring
            irSimpleFunction.valueParameters.forEachIndexed { index, irValueParameter ->

                msgConcat.addArgument(irString(irValueParameter.name.asString() + ""= ""))
                msgConcat.addArgument(irGet(irValueParameter))

                if ((index + 1) < irSimpleFunction.valueParameters.size) {
                    msgConcat.addArgument(irString("", ""))
                }
            }
            msgConcat.addArgument(irString("")""))

            putValueArgument(0, irString(debugLogData.tag)) //tag
            putValueArgument(1, msgConcat) //msg
            putValueArgument(2, irString(debugLogData.logLevel.name)) //logLevel
        }
    }

    private fun IrBlockBodyBuilder.transformReturnValue(
        irSimpleFunction: IrSimpleFunction,
        cabretLogHandlerSymbol: IrClassSymbol,
        start: IrVariable,
        debugLogData: DebugLogData
    ) {
        val logReturnSymbol =
            cabretLogHandlerSymbol.getFunctions(""logReturn"").first { it.owner.valueParameters.size == 4 }

        irSimpleFunction.body?.transformChildren(object : IrElementTransformerVoidWithContext() {


            /**
             * Get every ""return value""
             * If return logging is enabled
             * Every expression gets transformed
             *
             * return x
             * gets transformed to:
             *
             * return DebugLogHandler.logReturn(x)
             */
            override fun visitReturn(expression: IrReturn): IrExpression {
              //  val lineNumber = irSimpleFunction.file.fileEntry.getSourceRangeInfo(expression.startOffset,expression.endOffset).startLineNumber

                val call = irCall(
                    logReturnSymbol, expression.value.type
                ).apply {
                    // fun <T> logReturn(tag: String, returnObject: T, logLevel: String): T {
                    dispatchReceiver = irGetObject(cabretLogHandlerSymbol)

                    //tag
                    val tagConcat = irConcat()
                    tagConcat.addArgument(irString(debugLogData.tag + "" <- ${irSimpleFunction.name}() ""))

                    //tag
                    putValueArgument(0, tagConcat)

                    //returnObject
                    putValueArgument(1, expression.value)

                    //LogLevel
                    putValueArgument(2, irString(debugLogData.logLevel.name))

                    //Get the time
                    val timeCall = irCall(funElapsedNow).also { call ->
                        call.dispatchReceiver = irGet(start)
                    }
                    val timeConcat = irConcat()
                    timeConcat.addArgument(irString(""[""))
                    timeConcat.addArgument(timeCall)
                    timeConcat.addArgument(irString(""] = ""))

                    putValueArgument(3, timeConcat)


                    putTypeArgument(0, expression.value.type)
                }
                return super.visitReturn(irReturn(call))
            }
        }, null)
    }

    private fun addStartTimer(start: IrVariable) = start
}","java.lang.UnsupportedOperationException: Unsupported binary operator type.
  org.openrewrite.kotlin.internal.KotlinParserVisitor.mapBinaryOperation(KotlinParserVisitor.kt:1612)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitFunctionCall(KotlinParserVisitor.kt:1023)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4385)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitBlock(KotlinParserVisitor.kt:766)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitAnonymousFunction(KotlinParserVisitor.kt:448)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitAnonymousFunctionExpression(KotlinParserVisitor.kt:484)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4366)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitLambdaArgumentExpression(KotlinParserVisitor.kt:1816)
  ..."
github.com,"BeLeap/resnet-kotlin-armeria",main,KotlinParser,"src/main/kotlin/ai/mindslab/brain/resnet_kotlin_armeria/controller/ImageClassificationServiceImpl.kt","UnsupportedOperationException","org.jetbrains.kotlin.KtRealSourceElementKind@52d542e6","class ImageClassificationServiceImpl: ImageClassificationServiceGrpcKt.ImageClassificationServiceCoroutineImplBase() {
    val service = ImageClassificationService()
    override suspend fun classify(request: ImageClassification.ClassifyRequest): ImageClassification.ClassifyReply {
        val data = request.dataList.toFloatArray()
        val shape = request.shapeList.toLongArray()

        return classifyReply {
            result += service.classify(data, shape).toList()
        }
    }
}","java.lang.UnsupportedOperationException: FirErrorTypeRef is not supported at cursor:  ImageClassificationServiceGrpin file: /home/ubuntu/jenkins-agent/workspace/cli-ingest/BeLeap_resnet-kotlin-armeria_main/src/main/kotlin/ai/mindslab/brain/resnet_kotlin_armeria/controller/ImageClassificationServiceImpl.kt
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitErrorTypeRef(KotlinParserVisitor.kt:4315)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4361)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitRegularClass(KotlinParserVisitor.kt:3907)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4395)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitFile(KotlinParserVisitor.kt:166)"
github.com,"BeLeap/resnet-kotlin-armeria",main,PythonParser,client.py,"UnsupportedClassVersionError",,,"java.lang.UnsupportedClassVersionError: com/jetbrains/python/psi/PyStatementListContainer has been compiled by a more recent version of the Java Runtime (class file version 61.0), this version of the Java Runtime only recognizes class file versions up to 52.0
  java.lang.ClassLoader.defineClass1(Native Method)
  java.lang.ClassLoader.defineClass(ClassLoader.java:756)
  java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)
  java.net.URLClassLoader.defineClass(URLClassLoader.java:473)
  java.net.URLClassLoader.access$100(URLClassLoader.java:74)
  java.net.URLClassLoader$1.run(URLClassLoader.java:369)
  java.net.URLClassLoader$1.run(URLClassLoader.java:363)
  java.security.AccessController.doPrivileged(Native Method)
  ..."
github.com,"BeLeap/resnet-kotlin-armeria",main,PythonParser,"image_classification_pb2_grpc.py","UnsupportedClassVersionError",,,"java.lang.UnsupportedClassVersionError: com/jetbrains/python/psi/PyStatementListContainer has been compiled by a more recent version of the Java Runtime (class file version 61.0), this version of the Java Runtime only recognizes class file versions up to 52.0
  java.lang.ClassLoader.defineClass1(Native Method)
  java.lang.ClassLoader.defineClass(ClassLoader.java:756)
  java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)
  java.net.URLClassLoader.defineClass(URLClassLoader.java:473)
  java.net.URLClassLoader.access$100(URLClassLoader.java:74)
  java.net.URLClassLoader$1.run(URLClassLoader.java:369)
  java.net.URLClassLoader$1.run(URLClassLoader.java:363)
  java.security.AccessController.doPrivileged(Native Method)
  ..."
github.com,"BeLeap/resnet-kotlin-armeria",main,PythonParser,export-model.py,"UnsupportedClassVersionError",,,"java.lang.UnsupportedClassVersionError: com/jetbrains/python/psi/PyStatementListContainer has been compiled by a more recent version of the Java Runtime (class file version 61.0), this version of the Java Runtime only recognizes class file versions up to 52.0
  java.lang.ClassLoader.defineClass1(Native Method)
  java.lang.ClassLoader.defineClass(ClassLoader.java:756)
  java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)
  java.net.URLClassLoader.defineClass(URLClassLoader.java:473)
  java.net.URLClassLoader.access$100(URLClassLoader.java:74)
  java.net.URLClassLoader$1.run(URLClassLoader.java:369)
  java.net.URLClassLoader$1.run(URLClassLoader.java:363)
  java.security.AccessController.doPrivileged(Native Method)
  ..."
github.com,"BeLeap/resnet-kotlin-armeria",main,PythonParser,"image_classification_pb2.py","UnsupportedClassVersionError",,,"java.lang.UnsupportedClassVersionError: com/jetbrains/python/psi/PyStatementListContainer has been compiled by a more recent version of the Java Runtime (class file version 61.0), this version of the Java Runtime only recognizes class file versions up to 52.0
  java.lang.ClassLoader.defineClass1(Native Method)
  java.lang.ClassLoader.defineClass(ClassLoader.java:756)
  java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)
  java.net.URLClassLoader.defineClass(URLClassLoader.java:473)
  java.net.URLClassLoader.access$100(URLClassLoader.java:74)
  java.net.URLClassLoader$1.run(URLClassLoader.java:369)
  java.net.URLClassLoader$1.run(URLClassLoader.java:363)
  java.security.AccessController.doPrivileged(Native Method)
  ..."
github.com,"monnage/gradle-test-report",master,KotlinParser,"src/main/kotlin/com/monnage/gradle/report/FormattedOutput.kt",ClassCastException,"org.jetbrains.kotlin.KtRealSourceElementKind@5d276826","internal class FormattedOutput(private val logging: LoggingExtension, private val logger: Logger) {

    enum class Icons(val id: String, val code: String, val alternativeText: String) {
        ROCKET("":rocket:"", ""\uD83D\uDE80"", ""-""),
        SUCCESS("":success:"", ""\u2714 "", ""[OK]""),
        FAILED("":failed:"", ""\uD83D\uDE21"", ""[FAIL]""),
        SLEEP("":sleep:"", ""\uD83D\uDCA4"", ""[SKIP]""),
        SAND_WATCH("":sand_watch:"", ""\u23F3"", ""[RUN]"")
    }

    fun format(string: String, code: Int, bold: Boolean, italic: Boolean): String {
        var format = ""m""
        if (bold && textStylesEnabled()) format = "";1m""
        if (italic && textStylesEnabled()) format = "";3m""
        return if (colorsEnabled()) 27.toChar() + ""[$code$format$string"" + 27.toChar() + ""[0m"" else string
    }

    fun display(str: String, indentLevel: Int = 0, logLevel: LogLevel = QUIET) {
        val padding = if (indentLevel > 0) "" "".repeat(indentLevel) else """"
        var value = padding + str
        Icons.values().forEach {
            value = if (iconsEnabled()) value.replace(it.id, it.code) else value.replace(it.id, it.alternativeText)
        }
        when (logLevel) {
            ERROR -> logger.error(value)
            QUIET -> logger.quiet(value)
            LIFECYCLE -> logger.lifecycle(value)
            WARN -> logger.warn(value)
            INFO -> logger.info(value)
            DEBUG -> logger.debug(value)
        }
    }

    private fun iconsEnabled() = !logging.noIcon
    private fun colorsEnabled() = !logging.noColor
    private fun textStylesEnabled() = !logging.noFontStyling
}","java.lang.ClassCastException: org.openrewrite.kotlin.tree.K$KReturn cannot be cast to org.openrewrite.java.tree.J$Block
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitSimpleFunction(KotlinParserVisitor.kt:2548)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4402)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitRegularClass(KotlinParserVisitor.kt:4026)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4395)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitFile(KotlinParserVisitor.kt:166)"
github.com,"monnage/gradle-test-report",master,KotlinParser,"src/main/kotlin/com/monnage/gradle/actions/PluginAction.kt",AssertionError,,,"java.lang.AssertionError: null
  org.openrewrite.java.tree.TypeTree.build(TypeTree.java:95)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitResolvedQualifier(KotlinParserVisitor.kt:2358)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4398)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.mapFunctionCall(KotlinParserVisitor.kt:1116)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitFunctionCall(KotlinParserVisitor.kt:1026)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4385)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  ..."
github.com,trivago/Heimdall.droid,master,KotlinParser,"library/src/test/java/de/rheinfabrik/heimdall2/OAuth2AccessTokenSerializationTest.kt",AssertionError,,,"java.lang.AssertionError: null
  org.openrewrite.java.tree.TypeTree.build(TypeTree.java:95)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitResolvedQualifier(KotlinParserVisitor.kt:2358)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4398)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.mapFunctionCall(KotlinParserVisitor.kt:1116)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitFunctionCall(KotlinParserVisitor.kt:1026)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4385)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitBlock(KotlinParserVisitor.kt:766)
  ..."
github.com,trivago/Heimdall.droid,master,KotlinParser,"library/src/test/java/de/rheinfabrik/heimdall2/grants/OAuth2AuthorizationCodeGrantTest.kt",AssertionError,,,"java.lang.AssertionError: null
  org.openrewrite.java.tree.TypeTree.build(TypeTree.java:95)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitResolvedQualifier(KotlinParserVisitor.kt:2358)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4398)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.mapFunctionCall(KotlinParserVisitor.kt:1116)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitFunctionCall(KotlinParserVisitor.kt:1026)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4385)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitBlock(KotlinParserVisitor.kt:766)
  ..."
github.com,trivago/Heimdall.droid,master,KotlinParser,"library/src/test/java/de/rheinfabrik/heimdall2/grants/OAuth2RefreshAccessTokenGrantTest.kt",AssertionError,,,"java.lang.AssertionError: null
  org.openrewrite.java.tree.TypeTree.build(TypeTree.java:95)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitResolvedQualifier(KotlinParserVisitor.kt:2358)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4398)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.mapFunctionCall(KotlinParserVisitor.kt:1116)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitFunctionCall(KotlinParserVisitor.kt:1026)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4385)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitBlock(KotlinParserVisitor.kt:766)
  ..."
github.com,trivago/Heimdall.droid,master,KotlinParser,"library/src/test/java/de/rheinfabrik/heimdall2/grants/OAuth2ResourceOwnerPasswordCredentialsGrantTest.kt",AssertionError,,,"java.lang.AssertionError: null
  org.openrewrite.java.tree.TypeTree.build(TypeTree.java:95)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitResolvedQualifier(KotlinParserVisitor.kt:2358)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4398)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.mapFunctionCall(KotlinParserVisitor.kt:1116)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitFunctionCall(KotlinParserVisitor.kt:1026)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4385)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitBlock(KotlinParserVisitor.kt:766)
  ..."
github.com,trivago/Heimdall.droid,master,KotlinParser,"library/src/test/java/de/rheinfabrik/heimdall2/grants/OAuth2ClientCredentialsGrantTest.kt",AssertionError,,,"java.lang.AssertionError: null
  org.openrewrite.java.tree.TypeTree.build(TypeTree.java:95)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitResolvedQualifier(KotlinParserVisitor.kt:2358)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4398)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.mapFunctionCall(KotlinParserVisitor.kt:1116)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitFunctionCall(KotlinParserVisitor.kt:1026)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4385)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitBlock(KotlinParserVisitor.kt:766)
  ..."
github.com,trivago/Heimdall.droid,master,KotlinParser,"library/src/test/java/de/rheinfabrik/heimdall2/grants/OAuth2ImplicitGrantTest.kt",AssertionError,,,"java.lang.AssertionError: null
  org.openrewrite.java.tree.TypeTree.build(TypeTree.java:95)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitResolvedQualifier(KotlinParserVisitor.kt:2358)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4398)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.mapFunctionCall(KotlinParserVisitor.kt:1116)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitFunctionCall(KotlinParserVisitor.kt:1026)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4385)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitBlock(KotlinParserVisitor.kt:766)
  ..."
github.com,trivago/Heimdall.droid,master,KotlinParser,"library/src/test/java/de/rheinfabrik/heimdall2/OAuth2AccessTokenIsExpiredTest.kt",AssertionError,,,"java.lang.AssertionError: null
  org.openrewrite.java.tree.TypeTree.build(TypeTree.java:95)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitResolvedQualifier(KotlinParserVisitor.kt:2358)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4398)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.mapFunctionCall(KotlinParserVisitor.kt:1116)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitFunctionCall(KotlinParserVisitor.kt:1026)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4385)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitBlock(KotlinParserVisitor.kt:766)
  ..."
github.com,"ekino/gradle-docker-plugin",master,KotlinParser,"src/main/kotlin/com/ekino/oss/gradle/plugin/docker/DockerPlugin.kt",IllegalStateException,,,"java.lang.IllegalStateException: src/main/kotlin/com/ekino/oss/gradle/plugin/docker/DockerPlugin.kt is not print idempotent.
  org.openrewrite.Parser.requirePrintEqualsInput(Parser.java:51)"
github.com,"ekino/gradle-docker-plugin",master,KotlinParser,"src/test/kotlin/com/ekino/oss/gradle/plugin/docker/DockerPluginTest.kt",AssertionError,,,"java.lang.AssertionError: null
  org.openrewrite.java.tree.TypeTree.build(TypeTree.java:95)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitResolvedQualifier(KotlinParserVisitor.kt:2358)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4398)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.mapFunctionCall(KotlinParserVisitor.kt:1116)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitFunctionCall(KotlinParserVisitor.kt:1026)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4385)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitBlock(KotlinParserVisitor.kt:766)
  ..."
github.com,"ekino/gradle-docker-plugin",master,KotlinParser,"src/test/kotlin/com/ekino/oss/gradle/plugin/docker/GradleVersionsCompatibilityTest.kt",AssertionError,,,"java.lang.AssertionError: null
  org.openrewrite.java.tree.TypeTree.build(TypeTree.java:95)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitResolvedQualifier(KotlinParserVisitor.kt:2358)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4398)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.mapFunctionCall(KotlinParserVisitor.kt:1116)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitFunctionCall(KotlinParserVisitor.kt:1026)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4385)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitBlock(KotlinParserVisitor.kt:766)
  ..."
github.com,"hndrs/gradle-publishing-info-plugin",main,KotlinParser,"src/test/kotlin/io/hndrs/gradle/plugin/MavenPublicationConfigurationTest.kt",IllegalStateException,,,"java.lang.IllegalStateException: src/test/kotlin/io/hndrs/gradle/plugin/MavenPublicationConfigurationTest.kt is not print idempotent.
  org.openrewrite.Parser.requirePrintEqualsInput(Parser.java:51)"
github.com,"hndrs/gradle-publishing-info-plugin",main,KotlinParser,"src/test/kotlin/io/hndrs/gradle/plugin/PublishingInfoPluginTest.kt",IllegalStateException,,,"java.lang.IllegalStateException: src/test/kotlin/io/hndrs/gradle/plugin/PublishingInfoPluginTest.kt is not print idempotent.
  org.openrewrite.Parser.requirePrintEqualsInput(Parser.java:51)"
github.com,"hndrs/gradle-publishing-info-plugin",main,KotlinParser,"src/test/kotlin/io/hndrs/gradle/plugin/PublishingInfoExtensionTest.kt",AssertionError,,,"java.lang.AssertionError: null
  org.openrewrite.java.tree.TypeTree.build(TypeTree.java:95)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitResolvedQualifier(KotlinParserVisitor.kt:2358)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4398)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.mapFunctionCall(KotlinParserVisitor.kt:1116)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitFunctionCall(KotlinParserVisitor.kt:1026)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4385)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitBlock(KotlinParserVisitor.kt:766)
  ..."
github.com,awslabs/disco,master,PythonParser,"disco-java-agent/disco-java-agent-deps/byte-buddy/upgradeByteBuddy.py","UnsupportedClassVersionError",,,"java.lang.UnsupportedClassVersionError: com/jetbrains/python/psi/PyStatementListContainer has been compiled by a more recent version of the Java Runtime (class file version 61.0), this version of the Java Runtime only recognizes class file versions up to 52.0
  java.lang.ClassLoader.defineClass1(Native Method)
  java.lang.ClassLoader.defineClass(ClassLoader.java:756)
  java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)
  java.net.URLClassLoader.defineClass(URLClassLoader.java:473)
  java.net.URLClassLoader.access$100(URLClassLoader.java:74)
  java.net.URLClassLoader$1.run(URLClassLoader.java:369)
  java.net.URLClassLoader$1.run(URLClassLoader.java:363)
  java.security.AccessController.doPrivileged(Native Method)
  ..."
github.com,jcraane/kmm-resources,main,KotlinParser,"android-app/src/androidTest/java/nl/jcraane/androidapp/ExampleInstrumentedTest.kt","UnsupportedOperationException","org.jetbrains.kotlin.KtRealSourceElementKind@898cf77","@RunWith(AndroidJUnit4::class)
class ExampleInstrumentedTest {
    @Test
    fun useAppContext() {
        // Context of the app under test.
        val appContext = InstrumentationRegistry.getInstrumentation().targetContext
        assertEquals(""nl.jcraane.androidapp"", appContext.packageName)
    }
}","java.lang.UnsupportedOperationException: FirErrorTypeRef is not supported at cursor: RunWith(AndroidJUnit4::class)
in file: /home/ubuntu/jenkins-agent/workspace/cli-ingest/jcraane_kmm-resources_main/android-app/src/androidTest/java/nl/jcraane/androidapp/ExampleInstrumentedTest.kt
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitErrorTypeRef(KotlinParserVisitor.kt:4315)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4361)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitAnnotationCall(KotlinParserVisitor.kt:301)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4364)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.mapModifierList(KotlinParserVisitor.kt:4148)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitRegularClass(KotlinParserVisitor.kt:3782)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4395)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitFile(KotlinParserVisitor.kt:166)"
github.com,jcraane/kmm-resources,main,YamlParser,android-app/generic.yaml,IllegalStateException,,,"java.lang.IllegalStateException: android-app/generic.yaml is not print idempotent.
  org.openrewrite.Parser.requirePrintEqualsInput(Parser.java:51)"
github.com,"yidongnan/grpc-spring-boot-starter",master,KotlinParser,"tests/src/test/kotlin/net/devh/boot/grpc/test/kotlin/inject/ConstructorInjectionTestContainer.kt",IllegalStateException,,,"java.lang.IllegalStateException: tests/src/test/kotlin/net/devh/boot/grpc/test/kotlin/inject/ConstructorInjectionTestContainer.kt is not print idempotent.
  org.openrewrite.Parser.requirePrintEqualsInput(Parser.java:51)"
github.com,"yidongnan/grpc-spring-boot-starter",master,KotlinParser,"tests/src/test/kotlin/net/devh/boot/grpc/test/kotlin/inject/GrpcClientBeanTestConfig.kt",IllegalStateException,"org.jetbrains.kotlin.KtRealSourceElementKind@48989f86","@GrpcClientBean(
    clazz = TestServiceGrpc.TestServiceBlockingStub::class,
    beanName = ""blockingStub"",
    client = GrpcClient(""test"")
)
@GrpcClientBean(
    clazz = TestServiceGrpc.TestServiceFutureStub::class,
    beanName = ""futureStubForClientTest"",
    client = GrpcClient(""test"")
)
@GrpcClientBean(
    clazz = TestServiceGrpc.TestServiceBlockingStub::class,
    beanName = ""anotherBlockingStub"",
    client = GrpcClient(""anotherTest"")
)
@GrpcClientBean(
    clazz = TestServiceGrpc.TestServiceBlockingStub::class,
    client = GrpcClient(""unnamed"")
)
@GrpcClientBean(
    clazz = CustomGrpc.FactoryMethodAccessibleStub::class,
    beanName = ""anotherServiceClientBean"",
    client = GrpcClient(""test"")
)
@TestConfiguration
open class GrpcClientBeanTestConfig {

    @Bean
    @ConditionalOnMissingBean(name = [""aboutMethodInjectedBlockingStubBean""])
    open fun aboutMethodInjectedBlockingStubBean(
        @Qualifier(""anotherBlockingStub"") blockingStub: TestServiceGrpc.TestServiceBlockingStub
    ): String =
        blockingStub.toString()

}","java.lang.IllegalStateException: Unexpected single block expression, cursor is likely at the wrong position.
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitSimpleFunction(KotlinParserVisitor.kt:2552)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4402)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitRegularClass(KotlinParserVisitor.kt:4026)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4395)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitFile(KotlinParserVisitor.kt:166)"
github.com,"yidongnan/grpc-spring-boot-starter",master,KotlinParser,"tests/src/test/kotlin/net/devh/boot/grpc/test/kotlin/inject/KotlinGrpcClientConstructorInjectionTest.kt",IllegalStateException,,,"java.lang.IllegalStateException: tests/src/test/kotlin/net/devh/boot/grpc/test/kotlin/inject/KotlinGrpcClientConstructorInjectionTest.kt is not print idempotent.
  org.openrewrite.Parser.requirePrintEqualsInput(Parser.java:51)"
github.com,"yidongnan/grpc-spring-boot-starter",master,KotlinParser,"tests/src/test/kotlin/net/devh/boot/grpc/test/kotlin/inject/ConstructorInjectionAnotherTestContainer.kt",IllegalStateException,,,"java.lang.IllegalStateException: tests/src/test/kotlin/net/devh/boot/grpc/test/kotlin/inject/ConstructorInjectionAnotherTestContainer.kt is not print idempotent.
  org.openrewrite.Parser.requirePrintEqualsInput(Parser.java:51)"
github.com,"yidongnan/grpc-spring-boot-starter",master,KotlinParser,"tests/src/test/kotlin/net/devh/boot/grpc/test/kotlin/inject/InjectionTestContainer.kt","UnsupportedOperationException","org.jetbrains.kotlin.KtRealSourceElementKind@48989f86","@Component
class InjectionTestContainer {

    @GrpcClient(""test"")
    lateinit var channel: Channel

    @GrpcClient(""test"")
    lateinit var stub: TestServiceGrpc.TestServiceStub

    @GrpcClient(""test"")
    lateinit var blockingStub: TestServiceGrpc.TestServiceBlockingStub

    @GrpcClient(""test"")
    lateinit var futureStubForClientTest: TestServiceGrpc.TestServiceFutureStub

    @GrpcClient(""anotherTest"")
    lateinit var anotherBlockingStub: TestServiceGrpc.TestServiceBlockingStub

    @GrpcClient(""unnamed"")
    lateinit var unnamedTestServiceBlockingStub: TestServiceGrpc.TestServiceBlockingStub

    @GrpcClient(""test"")
    lateinit var anotherServiceClientBean: CustomGrpc.FactoryMethodAccessibleStub
}","java.lang.UnsupportedOperationException: FirErrorTypeRef is not supported at cursor:  TestServiceGrpc.TestServiceStin file: /home/ubuntu/jenkins-agent/workspace/cli-ingest/yidongnan_grpc-spring-boot-starter_master/tests/src/test/kotlin/net/devh/boot/grpc/test/kotlin/inject/InjectionTestContainer.kt
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitErrorTypeRef(KotlinParserVisitor.kt:4315)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4361)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitProperty(KotlinParserVisitor.kt:1931)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4391)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitRegularClass(KotlinParserVisitor.kt:4026)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4395)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitFile(KotlinParserVisitor.kt:166)"
github.com,"SharifPoetra/thunder-java",master,KotlinParser,"src/main/java/com/sharif/thunder/commands/fun/BobRossCommand.kt","UnsupportedOperationException","org.jetbrains.kotlin.KtRealSourceElementKind@8e660d5","class BobRossCommand(private val thunder: Thunder) : FunCommand() {
    init {
        name = ""bobross""
        help = ""Draws a user's avatar over 'Bob Ross' canvas.""
        arguments = arrayOf(Argument(""user"", Argument.Type.USER, true))
    }

    public override fun execute(args: Array<Any>, event: MessageReceivedEvent) {
        try {
            event.channel.sendTyping().queue()
            val user = args[0] as User
            val data = NetworkUtil.download(""https://emilia-api.xyz/api/bob-ross?image="" + user.effectiveAvatarUrl, ""Bearer "" + thunder.config.emiliaKey)
            event.channel.sendFile(data, ""bobross.png"").embed(
                EmbedBuilder()
                    .setColor(event.member!!.color)
                    .setImage(""attachment://bobross.png"")
                    .build()
            ).queue()
        } catch (ex: Exception) {
            SenderUtil.replyError(event, ""Shomething went wrong while fetching the API! Please try again."")
            println(ex)
        }
    }
}","java.lang.UnsupportedOperationException: FirErrorTypeRef is not supported at cursor: private val thunder: Thunder) in file: /home/ubuntu/jenkins-agent/workspace/cli-ingest/SharifPoetra_thunder-java_master/src/main/java/com/sharif/thunder/commands/fun/BobRossCommand.kt
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitErrorTypeRef(KotlinParserVisitor.kt:4315)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4361)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitRegularClass(KotlinParserVisitor.kt:3907)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4395)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitFile(KotlinParserVisitor.kt:166)"
github.com,"SharifPoetra/thunder-java",master,KotlinParser,"src/main/java/com/sharif/thunder/commands/fun/BatSlapCommand.kt","UnsupportedOperationException","org.jetbrains.kotlin.KtRealSourceElementKind@8e660d5","class BatSlapCommand(private val thunder: Thunder) : FunCommand() {
    init {
        name = ""batslap""
        help = ""Slap someone with batslap template.""
        arguments = arrayOf(Argument(""user"", Argument.Type.USER, true))
    }

    public override fun execute(args: Array<Any>, event: MessageReceivedEvent) {
        try {
            event.channel.sendTyping().queue()
            val user = args[0] as User
            val data = NetworkUtil.download(""https://emilia-api.xyz/api/batslap?slapper="" + event.author.effectiveAvatarUrl + ""&slapped="" + user.effectiveAvatarUrl, ""Bearer "" + thunder.config.emiliaKey)
            event.channel.sendFile(data, ""batslap.png"").embed(
                EmbedBuilder()
                    .setAuthor(user.name + "" has been batslapped by "" + event.author.name, null, null)
                    .setColor(event.member!!.color)
                    .setImage(""attachment://batslap.png"")
                    .build()
            ).queue()
        } catch (ex: Exception) {
            SenderUtil.replyError(event, ""Shomething went wrong while fetching the API! Please try again."")
            println(ex)
        }
    }
}","java.lang.UnsupportedOperationException: FirErrorTypeRef is not supported at cursor: private val thunder: Thunder) in file: /home/ubuntu/jenkins-agent/workspace/cli-ingest/SharifPoetra_thunder-java_master/src/main/java/com/sharif/thunder/commands/fun/BatSlapCommand.kt
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitErrorTypeRef(KotlinParserVisitor.kt:4315)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4361)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitRegularClass(KotlinParserVisitor.kt:3907)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4395)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitFile(KotlinParserVisitor.kt:166)"
github.com,"SharifPoetra/thunder-java",master,KotlinParser,"src/main/java/com/sharif/thunder/commands/fun/SayCommand.kt","UnsupportedOperationException","org.jetbrains.kotlin.KtRealSourceElementKind@8e660d5","class SayCommand(private val thunder: Thunder) : FunCommand() {
    init {
        name = ""say""
        help = ""let the bot copy and resend your message.""
        aliases = arrayOf(""echo"")
        arguments = arrayOf(Argument(""text"", Argument.Type.LONGSTRING, true))
        botPermissions = arrayOf(Permission.MESSAGE_MANAGE)
    }

    override fun execute(args: Array<Any>, event: MessageReceivedEvent) {
        var msg = args[0] as String
        if (event.member!!.hasPermission(Permission.MESSAGE_MANAGE)) {
            event.message.delete().queue()
        }
        if (!event.member!!.hasPermission(Permission.MESSAGE_MENTION_EVERYONE)) {
            msg = msg.replace(""@everyone"", ""@\u200beveryone"").replace(""@here"", ""@\u200bhere"")
        }
        event.channel.sendMessage(msg).queue()
    }
}","java.lang.UnsupportedOperationException: FirErrorTypeRef is not supported at cursor: private val thunder: Thunder) in file: /home/ubuntu/jenkins-agent/workspace/cli-ingest/SharifPoetra_thunder-java_master/src/main/java/com/sharif/thunder/commands/fun/SayCommand.kt
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitErrorTypeRef(KotlinParserVisitor.kt:4315)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4361)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitRegularClass(KotlinParserVisitor.kt:3907)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4395)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitFile(KotlinParserVisitor.kt:166)"
github.com,"SharifPoetra/thunder-java",master,KotlinParser,"src/main/java/com/sharif/thunder/commands/fun/ChooseCommand.kt","UnsupportedOperationException","org.jetbrains.kotlin.KtRealSourceElementKind@8e660d5","class ChooseCommand(thunder: Thunder) : FunCommand() {
    private val thunder: Thunder = thunder
    init {
        name = ""choose""
        help = ""make a decision.""
        arguments = arrayOf<Argument>(Argument(""items"", Argument.Type.LONGSTRING, true))
    }

    override fun execute(args: Array<Any>, event: MessageReceivedEvent) {
        val items = args[0] as String
        val item = items.split(("" "").toRegex()).dropLastWhile { it.isEmpty() }.toTypedArray()
        if (item.size == 1) {
            SenderUtil.replyWarning(event, ""You only gave me one option, `"" + item[0] + ""`"")
        } else {
            SenderUtil.replySuccess(event, ""I choose `"" + item[(Math.random() * item.size).toInt()] + ""`"")
        }
    }
}","java.lang.UnsupportedOperationException: FirErrorTypeRef is not supported at cursor: thunder: Thunder) : FunCommandin file: /home/ubuntu/jenkins-agent/workspace/cli-ingest/SharifPoetra_thunder-java_master/src/main/java/com/sharif/thunder/commands/fun/ChooseCommand.kt
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitErrorTypeRef(KotlinParserVisitor.kt:4315)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4361)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitRegularClass(KotlinParserVisitor.kt:3907)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4395)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitFile(KotlinParserVisitor.kt:166)"
github.com,"SharifPoetra/thunder-java",master,KotlinParser,"src/main/java/com/sharif/thunder/commands/UtilitiesCommand.kt","UnsupportedOperationException","org.jetbrains.kotlin.KtRealSourceElementKind@8e660d5","abstract class UtilitiesCommand : Command() {
    init {
        category = Category(""Utilities"")
        guildOnly = true
    }
}","java.lang.UnsupportedOperationException: FirErrorTypeRef is not supported at cursor:  Command() {
    init {
      in file: /home/ubuntu/jenkins-agent/workspace/cli-ingest/SharifPoetra_thunder-java_master/src/main/java/com/sharif/thunder/commands/UtilitiesCommand.kt
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitErrorTypeRef(KotlinParserVisitor.kt:4315)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4361)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitRegularClass(KotlinParserVisitor.kt:3907)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4395)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitFile(KotlinParserVisitor.kt:166)"
github.com,"SharifPoetra/thunder-java",master,KotlinParser,"src/main/java/com/sharif/thunder/commands/AdministrationCommand.kt","UnsupportedOperationException","org.jetbrains.kotlin.KtRealSourceElementKind@8e660d5","abstract class AdministrationCommand : Command() {
    init {
        category = Category(""Administration"")
        guildOnly = true
    }
}","java.lang.UnsupportedOperationException: FirErrorTypeRef is not supported at cursor:  Command() {
    init {
      in file: /home/ubuntu/jenkins-agent/workspace/cli-ingest/SharifPoetra_thunder-java_master/src/main/java/com/sharif/thunder/commands/AdministrationCommand.kt
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitErrorTypeRef(KotlinParserVisitor.kt:4315)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4361)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitRegularClass(KotlinParserVisitor.kt:3907)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4395)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitFile(KotlinParserVisitor.kt:166)"
github.com,gradle-plugins/toolbox,main,GroovyParser,"buildSrc/src/main/groovy/dev/gradleplugins/ShadedArtifactPlugin.groovy",IllegalStateException,,,"java.lang.IllegalStateException: buildSrc/src/main/groovy/dev/gradleplugins/ShadedArtifactPlugin.groovy is not print idempotent.
  org.openrewrite.Parser.requirePrintEqualsInput(Parser.java:51)"
github.com,gradle-plugins/toolbox,main,GroovyParser,"subprojects/gradle-fixtures-file-system/src/test/groovy/dev/gradleplugins/fixtures/file/FileSystemUtils_IsEmptyDirectoryTest.groovy",IllegalStateException,,,"java.lang.IllegalStateException: subprojects/gradle-fixtures-file-system/src/test/groovy/dev/gradleplugins/fixtures/file/FileSystemUtils_IsEmptyDirectoryTest.groovy is not print idempotent.
  org.openrewrite.Parser.requirePrintEqualsInput(Parser.java:51)"
github.com,gradle-plugins/toolbox,main,GroovyParser,"subprojects/gradle-fixtures-file-system/src/test/groovy/dev/gradleplugins/fixtures/file/FileSystemUtils_ForceDeleteDirectoryTest.groovy",IllegalStateException,,,"java.lang.IllegalStateException: subprojects/gradle-fixtures-file-system/src/test/groovy/dev/gradleplugins/fixtures/file/FileSystemUtils_ForceDeleteDirectoryTest.groovy is not print idempotent.
  org.openrewrite.Parser.requirePrintEqualsInput(Parser.java:51)"
github.com,gradle-plugins/toolbox,main,GroovyParser,"subprojects/gradle-fixtures-file-system/src/test/groovy/dev/gradleplugins/fixtures/file/FileSystemUtils_CreateDirectoryTest.groovy",IllegalStateException,,,"java.lang.IllegalStateException: subprojects/gradle-fixtures-file-system/src/test/groovy/dev/gradleplugins/fixtures/file/FileSystemUtils_CreateDirectoryTest.groovy is not print idempotent.
  org.openrewrite.Parser.requirePrintEqualsInput(Parser.java:51)"
github.com,gradle-plugins/toolbox,main,GroovyParser,"subprojects/gradle-fixtures-file-system/src/test/groovy/dev/gradleplugins/fixtures/file/FileSystemUtils_CanonicalizeTest.groovy",IllegalStateException,,,"java.lang.IllegalStateException: subprojects/gradle-fixtures-file-system/src/test/groovy/dev/gradleplugins/fixtures/file/FileSystemUtils_CanonicalizeTest.groovy is not print idempotent.
  org.openrewrite.Parser.requirePrintEqualsInput(Parser.java:51)"
github.com,gradle-plugins/toolbox,main,GroovyParser,"subprojects/gradle-fixtures-file-system/src/test/groovy/dev/gradleplugins/fixtures/file/FileSystemUtils_FileTest.groovy",IllegalStateException,,,"java.lang.IllegalStateException: subprojects/gradle-fixtures-file-system/src/test/groovy/dev/gradleplugins/fixtures/file/FileSystemUtils_FileTest.groovy is not print idempotent.
  org.openrewrite.Parser.requirePrintEqualsInput(Parser.java:51)"
github.com,gradle-plugins/toolbox,main,GroovyParser,"subprojects/gradle-fixtures-file-system/src/test/groovy/dev/gradleplugins/fixtures/file/FileSystemUtils_TouchTest.groovy",IllegalStateException,,,"java.lang.IllegalStateException: subprojects/gradle-fixtures-file-system/src/test/groovy/dev/gradleplugins/fixtures/file/FileSystemUtils_TouchTest.groovy is not print idempotent.
  org.openrewrite.Parser.requirePrintEqualsInput(Parser.java:51)"
github.com,gradle-plugins/toolbox,main,GroovyParser,"subprojects/gradle-fixtures-file-system/src/test/groovy/dev/gradleplugins/fixtures/file/FileSystemUtils_IsSelfOrDescendentTest.groovy",IllegalStateException,,,"java.lang.IllegalStateException: subprojects/gradle-fixtures-file-system/src/test/groovy/dev/gradleplugins/fixtures/file/FileSystemUtils_IsSelfOrDescendentTest.groovy is not print idempotent.
  org.openrewrite.Parser.requirePrintEqualsInput(Parser.java:51)"
github.com,gradle-plugins/toolbox,main,GroovyParser,"subprojects/gradle-fixtures-file-system/src/test/groovy/dev/gradleplugins/fixtures/file/FileSystemUtils_GetDescendantsTest.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse subprojects/gradle-fixtures-file-system/src/test/groovy/dev/gradleplugins/fixtures/file/FileSystemUtils_GetDescendantsTest.groovy, cursor position likely inaccurate.
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:163)"
github.com,gradle-plugins/toolbox,main,GroovyParser,"subprojects/gradle-fixtures-file-system/src/test/groovy/dev/gradleplugins/fixtures/file/FileSystemUtils_CreateFileTest.groovy",IllegalStateException,,,"java.lang.IllegalStateException: subprojects/gradle-fixtures-file-system/src/test/groovy/dev/gradleplugins/fixtures/file/FileSystemUtils_CreateFileTest.groovy is not print idempotent.
  org.openrewrite.Parser.requirePrintEqualsInput(Parser.java:51)"
github.com,gradle-plugins/toolbox,main,GroovyParser,"subprojects/gradle-runner-kit-impl/src/test/groovy/dev/gradleplugins/runnerkit/BuildFailuresTest.groovy",IllegalStateException,,,"java.lang.IllegalStateException: subprojects/gradle-runner-kit-impl/src/test/groovy/dev/gradleplugins/runnerkit/BuildFailuresTest.groovy is not print idempotent.
  org.openrewrite.Parser.requirePrintEqualsInput(Parser.java:51)"
github.com,gradle-plugins/toolbox,main,GroovyParser,"subprojects/gradle-runner-kit-impl/src/test/groovy/dev/gradleplugins/runnerkit/providers/SettingsFileProviderTest.groovy",IllegalStateException,,,"java.lang.IllegalStateException: subprojects/gradle-runner-kit-impl/src/test/groovy/dev/gradleplugins/runnerkit/providers/SettingsFileProviderTest.groovy is not print idempotent.
  org.openrewrite.Parser.requirePrintEqualsInput(Parser.java:51)"
github.com,gradle-plugins/toolbox,main,GroovyParser,"subprojects/gradle-runner-kit-impl/src/test/groovy/dev/gradleplugins/runnerkit/providers/MissingSettingsFilePolicyProviderTest.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse subprojects/gradle-runner-kit-impl/src/test/groovy/dev/gradleplugins/runnerkit/providers/MissingSettingsFilePolicyProviderTest.groovy at cursor position 1371. The next 10 characters in the original source are `}

       `
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,gradle-plugins/toolbox,main,GroovyParser,"subprojects/gradle-runner-kit-impl/src/test/groovy/dev/gradleplugins/runnerkit/providers/BuildScriptProviderTest.groovy",IllegalStateException,,,"java.lang.IllegalStateException: subprojects/gradle-runner-kit-impl/src/test/groovy/dev/gradleplugins/runnerkit/providers/BuildScriptProviderTest.groovy is not print idempotent.
  org.openrewrite.Parser.requirePrintEqualsInput(Parser.java:51)"
github.com,gradle-plugins/toolbox,main,GroovyParser,"subprojects/gradle-runner-kit-impl/src/test/groovy/dev/gradleplugins/runnerkit/providers/ProjectDirectoryProviderTest.groovy",IllegalStateException,,,"java.lang.IllegalStateException: subprojects/gradle-runner-kit-impl/src/test/groovy/dev/gradleplugins/runnerkit/providers/ProjectDirectoryProviderTest.groovy is not print idempotent.
  org.openrewrite.Parser.requirePrintEqualsInput(Parser.java:51)"
github.com,gradle-plugins/toolbox,main,GroovyParser,"subprojects/gradle-runner-kit-impl/src/test/groovy/dev/gradleplugins/runnerkit/providers/CharacterEncodingProviderTest.groovy",IllegalStateException,,,"java.lang.IllegalStateException: subprojects/gradle-runner-kit-impl/src/test/groovy/dev/gradleplugins/runnerkit/providers/CharacterEncodingProviderTest.groovy is not print idempotent.
  org.openrewrite.Parser.requirePrintEqualsInput(Parser.java:51)"
github.com,gradle-plugins/toolbox,main,GroovyParser,"subprojects/gradle-runner-kit-impl/src/test/groovy/dev/gradleplugins/runnerkit/providers/InitScriptsProviderTest.groovy",IllegalStateException,,,"java.lang.IllegalStateException: subprojects/gradle-runner-kit-impl/src/test/groovy/dev/gradleplugins/runnerkit/providers/InitScriptsProviderTest.groovy is not print idempotent.
  org.openrewrite.Parser.requirePrintEqualsInput(Parser.java:51)"
github.com,gradle-plugins/toolbox,main,GroovyParser,"subprojects/gradle-runner-kit-impl/src/test/groovy/dev/gradleplugins/runnerkit/providers/DaemonBaseDirectoryProviderTest.groovy",IllegalStateException,,,"java.lang.IllegalStateException: subprojects/gradle-runner-kit-impl/src/test/groovy/dev/gradleplugins/runnerkit/providers/DaemonBaseDirectoryProviderTest.groovy is not print idempotent.
  org.openrewrite.Parser.requirePrintEqualsInput(Parser.java:51)"
github.com,gradle-plugins/toolbox,main,GroovyParser,"subprojects/gradle-runner-kit-impl/src/test/groovy/dev/gradleplugins/runnerkit/providers/AfterExecuteActionProviderTest.groovy",IllegalStateException,,,"java.lang.IllegalStateException: subprojects/gradle-runner-kit-impl/src/test/groovy/dev/gradleplugins/runnerkit/providers/AfterExecuteActionProviderTest.groovy is not print idempotent.
  org.openrewrite.Parser.requirePrintEqualsInput(Parser.java:51)"
github.com,gradle-plugins/toolbox,main,GroovyParser,"subprojects/gradle-runner-kit-impl/src/test/groovy/dev/gradleplugins/runnerkit/providers/LocaleProviderTest.groovy",IllegalStateException,,,"java.lang.IllegalStateException: subprojects/gradle-runner-kit-impl/src/test/groovy/dev/gradleplugins/runnerkit/providers/LocaleProviderTest.groovy is not print idempotent.
  org.openrewrite.Parser.requirePrintEqualsInput(Parser.java:51)"
github.com,gradle-plugins/toolbox,main,GroovyParser,"subprojects/gradle-runner-kit-impl/src/test/groovy/dev/gradleplugins/runnerkit/providers/DaemonIdleTimeoutProviderTest.groovy",IllegalStateException,,,"java.lang.IllegalStateException: subprojects/gradle-runner-kit-impl/src/test/groovy/dev/gradleplugins/runnerkit/providers/DaemonIdleTimeoutProviderTest.groovy is not print idempotent.
  org.openrewrite.Parser.requirePrintEqualsInput(Parser.java:51)"
github.com,gradle-plugins/toolbox,main,GroovyParser,"subprojects/gradle-runner-kit-impl/src/test/groovy/dev/gradleplugins/runnerkit/providers/UserHomeDirectoryProviderTest.groovy",IllegalStateException,,,"java.lang.IllegalStateException: subprojects/gradle-runner-kit-impl/src/test/groovy/dev/gradleplugins/runnerkit/providers/UserHomeDirectoryProviderTest.groovy is not print idempotent.
  org.openrewrite.Parser.requirePrintEqualsInput(Parser.java:51)"
github.com,gradle-plugins/toolbox,main,GroovyParser,"subprojects/gradle-runner-kit-impl/src/test/groovy/dev/gradleplugins/runnerkit/providers/BeforeExecuteActionProviderTest.groovy",IllegalStateException,,,"java.lang.IllegalStateException: subprojects/gradle-runner-kit-impl/src/test/groovy/dev/gradleplugins/runnerkit/providers/BeforeExecuteActionProviderTest.groovy is not print idempotent.
  org.openrewrite.Parser.requirePrintEqualsInput(Parser.java:51)"
github.com,gradle-plugins/toolbox,main,GroovyParser,"subprojects/gradle-runner-kit-impl/src/test/groovy/dev/gradleplugins/runnerkit/providers/DeprecationChecksProviderTest.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse subprojects/gradle-runner-kit-impl/src/test/groovy/dev/gradleplugins/runnerkit/providers/DeprecationChecksProviderTest.groovy at cursor position 1587. The next 10 characters in the original source are `de', mode]`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,gradle-plugins/toolbox,main,GroovyParser,"subprojects/gradle-runner-kit-impl/src/test/groovy/dev/gradleplugins/runnerkit/providers/BuildCacheProviderTest.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse subprojects/gradle-runner-kit-impl/src/test/groovy/dev/gradleplugins/runnerkit/providers/BuildCacheProviderTest.groovy at cursor position 1451. The next 10 characters in the original source are `tub(Gradle`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,gradle-plugins/toolbox,main,GroovyParser,"subprojects/gradle-runner-kit-impl/src/test/groovy/dev/gradleplugins/runnerkit/providers/StandardStreamProviderTest.groovy",IllegalStateException,,,"java.lang.IllegalStateException: subprojects/gradle-runner-kit-impl/src/test/groovy/dev/gradleplugins/runnerkit/providers/StandardStreamProviderTest.groovy is not print idempotent.
  org.openrewrite.Parser.requirePrintEqualsInput(Parser.java:51)"
github.com,gradle-plugins/toolbox,main,GroovyParser,"subprojects/gradle-runner-kit-impl/src/test/groovy/dev/gradleplugins/runnerkit/providers/ConsoleTypeProviderTest.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse subprojects/gradle-runner-kit-impl/src/test/groovy/dev/gradleplugins/runnerkit/providers/ConsoleTypeProviderTest.groovy at cursor position 1510. The next 10 characters in the original source are `}

       `
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,gradle-plugins/toolbox,main,GroovyParser,"subprojects/gradle-runner-kit-impl/src/test/groovy/dev/gradleplugins/runnerkit/providers/InjectedClasspathProviderTest.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse subprojects/gradle-runner-kit-impl/src/test/groovy/dev/gradleplugins/runnerkit/providers/InjectedClasspathProviderTest.groovy at cursor position 1280. The next 10 characters in the original source are `th.every {`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,gradle-plugins/toolbox,main,GroovyParser,"subprojects/gradle-runner-kit-impl/src/test/groovy/dev/gradleplugins/runnerkit/providers/WorkingDirectoryProviderTest.groovy",IllegalStateException,,,"java.lang.IllegalStateException: subprojects/gradle-runner-kit-impl/src/test/groovy/dev/gradleplugins/runnerkit/providers/WorkingDirectoryProviderTest.groovy is not print idempotent.
  org.openrewrite.Parser.requirePrintEqualsInput(Parser.java:51)"
github.com,gradle-plugins/toolbox,main,GroovyParser,"subprojects/gradle-runner-kit-impl/src/test/groovy/dev/gradleplugins/runnerkit/providers/WelcomeMessageProviderTest.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse subprojects/gradle-runner-kit-impl/src/test/groovy/dev/gradleplugins/runnerkit/providers/WelcomeMessageProviderTest.groovy at cursor position 2888. The next 10 characters in the original source are `le'))
    `
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,gradle-plugins/toolbox,main,GroovyParser,"subprojects/gradle-runner-kit-impl/src/test/groovy/dev/gradleplugins/runnerkit/providers/GradleUserHomeDirectoryProviderTest.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse subprojects/gradle-runner-kit-impl/src/test/groovy/dev/gradleplugins/runnerkit/providers/GradleUserHomeDirectoryProviderTest.groovy at cursor position 2711. The next 10 characters in the original source are `ExecutionC`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,gradle-plugins/toolbox,main,GroovyParser,"subprojects/gradle-runner-kit-impl/src/test/groovy/dev/gradleplugins/runnerkit/providers/JavaHomeProviderTest.groovy",IllegalStateException,,,"java.lang.IllegalStateException: subprojects/gradle-runner-kit-impl/src/test/groovy/dev/gradleplugins/runnerkit/providers/JavaHomeProviderTest.groovy is not print idempotent.
  org.openrewrite.Parser.requirePrintEqualsInput(Parser.java:51)"
github.com,gradle-plugins/toolbox,main,GroovyParser,"subprojects/gradle-runner-kit-impl/src/test/groovy/dev/gradleplugins/runnerkit/providers/BuildScanProviderTest.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse subprojects/gradle-runner-kit-impl/src/test/groovy/dev/gradleplugins/runnerkit/providers/BuildScanProviderTest.groovy at cursor position 2004. The next 10 characters in the original source are `)
        `
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,gradle-plugins/toolbox,main,GroovyParser,"subprojects/gradle-runner-kit-impl/src/test/groovy/dev/gradleplugins/runnerkit/providers/StacktraceProviderTest.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse subprojects/gradle-runner-kit-impl/src/test/groovy/dev/gradleplugins/runnerkit/providers/StacktraceProviderTest.groovy at cursor position 1575. The next 10 characters in the original source are `}

       `
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,gradle-plugins/toolbox,main,GroovyParser,"subprojects/gradle-runner-kit-impl/src/test/groovy/dev/gradleplugins/runnerkit/GradleRunnerImplTest.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse subprojects/gradle-runner-kit-impl/src/test/groovy/dev/gradleplugins/runnerkit/GradleRunnerImplTest.groovy at cursor position 18636. The next 10 characters in the original source are `assert con`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,gradle-plugins/toolbox,main,GroovyParser,"subprojects/gradle-runner-kit-impl/src/test/groovy/dev/gradleplugins/runnerkit/BuildResultDryRunOutputScrappingTest.groovy",IllegalStateException,,,"java.lang.IllegalStateException: subprojects/gradle-runner-kit-impl/src/test/groovy/dev/gradleplugins/runnerkit/BuildResultDryRunOutputScrappingTest.groovy is not print idempotent.
  org.openrewrite.Parser.requirePrintEqualsInput(Parser.java:51)"
github.com,gradle-plugins/toolbox,main,GroovyParser,"subprojects/gradle-runner-kit-impl/src/test/groovy/dev/gradleplugins/runnerkit/BuildResultVerboseOutputScrappingTest.groovy",IllegalStateException,,,"java.lang.IllegalStateException: subprojects/gradle-runner-kit-impl/src/test/groovy/dev/gradleplugins/runnerkit/BuildResultVerboseOutputScrappingTest.groovy is not print idempotent.
  org.openrewrite.Parser.requirePrintEqualsInput(Parser.java:51)"
github.com,gradle-plugins/toolbox,main,GroovyParser,"subprojects/gradle-runner-kit-integration-test/src/test/groovy/dev/gradleplugins/runnerkit/GradleExecutorCompatibilityIntegrationTest.groovy",IllegalStateException,,,"java.lang.IllegalStateException: subprojects/gradle-runner-kit-integration-test/src/test/groovy/dev/gradleplugins/runnerkit/GradleExecutorCompatibilityIntegrationTest.groovy is not print idempotent.
  org.openrewrite.Parser.requirePrintEqualsInput(Parser.java:51)"
github.com,gradle-plugins/toolbox,main,GroovyParser,"subprojects/gradle-runner-kit-integration-test/src/test/groovy/dev/gradleplugins/runnerkit/fixtures/PluginUnderTest.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse subprojects/gradle-runner-kit-integration-test/src/test/groovy/dev/gradleplugins/runnerkit/fixtures/PluginUnderTest.groovy at cursor position 3689. The next 10 characters in the original source are `org.gradle`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,gradle-plugins/toolbox,main,GroovyParser,"subprojects/gradle-runner-kit-integration-test/src/test/groovy/dev/gradleplugins/runnerkit/GradleRunnerGradleTestKitIntegrationTest.groovy",IllegalStateException,,,"java.lang.IllegalStateException: subprojects/gradle-runner-kit-integration-test/src/test/groovy/dev/gradleplugins/runnerkit/GradleRunnerGradleTestKitIntegrationTest.groovy is not print idempotent.
  org.openrewrite.Parser.requirePrintEqualsInput(Parser.java:51)"
github.com,gradle-plugins/toolbox,main,GroovyParser,"subprojects/gradle-runner-kit-integration-test/src/test/groovy/dev/gradleplugins/runnerkit/GradleRunnerEnvironmentVariablesIntegrationTest.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse subprojects/gradle-runner-kit-integration-test/src/test/groovy/dev/gradleplugins/runnerkit/GradleRunnerEnvironmentVariablesIntegrationTest.groovy, cursor position likely inaccurate.
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:163)"
github.com,gradle-plugins/toolbox,main,GroovyParser,"subprojects/gradle-runner-kit-integration-test/src/test/groovy/dev/gradleplugins/runnerkit/BaseGradleRunnerIntegrationTest.groovy",IllegalStateException,,,"java.lang.IllegalStateException: subprojects/gradle-runner-kit-integration-test/src/test/groovy/dev/gradleplugins/runnerkit/BaseGradleRunnerIntegrationTest.groovy is not print idempotent.
  org.openrewrite.Parser.requirePrintEqualsInput(Parser.java:51)"
github.com,gradle-plugins/toolbox,main,GroovyParser,"subprojects/gradle-runner-kit-integration-test/src/test/groovy/dev/gradleplugins/runnerkit/GradleRunnerGradleWrapperIntegrationTest.groovy",IllegalStateException,,,"java.lang.IllegalStateException: subprojects/gradle-runner-kit-integration-test/src/test/groovy/dev/gradleplugins/runnerkit/GradleRunnerGradleWrapperIntegrationTest.groovy is not print idempotent.
  org.openrewrite.Parser.requirePrintEqualsInput(Parser.java:51)"
github.com,gradle-plugins/toolbox,main,GroovyParser,"subprojects/gradle-runner-kit-integration-test/src/test/groovy/dev/gradleplugins/runnerkit/AbstractGradleRunnerIntegrationTest.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse subprojects/gradle-runner-kit-integration-test/src/test/groovy/dev/gradleplugins/runnerkit/AbstractGradleRunnerIntegrationTest.groovy, cursor position likely inaccurate.
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:163)"
github.com,gradle-plugins/toolbox,main,GroovyParser,"subprojects/gradle-runner-kit-integration-test/src/test/groovy/dev/gradleplugins/runnerkit/GradleRunnerConventionalPluginClasspathInjectionIntegrationTest.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse subprojects/gradle-runner-kit-integration-test/src/test/groovy/dev/gradleplugins/runnerkit/GradleRunnerConventionalPluginClasspathInjectionIntegrationTest.groovy at cursor position 4281. The next 10 characters in the original source are `String get`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,gradle-plugins/toolbox,main,GroovyParser,"subprojects/gradle-runner-kit-integration-test/src/test/groovy/dev/gradleplugins/runnerkit/AbstractGradleExecutorIntegrationTest.groovy",IllegalStateException,,,"java.lang.IllegalStateException: subprojects/gradle-runner-kit-integration-test/src/test/groovy/dev/gradleplugins/runnerkit/AbstractGradleExecutorIntegrationTest.groovy is not print idempotent.
  org.openrewrite.Parser.requirePrintEqualsInput(Parser.java:51)"
github.com,gradle-plugins/toolbox,main,GroovyParser,"subprojects/gradle-runner-kit-wrapper-impl/src/test/groovy/dev/gradleplugins/runnerkit/GradleWrapperFixtureTest.groovy",IllegalStateException,,,"java.lang.IllegalStateException: subprojects/gradle-runner-kit-wrapper-impl/src/test/groovy/dev/gradleplugins/runnerkit/GradleWrapperFixtureTest.groovy is not print idempotent.
  org.openrewrite.Parser.requirePrintEqualsInput(Parser.java:51)"
github.com,gradle-plugins/toolbox,main,ReloadableJava8Parser,"subprojects/gradle-plugin-development/src/main/java/dev/gradleplugins/internal/ide/IdePlugin.java",IllegalStateException,,,"java.lang.IllegalStateException: subprojects/gradle-plugin-development/src/main/java/dev/gradleplugins/internal/ide/IdePlugin.java is not print idempotent.
  org.openrewrite.Parser.requirePrintEqualsInput(Parser.java:51)"
github.com,gradle-plugins/toolbox,main,ReloadableJava8Parser,"subprojects/gradle-plugin-development/src/main/java/dev/gradleplugins/internal/tasks/FakeAnnotationProcessorTask.java",IllegalStateException,,,"java.lang.IllegalStateException: subprojects/gradle-plugin-development/src/main/java/dev/gradleplugins/internal/tasks/FakeAnnotationProcessorTask.java is not print idempotent.
  org.openrewrite.Parser.requirePrintEqualsInput(Parser.java:51)"
github.com,gradle-plugins/toolbox,main,GroovyParser,"subprojects/gradle-plugin-development/src/test/groovy/dev/gradleplugins/GradlePluginDevelopmentPluginProjectGroovyDslIntegrationTest.groovy",IllegalStateException,,,"java.lang.IllegalStateException: subprojects/gradle-plugin-development/src/test/groovy/dev/gradleplugins/GradlePluginDevelopmentPluginProjectGroovyDslIntegrationTest.groovy is not print idempotent.
  org.openrewrite.Parser.requirePrintEqualsInput(Parser.java:51)"
github.com,gradle-plugins/toolbox,main,GroovyParser,"subprojects/gradle-plugin-development/src/test/groovy/dev/gradleplugins/internal/plugins/GradlePluginDevelopmentPluginTest.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse subprojects/gradle-plugin-development/src/test/groovy/dev/gradleplugins/internal/plugins/GradlePluginDevelopmentPluginTest.groovy, cursor position likely inaccurate.
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:163)"
github.com,gradle-plugins/toolbox,main,GroovyParser,"subprojects/gradle-plugin-development/src/test/groovy/dev/gradleplugins/internal/plugins/GradlePluginDevelopmentFunctionalTestingPluginTest.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse subprojects/gradle-plugin-development/src/test/groovy/dev/gradleplugins/internal/plugins/GradlePluginDevelopmentFunctionalTestingPluginTest.groovy at cursor position 2934. The next 10 characters in the original source are `] }.orElse`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,gradle-plugins/toolbox,main,GroovyParser,"subprojects/gradle-plugin-development/src/test/groovy/dev/gradleplugins/internal/GradlePluginDevelopmentDependencyTest.groovy",IllegalStateException,,,"java.lang.IllegalStateException: subprojects/gradle-plugin-development/src/test/groovy/dev/gradleplugins/internal/GradlePluginDevelopmentDependencyTest.groovy is not print idempotent.
  org.openrewrite.Parser.requirePrintEqualsInput(Parser.java:51)"
github.com,gradle-plugins/toolbox,main,GroovyParser,"subprojects/gradle-plugin-development/src/main/groovy/dev/gradleplugins/internal/dsl/groovy/GroovyDslRuntimeExtensions.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse subprojects/gradle-plugin-development/src/main/groovy/dev/gradleplugins/internal/dsl/groovy/GroovyDslRuntimeExtensions.groovy at cursor position 566. The next 10 characters in the original source are ` = methodB`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,gradle-plugins/toolbox,main,GroovyParser,"subprojects/gradle-plugin-development/src/functionalTest/groovy/dev/gradleplugins/GradlePluginDevelopmentUnitTestingStrategyFunctionalTest.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse subprojects/gradle-plugin-development/src/functionalTest/groovy/dev/gradleplugins/GradlePluginDevelopmentUnitTestingStrategyFunctionalTest.groovy at cursor position 2933. The next 10 characters in the original source are `${GradleVe`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,gradle-plugins/toolbox,main,GroovyParser,"subprojects/gradle-plugin-development/src/functionalTest/groovy/dev/gradleplugins/GradlePluginDevelopmentFunctionalTestingFunctionalTest.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse subprojects/gradle-plugin-development/src/functionalTest/groovy/dev/gradleplugins/GradlePluginDevelopmentFunctionalTestingFunctionalTest.groovy at cursor position 3565. The next 10 characters in the original source are `${GradleVe`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,gradle-plugins/toolbox,main,GroovyParser,"subprojects/gradle-plugin-development/src/functionalTest/groovy/dev/gradleplugins/WellBehaveGradlePluginDevelopmentPluginFunctionalTest.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse subprojects/gradle-plugin-development/src/functionalTest/groovy/dev/gradleplugins/WellBehaveGradlePluginDevelopmentPluginFunctionalTest.groovy at cursor position 2116. The next 10 characters in the original source are `${configur`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,gradle-plugins/toolbox,main,GroovyParser,"subprojects/gradle-plugin-development/src/functionalTest/groovy/dev/gradleplugins/GradlePluginDevelopmentUnitTestingFunctionalTest.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse subprojects/gradle-plugin-development/src/functionalTest/groovy/dev/gradleplugins/GradlePluginDevelopmentUnitTestingFunctionalTest.groovy at cursor position 3443. The next 10 characters in the original source are `static ${G`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,gradle-plugins/toolbox,main,GroovyParser,"subprojects/gradle-plugin-development/src/functionalTest/groovy/dev/gradleplugins/JavaGradlePluginDevelopmentPlugin.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse subprojects/gradle-plugin-development/src/functionalTest/groovy/dev/gradleplugins/JavaGradlePluginDevelopmentPlugin.groovy at cursor position 33. The next 10 characters in the original source are `JavaGradle`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,gradle-plugins/toolbox,main,GroovyParser,"subprojects/gradle-plugin-development/src/functionalTest/groovy/dev/gradleplugins/GroovyGradlePluginDevelopmentPlugin.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse subprojects/gradle-plugin-development/src/functionalTest/groovy/dev/gradleplugins/GroovyGradlePluginDevelopmentPlugin.groovy at cursor position 33. The next 10 characters in the original source are `GroovyGrad`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,gradle-plugins/toolbox,main,GroovyParser,"subprojects/gradle-plugin-development/src/functionalTest/groovy/dev/gradleplugins/GradlePluginDevelopmentFunctionalTest.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse subprojects/gradle-plugin-development/src/functionalTest/groovy/dev/gradleplugins/GradlePluginDevelopmentFunctionalTest.groovy at cursor position 10925. The next 10 characters in the original source are `
        N`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,gradle-plugins/toolbox,main,GroovyParser,"subprojects/gradle-plugin-development/src/functionalTest/groovy/dev/gradleplugins/GradlePluginDevelopmentExtensionFunctionalTest.groovy",IllegalStateException,,,"java.lang.IllegalStateException: subprojects/gradle-plugin-development/src/functionalTest/groovy/dev/gradleplugins/GradlePluginDevelopmentExtensionFunctionalTest.groovy is not print idempotent.
  org.openrewrite.Parser.requirePrintEqualsInput(Parser.java:51)"
github.com,gradle-plugins/toolbox,main,GroovyParser,"subprojects/gradle-plugin-development/src/functionalTest/groovy/dev/gradleplugins/GradlePluginDevelopmentTestingStrategyFunctionalTest.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse subprojects/gradle-plugin-development/src/functionalTest/groovy/dev/gradleplugins/GradlePluginDevelopmentTestingStrategyFunctionalTest.groovy at cursor position 5355. The next 10 characters in the original source are `${GradleVe`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,gradle-plugins/toolbox,main,GroovyParser,"subprojects/gradle-plugin-development/src/functionalTest/groovy/dev/gradleplugins/GradlePluginDevelopmentTestKitFunctionalTest.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse subprojects/gradle-plugin-development/src/functionalTest/groovy/dev/gradleplugins/GradlePluginDevelopmentTestKitFunctionalTest.groovy at cursor position 1173. The next 10 characters in the original source are `${GradleVe`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,gradle-plugins/toolbox,main,GroovyParser,"subprojects/gradle-fixtures/src/spock/groovy/dev/gradleplugins/fixtures/test/JUnitTestClassExecutionResult.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse subprojects/gradle-fixtures/src/spock/groovy/dev/gradleplugins/fixtures/test/JUnitTestClassExecutionResult.groovy at cursor position 3285. The next 10 characters in the original source are `Assert.ass`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,gradle-plugins/toolbox,main,GroovyParser,"subprojects/gradle-fixtures/src/spock/groovy/dev/gradleplugins/fixtures/test/JUnitXmlTestExecutionResult.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse subprojects/gradle-fixtures/src/spock/groovy/dev/gradleplugins/fixtures/test/JUnitXmlTestExecutionResult.groovy at cursor position 3428. The next 10 characters in the original source are `[:]
      `
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,gradle-plugins/toolbox,main,GroovyParser,"subprojects/gradle-fixtures/src/spock/groovy/dev/gradleplugins/fixtures/test/DefaultTestExecutionResult.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse subprojects/gradle-fixtures/src/spock/groovy/dev/gradleplugins/fixtures/test/DefaultTestExecutionResult.groovy, cursor position likely inaccurate.
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:163)"
github.com,gradle-plugins/toolbox,main,GroovyParser,"subprojects/gradle-fixtures/src/spock/groovy/dev/gradleplugins/fixtures/test/HtmlTestExecutionResult.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse subprojects/gradle-fixtures/src/spock/groovy/dev/gradleplugins/fixtures/test/HtmlTestExecutionResult.groovy at cursor position 3161. The next 10 characters in the original source are `this(name,`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,gradle-plugins/toolbox,main,GroovyParser,"subprojects/gradle-fixtures/src/spock/groovy/dev/gradleplugins/integtests/fixtures/nativeplatform/HostPlatform.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse subprojects/gradle-fixtures/src/spock/groovy/dev/gradleplugins/integtests/fixtures/nativeplatform/HostPlatform.groovy at cursor position 858. The next 10 characters in the original source are `HostPlatfo`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,gradle-plugins/toolbox,main,GroovyParser,"subprojects/gradle-fixtures/src/spock/groovy/dev/gradleplugins/integtests/fixtures/nativeplatform/RequiresInstalledToolChain.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse subprojects/gradle-fixtures/src/spock/groovy/dev/gradleplugins/integtests/fixtures/nativeplatform/RequiresInstalledToolChain.groovy at cursor position 1044. The next 10 characters in the original source are `
}
`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,gradle-plugins/toolbox,main,GroovyParser,"subprojects/gradle-fixtures/src/spock/groovy/dev/gradleplugins/integtests/fixtures/nativeplatform/RequiresInstalledToolChainExtension.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse subprojects/gradle-fixtures/src/spock/groovy/dev/gradleplugins/integtests/fixtures/nativeplatform/RequiresInstalledToolChainExtension.groovy at cursor position 899. The next 10 characters in the original source are ` extends A`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,gradle-plugins/toolbox,main,GroovyParser,"subprojects/gradle-fixtures/src/spock/groovy/dev/gradleplugins/integtests/fixtures/nativeplatform/ExecutableFixture.groovy",IllegalStateException,,,"java.lang.IllegalStateException: subprojects/gradle-fixtures/src/spock/groovy/dev/gradleplugins/integtests/fixtures/nativeplatform/ExecutableFixture.groovy is not print idempotent.
  org.openrewrite.Parser.requirePrintEqualsInput(Parser.java:51)"
github.com,gradle-plugins/toolbox,main,GroovyParser,"subprojects/gradle-fixtures/src/spock/groovy/dev/gradleplugins/integtests/fixtures/nativeplatform/binaryinfo/DumpbinGccProducedBinaryInfo.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse subprojects/gradle-fixtures/src/spock/groovy/dev/gradleplugins/integtests/fixtures/nativeplatform/binaryinfo/DumpbinGccProducedBinaryInfo.groovy at cursor position 1559. The next 10 characters in the original source are `assert lis`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,gradle-plugins/toolbox,main,GroovyParser,"subprojects/gradle-fixtures/src/spock/groovy/dev/gradleplugins/integtests/fixtures/nativeplatform/binaryinfo/ReadelfBinaryInfo.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse subprojects/gradle-fixtures/src/spock/groovy/dev/gradleplugins/integtests/fixtures/nativeplatform/binaryinfo/ReadelfBinaryInfo.groovy at cursor position 3040. The next 10 characters in the original source are `hes()
    `
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,gradle-plugins/toolbox,main,GroovyParser,"subprojects/gradle-fixtures/src/spock/groovy/dev/gradleplugins/integtests/fixtures/nativeplatform/binaryinfo/OtoolBinaryInfo.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse subprojects/gradle-fixtures/src/spock/groovy/dev/gradleplugins/integtests/fixtures/nativeplatform/binaryinfo/OtoolBinaryInfo.groovy, cursor position likely inaccurate.
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:163)"
github.com,gradle-plugins/toolbox,main,GroovyParser,"subprojects/gradle-fixtures/src/spock/groovy/dev/gradleplugins/integtests/fixtures/nativeplatform/binaryinfo/NMToolFixture.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse subprojects/gradle-fixtures/src/spock/groovy/dev/gradleplugins/integtests/fixtures/nativeplatform/binaryinfo/NMToolFixture.groovy, cursor position likely inaccurate.
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:163)"
github.com,gradle-plugins/toolbox,main,GroovyParser,"subprojects/gradle-fixtures/src/spock/groovy/dev/gradleplugins/integtests/fixtures/nativeplatform/binaryinfo/DumpbinBinaryInfo.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse subprojects/gradle-fixtures/src/spock/groovy/dev/gradleplugins/integtests/fixtures/nativeplatform/binaryinfo/DumpbinBinaryInfo.groovy, cursor position likely inaccurate.
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:163)"
github.com,gradle-plugins/toolbox,main,GroovyParser,"subprojects/gradle-fixtures/src/spock/groovy/dev/gradleplugins/integtests/fixtures/nativeplatform/binaryinfo/FileArchOnlyBinaryInfo.groovy",IllegalStateException,,,"java.lang.IllegalStateException: subprojects/gradle-fixtures/src/spock/groovy/dev/gradleplugins/integtests/fixtures/nativeplatform/binaryinfo/FileArchOnlyBinaryInfo.groovy is not print idempotent.
  org.openrewrite.Parser.requirePrintEqualsInput(Parser.java:51)"
github.com,gradle-plugins/toolbox,main,GroovyParser,"subprojects/gradle-fixtures/src/spock/groovy/dev/gradleplugins/integtests/fixtures/nativeplatform/AbstractInstalledToolChainIntegrationSpec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse subprojects/gradle-fixtures/src/spock/groovy/dev/gradleplugins/integtests/fixtures/nativeplatform/AbstractInstalledToolChainIntegrationSpec.groovy, cursor position likely inaccurate.
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:163)"
github.com,gradle-plugins/toolbox,main,GroovyParser,"subprojects/gradle-fixtures/src/spock/groovy/dev/gradleplugins/integtests/fixtures/nativeplatform/NativeBinaryFixture.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse subprojects/gradle-fixtures/src/spock/groovy/dev/gradleplugins/integtests/fixtures/nativeplatform/NativeBinaryFixture.groovy at cursor position 4123. The next 10 characters in the original source are `
        }`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,gradle-plugins/toolbox,main,GroovyParser,"subprojects/gradle-fixtures/src/spock/groovy/dev/gradleplugins/integtests/fixtures/nativeplatform/NativeTestFixture.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse subprojects/gradle-fixtures/src/spock/groovy/dev/gradleplugins/integtests/fixtures/nativeplatform/NativeTestFixture.groovy at cursor position 341. The next 10 characters in the original source are `NativeTest`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,gradle-plugins/toolbox,main,GroovyParser,"subprojects/gradle-fixtures/src/spock/groovy/dev/gradleplugins/integtests/fixtures/ArchiveTestFixture.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse subprojects/gradle-fixtures/src/spock/groovy/dev/gradleplugins/integtests/fixtures/ArchiveTestFixture.groovy at cursor position 351. The next 10 characters in the original source are `ArchiveTes`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,gradle-plugins/toolbox,main,GroovyParser,"subprojects/gradle-fixtures/src/spock/groovy/dev/gradleplugins/integtests/fixtures/WellBehavedPluginTest.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse subprojects/gradle-fixtures/src/spock/groovy/dev/gradleplugins/integtests/fixtures/WellBehavedPluginTest.groovy at cursor position 2642. The next 10 characters in the original source are `[':help']
`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,gradle-plugins/toolbox,main,GroovyParser,"subprojects/gradle-fixtures/src/spock/groovy/dev/gradleplugins/integtests/fixtures/AbstractGradleSpecification.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse subprojects/gradle-fixtures/src/spock/groovy/dev/gradleplugins/integtests/fixtures/AbstractGradleSpecification.groovy at cursor position 3120. The next 10 characters in the original source are `{
        `
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,gradle-plugins/toolbox,main,GroovyParser,"subprojects/gradle-fixtures/src/test/groovy/dev/gradleplugins/test/fixtures/util/RetryUtilTest.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse subprojects/gradle-fixtures/src/test/groovy/dev/gradleplugins/test/fixtures/util/RetryUtilTest.groovy at cursor position 1024. The next 10 characters in the original source are `exception.`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,gradle-plugins/toolbox,main,GroovyParser,"subprojects/gradle-fixtures/src/test/groovy/dev/gradleplugins/test/fixtures/gradle/executer/GradleDistributionFactoryTest.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse subprojects/gradle-fixtures/src/test/groovy/dev/gradleplugins/test/fixtures/gradle/executer/GradleDistributionFactoryTest.groovy at cursor position 1236. The next 10 characters in the original source are `then:
    `
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,gradle-plugins/toolbox,main,GroovyParser,"subprojects/gradle-fixtures/src/test/groovy/dev/gradleplugins/test/fixtures/gradle/executer/internal/WrapperGradleDistributionTest.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse subprojects/gradle-fixtures/src/test/groovy/dev/gradleplugins/test/fixtures/gradle/executer/internal/WrapperGradleDistributionTest.groovy at cursor position 1701. The next 10 characters in the original source are `and:
     `
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,gradle-plugins/toolbox,main,GroovyParser,"subprojects/gradle-fixtures/src/test/groovy/dev/gradleplugins/test/fixtures/gradle/executer/internal/CurrentGradleDistributionTest.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse subprojects/gradle-fixtures/src/test/groovy/dev/gradleplugins/test/fixtures/gradle/executer/internal/CurrentGradleDistributionTest.groovy at cursor position 380. The next 10 characters in the original source are `expect:
  `
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,gradle-plugins/toolbox,main,GroovyParser,"subprojects/gradle-fixtures/src/test/groovy/dev/gradleplugins/test/fixtures/gradle/executer/internal/ReleasedGradleDistributionTest.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse subprojects/gradle-fixtures/src/test/groovy/dev/gradleplugins/test/fixtures/gradle/executer/internal/ReleasedGradleDistributionTest.groovy at cursor position 627. The next 10 characters in the original source are `distributi`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,gradle-plugins/toolbox,main,GroovyParser,"subprojects/gradle-fixtures/src/test/groovy/dev/gradleplugins/test/fixtures/file/TestFileHelperTest.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse subprojects/gradle-fixtures/src/test/groovy/dev/gradleplugins/test/fixtures/file/TestFileHelperTest.groovy at cursor position 819. The next 10 characters in the original source are `process.co`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,gradle-plugins/toolbox,main,GroovyParser,"subprojects/gradle-fixtures/src/test/groovy/dev/gradleplugins/test/fixtures/file/TestFileTest.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse subprojects/gradle-fixtures/src/test/groovy/dev/gradleplugins/test/fixtures/file/TestFileTest.groovy at cursor position 2945. The next 10 characters in the original source are `assert res`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,askeron/fluentxmlwrapper,master,KotlinParser,"src/test/kotlin/de/drbunsen/common/fluentxmlwrapper/FluentXmlWrapperTest.kt",AssertionError,,,"java.lang.AssertionError: null
  org.openrewrite.java.tree.TypeTree.build(TypeTree.java:95)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitResolvedQualifier(KotlinParserVisitor.kt:2358)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4398)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.mapFunctionCall(KotlinParserVisitor.kt:1116)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitFunctionCall(KotlinParserVisitor.kt:1026)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4385)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitBlock(KotlinParserVisitor.kt:766)
  ..."
github.com,"spring-projects/spring-kafka",main,GroovyParser,build.gradle,IllegalStateException,,,"java.lang.IllegalStateException: build.gradle is not print idempotent.
  org.openrewrite.Parser.requirePrintEqualsInput(Parser.java:51)"
github.com,"spring-projects/spring-kafka",main,KotlinParser,"spring-kafka/src/test/kotlin/org/springframework/kafka/core/KotlinProducerFactoryTests.kt",AssertionError,,,"java.lang.AssertionError: null
  org.openrewrite.java.tree.TypeTree.build(TypeTree.java:95)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitResolvedQualifier(KotlinParserVisitor.kt:2358)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4398)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.mapFunctionCall(KotlinParserVisitor.kt:1116)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitFunctionCall(KotlinParserVisitor.kt:1026)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4385)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  ..."
github.com,"spring-projects/spring-kafka",main,KotlinParser,"spring-kafka/src/test/kotlin/org/springframework/kafka/listener/EnableKafkaKotlinTests.kt",AssertionError,,,"java.lang.AssertionError: null
  org.openrewrite.java.tree.TypeTree.build(TypeTree.java:95)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitResolvedQualifier(KotlinParserVisitor.kt:2358)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4398)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.mapFunctionCall(KotlinParserVisitor.kt:1116)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitFunctionCall(KotlinParserVisitor.kt:1026)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4385)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  ..."
github.com,"dave99galloway/cucumberTest",main,KotlinParser,"src/main/kotlin/com/github/dave99galloway/cucumbertest/plugins/ScenarioStepLoggerPlugin.kt","UnsupportedOperationException","org.jetbrains.kotlin.KtRealSourceElementKind@64a8a6cf","class ScenarioStepHandler {

    fun testRunStarted(event: TestRunStarted) {
        log.info(""Test run started at ${event.instant}"")
    }

    fun testRunFinished(event: TestRunFinished) {
        log.info(""Test run finished at ${event.instant} ${event.result}"")
    }

    fun testCaseStarted(event: TestCaseStarted) {
        val testCase = event.testCase
        log.info(""Begin ${testCase.keyword}: ${testCase.name}"")
        log.debug(""${testCase.keyword}: ${testCase.name} started at ${event.instant}"")
        val uriString: String = if (testCase.uri.toString().startsWith(CLASSPATH)) {
            val featureUrl: URL? =
                this.javaClass.classLoader.getResource(testCase.uri.toString().replace(CLASSPATH, """"))
            File(featureUrl?.path ?: testCase.uri.toString()).absolutePath
        } else {
            testCase.uri.toString()
        }
        log.debug(""'${testCase.keyword}: ${testCase.name}' running from $uriString:${testCase.location.line}:${testCase.location.column}"")
    }

    fun testCaseFinished(event: TestCaseFinished) {
        val testCase = event.testCase
        log.info(""Finished ${testCase.keyword}: ${testCase.name} ${event.result}"")
        log.debug(""${testCase.keyword}: ${testCase.name} finished at ${event.instant}"")
        val uriString: String = if (testCase.uri.toString().startsWith(CLASSPATH)) {
            val featureUrl: URL? =
                this.javaClass.classLoader.getResource(testCase.uri.toString().replace(CLASSPATH, """"))
            File(featureUrl?.path ?: testCase.uri.toString()).absolutePath
        } else {
            testCase.uri.toString()
        }
        log.debug(""'${testCase.keyword}: ${testCase.name}' finished running from $uriString:${testCase.location.line}:${testCase.location.column}"")
    }

    fun testStepStarted(event: TestStepStarted) {
        when (val step = event.testStep) {
            is PickleStepTestStep -> {
                val stepArgumentAsText = stepArgumentAsText(step)
                log.info(""Started Step: ${step.step.keyword}${step.step.text}${stepArgumentAsText?.let { argText -> ""$LINE_SEP$argText"" } ?: """"}"")
            }
            is HookTestStep -> log.trace(""Ignoring step. ${step.hookType}"")
            else -> log.warn(""unknown step type for $step: ${step::class.java}"")
        }
    }

    fun testStepFinished(event: TestStepFinished) {
        when (val step = event.testStep) {
            is PickleStepTestStep -> {
                log.info(""Finished Step: ${step.step.keyword}${step.step.text} ${event.result}"")
            }
            is HookTestStep -> log.trace(""Ignoring step. ${step.hookType}"")
            else -> log.warn(""unknown step type for $step: ${step::class.java}"")
        }
    }

    companion object {
        private val log by logger()

        fun stepArgumentAsText(step: PickleStepTestStep): String? {
            return when (val argument = step.step.argument) {
                is Nothing? -> return null
                is DocStringArgument -> argument.content
                is DataTableArgument -> DataTable.create(argument.cells()).toString()
                else -> return null
            }
        }

        private const val CLASSPATH = ""classpath:""
    }
}","java.lang.UnsupportedOperationException: Unexpected property delegation. FirProperty#delegate for name: logger is not supported at cursor:  by logger()

        fun stepin file: /home/ubuntu/jenkins-agent/workspace/cli-ingest/dave99galloway_cucumberTest_main/src/main/kotlin/com/github/dave99galloway/cucumbertest/plugins/ScenarioStepLoggerPlugin.kt
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitProperty(KotlinParserVisitor.kt:1913)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4391)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitRegularClass(KotlinParserVisitor.kt:4026)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4395)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitRegularClass(KotlinParserVisitor.kt:4026)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4395)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitFile(KotlinParserVisitor.kt:166)"
github.com,"dave99galloway/cucumberTest",main,KotlinParser,"src/main/kotlin/com/github/dave99galloway/cucumbertest/logging/LoggerExtensions.kt",AssertionError,,,"java.lang.AssertionError: null
  org.openrewrite.java.tree.TypeTree.build(TypeTree.java:95)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitResolvedQualifier(KotlinParserVisitor.kt:2358)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4398)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.mapFunctionCall(KotlinParserVisitor.kt:1116)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitFunctionCall(KotlinParserVisitor.kt:1026)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4385)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  ..."
github.com,"reimersoftware/spark-gradle-plugin",master,KotlinParser,"src/main/kotlin/dev/reimer/spark/gradle/plugin/SparkSubmit.kt",IllegalStateException,,,"java.lang.IllegalStateException: src/main/kotlin/dev/reimer/spark/gradle/plugin/SparkSubmit.kt is not print idempotent.
  org.openrewrite.Parser.requirePrintEqualsInput(Parser.java:51)"
github.com,"reimersoftware/spark-gradle-plugin",master,YamlParser,.github/workflows/ci.yml,IllegalArgumentException,,,"java.lang.IllegalArgumentException: Only ASCII characters are supported for now
  org.openrewrite.yaml.FormatPreservingReader.read(FormatPreservingReader.java:82)
  org.yaml.snakeyaml.reader.StreamReader.update(StreamReader.java:180)
  org.yaml.snakeyaml.reader.StreamReader.ensureEnoughData(StreamReader.java:173)
  org.yaml.snakeyaml.reader.StreamReader.ensureEnoughData(StreamReader.java:168)
  org.yaml.snakeyaml.reader.StreamReader.peek(StreamReader.java:123)
  org.yaml.snakeyaml.scanner.ScannerImpl.scanToNextToken(ScannerImpl.java:1204)
  org.yaml.snakeyaml.scanner.ScannerImpl.fetchMoreTokens(ScannerImpl.java:320)
  org.yaml.snakeyaml.scanner.ScannerImpl.checkToken(ScannerImpl.java:238)
  ..."
github.com,"reimersoftware/spark-gradle-plugin",master,YamlParser,".github/workflows/release.yml",IllegalArgumentException,,,"java.lang.IllegalArgumentException: Only ASCII characters are supported for now
  org.openrewrite.yaml.FormatPreservingReader.read(FormatPreservingReader.java:82)
  org.yaml.snakeyaml.reader.StreamReader.update(StreamReader.java:180)
  org.yaml.snakeyaml.reader.StreamReader.ensureEnoughData(StreamReader.java:173)
  org.yaml.snakeyaml.reader.StreamReader.ensureEnoughData(StreamReader.java:168)
  org.yaml.snakeyaml.reader.StreamReader.peek(StreamReader.java:123)
  org.yaml.snakeyaml.scanner.ScannerImpl.scanToNextToken(ScannerImpl.java:1204)
  org.yaml.snakeyaml.scanner.ScannerImpl.fetchMoreTokens(ScannerImpl.java:320)
  org.yaml.snakeyaml.scanner.ScannerImpl.checkToken(ScannerImpl.java:238)
  ..."
github.com,"Liftric/vault-client-plugin",master,KotlinParser,"src/test/kotlin/com/liftric/vault/VaultClientPluginTest.kt",AssertionError,,,"java.lang.AssertionError: null
  org.openrewrite.java.tree.TypeTree.build(TypeTree.java:95)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitResolvedQualifier(KotlinParserVisitor.kt:2358)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4398)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.mapFunctionCall(KotlinParserVisitor.kt:1116)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitFunctionCall(KotlinParserVisitor.kt:1026)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4385)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitBlock(KotlinParserVisitor.kt:766)
  ..."
github.com,"asarkar/build-time-tracker",master,KotlinParser,"src/main/kotlin/com/asarkar/gradle/buildtimetracker/TimingRecorder.kt",IllegalStateException,,,"java.lang.IllegalStateException: src/main/kotlin/com/asarkar/gradle/buildtimetracker/TimingRecorder.kt is not print idempotent.
  org.openrewrite.Parser.requirePrintEqualsInput(Parser.java:51)"
github.com,"asarkar/build-time-tracker",master,KotlinParser,"src/test/kotlin/com/asarkar/gradle/buildtimetracker/BuildTimeTrackerPluginFunctionalTest.kt",AssertionError,,,"java.lang.AssertionError: null
  org.openrewrite.java.tree.TypeTree.build(TypeTree.java:93)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitResolvedQualifier(KotlinParserVisitor.java:2204)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.java:4098)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.java:4558)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitPropertyAccessExpression(KotlinParserVisitor.java:1953)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.java:4088)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitStringConcatenationCall(KotlinParserVisitor.java:2433)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.java:4112)
  ..."
github.com,ekino/gradle-java-plugin,master,KotlinParser,"src/main/kotlin/com/ekino/oss/gradle/plugin/java/JavaPlugin.kt","UnsupportedOperationException","org.jetbrains.kotlin.KtRealSourceElementKind@7349d2f6","class JavaPlugin : Plugin<Project> {

  override fun apply(project: Project) {
    with(project) {

      val javaPluginConfiguration = extensions.create(EXTENSION_NAME, JavaPluginConfiguration::class.java)

      // plugins
      apply<org.gradle.api.plugins.JavaPlugin>()
      apply<TestSetsPlugin>()
      val sourceSets = the<SourceSetContainer>()
      apply<MavenPublishPlugin>()

      // properties
      afterEvaluate {
        with(javaPluginConfiguration) {
          setProperty(""sourceCompatibility"", sourceCompatibility)
          setProperty(""targetCompatibility"", targetCompatibility)
        }
      }

      addTasks()

      configure(listOf(project)) {

        // Setup default task
        defaultTasks(""build"")

        tasks.getByName<Copy>(""processResources"") {
          from(sourceSets[""main""].resources.srcDirs) {
            include(""**/*.yml"")
            filter {
              it
                  .replace(""\${project-version}"", project.version as String)
                  .replace(""\${project-description}"", project.description as String)
            }
          }
          duplicatesStrategy = DuplicatesStrategy.INCLUDE
        }

        configureTests()

        configureIntegrationTests()
      }

      configurePublishing()
    }
  }

  private fun Project.addTasks() {
    tasks.register<Copy>(""aggregateJunitReports"") {
      from(""$buildDir/test-results/test"", ""$buildDir/test-results/integrationTest"")
      into(""$buildDir/test-results/all"")
    }
  }

  private fun Project.configureTests() {
    tasks.withType(Test::class.java) {
      // To use JUnit5 Jupiter
      useJUnitPlatform()

      // waiting for https://github.com/gradle/gradle/issues/5431 in order to have a better way to do that
      addTestListener(object : TestListener {
        override fun beforeSuite(suite: TestDescriptor) {}
        override fun beforeTest(testDescriptor: TestDescriptor) {}
        override fun afterTest(testDescriptor: TestDescriptor, result: TestResult) {}
        override fun afterSuite(suite: TestDescriptor, result: TestResult) {
          if (suite.parent == null) {
            println(""\nTests result: ${result.resultType}"")
            println(""Tests summary: ${result.testCount} tests, "" +
                ""${result.successfulTestCount} succeeded, "" +
                ""${result.failedTestCount} failed, "" +
                ""${result.skippedTestCount} skipped"")
          }
        }
      })
    }
  }

  private fun Project.configureIntegrationTests() {
    if (file(""$projectDir/src/it"").exists()) {

      testSets {
        ""integrationTest"" {
          dirName = ""it""
        }
      }

      val test by tasks.named(""test"")
      val integrationTest by tasks.named(""integrationTest"") {
        mustRunAfter(test)
      }

      tasks.named(""check"") {
        dependsOn(integrationTest)
      }

      tasks.named(""aggregateJunitReports"") {
        dependsOn(test, integrationTest)
      }
    }
  }

  private fun Project.configurePublishing() {
    if (plugins.hasPlugin(""maven-publish"")
        && hasProperty(""publishingBaseUrl"")
        && hasProperty(""publishingLogin"")
        && hasProperty(""publishingPassword"")) {

      extensions.configure<PublishingExtension> {
        publications.register<MavenPublication>(""mavenJava"") {
          from(components[""java""])
        }
        repositories {
          maven {
            val publishingBaseUrl = findProperty(""publishingBaseUrl"") as String
            val projectVersion = project.version as String

            url = uri(""$publishingBaseUrl${if (projectVersion.endsWith(""-SNAPSHOT"")) ""snapshots"" else ""releases""}/"")

            credentials {
              username = findProperty(""publishingLogin"") as String
              password = findProperty(""publishingPassword"") as String
            }
          }
        }
      }
    }
  }
}","java.lang.UnsupportedOperationException: Unexpected property delegation. FirProperty#delegate for name: provideDelegate is not supported at cursor:  by tasks.named(""test"")
      in file: /home/ubuntu/jenkins-agent/workspace/cli-ingest/ekino_gradle-java-plugin_master/src/main/kotlin/com/ekino/oss/gradle/plugin/java/JavaPlugin.kt
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitProperty(KotlinParserVisitor.kt:1913)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4391)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitBlock(KotlinParserVisitor.kt:766)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitBlock(KotlinParserVisitor.kt:705)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4372)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitWhenBranch(KotlinParserVisitor.kt:3214)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4417)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitWhenExpression(KotlinParserVisitor.kt:3323)
  ..."
github.com,"moderneinc/moderne-ast-write",main,ReloadableJava17Parser,"src/test/java/io/moderne/serialization/process/TreeSerializerPreprocessorTest.java","StringIndexOutOfBoundsException",,,"java.lang.StringIndexOutOfBoundsException: begin 3536, end 3444, length 3623
  java.base/java.lang.String.checkBoundsBeginEnd(String.java:4606)
  java.base/java.lang.String.substring(String.java:2709)
  org.openrewrite.java.isolated.ReloadableJava17ParserVisitor.visitAnnotation(ReloadableJava17ParserVisitor.java:146)
  org.openrewrite.java.isolated.ReloadableJava17ParserVisitor.visitAnnotation(ReloadableJava17ParserVisitor.java:73)
  com.sun.tools.javac.tree.JCTree$JCAnnotation.accept(JCTree.java:2921)
  com.sun.source.util.TreePathScanner.scan(TreePathScanner.java:86)
  org.openrewrite.java.isolated.ReloadableJava17ParserVisitor.convert(ReloadableJava17ParserVisitor.java:1571)
  org.openrewrite.java.isolated.ReloadableJava17ParserVisitor.convertAll(ReloadableJava17ParserVisitor.java:1624)
  ..."
github.com,"moderneinc/moderne-ast-write",main,KotlinParser,"src/test/kotlin/io/moderne/serialization/process/ReplaceBackReferencesWithCyclesTest.kt",IllegalStateException,,,"java.lang.IllegalStateException: src/test/kotlin/io/moderne/serialization/process/ReplaceBackReferencesWithCyclesTest.kt is not print idempotent.
  org.openrewrite.Parser.requirePrintEqualsInput(Parser.java:51)"
github.com,"moderneinc/moderne-ast-write",main,KotlinParser,"src/test/kotlin/io/moderne/serialization/RoundTripSerializationTest.kt",AssertionError,,,"java.lang.AssertionError: null
  org.openrewrite.java.tree.TypeTree.build(TypeTree.java:93)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitResolvedQualifier(KotlinParserVisitor.java:2204)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.java:4098)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.java:4558)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.mapFunctionCall(KotlinParserVisitor.java:1045)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitFunctionCall(KotlinParserVisitor.java:955)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.java:4074)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.java:4558)
  ..."
github.com,"SgtSilvio/gradle-proguard",master,KotlinParser,"src/main/java/com/github/sgtsilvio/gradle/proguard/LineOutputStream.kt",IllegalArgumentException,"org.jetbrains.kotlin.KtRealSourceElementKind@40520490","/**
 * Interprets an output stream as UTF-8 strings.
 * Supports LF, CR LF and CR line endings.
 */
internal class LineOutputStream(private val consumer: (String) -> Unit) : OutputStream() {

    private val buffer = ByteStringBuilder()
    private var lastCR = false

    override fun write(b: Int) = write(byteArrayOf(b.toByte()))

    override fun write(b: ByteArray, off: Int, len: Int) {
        val end = off + len

        require(len >= 0)
        if ((off < 0) || (off > b.size) || (end < 0) || (end > b.size)) {
            throw IndexOutOfBoundsException()
        }

        var start = off
        var i = off
        while (i < end) {
            when (b[i]) {
                LF -> {
                    if (!lastCR) {
                        consumer.invoke(buffer.toString(b, start, i))
                    }
                    start = i + 1
                    lastCR = false
                }
                CR -> {
                    consumer.invoke(buffer.toString(b, start, i))
                    start = i + 1
                    lastCR = true
                }
                else -> {
                    lastCR = false
                }
            }
            i++
        }
        buffer.append(b, start, end)
    }

    override fun close() {
        if (buffer.size > 0) {
            consumer.invoke(buffer.toString())
        }
    }
}","java.lang.IllegalArgumentException: Unsupported condition type.
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitWhenBranch(KotlinParserVisitor.java:2798)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.java:3800)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitWhenExpression(KotlinParserVisitor.java:2904)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.java:3802)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitBlock(KotlinParserVisitor.java:644)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitBlock(KotlinParserVisitor.java:569)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.java:3710)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convert(KotlinParserVisitor.java:4319)
  ..."
github.com,"SgtSilvio/gradle-proguard",master,KotlinParser,"src/main/java/com/github/sgtsilvio/gradle/proguard/ProguardTask.kt","UnsupportedOperationException","org.jetbrains.kotlin.KtRealSourceElementKind@40520490","/**
 * Gradle task type to define ProGuard tasks.
 *
 * This implementation differs from the official ProGuard gradle plugin in the following points:
 *  - ProGuard and the Gradle daemon are decoupled:
 *    - How: Runs ProGuard in a separate process (via the command line interface) instead of in the Gradle daemon
 *    - Why: ProGuard tends to use a lot of memory which can expire the daemon or even require increasing its heap.
 *  - ProGuard's and this plugin's version are decoupled:
 *    - How: The Proguard base dependency is added to the `proguardClasspath` configuration and can be customized.
 *      Additionally, only the ProGuard configuration parameters that deal with files are modelled as Gradle input and
 *      output properties, because these are the only ones necessary for up-to-date checks and caching.
 *      All other (maybe ProGuard version specific) configurations can be passed as string arguments via [rules].
 *    - Why: Using a bug fix in either ProGuard or this plugin should not need an update of the other tool.
 *  - Gradle compatibility:
 *    - How: Using proper input and output annotations with path sensitivity to benefit from the build cache regardless
 *      of where the project is located.
 *    - Why: Taking full advantages of Gradle and being future-proof.
 *  - This plugin is completely Android agnostic
 *    - How: No dependency on any Android artifacts.
 *    - Why: ProGuard can be used for any JVM program.
 *
 * @author Silvio Giebl
 */
@CacheableTask
abstract class ProguardTask : JavaExec() {

    /**
     * Passed as groups of multiple `-injars` and multiple `-outjars` arguments each to ProGuard.
     */
    @get:Nested
    val inputOutputGroups = mutableListOf<InputOutputGroup>()

    inner class InputOutputGroup {
        /**
         * Passed as multiple `-injars` arguments to ProGuard.
         */
        @get:Nested
        val inputs = mutableListOf<InputEntry>()

        /**
         * Passed as multiple `-outjars` arguments to ProGuard.
         */
        @get:Nested
        val outputs = mutableListOf<OutputEntry>()

        /**
         * Adds a new input entry to this group of inputs and outputs and configures it.
         */
        fun addInput(action: Action<in InputEntry>) {
            val input = InputEntry()
            inputs.add(input)
            action.execute(input)
        }

        /**
         * Adds a new output entry to this group of inputs and outputs and configures it.
         */
        fun addOutput(action: Action<in OutputEntry>) {
            val output = OutputEntry()
            outputs.add(output)
            action.execute(output)
        }
    }

    inner class InputEntry {
        /**
         * Can contain archive files and/or directories.
         */
        @get:Classpath
        val classpath: ConfigurableFileCollection = objectFactory.fileCollection()

        /**
         * Glob style filters for the files in [InputEntry.classpath].
         */
        @get:Input
        val filter: Property<String> = objectFactory.property<String>().convention("""")
    }

    inner class OutputEntry {
        /**
         * Mutually exclusive with [directory], exactly one must be set.
         */
        @get:Optional
        @get:OutputFile
        val archiveFile: RegularFileProperty = objectFactory.fileProperty().builtBy(this@ProguardTask)

        /**
         * Mutually exclusive with [archiveFile], exactly one must be set.
         */
        @get:Optional
        @get:OutputDirectory
        val directory: DirectoryProperty = objectFactory.directoryProperty().builtBy(this@ProguardTask)

        @get:Internal
        internal val archiveFileOrDirectory: Provider<FileSystemLocation>
            get() = archiveFile.map<FileSystemLocation> { it }.orElse(directory)

        /**
         * Glob style filters for the files in [archiveFile] or [directory].
         */
        @get:Input
        val filter: Property<String> = objectFactory.property<String>().convention("""")
    }

    /**
     * Passed as `-libraryjars` arguments to ProGuard.
     */
    @get:Nested
    val libraries = mutableListOf<LibraryEntry>()

    inner class LibraryEntry {
        /**
         * Can contain archive files and/or directories.
         */
        @get:Classpath
        val classpath: ConfigurableFileCollection = objectFactory.fileCollection()

        /**
         * Glob style filters for the files in [LibraryEntry.classpath].
         */
        @get:Input
        val filter: Property<String> = objectFactory.property<String>().convention("""")
    }

    /**
     * Flattened collection of all input archive files and/or directories.
     */
    @get:Internal
    val inputClasspath: FileCollection
        get() = objectFactory.fileCollection().from({ inputOutputGroups.flatMap { it.inputs }.map { it.classpath } })

    /**
     * Flattened collection of all output archive files and/or directories.
     */
    @get:Internal
    val outputClasspath: FileCollection
        get() = objectFactory.fileCollection()
            .from({ inputOutputGroups.flatMap { it.outputs }.map { it.archiveFileOrDirectory } })

    /**
     * Flattened collection of all library archive files and/or directories.
     */
    @get:Internal
    val libraryClasspath: FileCollection get() = objectFactory.fileCollection().from({ libraries.map { it.classpath } })

    /**
     * Collection of rules files passed as `-include` arguments to ProGuard.
     *
     * The rules files must not contain file configuration parameters; these are declared here as inputs and outputs.
     */
    @get:InputFiles
    @get:PathSensitive(PathSensitivity.NONE)
    val rulesFiles: ConfigurableFileCollection = objectFactory.fileCollection()

    /**
     * List of rules directly specified in the Gradle configuration passed 1-to-1 to ProGuard.
     *
     * The rules must not contain file configuration parameters; these are declared here as inputs and outputs.
     */
    @get:Input
    val rules = objectFactory.listProperty<String>()

    /**
     * Passed as `-applymapping` argument to ProGuard.
     */
    @get:Optional
    @get:InputFile
    @get:PathSensitive(PathSensitivity.NONE)
    val mappingInputFile: RegularFileProperty = objectFactory.fileProperty()

    /**
     * Passed as `-obfuscationdictionary` argument to ProGuard.
     */
    @get:Optional
    @get:InputFile
    @get:PathSensitive(PathSensitivity.NONE)
    val obfuscationDictionary: RegularFileProperty = objectFactory.fileProperty()

    /**
     * Passed as `-classobfuscationdictionary` argument to ProGuard.
     */
    @get:Optional
    @get:InputFile
    @get:PathSensitive(PathSensitivity.NONE)
    val classObfuscationDictionary: RegularFileProperty = objectFactory.fileProperty()

    /**
     * Passed as `-packageobfuscationdictionary` argument to ProGuard.
     */
    @get:Optional
    @get:InputFile
    @get:PathSensitive(PathSensitivity.NONE)
    val packageObfuscationDictionary: RegularFileProperty = objectFactory.fileProperty()

    /**
     * Passed as `-printconfiguration` argument to ProGuard.
     */
    @get:Optional
    @get:OutputFile
    val configurationFile: RegularFileProperty = objectFactory.fileProperty()

    /**
     * Passed as `-printmapping` argument to ProGuard.
     */
    @get:Optional
    @get:OutputFile
    val mappingFile: RegularFileProperty = objectFactory.fileProperty()

    /**
     * Passed as `-printseeds` argument to ProGuard.
     */
    @get:Optional
    @get:OutputFile
    val seedsFile: RegularFileProperty = objectFactory.fileProperty()

    /**
     * Passed as `-printusage` argument to ProGuard.
     */
    @get:Optional
    @get:OutputFile
    val usageFile: RegularFileProperty = objectFactory.fileProperty()

    /**
     * Passed as `-dump` argument to ProGuard.
     */
    @get:Optional
    @get:OutputFile
    val dumpFile: RegularFileProperty = objectFactory.fileProperty()

    /**
     * Passed as `-libraryjars` arguments to ProGuard.
     */
    @get:Input
    val jdkModules = objectFactory.listProperty<String>()

    init {
        classpath = project.configurations[ProguardPlugin.CONFIGURATION_NAME]
        mainClass.set(""proguard.ProGuard"")
        argumentProviders += ArgumentProvider()
        addInputOutputGroup {}
    }

    /**
     * Adds a new input entry to the first group of inputs and outputs and configures it.
     */
    fun addInput(action: Action<in InputEntry>) = inputOutputGroups[0].addInput(action)

    /**
     * Adds a new output entry to the first group of inputs and outputs and configures it.
     */
    fun addOutput(action: Action<in OutputEntry>) = inputOutputGroups[0].addOutput(action)

    /**
     * Adds a new group of inputs and outputs and configures it.
     */
    fun addInputOutputGroup(action: Action<in InputOutputGroup>) {
        val inputOutputGroup = InputOutputGroup()
        inputOutputGroups.add(inputOutputGroup)
        action.execute(inputOutputGroup)
    }

    /**
     * Adds a new library entry and configures it.
     */
    fun addLibrary(action: Action<in LibraryEntry>) {
        val library = LibraryEntry()
        libraries.add(library)
        action.execute(library)
    }

    @get:Internal
    @get:Deprecated(
        ""Renamed to reflect that it can contain archive files and/or directories."", ReplaceWith(""inputClasspath"")
    )
    val inJars get() = inputClasspath

    @get:Internal
    @get:Deprecated(
        ""Renamed to reflect that it can contain archive files and/or directories."", ReplaceWith(""outputClasspath"")
    )
    val outJars get() = outputClasspath

    @get:Internal
    @get:Deprecated(
        ""Renamed to reflect that it can contain archive files and/or directories."", ReplaceWith(""libraryClasspath"")
    )
    val libraryJars get() = libraryClasspath

    /**
     * Adds input jars with an optional filter.
     *
     * The order in which the [inJars] and [outJars] methods are called defines the order of the `-injars` and
     * `-outjars` arguments.
     */
    @Deprecated(
        ""Inputs and outputs have been refactored to be modifiable whereas this method was add-only."",
        ReplaceWith(""addInput { classpath.from(files)\nthis.filter.set(filter) }"")
    )
    fun inJars(files: Any, filter: String = """") {
        if (inputOutputGroups.last().outputs.isNotEmpty()) {
            addInputOutputGroup {}
        }
        inputOutputGroups.last().addInput {
            classpath.from(files)
            this.filter.set(filter)
        }
    }

    /**
     * Adds an output jar with an optional filter.
     *
     * The order in which the [inJars] and [outJars] methods are called defines the order of the `-injars` and
     * `-outjars` arguments.
     */
    @Deprecated(
        ""Inputs and outputs have been refactored to be modifiable whereas this method was add-only."",
        ReplaceWith(""addOutput { archiveFile.set(file)\nthis.filter.set(filter) }"")
    )
    fun outJars(file: Any, filter: String = """") {
        inputOutputGroups.last().addOutput {
            archiveFile.set(project.layout.file(project.files(file).elements.map { it.first().asFile }))
            this.filter.set(filter)
        }
    }

    /**
     * Adds library jars with an optional filter.
     */
    @Deprecated(
        ""Inputs and outputs have been refactored to be modifiable whereas this method was add-only."",
        ReplaceWith(""addLibrary { classpath.from(files)\nthis.filter.set(filter) }"")
    )
    fun libraryJars(files: Any, filter: String = """") {
        addLibrary {
            classpath.from(files)
            this.filter.set(filter)
        }
    }

    override fun exec() {
        standardOutput = LineOutputStream { logger.info(it) }
        errorOutput = LineOutputStream { logger.error(it) }
        super.exec()
    }

    private inner class ArgumentProvider : CommandLineArgumentProvider {
        override fun asArguments(): Iterable<String> {
            val arguments = mutableListOf<String>()

            fun addJarArgument(type: String, file: File, filter: String) {
                arguments.add(""-${type}jars"")
                arguments.add(""'${file.absolutePath}'"" + if (filter.isEmpty()) """" else ""($filter)"")
            }

            fun addFileArgument(option: String, file: File) {
                arguments.add(option)
                arguments.add(""'${file.absolutePath}'"")
            }

            fun addFileArgument(option: String, fileProvider: Provider<RegularFile>) {
                if (fileProvider.isPresent) {
                    addFileArgument(option, fileProvider.get().asFile)
                }
            }

            for ((groupIndex, inputOutputGroup) in inputOutputGroups.withIndex()) {
                var inJarsAdded = false
                for (input in inputOutputGroup.inputs) {
                    val filter = input.filter.get()
                    for (file in input.classpath.files) {
                        addJarArgument(""in"", file, filter)
                        inJarsAdded = true
                    }
                }
                if (!inJarsAdded) {
                    throw GradleException(""inputOutputGroups.\$$groupIndex.inputs classpath did not contain any files."")
                }
                if (inputOutputGroup.outputs.isEmpty() && (inputOutputGroups.size > 1)) {
                    throw GradleException(""inputOutputGroups.\$$groupIndex.outputs are empty although multiple inputOutputGroups are configured."")
                }
                for ((outputIndex, output) in inputOutputGroup.outputs.withIndex()) {
                    val archiveFile = output.archiveFile.orNull
                    val directory = output.directory.orNull
                    val filter = output.filter.get()
                    if ((archiveFile != null) && (directory != null)) {
                        throw GradleException(""In inputOutputGroups.\$$groupIndex.outputs.\$$outputIndex both archiveFile and directory have a configured value."")
                    } else if (archiveFile != null) {
                        addJarArgument(""out"", archiveFile.asFile, filter)
                    } else if (directory != null) {
                        addJarArgument(""out"", directory.asFile, filter)
                    } else {
                        throw GradleException(""In inputOutputGroups.\$$groupIndex.outputs.\$$outputIndex neither archiveFile nor directory have a configured value."")
                    }
                }
            }
            for (library in libraries) {
                val filter = library.filter.get()
                for (file in library.classpath.files) {
                    addJarArgument(""library"", file, filter)
                }
            }
            val jdkModules = jdkModules.get()
            if (jdkModules.isNotEmpty()) {
                val dir = javaLauncher.get().metadata.installationPath.dir(""jmods"")
                for (jdkModule in jdkModules) {
                    addJarArgument(""library"", dir.file(""$jdkModule.jmod"").asFile, ""!**.jar;!module-info.class"")
                }
            }
            addFileArgument(""-applymapping"", mappingInputFile)
            addFileArgument(""-obfuscationdictionary"", obfuscationDictionary)
            addFileArgument(""-classobfuscationdictionary"", classObfuscationDictionary)
            addFileArgument(""-packageobfuscationdictionary"", packageObfuscationDictionary)
            addFileArgument(""-printconfiguration"", configurationFile)
            addFileArgument(""-printmapping"", mappingFile)
            addFileArgument(""-printseeds"", seedsFile)
            addFileArgument(""-printusage"", usageFile)
            addFileArgument(""-dump"", dumpFile)
            for (rulesFile in rulesFiles) {
                addFileArgument(""-include"", rulesFile)
            }
            for (rule in rules.get()) {
                arguments.add(rule)
            }
            arguments.add(""-forceprocessing"")
            return arguments
        }
    }
}","java.lang.UnsupportedOperationException: Unsupported binary operator type.
  org.openrewrite.kotlin.internal.KotlinParserVisitor.mapBinaryOperation(KotlinParserVisitor.java:1397)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitFunctionCall(KotlinParserVisitor.java:920)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.java:3740)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitBlock(KotlinParserVisitor.java:644)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitBlock(KotlinParserVisitor.java:569)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.java:3710)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitAnonymousInitializer(KotlinParserVisitor.java:389)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.java:3817)
  ..."
github.com,joskar201/kotlin-neo4j,master,KotlinParser,"src/main/kotlin/github/etx/neo4j/DefaultNeoSerializer.kt","UnsupportedOperationException","org.jetbrains.kotlin.KtRealSourceElementKind@1149ece","class DefaultNeoSerializer : INeoSerializer {
    override fun serialize(parameters: Map<String, Any?>): Map<String, Any?> {
        return parameters.mapValues {
            val value = it.value
            return@mapValues when (value) {
                is Collection<*> -> transform(value)
                is Map<*, *> -> serialize(value.mapKeys { it.key.toString() })
                else -> toNeo4jType(value)
            }
        }
    }

    private fun toNeo4jType(value: Any?): Any? {
        return when (value) {
            null -> null
            is OffsetTime -> serializeTime(value)
            is OffsetDateTime -> serializeTime(value)
            is ZonedDateTime -> serializeTime(value)
            is Instant -> serializeTime(value)
            is Enum<*> -> value.name
            else -> value
        }
    }

    private fun transform(list: Collection<*>): Collection<Any?> {
        return list.map { value ->
            return@map when (value) {
                is Collection<*> -> transform(value)
                is Map<*, *> -> serialize(value.mapKeys { it.key.toString() })
                else -> toNeo4jType(value)
            }
        }
    }


    private fun serializeTime(time: OffsetTime): String {
        return time.format(DateTimeFormatter.ISO_OFFSET_TIME)
    }

    private fun serializeTime(time: OffsetDateTime): String {
        return time.format(DateTimeFormatter.ISO_OFFSET_DATE_TIME)
    }

    private fun serializeTime(time: ZonedDateTime): String {
        return time.format(DateTimeFormatter.ISO_OFFSET_DATE_TIME)
    }

    private fun serializeTime(time: Instant): String {
        return time.toString()
    }

}","java.lang.UnsupportedOperationException: FirWhenSubjectExpression is not supported at cursor: is OffsetTime -> serializeTimein file: /home/ubuntu/jenkins-agent/workspace/cli-ingest/joskar201_kotlin-neo4j_master/src/main/kotlin/github/etx/neo4j/DefaultNeoSerializer.kt
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitWhenSubjectExpression(KotlinParserVisitor.kt:4261)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4419)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitTypeOperatorCall(KotlinParserVisitor.kt:2751)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4409)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitWhenExpression(KotlinParserVisitor.kt:3281)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4418)
  ..."
github.com,joskar201/kotlin-neo4j,master,KotlinParser,"src/test/kotlin/github/etx/neo4j/DefaultNeoSerializerTest.kt",AssertionError,,,"java.lang.AssertionError: null
  org.openrewrite.java.tree.TypeTree.build(TypeTree.java:95)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitResolvedQualifier(KotlinParserVisitor.kt:2358)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4398)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitPropertyAccessExpression(KotlinParserVisitor.kt:2067)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4392)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.mapFunctionCall(KotlinParserVisitor.kt:1149)
  ..."
github.com,"rodm/gradle-teamcity-plugin",main,GroovyParser,"src/functional/groovy/com/github/rodm/teamcity/MultipleProjectPluginFunctionalTest.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/functional/groovy/com/github/rodm/teamcity/MultipleProjectPluginFunctionalTest.groovy, cursor position likely inaccurate.
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:163)"
github.com,"rodm/gradle-teamcity-plugin",main,GroovyParser,"src/functional/groovy/com/github/rodm/teamcity/AgentAndServerPluginFunctionalTest.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/functional/groovy/com/github/rodm/teamcity/AgentAndServerPluginFunctionalTest.groovy at cursor position 4813. The next 10 characters in the original source are `)

       `
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"rodm/gradle-teamcity-plugin",main,GroovyParser,"src/functional/groovy/com/github/rodm/teamcity/TestSupport.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/functional/groovy/com/github/rodm/teamcity/TestSupport.groovy at cursor position 1381. The next 10 characters in the original source are `forwardOut`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"rodm/gradle-teamcity-plugin",main,GroovyParser,"src/functional/groovy/com/github/rodm/teamcity/AgentPluginFunctionalTest.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/functional/groovy/com/github/rodm/teamcity/AgentPluginFunctionalTest.groovy at cursor position 3640. The next 10 characters in the original source are `l String N`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"rodm/gradle-teamcity-plugin",main,GroovyParser,"src/functional/groovy/com/github/rodm/teamcity/MultipleGradleVersionTest.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/functional/groovy/com/github/rodm/teamcity/MultipleGradleVersionTest.groovy at cursor position 1622. The next 10 characters in the original source are `rnings('un`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"rodm/gradle-teamcity-plugin",main,GroovyParser,"src/functional/groovy/com/github/rodm/teamcity/EnvironmentsPluginFunctionalTest.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/functional/groovy/com/github/rodm/teamcity/EnvironmentsPluginFunctionalTest.groovy at cursor position 14797. The next 10 characters in the original source are `createDire`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"rodm/gradle-teamcity-plugin",main,GroovyParser,"src/functional/groovy/com/github/rodm/teamcity/ServerPluginFunctionalTest.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/functional/groovy/com/github/rodm/teamcity/ServerPluginFunctionalTest.groovy at cursor position 3870. The next 10 characters in the original source are `l String N`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"rodm/gradle-teamcity-plugin",main,GroovyParser,"src/functional/groovy/com/github/rodm/teamcity/FunctionalTestCase.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/functional/groovy/com/github/rodm/teamcity/FunctionalTestCase.groovy at cursor position 1979. The next 10 characters in the original source are `agentEntri`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"rodm/gradle-teamcity-plugin",main,GroovyParser,"src/samples/groovy/com/github/rodm/teamcity/SamplesTest.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/samples/groovy/com/github/rodm/teamcity/SamplesTest.groovy at cursor position 1251. The next 10 characters in the original source are `SamplesTes`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"rodm/gradle-teamcity-plugin",main,KotlinParser,"src/test/kotlin/com/github/rodm/teamcity/EnvironmentsKotlinTest.kt",AssertionError,,,"java.lang.AssertionError: null
  org.openrewrite.java.tree.TypeTree.build(TypeTree.java:95)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitResolvedQualifier(KotlinParserVisitor.kt:2358)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4398)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.mapFunctionCall(KotlinParserVisitor.kt:1116)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitFunctionCall(KotlinParserVisitor.kt:1026)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4385)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitBlock(KotlinParserVisitor.kt:766)
  ..."
github.com,"rodm/gradle-teamcity-plugin",main,GroovyParser,"src/test/groovy/com/github/rodm/teamcity/TeamCityBasePluginTest.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/com/github/rodm/teamcity/TeamCityBasePluginTest.groovy at cursor position 6732. The next 10 characters in the original source are `hotVersion`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"rodm/gradle-teamcity-plugin",main,GroovyParser,"src/test/groovy/com/github/rodm/teamcity/ValidateDefinitionActionTest.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/com/github/rodm/teamcity/ValidateDefinitionActionTest.groovy at cursor position 3805. The next 10 characters in the original source are `ic final S`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"rodm/gradle-teamcity-plugin",main,GroovyParser,"src/test/groovy/com/github/rodm/teamcity/TeamCityVersionTest.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/com/github/rodm/teamcity/TeamCityVersionTest.groovy at cursor position 5996. The next 10 characters in the original source are `dataVersio`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"rodm/gradle-teamcity-plugin",main,GroovyParser,"src/test/groovy/com/github/rodm/teamcity/ServerConfigurationTest.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/com/github/rodm/teamcity/ServerConfigurationTest.groovy at cursor position 23785. The next 10 characters in the original source are `private vo`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"rodm/gradle-teamcity-plugin",main,GroovyParser,"src/test/groovy/com/github/rodm/teamcity/TestSupport.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/com/github/rodm/teamcity/TestSupport.groovy at cursor position 1610. The next 10 characters in the original source are `it.name }
`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"rodm/gradle-teamcity-plugin",main,GroovyParser,"src/test/groovy/com/github/rodm/teamcity/ValidateDescriptorSchemaActionTest.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/com/github/rodm/teamcity/ValidateDescriptorSchemaActionTest.groovy, cursor position likely inaccurate.
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:163)"
github.com,"rodm/gradle-teamcity-plugin",main,GroovyParser,"src/test/groovy/com/github/rodm/teamcity/DockerOperationsTest.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/com/github/rodm/teamcity/DockerOperationsTest.groovy at cursor position 6378. The next 10 characters in the original source are `}
`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"rodm/gradle-teamcity-plugin",main,GroovyParser,"src/test/groovy/com/github/rodm/teamcity/ValidateDescriptorActionTest.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/com/github/rodm/teamcity/ValidateDescriptorActionTest.groovy at cursor position 1564. The next 10 characters in the original source are `inal Reset`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"rodm/gradle-teamcity-plugin",main,GroovyParser,"src/test/groovy/com/github/rodm/teamcity/ValidateDefinitionActionOfflineTest.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/com/github/rodm/teamcity/ValidateDefinitionActionOfflineTest.groovy at cursor position 3679. The next 10 characters in the original source are `tubTask.in`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"rodm/gradle-teamcity-plugin",main,GroovyParser,"src/test/groovy/com/github/rodm/teamcity/GradleMatchers.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/com/github/rodm/teamcity/GradleMatchers.groovy at cursor position 1592. The next 10 characters in the original source are `static Mat`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"rodm/gradle-teamcity-plugin",main,GroovyParser,"src/test/groovy/com/github/rodm/teamcity/ValidateExecutableFileActionTest.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/com/github/rodm/teamcity/ValidateExecutableFileActionTest.groovy, cursor position likely inaccurate.
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:163)"
github.com,"rodm/gradle-teamcity-plugin",main,GroovyParser,"src/test/groovy/com/github/rodm/teamcity/AgentServerConfigurationTest.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/com/github/rodm/teamcity/AgentServerConfigurationTest.groovy, cursor position likely inaccurate.
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:163)"
github.com,"rodm/gradle-teamcity-plugin",main,GroovyParser,"src/test/groovy/com/github/rodm/teamcity/EnvironmentsTest.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/com/github/rodm/teamcity/EnvironmentsTest.groovy at cursor position 4573. The next 10 characters in the original source are `
    }

  `
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"rodm/gradle-teamcity-plugin",main,GroovyParser,"samples/groovy/agent-tool-plugin/build.gradle",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse samples/groovy/agent-tool-plugin/build.gradle at cursor position 1889. The next 10 characters in the original source are `'teamcity2`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"rodm/gradle-teamcity-plugin",main,GroovyParser,"samples/groovy/agent-server-plugin/build.gradle",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse samples/groovy/agent-server-plugin/build.gradle at cursor position 997. The next 10 characters in the original source are `'teamcity2`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"rodm/gradle-teamcity-plugin",main,GroovyParser,"samples/groovy/sakura-ui-plugin/build.gradle",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse samples/groovy/sakura-ui-plugin/build.gradle at cursor position 1957. The next 10 characters in the original source are `'teamcity2`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"rodm/gradle-teamcity-plugin",main,GroovyParser,"samples/groovy/multiple-plugins/build.gradle",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse samples/groovy/multiple-plugins/build.gradle at cursor position 888. The next 10 characters in the original source are `'teamcity2`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"rodm/gradle-teamcity-plugin",main,GroovyParser,"samples/groovy/server-plugin/build.gradle",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse samples/groovy/server-plugin/build.gradle at cursor position 1340. The next 10 characters in the original source are `'teamcity2`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"rodm/gradle-teamcity-plugin",main,GroovyParser,"samples/groovy/reloadable-plugin/build.gradle",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse samples/groovy/reloadable-plugin/build.gradle at cursor position 1284. The next 10 characters in the original source are `'teamcity2`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"rodm/gradle-teamcity-plugin",main,GroovyParser,"samples/groovy/multi-project-plugin/server/build.gradle",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse samples/groovy/multi-project-plugin/server/build.gradle at cursor position 1122. The next 10 characters in the original source are `'teamcity2`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"rodm/gradle-teamcity-plugin",main,GroovyParser,"samples/groovy/docker-environment/build.gradle",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse samples/groovy/docker-environment/build.gradle at cursor position 401. The next 10 characters in the original source are `'teamcity2`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"openrewrite/rewrite-recipe-markdown-generator",main,KotlinParser,"src/main/kotlin/org/openrewrite/MarkdownRecipeDescriptor.kt",IllegalStateException,,,"java.lang.IllegalStateException: src/main/kotlin/org/openrewrite/MarkdownRecipeDescriptor.kt is not print idempotent.
  org.openrewrite.Parser.requirePrintEqualsInput(Parser.java:51)"
github.com,"openrewrite/rewrite-recipe-markdown-generator",main,KotlinParser,"src/main/kotlin/org/openrewrite/MarkdownRecipeArtifact.kt",IllegalStateException,,,"java.lang.IllegalStateException: src/main/kotlin/org/openrewrite/MarkdownRecipeArtifact.kt is not print idempotent.
  org.openrewrite.Parser.requirePrintEqualsInput(Parser.java:51)"
github.com,"openrewrite/rewrite-recipe-markdown-generator",main,KotlinParser,"src/main/kotlin/org/openrewrite/ChangedRecipe.kt",IllegalStateException,,,"java.lang.IllegalStateException: src/main/kotlin/org/openrewrite/ChangedRecipe.kt is not print idempotent.
  org.openrewrite.Parser.requirePrintEqualsInput(Parser.java:51)"
github.com,"openrewrite/rewrite-recipe-markdown-generator",main,KotlinParser,"src/main/kotlin/org/openrewrite/RecipeOrigin.kt",IllegalStateException,,,"java.lang.IllegalStateException: src/main/kotlin/org/openrewrite/RecipeOrigin.kt is not print idempotent.
  org.openrewrite.Parser.requirePrintEqualsInput(Parser.java:51)"
github.com,"openrewrite/rewrite-recipe-markdown-generator",main,KotlinParser,"src/main/kotlin/org/openrewrite/RecipeMarkdownGenerator.kt",ClassCastException,"org.jetbrains.kotlin.KtRealSourceElementKind@5761d3db","@Command(
    name = ""rewrite-recipe-markdown-generator"",
    mixinStandardHelpOptions = true,
    description = [""Generates documentation for OpenRewrite recipes in markdown format""],
    version = [""1.0.0-SNAPSHOT""]
)
class RecipeMarkdownGenerator : Runnable {
    @Parameters(index = ""0"", description = [""Destination directory for generated recipe markdown""])
    lateinit var destinationDirectoryName: String

    @Parameters(
        index = ""1"", defaultValue = """", description = [""A ';' delineated list of coordinates to search for recipes. "" +
                ""Each entry in the list must be of format groupId:artifactId:version:path where 'path' is a file path to the jar""]
    )
    lateinit var recipeSources: String

    @Parameters(
        index = ""2"", defaultValue = """", description = [""A ';' delineated list of jars that provide the full "" +
                ""transitive dependency list for the recipeSources""]
    )
    lateinit var recipeClasspath: String

    @Parameters(
        index = ""3"",
        defaultValue = ""latest.release"",
        description = [""The version of the Rewrite Gradle Plugin to display in relevant samples""]
    )
    lateinit var gradlePluginVersion: String

    @Parameters(
        index = ""4"",
        defaultValue = """",
        description = [""The version of the Rewrite Maven Plugin to display in relevant samples""]
    )
    lateinit var mavenPluginVersion: String

    @Parameters(
        index = ""5"",
        defaultValue = ""release"",
        description = [""The type of deploy being done (either release or snapshot)""]
    )
    lateinit var deployType: String

    @Parameters(
        index = ""6"",
        defaultValue = ""renameMe"",
        description = [""The name of the diff file to be generated when making a diff log""]
    )
    lateinit var diffFileName: String

    override fun run() {
        val outputPath = Paths.get(destinationDirectoryName)
        val recipesPath = outputPath.resolve(""reference/recipes"")
        try {
            Files.createDirectories(recipesPath)
        } catch (e: IOException) {
            throw RuntimeException(e)
        }

        val env: Environment
        val recipeOrigins: Map<URI, RecipeOrigin>

        // Load recipe details into memory
        if (recipeSources.isNotEmpty() && recipeClasspath.isNotEmpty()) {
            recipeOrigins = RecipeOrigin.parse(recipeSources)

            val classloader = recipeClasspath.split("";"")
                .map(Paths::get)
                .map(Path::toUri)
                .map(URI::toURL)
                .toTypedArray()
                .let { URLClassLoader(it) }

            val dependencies: MutableCollection<Path> = mutableListOf()
            recipeClasspath.split("";"")
                .map(Paths::get)
                .toCollection(dependencies)

            val envBuilder = Environment.builder()
            for (recipeOrigin in recipeOrigins) {
                // If you are running this with an old version of Rewrite (for diff log purposes), you'll need
                // to update the below line to look like this instead:
                // envBuilder.scanJar(recipeOrigin.key.toPath(), classloader)
                envBuilder.scanJar(recipeOrigin.key.toPath(), dependencies, classloader)
            }
            env = envBuilder.build()
        } else {
            recipeOrigins = emptyMap()
            env = Environment.builder()
                .scanRuntimeClasspath()
                .build()
        }

        // Recipes fully loaded into recipeDescriptors
        val recipeDescriptors: Collection<RecipeDescriptor> = env.listRecipeDescriptors()
        val categoryDescriptors = ArrayList(env.listCategoryDescriptors())
        val markdownArtifacts = TreeMap<String, MarkdownRecipeArtifact>()

        // Create the recipe docs
        for (recipeDescriptor in recipeDescriptors) {
            var origin: RecipeOrigin?
            var rawUri = recipeDescriptor.source.toString()
            val exclamationIndex = rawUri.indexOf('!')
            if (exclamationIndex == -1) {
                origin = recipeOrigins[recipeDescriptor.source]
            } else {
                // The recipe origin includes the path to the recipe within a jar
                // Such URIs will look something like: jar:file:/path/to/the/recipes.jar!META-INF/rewrite/some-declarative.yml
                // Strip the ""jar:"" prefix and the part of the URI pointing inside the jar
                rawUri = rawUri.substring(0, exclamationIndex)
                rawUri = rawUri.substring(4)
                val jarOnlyUri = URI.create(rawUri)
                origin = recipeOrigins[jarOnlyUri]
            }
            requireNotNull(origin) { ""Could not find GAV coordinates of recipe "" + recipeDescriptor.name + "" from "" + recipeDescriptor.source }
            writeRecipe(recipeDescriptor, recipesPath, origin, gradlePluginVersion, mavenPluginVersion)

            val recipeOptions = TreeSet<RecipeOption>()
            for (recipeOption in recipeDescriptor.options) {
                val name = recipeOption.name as String
                val ro = RecipeOption(name, recipeOption.type, recipeOption.isRequired)
                recipeOptions.add(ro)
            }

            var recipeDescription = recipeDescriptor.description
            if (recipeDescriptor.description.isNullOrEmpty()) {
                recipeDescription = """"
            }

            val docBaseUrl = ""https://docs.openrewrite.org/reference/recipes/""

            // Changes something like org.openrewrite.circleci.InstallOrb to https://docs.openrewrite.org/reference/recipes/circleci/installorb
            val docLink =
                docBaseUrl + recipeDescriptor.name.lowercase(Locale.getDefault()).removePrefix(""org.openrewrite."")
                    .replace('.', '/')

            val recipeSource = recipeDescriptor.source.toString()
            var isImperative = true

            // YAML recipes will have a source that ends with META-INF/rewrite/something.yml
            // Used to help with time spent calculations. Imperative = 12 hours, Declarative = 4 hours
            if (recipeSource.substring(recipeSource.length - 3) == ""yml"") {
                isImperative = false
            }

            // Used to create changelogs
            val markdownRecipeDescriptor =
                MarkdownRecipeDescriptor(
                    recipeDescriptor.name,
                    recipeDescription,
                    docLink,
                    recipeOptions,
                    isImperative,
                    origin.artifactId
                )
            val markdownArtifact = markdownArtifacts.computeIfAbsent(origin.artifactId) {
                MarkdownRecipeArtifact(
                    origin.artifactId,
                    origin.version,
                    TreeMap<String, MarkdownRecipeDescriptor>()
                )
            }
            markdownArtifact.markdownRecipeDescriptors[recipeDescriptor.name] = markdownRecipeDescriptor
        }

        val mapper = ObjectMapper(YAMLFactory().disable(YAMLGenerator.Feature.WRITE_DOC_START_MARKER))
        mapper.registerKotlinModule()

        // Location of the recipe metadata from previous runs
        var recipeDescriptorFile = ""src/main/resources/recipeDescriptors.yml""
        if (deployType == ""snapshot"") {
            recipeDescriptorFile = ""src/main/resources/snapshotRecipeDescriptors.yml""
        } else if (deployType == ""diff"") {
            recipeDescriptorFile = ""src/main/resources/diffRecipeDescriptors.yml""
        }

        // Read in the old saved recipes for comparison with the latest release
        val oldArtifacts: TreeMap<String, MarkdownRecipeArtifact> =
            mapper.readValue(Path.of(recipeDescriptorFile).toFile())

        // Build up all the information to make a changelog
        val newArtifacts = getNewArtifacts(markdownArtifacts, oldArtifacts)
        val removedArtifacts = getRemovedArtifacts(markdownArtifacts, oldArtifacts)
        val newRecipes = TreeSet<MarkdownRecipeDescriptor>()
        val removedRecipes = TreeSet<MarkdownRecipeDescriptor>()

        getNewAndRemovedRecipes(markdownArtifacts, oldArtifacts, newRecipes, removedRecipes)

        val changedRecipes = getChangedRecipes(markdownArtifacts, oldArtifacts, newRecipes, removedRecipes)

        if (deployType == ""diff"") {
            buildDiffLog(newRecipes)
        } else {
            // Create the changelog itself if there are any changes
            if (newArtifacts.isNotEmpty() ||
                removedArtifacts.isNotEmpty() ||
                newRecipes.isNotEmpty() ||
                removedRecipes.isNotEmpty() ||
                changedRecipes.isNotEmpty()
            ) {
                buildChangelog(newArtifacts, removedArtifacts, newRecipes, removedRecipes, changedRecipes, deployType)
            }
        }

        // Now that we've compared the versions and built the changelog,
        // write the latest recipe information to a file for next time
        mapper.writeValue(File(recipeDescriptorFile), markdownArtifacts)

        val categories = Category.fromDescriptors(recipeDescriptors, categoryDescriptors)

        // Write SUMMARY_snippet.md
        val summarySnippetPath = outputPath.resolve(""SUMMARY_snippet.md"")
        Files.newBufferedWriter(summarySnippetPath, StandardOpenOption.CREATE).useAndApply {
            for (category in categories) {
                write(category.summarySnippet(0))
            }
        }

        // Write the README.md for each category
        for (category in categories) {
            val categoryIndexPath = outputPath.resolve(""reference/recipes/"")
            category.writeCategoryIndex(categoryIndexPath)
        }
    }

    private fun getNewArtifacts(
        markdownArtifacts: TreeMap<String, MarkdownRecipeArtifact>,
        oldArtifacts: TreeMap<String, MarkdownRecipeArtifact>,
    ): TreeSet<String> {
        val newArtifacts = TreeSet<String>()

        for (artifactId in markdownArtifacts.keys) {
            if (!oldArtifacts.containsKey(artifactId)) {
                newArtifacts.add(artifactId)
            }
        }

        return newArtifacts
    }

    private fun getRemovedArtifacts(
        markdownArtifacts: TreeMap<String, MarkdownRecipeArtifact>,
        oldArtifacts: TreeMap<String, MarkdownRecipeArtifact>,
    ): TreeSet<String> {
        val removedArtifacts = TreeSet<String>()

        for (artifactId in oldArtifacts.keys) {
            if (!markdownArtifacts.containsKey(artifactId)) {
                removedArtifacts.add(artifactId)
            }
        }

        return removedArtifacts
    }

    // This updates the newRecipes and removedRecipes variables to contain the list of new and removed recipes
    private fun getNewAndRemovedRecipes(
        markdownArtifacts: TreeMap<String, MarkdownRecipeArtifact>,
        oldArtifacts: TreeMap<String, MarkdownRecipeArtifact>,
        newRecipes: TreeSet<MarkdownRecipeDescriptor>,
        removedRecipes: TreeSet<MarkdownRecipeDescriptor>,
    ) {
        for (markdownArtifact in markdownArtifacts.values) {
            val oldArtifact = oldArtifacts[markdownArtifact.artifactId]

            if (oldArtifact != null) {
                // Check for new recipes
                for (markdownRecipeDescriptors in markdownArtifact.markdownRecipeDescriptors) {
                    if (!oldArtifact.markdownRecipeDescriptors.containsKey(markdownRecipeDescriptors.key)) {
                        newRecipes.add(markdownRecipeDescriptors.value)
                    }
                }

                // Check for deleted recipes
                for (oldMarkdownRecipeDescriptors in oldArtifact.markdownRecipeDescriptors) {
                    if (!markdownArtifact.markdownRecipeDescriptors.containsKey(oldMarkdownRecipeDescriptors.key)) {
                        removedRecipes.add(oldMarkdownRecipeDescriptors.value)
                    }
                }
            } else {
                // If there's no old artifact, just add all of the recipes to the new recipe list
                for (markdownRecipeDescriptors in markdownArtifact.markdownRecipeDescriptors) {
                    newRecipes.add(markdownRecipeDescriptors.value)
                }
            }
        }
    }

    private fun getChangedRecipes(
        markdownArtifacts: TreeMap<String, MarkdownRecipeArtifact>,
        oldArtifacts: TreeMap<String, MarkdownRecipeArtifact>,
        newRecipes: TreeSet<MarkdownRecipeDescriptor>,
        removedRecipes: TreeSet<MarkdownRecipeDescriptor>,
    ): TreeSet<ChangedRecipe> {
        val changedRecipes = TreeSet<ChangedRecipe>()

        for (markdownArtifact in markdownArtifacts.values) {
            val oldArtifact = oldArtifacts[markdownArtifact.artifactId]

            if (oldArtifact != null) {
                for ((recipeDescriptorName, markdownRecipeDescriptor) in markdownArtifact.markdownRecipeDescriptors) {
                    if (newRecipes.contains(markdownRecipeDescriptor) || removedRecipes.contains(oldArtifact.markdownRecipeDescriptors[recipeDescriptorName])) {
                        // Don't report changes to recipe options if a recipe has been added or removed
                    } else {
                        val newOptions = markdownRecipeDescriptor.options
                        val oldOptions = oldArtifact.markdownRecipeDescriptors[recipeDescriptorName]?.options

                        if (newOptions != oldOptions) {
                            val changedRecipe = ChangedRecipe(
                                markdownArtifact.artifactId,
                                recipeDescriptorName,
                                markdownRecipeDescriptor.description,
                                markdownRecipeDescriptor.docLink,
                                newOptions,
                                oldOptions
                            )
                            changedRecipes.add(changedRecipe)
                        }
                    }
                }
            }
        }

        return changedRecipes
    }

    private fun buildChangelog(
        newArtifacts: TreeSet<String>,
        removedArtifacts: TreeSet<String>,
        newRecipes: TreeSet<MarkdownRecipeDescriptor>,
        removedRecipes: TreeSet<MarkdownRecipeDescriptor>,
        changedRecipes: TreeSet<ChangedRecipe>,
        deployType: String
    ) {
        // Get the date to label the changelog
        val current = LocalDateTime.now()
        val formatter = DateTimeFormatter.ofPattern(""yyyy-MM-dd"")
        val formatted = current.format(formatter)

        val changelog: File = if (deployType == ""release"") {
            File(""src/main/resources/CHANGELOG-$formatted.md"")
        } else {
            File(""src/main/resources/snapshot-CHANGELOG-$formatted.md"")
        }

        // Clear the file in case this is being generated multiple times
        changelog.writeText("""")

        if (deployType == ""snapshot"") {
            changelog.appendText(""# Snapshot ($formatted)"")

            changelog.appendText(""\n\n{% hint style=\""info\"" %}"")
            changelog.appendText(""\nWant to learn how to use snapshot versions in your project? Check out our [snapshot version guide](/reference/snapshot-instructions.md)."")
            changelog.appendText(""\n{% endhint %}\n\n"")
        } else {
            changelog.appendText(""# X.XX.X release ($formatted)\n\n"")
        }

        // An example of what the changelog could look like after the below statements can be found here:
        // https://gist.github.com/mike-solomon/16727159ec86ee0f0406ba389cbaecb1
        if (newArtifacts.isNotEmpty()) {
            changelog.appendText(""## New Artifacts"")

            for (newArtifact in newArtifacts) {
                changelog.appendText(""\n* $newArtifact"")
            }

            changelog.appendText(""\n\n"")
        }

        if (removedArtifacts.isNotEmpty()) {
            changelog.appendText(""## Removed Artifacts"")

            for (removedArtifact in removedArtifacts) {
                changelog.appendText(""\n* $removedArtifact"")
            }

            changelog.appendText(""\n\n"")
        }

        if (newRecipes.isNotEmpty()) {
            changelog.appendText(""## New Recipes\n"")

            for (newRecipe in newRecipes) {
                changelog.appendText(""\n* [${newRecipe.name}](${newRecipe.docLink}): ${newRecipe.description.trim()} "")
            }

            changelog.appendText(""\n\n"")
        }

        if (removedRecipes.isNotEmpty()) {
            changelog.appendText(""## Removed Recipes\n"")

            for (removedRecipe in removedRecipes) {
                changelog.appendText(""\n* **${removedRecipe.name}**: ${removedRecipe.description.trim()} "")
            }

            changelog.appendText(""\n\n"")
        }

        if (changedRecipes.isNotEmpty()) {
            changelog.appendText(""## Changed Recipes\n"")

            for (changedRecipe in changedRecipes) {
                changelog.appendText(""\n* [${changedRecipe.name}](${changedRecipe.docLink}) was changed:"")
                changelog.appendText(""\n  * Old Options:"")

                if (changedRecipe.oldOptions?.isEmpty() == true) {
                    changelog.appendText(""\n    * `None`"")
                } else {
                    for (oldOption in changedRecipe.oldOptions!!) {
                        changelog.appendText(""\n    * `${oldOption.name}: { type: ${oldOption.type}, required: ${oldOption.required} }`"")
                    }
                }

                changelog.appendText(""\n  * New Options:"")

                if (changedRecipe.newOptions?.isEmpty() == true) {
                    changelog.appendText(""\n    * `None`"")
                } else {
                    for (newOption in changedRecipe.newOptions!!) {
                        changelog.appendText(""\n    * `${newOption.name}: { type: ${newOption.type}, required: ${newOption.required} }`"")
                    }
                }
            }
        }
    }

    private fun buildDiffLog(
        newRecipes: TreeSet<MarkdownRecipeDescriptor>,
    ) {
        val artifactToRecipes = TreeMap<String, TreeSet<MarkdownRecipeDescriptor>>()
        for (newRecipe in newRecipes) {
            if (artifactToRecipes.containsKey(newRecipe.artifactId)) {
                artifactToRecipes[newRecipe.artifactId]?.add(newRecipe)
            } else {
                val recipes = TreeSet<MarkdownRecipeDescriptor>()
                recipes.add(newRecipe)
                artifactToRecipes[newRecipe.artifactId] = recipes
            }
        }

        val diffFile = File(""src/main/resources/$diffFileName.md"")

        // Clear the file in case this is being generated multiple times
        diffFile.writeText("""")

        if (artifactToRecipes.isNotEmpty()) {
            diffFile.appendText(""# New Recipes"")

            var totalTimeSaved = 0

            for (artifact in artifactToRecipes.keys) {
                diffFile.appendText(""\n\n## $artifact\n"")

                val recipes = artifactToRecipes[artifact]

                if (recipes != null) {
                    var timeSavedPerArtifact = 0

                    for (recipe in recipes) {
                        val isImperative = recipe.isImperative
                        var timeSaved = 4

                        if (isImperative) {
                            timeSaved = 12
                        }

                        totalTimeSaved += timeSaved
                        timeSavedPerArtifact += timeSaved

                        diffFile.appendText(""\n* [${recipe.name}](${recipe.docLink}) — ${timeSaved}h"")
                    }

                    diffFile.appendText(""\n\nInitial recipe development time: ${timeSavedPerArtifact}h"")
                }
            }

            diffFile.appendText(""\n\nTotal initial recipe development time: ${totalTimeSaved}h"")
        }
    }

    data class Category(
        val simpleName: String,
        val path: String,
        val descriptor: CategoryDescriptor?,
        val recipes: List<RecipeDescriptor>,
        val subcategories: List<Category>
    ) {
        companion object {
            private data class CategoryBuilder(
                val path: String? = null,
                val recipes: MutableList<RecipeDescriptor> = mutableListOf(),
                val subcategories: LinkedHashMap<String, CategoryBuilder> = LinkedHashMap()
            ) {
                fun build(categoryDescriptors: List<CategoryDescriptor>): Category {
                    val simpleName = path!!.substring(path.lastIndexOf('/') + 1)
                    val descriptor = findCategoryDescriptor(path, categoryDescriptors)
                    // Do not consider backticks while sorting, they're formatting.
                    val finalizedSubcategories = subcategories.values.asSequence()
                        .map { it.build(categoryDescriptors) }
                        .sortedBy { it.displayName.replace(""`"", """") }
                        .toList()
                    return Category(
                        simpleName,
                        path,
                        descriptor,
                        recipes.sortedBy { it.displayName.replace(""`"", """") },
                        finalizedSubcategories
                    )
                }
            }

            fun fromDescriptors(
                recipes: Iterable<RecipeDescriptor>,
                descriptors: List<CategoryDescriptor>
            ): List<Category> {
                val result = LinkedHashMap<String, CategoryBuilder>()
                for (recipe in recipes) {
                    result.putRecipe(getRecipeCategory(recipe), recipe)
                }

                return result.mapValues { it.value.build(descriptors) }
                    .values
                    .toList()
            }

            private fun MutableMap<String, CategoryBuilder>.putRecipe(
                recipeCategory: String?,
                recipe: RecipeDescriptor
            ) {
                if (recipeCategory == null) {
                    return
                }
                val pathSegments = recipeCategory.split(""/"")
                var category = this
                for (i in pathSegments.indices) {
                    val pathSegment = pathSegments[i]
                    val pathToCurrent = pathSegments.subList(0, i + 1).joinToString(""/"")
                    if (!category.containsKey(pathSegment)) {
                        category[pathSegment] = CategoryBuilder(path = pathToCurrent)
                    }
                    if (i == pathSegments.size - 1) {
                        category[pathSegment]!!.recipes.add(recipe)
                    }
                    category = category[pathSegment]!!.subcategories
                }
            }
        }

        val displayName: String =
            if (descriptor == null) {
                StringUtils.capitalize(simpleName)
            } else {
                descriptor.displayName.replace(""`"", """")
            }

        /**
         * Produce the snippet for this category to be fitted into Gitbook's SUMMARY.md, which provides the index
         * that makes markdown documents accessible through gitbook's interface
         */
        fun summarySnippet(indentationDepth: Int): String {
            val indentBuilder = StringBuilder(""  "")
            for (i in 0 until indentationDepth) {
                indentBuilder.append(""  "")
            }
            val indent = indentBuilder.toString()
            val result = StringBuilder()

            if (path == """") {
                // Recipes that don't have a path are part of the ""core"" set of recipes
                result.appendLine(""$indent* [Core](reference/recipes/core-README.md)"")
            } else {
                result.appendLine(""$indent* [$displayName](reference/recipes/$path/README.md)"")
            }

            for (recipe in recipes) {
                // Section headings will display backticks, rather than rendering as code. Omit them so it doesn't look terrible
                result.appendLine(
                    ""$indent  * [${
                        recipe.displayName.replace(
                            ""`"",
                            """"
                        )
                    }](${getRecipeRelativePath(recipe)}.md)""
                )
            }
            for (category in subcategories) {
                result.append(category.summarySnippet(indentationDepth + 1))
            }
            return result.toString()
        }

        /**
         * Produce the contents of the README.md file for this category.
         */
        private fun categoryIndex(): String {
            return StringBuilder().apply {
                appendLine(""# $displayName"")
                // While the description is not _supposed_ to be nullable it has happened before
                @Suppress(""SENSELESS_COMPARISON"")
                if (descriptor != null && descriptor.description != null) {
                    appendLine()
                    appendLine(""_${descriptor.description}_"")
                }
                appendLine()

                if (subcategories.isNotEmpty()) {
                    appendLine(""## Categories"")
                    appendLine()
                    for (subcategory in subcategories) {
                        appendLine(""* [${subcategory.displayName}](/reference/recipes/${subcategory.path})"")
                    }
                    appendLine()
                }

                if (recipes.isNotEmpty()) {
                    val compositeRecipes: MutableList<RecipeDescriptor> = mutableListOf()
                    val normalRecipes: MutableList<RecipeDescriptor> = mutableListOf()

                    for (recipe in recipes) {
                        if (1 < recipe.recipeList.size) {
                            compositeRecipes.add(recipe)
                        } else {
                            normalRecipes.add(recipe)
                        }
                    }

                    if (compositeRecipes.isNotEmpty()) {
                        appendLine(""## Composite Recipes"")
                        appendLine()
                        appendLine(""_Recipes that include further recipes, often including the individual recipes below._"")
                        appendLine()

                        for (recipe in compositeRecipes) {
                            val recipeSimpleName = recipe.name.substring(recipe.name.lastIndexOf('.') + 1).lowercase()

                            // Anything except a relative link ending in .md will be mangled.
                            // If you touch this line double check that it works when imported into gitbook
                            appendLine(""* [${recipe.displayName}](./${recipeSimpleName}.md)"")
                        }

                        appendLine()
                    }

                    if (normalRecipes.isNotEmpty()) {
                        appendLine(""## Recipes"")
                        appendLine()

                        for (recipe in normalRecipes) {
                            val recipeSimpleName = recipe.name.substring(recipe.name.lastIndexOf('.') + 1).lowercase()

                            // Anything except a relative link ending in .md will be mangled.
                            // If you touch this line double check that it works when imported into gitbook
                            appendLine(""* [${recipe.displayName}](./${recipeSimpleName}.md)"")
                        }

                        appendLine()
                    }
                }

            }.toString()
        }

        fun writeCategoryIndex(outputRoot: Path) {
            if (path.isBlank()) {
                // ""Core"" recipes need to be handled differently as they do not have a path like other recipes.
                val corePath = outputRoot.resolve(""core-README.md"")

                Files.newBufferedWriter(corePath, StandardOpenOption.CREATE).useAndApply {
                    writeln(""# Core Recipes"")
                    newLine()
                    writeln(""_Recipes broadly applicable to all types of source files._"")
                    newLine()
                    writeln(""## Recipes"")
                    newLine()

                    for (recipe in recipes) {
                        val recipeSimpleName = recipe.name.substring(recipe.name.lastIndexOf('.') + 1).lowercase()

                        writeln(""* [${recipe.displayName}](${recipeSimpleName}.md)"")
                    }
                }

                // Also need to make an empty README for GitBook linking
                val emptyReadmePath = outputRoot.resolve(""README.md"")

                Files.newBufferedWriter(emptyReadmePath, StandardOpenOption.CREATE).useAndApply {
                    writeln(""# Recipes"")
                }

                return
            }
            val outputPath = outputRoot.resolve(""$path/README.md"")
            Files.newBufferedWriter(outputPath, StandardOpenOption.CREATE).useAndApply {
                writeln(categoryIndex())
            }
            for (subcategory in subcategories) {
                subcategory.writeCategoryIndex(outputRoot)
            }
        }
    }

    private fun writeRecipe(
        recipeDescriptor: RecipeDescriptor,
        outputPath: Path,
        origin: RecipeOrigin,
        gradlePluginVersion: String,
        mavenPluginVersion: String
    ) {
        val recipeMarkdownPath = getRecipePath(outputPath, recipeDescriptor)
        Files.createDirectories(recipeMarkdownPath.parent)
        Files.newBufferedWriter(recipeMarkdownPath, StandardOpenOption.CREATE).useAndApply {
            write(
                """"""
                # ${recipeDescriptor.displayName}
                
                **${recipeDescriptor.name.replace(""_"".toRegex(), ""\\\\_"")}**
                
            """""".trimIndent()
            )

            newLine()

            if (!isNullOrEmpty(recipeDescriptor.description)) {
                writeln(""_"" + recipeDescriptor.description.trim() + ""_"")
            }
            newLine()
            if (recipeDescriptor.tags.isNotEmpty()) {
                writeln(""### Tags"")
                newLine()
                for (tag in recipeDescriptor.tags) {
                    writeln(""* $tag"")
                }
                newLine()
            }

            writeln(
                """"""
                ## Source
                
                [GitHub](${
                    origin.githubUrl(
                        recipeDescriptor.name,
                        recipeDescriptor.source
                    )
                }), [Issue Tracker](${origin.issueTrackerUrl()}), [Maven Central](https://central.sonatype.com/artifact/${origin.groupId}/${origin.artifactId}/${origin.version}/jar)
                
                * groupId: ${origin.groupId}
                * artifactId: ${origin.artifactId}
                * version: ${origin.version}
                
            """""".trimIndent()
            )

            // Options
            if (recipeDescriptor.options.isNotEmpty()) {
                writeln(
                        """"""
                    ## Options
                    
                    | Type | Name | Description |
                    | -- | -- | -- |
                """""".trimIndent()
                )
                for (option in recipeDescriptor.options) {
                    var description = if (option.description == null) {
                        """"
                    } else {
                        option.description
                    }
                    description = if (option.isRequired) {
                        description
                    } else {
                        ""*Optional*. $description""
                    }
                    // This should preserve casing and plurality
                    description = description.replace(""method patterns?"".toRegex(RegexOption.IGNORE_CASE)) { match ->
                        ""[${match.value}](/reference/method-patterns.md)""
                    }
                    writeln(
                            """"""
                        | `${option.type}` | ${option.name} | $description |
                    """""".trimIndent()
                    )
                }
                newLine()
            }

            // Data Tables

            // These are common in every recipe - so let's not document them everywhere.
            val dataTablesToIgnore = listOf(
                ""org.openrewrite.table.SourcesFileResults"",
                ""org.openrewrite.table.SourcesFileErrors"",
                ""org.openrewrite.table.RecipeRunStats""
            )

            val filteredDataTables = recipeDescriptor.dataTables.filter { dataTable ->
                dataTable.name !in dataTablesToIgnore
            }

            if (filteredDataTables.isNotEmpty()) {
                writeln(
                    """"""
                        ## Data Tables (Only available on the [Moderne platform](https://app.moderne.io/))

                    """""".trimIndent()
                )
            }

            for (dataTable in filteredDataTables) {
                writeln(""""""
                    ### ${dataTable.displayName}

                    _${dataTable.description}_

                    | Column Name | Description |
                    | ----------- | ----------- |
                """""".trimIndent())

                for (column in dataTable.columns) {
                    writeln(""""""
                       | ${column.displayName} | ${column.description} |
                    """""".trimIndent())
                }

                newLine()
            }

            // Examples
            if (recipeDescriptor.examples.isNotEmpty()) {
                val subject = if (recipeDescriptor.examples.size > 1) ""Examples"" else ""Example""
                writeln(""## $subject"")

                for (i in 0 until recipeDescriptor.examples.size) {
                    if (i > 0) {
                        newLine()
                        writeln(""---"")
                        newLine()
                    }

                    val example = recipeDescriptor.examples[i]
                    val description =
                        if (example.description.isNotEmpty()) example.description else """"

                    if (recipeDescriptor.examples.size > 1) {
                        writeln(""##### Example ${i + 1}"")
                        if (description.isNotEmpty()) {
                            writeln(description)
                        }
                    }

                    newLine()

                    // Parameters
                    if (example.parameters.isNotEmpty() && recipeDescriptor.options.isNotEmpty()) {
                        writeln(""###### Parameters"")
                        writeln(""| Parameter | Value |"")
                        writeln(""| -- | -- |"")
                        for (n in 0 until recipeDescriptor.options.size) {
                            write(""|"")
                            write(recipeDescriptor.options[n].name)
                            write(""|"")
                            if (n < example.parameters.size) {
                                write(""`${example.parameters[n]}`"")
                            }
                            write(""|"")
                            newLine()
                        }
                        newLine()
                    }

                    // Example files
                    for (sourceIndex in 0 until example.sources.size) {
                        val source = example.sources[sourceIndex]
                        val hasChange = source.after != null && source.after.isNotEmpty()
                        val beforeTitle = if (hasChange) ""Before"" else ""Unchanged""
                        val isNewFile = source.before == null && source.after != null
                        val afterTile = if (isNewFile) ""New file"" else ""After""


                        if (hasChange && source.before != null) {
                            newLine()
                            val tabName = source.path ?: (source.language ?: ""Before / After"")
                            writeln(""{% tabs %}"")
                            writeln(""{% tab title=\""${tabName}\"" %}"")
                        }

                        newLine()

                        if (source.before != null) {
                            writeln(""###### $beforeTitle"")

                            if (source.path != null) {
                                writeln(""{% code title=\""${source.path}\"" %}"")
                            } else {
                                writeln(""{% code %}"")
                            }

                            writeln(""```${source.language}"")
                            write(source.before)
                            if (source.before != null && !source.before.endsWith(""\n"")) {
                                newLine()
                            }
                            writeln(""```"")

                            writeln(""{% endcode %}"")
                        }

                        if (hasChange) {
                            newLine()
                            writeln(""###### $afterTile"")

                            if (source.path != null) {
                                writeln(""{% code title=\""${source.path}\"" %}"")
                            } else {
                                writeln(""{% code %}"")
                            }

                            writeln(""```${source.language}"")
                            write(source.after)
                            if (source.after != null && !source.after.endsWith(""\n"")) {
                                newLine()
                            }
                            writeln(""```"")

                            writeln(""{% endcode %}"")
                            newLine()

                            // diff
                            if (source.before != null) {
                                writeln(""{% endtab %}"")
                                writeln(""{% tab title=\""Diff\"" %}"")

                                val diff = generateDiff(source.path, source.before, source.after)

                                writeln(""{% code %}"")
                                writeln(
                                        """"""
                                |```diff
                                |${diff}```
                                """""".trimMargin()
                                )
                                writeln(""{% endcode %}"")
                                writeln(""{% endtab %}"")
                                writeln(""{% endtabs %}"")
                            }
                        }
                    }
                }
                newLine()
            }

            // Usage
            newLine()
            writeln(""## Usage"")
            newLine()

            val suppressMaven = recipeDescriptor.name.contains("".gradle."")
            val suppressGradle = recipeDescriptor.name.contains("".maven."")
            val requiresConfiguration = recipeDescriptor.options.any { it.isRequired }
            val requiresDependency = !origin.isFromCoreLibrary()
            if (requiresConfiguration) {
                val exampleRecipeName =
                    ""com.yourorg."" + recipeDescriptor.name.substring(recipeDescriptor.name.lastIndexOf('.') + 1) + ""Example""
                write(""This recipe has required configuration parameters. "")
                write(""Recipes with required configuration parameters cannot be activated directly. "")
                write(""To activate this recipe you must create a new recipe which fills in the required parameters. "")
                write(""In your `rewrite.yml` create a new recipe with a unique name. "")
                write(""For example: `$exampleRecipeName`."")
                newLine()
                writeln(""Here's how you can define and customize such a recipe within your rewrite.yml:"")
                write(
                    """"""
                    
                    {% code title=""rewrite.yml"" %}
                    ```yaml
                    ---
                    type: specs.openrewrite.org/v1beta/recipe
                    name: $exampleRecipeName
                    displayName: ${recipeDescriptor.displayName} example
                    recipeList:
                      - ${recipeDescriptor.name}:
                    
                """""".trimIndent()
                )
                for (option in recipeDescriptor.options) {
                    val ex = if (option.example != null && ""String"" == option.type
                        && (option.example.matches(""^[{}\\[\\],`|=%@*!?-].*"".toRegex())
                                || option.example.matches("".*:\\s.*"".toRegex()))
                    ) {
                        ""'"" + option.example + ""'""
                    } else {
                        option.example
                    }
                    writeln(""      ${option.name}: $ex"")
                }
                writeln(""```"")
                writeln(""{% endcode %}"")
                newLine()
                if (requiresDependency) {
                    writeSnippetsWithConfigurationWithDependency(
                        exampleRecipeName,
                        origin,
                        gradlePluginVersion,
                        mavenPluginVersion,
                        suppressMaven,
                        suppressGradle
                    )
                } else {
                    writeSnippetsWithConfigurationWithoutDependency(
                        exampleRecipeName,
                        gradlePluginVersion,
                        mavenPluginVersion,
                        suppressMaven,
                        suppressGradle
                    )
                }
            } else {
                if (origin.isFromCoreLibrary()) {
                    writeSnippetsFromCoreLibrary(
                        recipeDescriptor, gradlePluginVersion, mavenPluginVersion, suppressMaven, suppressGradle
                    )
                } else {
                    writeSnippetForOtherLibrary(
                        origin, recipeDescriptor, gradlePluginVersion, mavenPluginVersion, suppressMaven, suppressGradle
                    )
                }
            }

            if (recipeDescriptor.recipeList.isNotEmpty()) {
                writeln(
                    """"""
                    
                    ## Definition
                    
                    {% tabs %}
                    {% tab title=""Recipe List"" %}
                """""".trimIndent()
                )
                val recipeDepth = getRecipePath(recipeDescriptor).chars().filter { ch: Int -> ch == '/'.code }.count()
                val pathToRecipesBuilder = StringBuilder()
                for (i in 0 until recipeDepth) {
                    pathToRecipesBuilder.append(""../"")
                }
                val pathToRecipes = pathToRecipesBuilder.toString()
                for (recipe in recipeDescriptor.recipeList) {
                    writeln(""* ["" + recipe.displayName + ""]("" + pathToRecipes + getRecipePath(recipe) + "".md)"")
                    if (recipe.options.isNotEmpty()) {
                        for (option in recipe.options) {
                            if (option.value != null) {
                                writeln(""  * "" + option.name + "": `"" + printValue(option.value!!) + ""`"")
                            }
                        }
                    }
                }
                newLine()
                writeln(
                    """"""
                    {% endtab %}

                    {% tab title=""Yaml Recipe List"" %}
                    ```yaml
                """""".trimIndent()
                )
                writeln(recipeDescriptor.asYaml())
                writeln(
                    """"""
                    ```
                    {% endtab %}
                    {% endtabs %}
                """""".trimIndent()
                )
            }

            // Contributors
            if (recipeDescriptor.contributors.isNotEmpty()) {
                newLine()
                writeln(""## Contributors"")
                for (contributors in recipeDescriptor.contributors) {
                    if (contributors.email.contains(""noreply"")) {
                        writeln(""* ${contributors.name}"")
                    } else {
                        writeln(""* [${contributors.name}](mailto:${contributors.email})"")
                    }
                }
                newLine()
            }

            newLine()
            writeln(
                """"""
                ## See how this recipe works across multiple open-source repositories

                [![Moderne Link Image](/.gitbook/assets/ModerneRecipeButton.png)](https://app.moderne.io/recipes/${recipeDescriptor.name})

                The community edition of the Moderne platform enables you to easily run recipes across thousands of open-source repositories.

                Please [contact Moderne](https://moderne.io/product) for more information about safely running the recipes on your own codebase in a private SaaS.
            """""".trimIndent()
            )
        }
    }

    private fun generateDiff(path: String?, original: String, revised: String): String {
        val patch: Patch<String> = DiffUtils.diff(original.lines(), revised.lines())
        val diffContent = StringBuilder()
        val contextLinesBefore = 2
        val contextLinesAfter = 1

        if (path != null) {
            diffContent.append(""--- "").append(path).append(""\n"")
            diffContent.append(""+++ "").append(path).append(""\n"")
        }

        for (delta in patch.deltas) {
            val originalLines = original.lines()
            val revisedLines = revised.lines()

            diffContent.append(""@@ -${delta.source.position + 1},${delta.source.size()} "")
                    .append(""+${delta.target.position + 1},${delta.target.size()} @@"")
                    .append(""\n"")

            // print shared context
            val startIndex = maxOf(0, delta.source.position - contextLinesBefore)
            val endIndex = minOf(originalLines.size, delta.source.position + delta.source.size() + contextLinesAfter)
            for (i in startIndex until delta.source.position) {
                diffContent.append(originalLines[i]).append(""\n"")
            }

            for (i in delta.source.position until delta.source.position + delta.source.size()) {
                val trimmedLine = if (originalLines[i].startsWith("" "")) originalLines[i].replaceFirst("" "", """") else originalLines[i]
                diffContent.append(""-"").append(trimmedLine).append(""\n"")
            }

            for (i in delta.target.position until delta.target.position + delta.target.size()) {
                val trimmedLine = if (revisedLines[i].startsWith("" "")) revisedLines[i].replaceFirst("" "", """") else revisedLines[i]
                diffContent.append(""+"").append(trimmedLine).append(""\n"")
            }

            for (i in delta.source.position + delta.source.size() until endIndex) {
                diffContent.append(originalLines[i]).append(""\n"")
            }
        }

        return diffContent.toString()
    }

    private fun BufferedWriter.writeSnippetsWithConfigurationWithoutDependency(
        exampleRecipeName: String,
        gradlePluginVersion: String,
        mavenPluginVersion: String,
        suppressMaven: Boolean,
        suppressGradle: Boolean
    ) {
        val gradleSnippet = if (suppressGradle) """" else """"""
                            {% tab title=""Gradle"" %}
                            {% code title=""build.gradle"" %}
                            ```groovy
                            plugins {
                                id(""org.openrewrite.rewrite"") version(""$gradlePluginVersion"")
                            }
                            
                            rewrite {
                                activeRecipe(""$exampleRecipeName"")
                            }
                            
                            repositories {
                                mavenCentral()
                            }
                            ```
                            {% endcode %}
                            {% endtab %}
                            """""".trimIndent()
        val mavenSnippet = if (suppressMaven) """" else """"""
                            {% tab title=""Maven"" %}
                            {% code title=""pom.xml"" %}
                            ```markup
                            <project>
                              <build>
                                <plugins>
                                  <plugin>
                                    <groupId>org.openrewrite.maven</groupId>
                                    <artifactId>rewrite-maven-plugin</artifactId>
                                    <version>$mavenPluginVersion</version>
                                    <configuration>
                                      <activeRecipes>
                                        <recipe>$exampleRecipeName</recipe>
                                      </activeRecipes>
                                    </configuration>
                                  </plugin>
                                </plugins>
                              </build>
                            </project>
                            ```
                            {% endcode %}
                            {% endtab %}
                            """""".trimIndent()
        writeln(
            """"""
Now that `$exampleRecipeName` has been defined activate it in your build file:
{% tabs %}
$gradleSnippet
$mavenSnippet
{% endtabs %}
"""""".trimIndent()
        )
    }

    private fun BufferedWriter.writeSnippetsWithConfigurationWithDependency(
        exampleRecipeName: String,
        origin: RecipeOrigin,
        gradlePluginVersion: String,
        mavenPluginVersion: String,
        suppressMaven: Boolean,
        suppressGradle: Boolean
    ) {
        val gradleSnippet = if (suppressGradle) """" else """"""
                            {% tab title=""Gradle"" %}
                            {% code title=""build.gradle"" %}
                            ```groovy
                            plugins {
                                id(""org.openrewrite.rewrite"") version(""$gradlePluginVersion"")
                            }
                            
                            rewrite {
                                activeRecipe(""$exampleRecipeName"")
                            }
                            
                            repositories {
                                mavenCentral()
                            }
                            
                            dependencies {
                                rewrite(""${origin.groupId}:${origin.artifactId}:${origin.version}"")
                            }
                            ```
                            {% endcode %}
                            {% endtab %}
                            """""".trimIndent()
        val mavenSnippet = if (suppressMaven) """" else """"""
                            {% tab title=""Maven"" %}
                            {% code title=""pom.xml"" %}
                            ```markup
                            <project>
                              <build>
                                <plugins>
                                  <plugin>
                                    <groupId>org.openrewrite.maven</groupId>
                                    <artifactId>rewrite-maven-plugin</artifactId>
                                    <version>$mavenPluginVersion</version>
                                    <configuration>
                                      <activeRecipes>
                                        <recipe>$exampleRecipeName</recipe>
                                      </activeRecipes>
                                    </configuration>
                                    <dependencies>
                                      <dependency>
                                        <groupId>${origin.groupId}</groupId>
                                        <artifactId>${origin.artifactId}</artifactId>
                                        <version>${origin.version}</version>
                                      </dependency>
                                    </dependencies>
                                  </plugin>
                                </plugins>
                              </build>
                            </project>
                            ```
                            {% endcode %}
                            {% endtab %}
                            """""".trimIndent()
        writeln(
            """"""
Now that `$exampleRecipeName` has been defined activate it and take a dependency on ${origin.groupId}:${origin.artifactId}:${origin.version} in your build file:
{% tabs %}
$gradleSnippet
$mavenSnippet
{% endtabs %}
"""""".trimIndent()
        )
    }

    private fun BufferedWriter.writeSnippetsFromCoreLibrary(
        recipeDescriptor: RecipeDescriptor,
        gradlePluginVersion: String,
        mavenPluginVersion: String,
        suppressMaven: Boolean,
        suppressGradle: Boolean
    ) {
        writeln(
            ""This recipe has no required configuration parameters and comes from a rewrite core library. "" +
                    ""It can be activated directly without adding any dependencies.""
        )
        val gradleSnippet = if (suppressGradle) """" else """"""
                            {% tab title=""Gradle"" %}
                            {% code title=""build.gradle"" %}
                            ```groovy
                            plugins {
                                id(""org.openrewrite.rewrite"") version(""$gradlePluginVersion"")
                            }
                            
                            rewrite {
                                activeRecipe(""${recipeDescriptor.name}"")
                            }
                            
                            repositories {
                                mavenCentral()
                            }
                            
                            ```
                            {% endcode %}
                            {% endtab %}
                            """""".trimIndent()
        val mavenSnippet = if (suppressMaven) """" else """"""
                            {% tab title=""Maven POM"" %}
                            {% code title=""pom.xml"" %}
                            ```markup
                            <project>
                              <build>
                                <plugins>
                                  <plugin>
                                    <groupId>org.openrewrite.maven</groupId>
                                    <artifactId>rewrite-maven-plugin</artifactId>
                                    <version>$mavenPluginVersion</version>
                                    <configuration>
                                      <activeRecipes>
                                        <recipe>${recipeDescriptor.name}</recipe>
                                      </activeRecipes>
                                    </configuration>
                                  </plugin>
                                </plugins>
                              </build>
                            </project>
                            ```
                            {% endcode %}
                            {% endtab %}
                            
                            {% tab title=""Maven Command Line"" %}
                            You will need to have [Maven](https://maven.apache.org/download.cgi) installed on your machine before you can run the following command.
                            {% code title=""shell"" %}
                            ```shell
                            mvn -U org.openrewrite.maven:rewrite-maven-plugin:run \
                              -Drewrite.activeRecipes=${recipeDescriptor.name}
                            ```
                            {% endcode %}
                            {% endtab %}
                            """""".trimIndent()
        writeln(
            """"""
{% tabs %}
$gradleSnippet
$mavenSnippet
{% endtabs %}
"""""".trimIndent()
        )
    }

    private fun BufferedWriter.writeSnippetForOtherLibrary(
        origin: RecipeOrigin,
        recipeDescriptor: RecipeDescriptor,
        gradlePluginVersion: String,
        mavenPluginVersion: String,
        suppressMaven: Boolean,
        suppressGradle: Boolean
    ) {
        writeln(
            ""This recipe has no required configuration options. It can be activated by adding a dependency on "" +
                    ""`${origin.groupId}:${origin.artifactId}:${origin.version}` in your build file or by running a shell "" +
                    ""command (in which case no build changes are needed): ""
        )
        val gradleSnippet = if (suppressGradle) """" else """"""
                            {% tab title=""Gradle"" %}
                            {% code title=""build.gradle"" %}
                            ```groovy
                            plugins {
                                id(""org.openrewrite.rewrite"") version(""$gradlePluginVersion"")
                            }
                            
                            rewrite {
                                activeRecipe(""${recipeDescriptor.name}"")
                            }
                            
                            repositories {
                                mavenCentral()
                            }
                            
                            dependencies {
                                rewrite(""${origin.groupId}:${origin.artifactId}:${origin.version}"")
                            }
                            ```
                            {% endcode %}
                            {% endtab %}
                            """""".trimIndent()
        val mavenSnippet = if (suppressMaven) """" else """"""
                            {% tab title=""Maven POM"" %}
                            {% code title=""pom.xml"" %}
                            ```markup
                            <project>
                              <build>
                                <plugins>
                                  <plugin>
                                    <groupId>org.openrewrite.maven</groupId>
                                    <artifactId>rewrite-maven-plugin</artifactId>
                                    <version>$mavenPluginVersion</version>
                                    <configuration>
                                      <activeRecipes>
                                        <recipe>${recipeDescriptor.name}</recipe>
                                      </activeRecipes>
                                    </configuration>
                                    <dependencies>
                                      <dependency>
                                        <groupId>${origin.groupId}</groupId>
                                        <artifactId>${origin.artifactId}</artifactId>
                                        <version>${origin.version}</version>
                                      </dependency>
                                    </dependencies>
                                  </plugin>
                                </plugins>
                              </build>
                            </project>
                            ```
                            {% endcode %}
                            {% endtab %}
                            
                            {% tab title=""Maven Command Line"" %}
                            {% code title=""shell"" %}
                            You will need to have [Maven](https://maven.apache.org/download.cgi) installed on your machine before you can run the following command.
                            
                            ```shell
                            mvn -U org.openrewrite.maven:rewrite-maven-plugin:run \
                              -Drewrite.recipeArtifactCoordinates=${origin.groupId}:${origin.artifactId}:RELEASE \
                              -Drewrite.activeRecipes=${recipeDescriptor.name}
                            ```
                            {% endcode %}
                            {% endtab %}
                            """""".trimIndent()
        writeln(
            """"""
{% tabs %}
$gradleSnippet
$mavenSnippet
{% endtabs %}
"""""".trimIndent()
        )
    }

    companion object {
        private fun printValue(value: Any): String =
            if (value is Array<*>) {
                value.contentDeepToString()
            } else {
                value.toString()
            }

        /**
         * Call Closable.use() together with apply() to avoid adding two levels of indentation
         */
        fun BufferedWriter.useAndApply(withFun: BufferedWriter.() -> Unit): Unit = use { it.apply(withFun) }

        fun BufferedWriter.writeln(text: String) {
            write(text)
            newLine()
        }

        private fun getRecipeCategory(recipe: RecipeDescriptor): String {
            val recipePath = getRecipePath(recipe)
            val slashIndex = recipePath.lastIndexOf(""/"")
            return if (slashIndex == -1) {
                """"
            } else {
                recipePath.substring(0, slashIndex)
            }
        }

        private fun getRecipePath(recipe: RecipeDescriptor): String =
            if (recipe.name.startsWith(""org.openrewrite"")) {
                recipe.name.substring(16).replace(""\\."".toRegex(), ""/"").lowercase(Locale.getDefault())
            } else {
                throw RuntimeException(""Recipe package unrecognized: ${recipe.name}"")
            }

        private fun getRecipePath(recipesPath: Path, recipeDescriptor: RecipeDescriptor) =
            recipesPath.resolve(getRecipePath(recipeDescriptor) + "".md"")

        private fun getRecipeRelativePath(recipe: RecipeDescriptor): String =
            ""reference/recipes/"" + getRecipePath(recipe)

        private fun findCategoryDescriptor(
            categoryPathFragment: String,
            categoryDescriptors: Iterable<CategoryDescriptor>
        ): CategoryDescriptor? {
            val categoryPackage = ""org.openrewrite.${categoryPathFragment.replace('/', '.')}""
            return categoryDescriptors.find { descriptor -> descriptor.packageName == categoryPackage }
        }

        @JvmStatic
        fun main(args: Array<String>) {
            val exitCode = CommandLine(RecipeMarkdownGenerator()).execute(*args)
            exitProcess(exitCode)
        }
    }
}","java.lang.ClassCastException: class org.jetbrains.kotlin.fir.declarations.impl.FirPropertyImpl cannot be cast to class org.jetbrains.kotlin.fir.expressions.FirBlock (org.jetbrains.kotlin.fir.declarations.impl.FirPropertyImpl and org.jetbrains.kotlin.fir.expressions.FirBlock are in unnamed module of loader org.openrewrite.gradle.RewriteClassLoader @2ff3ad11)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.mapForLoop(KotlinParserVisitor.kt:4656)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitBlock(KotlinParserVisitor.kt:757)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitBlock(KotlinParserVisitor.kt:705)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4372)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitWhenBranch(KotlinParserVisitor.kt:3214)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4417)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitWhenExpression(KotlinParserVisitor.kt:3323)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4418)
  ..."
github.com,"openrewrite/rewrite-recipe-markdown-generator",main,YamlParser,"src/main/resources/recipeDescriptors.yml",IllegalStateException,,,"java.lang.IllegalStateException: src/main/resources/recipeDescriptors.yml is not print idempotent.
  org.openrewrite.Parser.requirePrintEqualsInput(Parser.java:51)"
github.com,"openrewrite/rewrite-recipe-markdown-generator",main,YamlParser,"src/main/resources/diffRecipeDescriptors.yml","IndexOutOfBoundsException",,,"java.lang.IndexOutOfBoundsException: Index 3 out of bounds for length 3
  java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)
  java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)
  java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)
  java.base/java.util.Objects.checkIndex(Objects.java:361)
  java.base/java.util.ArrayList.get(ArrayList.java:427)
  org.openrewrite.yaml.FormatPreservingReader.readStringFromBuffer(FormatPreservingReader.java:72)"
github.com,"openrewrite/rewrite-recipe-markdown-generator",main,YamlParser,"src/main/resources/snapshotRecipeDescriptors.yml",IllegalStateException,,,"java.lang.IllegalStateException: src/main/resources/snapshotRecipeDescriptors.yml is not print idempotent.
  org.openrewrite.Parser.requirePrintEqualsInput(Parser.java:51)"
github.com,"PrzemyslawSwiderski/yaml-secrets-gradle-plugin",master,GroovyParser,"examples/sample-groovy-dsl-project/build.gradle",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse examples/sample-groovy-dsl-project/build.gradle at cursor position 130. The next 10 characters in the original source are `Map testMa`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"PrzemyslawSwiderski/yaml-secrets-gradle-plugin",master,PythonParser,"examples/sample-python-project/main/main.py","UnsupportedClassVersionError",,,"java.lang.UnsupportedClassVersionError: com/jetbrains/python/psi/PyStatementListContainer has been compiled by a more recent version of the Java Runtime (class file version 61.0), this version of the Java Runtime only recognizes class file versions up to 52.0
  java.lang.ClassLoader.defineClass1(Native Method)
  java.lang.ClassLoader.defineClass(ClassLoader.java:756)
  java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)
  java.net.URLClassLoader.defineClass(URLClassLoader.java:473)
  java.net.URLClassLoader.access$100(URLClassLoader.java:74)
  java.net.URLClassLoader$1.run(URLClassLoader.java:369)
  java.net.URLClassLoader$1.run(URLClassLoader.java:363)
  java.security.AccessController.doPrivileged(Native Method)
  ..."
github.com,"PrzemyslawSwiderski/yaml-secrets-gradle-plugin",master,KotlinParser,"src/main/kotlin/com/pswidersk/gradle/yamlsecrets/YamlSecretsResolver.kt","UnsupportedOperationException","org.jetbrains.kotlin.KtRealSourceElementKind@6f1c5f7","open class YamlSecretsResolver {
    private val secretsDataByName: MutableMap<String, YamlSecretsData> = mutableMapOf()

    inline fun <reified T> get(
        fullKey: String
    ): T {
        return get(
            fullKey.substringBefore(PROPS_SEP),
            fullKey.substringAfter(PROPS_SEP, """"),
            fromDotCaseToSnake(fullKey)
        )
    }

    inline fun <reified T> get(
        secretsName: String,
        yamlPropertyKey: String,
        envVarName: String = fromDotCaseToSnake(secretsName + PROPS_SEP + yamlPropertyKey)
    ): T {
        val secretValue = getValue(secretsName, yamlPropertyKey, envVarName)
        check(secretValue is T) { ""Illegal generic type: ${T::class.java.simpleName}, secret value is type of: ${secretValue.javaClass.simpleName} for secret: $secretsName and key: $yamlPropertyKey"" }
        return secretValue
    }

    fun getValue(fullKey: String): Any {
        return getValue(
            fullKey.substringBefore(PROPS_SEP),
            fullKey.substringAfter(PROPS_SEP, """"),
            fromDotCaseToSnake(fullKey)
        )
    }

    fun getValue(
        secretsName: String,
        yamlPropertyKey: String,
        envVarName: String = fromDotCaseToSnake(secretsName + PROPS_SEP + yamlPropertyKey)
    ): Any {
        val envVarValue = SystemUtils.getEnvironmentVariable(envVarName, """")
        if (envVarValue.isNotEmpty()) {
            return envVarValue;
        }

        val secrets = secretsDataByName.getValue(secretsName)
        if (yamlPropertyKey == """")
            return secrets.properties
        return getNestedValue(yamlPropertyKey, secretsName, secrets.properties)
    }

    fun getSecretsData(secretsName: String): YamlSecretsData {
        check(secretsDataByName.contains(secretsName)) { ""Secrets with name: \""$secretsName\"" could not be found."" }
        return secretsDataByName.getValue(secretsName)
    }

    fun getNames(): Set<String> {
        return secretsDataByName.keys
    }

    fun addSecrets(secretsFileName: String, yamlSecretsData: YamlSecretsData) {
        this.secretsDataByName[secretsFileName] = yamlSecretsData
    }

    private fun getNestedValue(yamlPropertyKey: String, secretsName: String, secretsMap: Map<*, *>): Any {
        val keys = yamlPropertyKey.split(PROPS_SEP)
        var currentMap = secretsMap
        keys.forEachIndexed { index, key ->
            when {
                isArrayIndex(key) -> {
                    val arrayIndex = extractArrayIndex(key)
                    when (val array = currentMap[keys[index - 1]]) {
                        is List<*> -> {
                            val arrayValue = array[arrayIndex]
                            when {
                                arrayValue == null -> throw IllegalStateException(""Array value can not be null for key: $key and secrets: $secretsName."")
                                isLast(index, keys) -> return arrayValue
                                arrayValue is Map<*, *> -> currentMap = arrayValue
                            }
                        }
                        else -> throw IllegalStateException(""Expecting array in key: $key and secrets: $secretsName."")
                    }
                }
                isLast(index, keys) -> {
                    val value = currentMap[key]
                    if (value == null)
                        throw IllegalStateException(""Key: $key does not exists in secrets: $secretsName."")
                    else
                        return value
                }
                else -> {
                    when (val mapValue = currentMap[key]) {
                        null -> throw IllegalStateException(""Key: $key does not exists in secrets: $secretsName."")
                        is Map<*, *> -> currentMap = mapValue
                    }
                }
            }
        }
        throw IllegalStateException(""Key: $yamlPropertyKey is illegal in secrets: $secretsName."")
    }

    private fun isArrayIndex(key: String): Boolean {
        return key.startsWith(ARRAY_START) && key.endsWith(ARRAY_END)
    }

    private fun isLast(index: Int, keys: List<String>): Boolean {
        return index == keys.lastIndex
    }

    private fun extractArrayIndex(listIndex: String): Int {
        return try {
            listIndex.trimStart(ARRAY_START).trimEnd(ARRAY_END).toInt()
        } catch (t: Throwable) {
            throw IllegalStateException(
                ""Illegal array index: $listIndex, should match pattern "" +
                        ""'arrayProperty$PROPS_SEP${ARRAY_START}i$ARRAY_END', where i is an index value.""
            )
        }
    }


}","java.lang.UnsupportedOperationException: FirWhenSubjectExpression is not supported at cursor: is Map<*, *> -> currentMap = min file: /home/ubuntu/jenkins-agent/workspace/cli-ingest/PrzemyslawSwiderski_yaml-secrets-gradle-plugin_master/src/main/kotlin/com/pswidersk/gradle/yamlsecrets/YamlSecretsResolver.kt
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitWhenSubjectExpression(KotlinParserVisitor.kt:4261)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4419)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitTypeOperatorCall(KotlinParserVisitor.kt:2751)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4409)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitWhenExpression(KotlinParserVisitor.kt:3281)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4418)
  ..."
github.com,"PrzemyslawSwiderski/yaml-secrets-gradle-plugin",master,KotlinParser,"src/test/kotlin/com/pswidersk/gradle/yamlsecrets/YamlSecretsResolverTest.kt",AssertionError,,,"java.lang.AssertionError: null
  org.openrewrite.java.tree.TypeTree.build(TypeTree.java:95)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitResolvedQualifier(KotlinParserVisitor.kt:2358)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4398)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.mapFunctionCall(KotlinParserVisitor.kt:1116)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitFunctionCall(KotlinParserVisitor.kt:1026)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4385)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitBlock(KotlinParserVisitor.kt:766)
  ..."
github.com,"PrzemyslawSwiderski/yaml-secrets-gradle-plugin",master,KotlinParser,"src/test/kotlin/com/pswidersk/gradle/yamlsecrets/YamlSecretsPluginTest.kt",AssertionError,,,"java.lang.AssertionError: null
  org.openrewrite.java.tree.TypeTree.build(TypeTree.java:95)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitResolvedQualifier(KotlinParserVisitor.kt:2358)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4398)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.mapFunctionCall(KotlinParserVisitor.kt:1116)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitFunctionCall(KotlinParserVisitor.kt:1026)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4385)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitBlock(KotlinParserVisitor.kt:766)
  ..."
github.com,lexica/lexica,master,KotlinParser,"api-generator/src/main/java/com/serwylo/lexica/api/ApiGenerator.kt",IllegalStateException,"org.jetbrains.kotlin.KtRealSourceElementKind@47e5ed4a","fun main(args: Array<String>) {

    if (args.size != 3) {
        println(""Usage: ApiGenerator path-to-dict-dir path-to-letters-dir path-to-output-dir"")
        exitProcess(1)
    }

    val dictDir = File(args[0])
    val lettersDir = File(args[1])
    val outputDir = File(args[2])

    if (!File(dictDir, EnglishUS().dictionaryFileName).exists()) {
        println(""Error: Incorrect path-to-dict-dir: $dictDir"")
        exitProcess(1)
    }

    if (!File(lettersDir, EnglishUS().letterDistributionFileName).exists()) {
        println(""Error: Incorrect path-to-letters-dir: $lettersDir"")
        exitProcess(1)
    }

    if (!outputDir.exists() && !outputDir.mkdirs()) {
        println(""Error: Could not make output directory: ${outputDir.absolutePath}"")
        exitProcess(1)
    }

    val languageMetadata: Map<Language, LanguageMetadata> =
        Language.allLanguages.values.associateWith { language ->
            val charProbs = CharProbGenerator(File(lettersDir, language.letterDistributionFileName).inputStream(), language)

            LanguageMetadata(
                language.name,
                language.locale.toLanguageTag(),
                language.isBeta,
                language.definitionUrl,
                letterProbabilities = readLetters(language, lettersDir),
                letterScores = charProbs.alphabet.associateWith { letter ->
                    language.getPointsForLetter(language.applyMandatorySuffix(letter))
                }
            )
        }

    val paths = mutableListOf<String>()

    paths.add(outputSummaryMetadata(outputDir, languageMetadata))
    paths.add(outputLanguagesList(outputDir, languageMetadata))

    Language.allLanguages.values.onEach { language ->
        paths.addAll(outputLanguageMetadata(language, languageMetadata[language]!!, dictDir, lettersDir, outputDir))
    }

    outputIndex(outputDir, paths)
}","java.lang.IllegalStateException: Expected JavaType.Parameterized for signature : kotlin.collections.MutableList
  org.openrewrite.kotlin.KotlinTypeMapping.classType(KotlinTypeMapping.java:309)
  org.openrewrite.kotlin.KotlinTypeMapping.resolveType(KotlinTypeMapping.java:150)
  org.openrewrite.kotlin.KotlinTypeMapping.type(KotlinTypeMapping.java:116)
  org.openrewrite.kotlin.KotlinTypeMapping.resolveType(KotlinTypeMapping.java:124)
  org.openrewrite.kotlin.KotlinTypeMapping.type(KotlinTypeMapping.java:116)
  org.openrewrite.kotlin.KotlinTypeMapping.type(KotlinTypeMapping.java:78)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitPropertyAccessExpression(KotlinParserVisitor.java:1963)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.java:3966)
  ..."
github.com,Mics21/localinfra,main,KotlinParser,"src/main/kotlin/LocalInfra.kt",IllegalStateException,,,"java.lang.IllegalStateException: src/main/kotlin/LocalInfra.kt is not print idempotent.
  org.openrewrite.Parser.requirePrintEqualsInput(Parser.java:51)"
github.com,square/okio,master,KotlinParser,"okio-testing-support/src/commonMain/kotlin/okio/AbstractFileSystemTest.kt",IllegalStateException,,,"java.lang.IllegalStateException: okio-testing-support/src/commonMain/kotlin/okio/AbstractFileSystemTest.kt is not print idempotent.
  org.openrewrite.Parser.requirePrintEqualsInput(Parser.java:51)"
github.com,square/okio,master,KotlinParser,"okio-testing-support/src/commonMain/kotlin/okio/TestingCommon.kt",IllegalStateException,,,"java.lang.IllegalStateException: okio-testing-support/src/commonMain/kotlin/okio/TestingCommon.kt is not print idempotent.
  org.openrewrite.Parser.requirePrintEqualsInput(Parser.java:51)"
github.com,square/okio,master,KotlinParser,"okio-fakefilesystem/src/commonMain/kotlin/okio/fakefilesystem/FileMetadataCommon.kt","UnsupportedOperationException","org.jetbrains.kotlin.KtRealSourceElementKind@1f4e01bf","@JvmName(""newFileMetadata"")
internal fun FileMetadata(
  isRegularFile: Boolean = false,
  isDirectory: Boolean = false,
  symlinkTarget: Path? = null,
  size: Long? = null,
  createdAt: Instant? = null,
  lastModifiedAt: Instant? = null,
  lastAccessedAt: Instant? = null,
  extras: Map<KClass<*>, Any> = mapOf(),
): FileMetadata {
  return FileMetadata(
    isRegularFile = isRegularFile,
    isDirectory = isDirectory,
    symlinkTarget = symlinkTarget,
    size = size,
    createdAtMillis = createdAt?.toEpochMilliseconds(),
    lastModifiedAtMillis = lastModifiedAt?.toEpochMilliseconds(),
    lastAccessedAtMillis = lastAccessedAt?.toEpochMilliseconds(),
    extras = extras,
  )
}","java.lang.UnsupportedOperationException: FirErrorTypeRef is not supported at cursor:  FileMetadata {
  return FileMin file: /home/ubuntu/jenkins-agent/workspace/cli-ingest/square_okio_master/okio-fakefilesystem/src/commonMain/kotlin/okio/fakefilesystem/FileMetadataCommon.kt
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitErrorTypeRef(KotlinParserVisitor.kt:4315)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4361)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitSimpleFunction(KotlinParserVisitor.kt:2529)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4402)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitFile(KotlinParserVisitor.kt:166)"
github.com,square/okio,master,KotlinParser,"okio-fakefilesystem/src/commonMain/kotlin/okio/fakefilesystem/FakeFileSystem.kt","UnsupportedOperationException","org.jetbrains.kotlin.KtRealSourceElementKind@1f4e01bf","class FakeFileSystem(
  @JvmField
  val clock: Clock = Clock.System,
) : FileSystem() {

  /** File system roots. Each element is a Directory and is created on-demand. */
  private val roots = mutableMapOf<Path, Directory>()

  /** Files that are currently open and need to be closed to avoid resource leaks. */
  private val openFiles = mutableListOf<OpenFile>()

  /**
   * An absolute path with this file system's current working directory. Relative paths will be
   * resolved against this directory when they are used.
   */
  var workingDirectory: Path = ""/"".toPath()
    set(value) {
      require(value.isAbsolute) {
        ""expected an absolute path but was $value""
      }
      field = value
    }

  /**
   * True to allow files to be moved even if they're currently open for read or write. UNIX file
   * systems typically allow open files to be moved; Windows file systems do not.
   */
  var allowMovingOpenFiles = false

  /**
   * True to allow files to be deleted even if they're currently open for read or write. UNIX file
   * systems typically allow open files to be deleted; Windows file systems do not.
   */
  var allowDeletingOpenFiles = false

  /**
   * True to allow the target of an [atomicMove] operation to be an empty directory. Windows file
   * systems typically allow files to replace empty directories; UNIX file systems do not.
   */
  var allowClobberingEmptyDirectories = false

  /**
   * True to permit a file to have multiple [sinks][sink] open at the same time. Both Windows and
   * UNIX file systems permit this but the result may be undefined.
   */
  var allowWritesWhileWriting = false

  /**
   * True to permit a file to have a [source] and [sink] open at the same time. Both Windows and
   * UNIX file systems permit this but the result may be undefined.
   */
  var allowReadsWhileWriting = false

  /**
   * True to allow symlinks to be created. UNIX file systems typically allow symlinks; Windows file
   * systems do not. Setting this to false after creating a symlink does not prevent that symlink
   * from being returned or used.
   */
  var allowSymlinks = false

  /**
   * Canonical paths for every file and directory in this file system. This omits file system roots
   * like `C:\` and `/`.
   */
  @get:JvmName(""allPaths"")
  val allPaths: Set<Path>
    get() {
      val result = mutableListOf<Path>()
      for (path in roots.keys) {
        result += listRecursively(path)
      }
      result.sort()
      return result.toSet()
    }

  /**
   * Canonical paths currently opened for reading or writing in the order they were opened. This may
   * contain duplicates if a single path is open by multiple readers.
   *
   * Note that this may contain paths not present in [allPaths]. This occurs if a file is deleted
   * while it is still open.
   *
   * The returned list is ordered by the order that the paths were opened.
   */
  @get:JvmName(""openPaths"")
  val openPaths: List<Path>
    get() = openFiles.map { it.canonicalPath }

  /**
   * Confirm that all files that have been opened on this file system (with [source], [sink], and
   * [appendingSink]) have since been closed. Call this in your test's `tearDown()` function to
   * confirm that your program hasn't leaked any open files.
   *
   * Forgetting to close a file on a real file system is a severe error that may lead to a program
   * crash. The operating system enforces a limit on how many files may be open simultaneously. On
   * Linux this is [getrlimit] and is commonly adjusted with the `ulimit` command.
   *
   * [getrlimit]: https://man7.org/linux/man-pages/man2/getrlimit.2.html
   *
   * @throws IllegalStateException if any files are open when this function is called.
   */
  fun checkNoOpenFiles() {
    val firstOpenFile = openFiles.firstOrNull() ?: return
    throw IllegalStateException(
      """"""
      |expected 0 open files, but found:
      |    ${openFiles.joinToString(separator = ""\n    "") { it.canonicalPath.toString() }}
      """""".trimMargin(),
      firstOpenFile.backtrace,
    )
  }

  /**
   * Configure this file system to use a Windows-like working directory (`F:\`, unless the working
   * directory is already Windows-like) and to follow a Windows-like policy on what operations
   * are permitted.
   */
  fun emulateWindows() {
    if (""\\"" !in workingDirectory.toString()) {
      workingDirectory = ""F:\\"".toPath()
    }
    allowMovingOpenFiles = false
    allowDeletingOpenFiles = false
    allowClobberingEmptyDirectories = true
    allowWritesWhileWriting = true
    allowReadsWhileWriting = true
  }

  /**
   * Configure this file system to use a UNIX-like working directory (`/`, unless the working
   * directory is already UNIX-like) and to follow a UNIX-like policy on what operations are
   * permitted.
   */
  fun emulateUnix() {
    if (""/"" !in workingDirectory.toString()) {
      workingDirectory = ""/"".toPath()
    }
    allowMovingOpenFiles = true
    allowDeletingOpenFiles = true
    allowClobberingEmptyDirectories = false
    allowWritesWhileWriting = true
    allowReadsWhileWriting = true
    allowSymlinks = true
  }

  override fun canonicalize(path: Path): Path {
    val canonicalPath = canonicalizeInternal(path)

    val lookupResult = lookupPath(canonicalPath)
    if (lookupResult?.element == null) {
      throw FileNotFoundException(""no such file: $path"")
    }

    return lookupResult.path
  }

  /** Don't throw [FileNotFoundException] if the path doesn't identify a file. */
  private fun canonicalizeInternal(path: Path): Path {
    return workingDirectory.resolve(path, normalize = true)
  }

  /**
   * Sets the metadata of type [type] on [path] to [value]. If [value] is null this clears that
   * metadata.
   *
   * Extras are not copied by [copy] but they are moved with [atomicMove].
   *
   * @throws IOException if [path] does not exist.
   */
  @Throws(IOException::class)
  fun <T : Any> setExtra(path: Path, type: KClass<out T>, value: T?) {
    val canonicalPath = canonicalizeInternal(path)
    val lookupResult = lookupPath(
      canonicalPath = canonicalPath,
      createRootOnDemand = canonicalPath.isRoot,
      resolveLastSymlink = false,
    )
    val element = lookupResult?.element ?: throw FileNotFoundException(""no such file: $path"")
    if (value == null) {
      element.extras.remove(type)
    } else {
      element.extras[type] = value
    }
  }

  override fun metadataOrNull(path: Path): FileMetadata? {
    val canonicalPath = canonicalizeInternal(path)
    val lookupResult = lookupPath(
      canonicalPath = canonicalPath,
      createRootOnDemand = canonicalPath.isRoot,
      resolveLastSymlink = false,
    )
    return lookupResult?.element?.metadata
  }

  override fun list(dir: Path): List<Path> = list(dir, throwOnFailure = true)!!

  override fun listOrNull(dir: Path): List<Path>? = list(dir, throwOnFailure = false)

  private fun list(dir: Path, throwOnFailure: Boolean): List<Path>? {
    val canonicalPath = canonicalizeInternal(dir)
    val lookupResult = lookupPath(canonicalPath)
    if (lookupResult?.element == null) {
      if (throwOnFailure) throw FileNotFoundException(""no such directory: $dir"") else return null
    }
    val element = lookupResult.element as? Directory
      ?: if (throwOnFailure) throw IOException(""not a directory: $dir"") else return null

    element.access(now = clock.now())
    return element.children.keys.map { dir / it }.sorted()
  }

  override fun source(file: Path): Source {
    val fileHandle = openReadOnly(file)
    return fileHandle.source()
      .also { fileHandle.close() }
  }

  override fun sink(file: Path, mustCreate: Boolean): Sink {
    val fileHandle = open(file, readWrite = true, mustCreate = mustCreate)
    fileHandle.resize(0L) // If the file already has data, get rid of it.
    return fileHandle.sink()
      .also { fileHandle.close() }
  }

  override fun appendingSink(file: Path, mustExist: Boolean): Sink {
    val fileHandle = open(file, readWrite = true, mustExist = mustExist)
    return fileHandle.appendingSink()
      .also { fileHandle.close() }
  }

  override fun openReadOnly(file: Path): FileHandle {
    return open(file, readWrite = false)
  }

  override fun openReadWrite(file: Path, mustCreate: Boolean, mustExist: Boolean): FileHandle {
    return open(file, readWrite = true, mustCreate = mustCreate, mustExist = mustExist)
  }

  private fun open(
    file: Path,
    readWrite: Boolean,
    mustCreate: Boolean = false,
    mustExist: Boolean = false,
  ): FileHandle {
    require(!mustCreate || !mustExist) {
      ""Cannot require mustCreate and mustExist at the same time.""
    }

    val canonicalPath = canonicalizeInternal(file)
    val lookupResult = lookupPath(canonicalPath, createRootOnDemand = readWrite)
    val now = clock.now()
    val element: File
    val operation: Operation

    if (lookupResult?.element == null && mustExist) {
      throw IOException(""$file doesn't exist."")
    }
    if (lookupResult?.element != null && mustCreate) {
      throw IOException(""$file already exists."")
    }

    if (readWrite) {
      // Note that this case is used for both write and read/write.
      if (lookupResult?.element is Directory) {
        throw IOException(""destination is a directory: $file"")
      }
      if (!allowWritesWhileWriting) {
        findOpenFile(canonicalPath, operation = WRITE)?.let {
          throw IOException(""file is already open for writing $file"", it.backtrace)
        }
      }
      if (!allowReadsWhileWriting) {
        findOpenFile(canonicalPath, operation = READ)?.let {
          throw IOException(""file is already open for reading $file"", it.backtrace)
        }
      }

      val parent = lookupResult?.parent
        ?: throw FileNotFoundException(""parent directory does not exist"")
      parent.access(now, true)

      val existing = lookupResult.element
      element = File(createdAt = existing?.createdAt ?: now)
      parent.children[lookupResult.segment!!] = element
      operation = WRITE

      if (existing is File) {
        element.data = existing.data
      }
    } else {
      val existing = lookupResult?.element
        ?: throw FileNotFoundException(""no such file: $file"")
      element = existing as? File ?: throw IOException(""not a file: $file"")
      operation = READ

      if (!allowReadsWhileWriting) {
        findOpenFile(canonicalPath, operation = WRITE)?.let {
          throw IOException(""file is already open for writing $file"", it.backtrace)
        }
      }
    }

    element.access(now = clock.now(), modified = readWrite)

    val openFile = OpenFile(canonicalPath, operation, Exception(""file opened for $operation here""))
    openFiles += openFile

    return FakeFileHandle(
      readWrite = readWrite,
      openFile = openFile,
      file = element,
    )
  }

  override fun createDirectory(dir: Path, mustCreate: Boolean) {
    val canonicalPath = canonicalizeInternal(dir)

    val lookupResult = lookupPath(canonicalPath, createRootOnDemand = true)

    if (canonicalPath.isRoot) {
      // Looking it up was sufficient. Don't crash when creating roots that already exist.
      return
    }

    if (mustCreate && lookupResult?.element != null) {
      throw IOException(""already exists: $dir"")
    }

    val parentDirectory = lookupResult.requireParent()
    parentDirectory.children[canonicalPath.nameBytes] = Directory(createdAt = clock.now())
  }

  override fun atomicMove(
    source: Path,
    target: Path,
  ) {
    val canonicalSource = canonicalizeInternal(source)
    val canonicalTarget = canonicalizeInternal(target)

    val targetLookupResult = lookupPath(canonicalTarget, createRootOnDemand = true)
    val sourceLookupResult = lookupPath(canonicalSource, resolveLastSymlink = false)

    // Universal constraints.
    if (targetLookupResult?.element is Directory) {
      throw IOException(""target is a directory: $target"")
    }
    val targetParent = targetLookupResult.requireParent()
    if (!allowMovingOpenFiles) {
      findOpenFile(canonicalSource)?.let {
        throw IOException(""source is open $source"", it.backtrace)
      }
      findOpenFile(canonicalTarget)?.let {
        throw IOException(""target is open $target"", it.backtrace)
      }
    }
    if (!allowClobberingEmptyDirectories) {
      if (sourceLookupResult?.element is Directory && targetLookupResult?.element is File) {
        throw IOException(""source is a directory and target is a file"")
      }
    }

    val sourceParent = sourceLookupResult.requireParent()
    val removed = sourceParent.children.remove(canonicalSource.nameBytes)
      ?: throw FileNotFoundException(""source doesn't exist: $source"")
    targetParent.children[canonicalTarget.nameBytes] = removed
  }

  override fun delete(path: Path, mustExist: Boolean) {
    val canonicalPath = canonicalizeInternal(path)

    val lookupResult = lookupPath(
      canonicalPath = canonicalPath,
      createRootOnDemand = true,
      resolveLastSymlink = false,
    )

    if (lookupResult?.element == null) {
      if (mustExist) {
        throw FileNotFoundException(""no such file: $path"")
      } else {
        return
      }
    }

    if (lookupResult.element is Directory && lookupResult.element.children.isNotEmpty()) {
      throw IOException(""non-empty directory"")
    }

    if (!allowDeletingOpenFiles) {
      findOpenFile(canonicalPath)?.let {
        throw IOException(""file is open $path"", it.backtrace)
      }
    }

    val directory = lookupResult.requireParent()
    directory.children.remove(canonicalPath.nameBytes)
  }

  override fun createSymlink(
    source: Path,
    target: Path,
  ) {
    val canonicalSource = canonicalizeInternal(source)

    val existingLookupResult = lookupPath(canonicalSource, createRootOnDemand = true)
    if (existingLookupResult?.element != null) {
      throw IOException(""already exists: $source"")
    }
    val parent = existingLookupResult.requireParent()

    if (!allowSymlinks) {
      throw IOException(""symlinks are not supported"")
    }

    parent.children[canonicalSource.nameBytes] = Symlink(createdAt = clock.now(), target)
  }

  /**
   * Walks the file system looking for [canonicalPath], following symlinks encountered along the
   * way. This function is designed to be used both when looking up existing files and when creating
   * new files into an existing directory.
   *
   * It returns either:
   *
   *  * a path lookup result with an element if that file or directory or symlink exists. This is
   *    useful when reading or writing an existing fie.
   *
   *  * a path lookup result that only got as far as the canonical path's parent, if the parent
   *    exists but the child file does not. This is useful when creating a new file.
   *
   *  * null, if not even the parent directory exists. A file cannot yet be created with this path
   *    because there is no parent to attach it to.
   *
   * This will create the root of the returned path if it does not exist.
   *
   * @param canonicalPath a normalized path, typically the result of [FakeFileSystem.canonicalizeInternal].
   * @param recurseCount used internally to detect cycles.
   * @param resolveLastSymlink true if the result's element must not itself be a symlink. Use this
   *     for looking up metadata, or operations that apply to the path like delete and move. We
   *     always follow symlinks for enclosing directories.
   * @param createRootOnDemand true to create a root directory like `C:\` or `/` if it doesn't
   *     exist. Pass true for mutating operations.
   */
  private fun lookupPath(
    canonicalPath: Path,
    recurseCount: Int = 0,
    resolveLastSymlink: Boolean = true,
    createRootOnDemand: Boolean = false,
  ): PathLookupResult? {
    // 40 is chosen for consistency with the Linux kernel (which previously used 8).
    if (recurseCount > 40) {
      throw IOException(""symlink cycle?"")
    }

    val rootPath = canonicalPath.root!!
    var root = roots[rootPath]

    // If the path is a root, create it on demand.
    if (root == null) {
      if (!createRootOnDemand) return null
      root = Directory(createdAt = clock.now())
      roots[rootPath] = root
    }

    var parent: Directory? = null
    var lastSegment: ByteString? = null
    var current: Element = root
    var currentPath: Path = rootPath

    var segmentsTraversed = 0
    val segments = canonicalPath.segmentsBytes
    for (segment in segments) {
      lastSegment = segment

      // Push the newest segment.
      if (current !is Directory) {
        throw IOException(""not a directory: $currentPath"")
      }
      parent = current
      current = current.children[segment] ?: break
      currentPath /= segment
      segmentsTraversed++

      // If it's a symlink, recurse to follow it.
      val isLastSegment = segmentsTraversed == segments.size
      val followSymlinks = !isLastSegment || resolveLastSymlink
      if (current is Symlink && followSymlinks) {
        current.access(now = clock.now())
        // We wanna normalize it in case the target is relative and starts with `..`.
        currentPath = currentPath.parent!!.resolve(current.target, normalize = true)
        val symlinkLookupResult = lookupPath(
          canonicalPath = currentPath,
          recurseCount = recurseCount + 1,
          createRootOnDemand = createRootOnDemand,
        ) ?: break
        parent = symlinkLookupResult.parent
        lastSegment = symlinkLookupResult.segment
        current = symlinkLookupResult.element ?: break
        currentPath = symlinkLookupResult.path
      }
    }

    return when (segmentsTraversed) {
      segments.size -> {
        PathLookupResult(currentPath, parent, lastSegment, current) // The file.
      }
      segments.size - 1 -> {
        PathLookupResult(currentPath, parent, lastSegment, null) // The enclosing directory.
      }
      else -> null // We found nothing.
    }
  }

  private class PathLookupResult(
    /** The canonical path for the looked up path or its enclosing directory. */
    val path: Path,
    /** Only null if the looked up path is a root. */
    val parent: Directory?,
    /** Only null if the looked up path is a root. */
    val segment: ByteString?,
    /** Non-null if this is a root. Also not null if this file exists. */
    val element: Element?,
  )

  private fun PathLookupResult?.requireParent(): Directory {
    return this?.parent ?: throw IOException(""parent directory does not exist"")
  }

  private sealed class Element(
    val createdAt: Instant,
  ) {
    var lastModifiedAt: Instant = createdAt
    var lastAccessedAt: Instant = createdAt
    val extras = mutableMapOf<KClass<*>, Any>()

    class File(createdAt: Instant) : Element(createdAt) {
      var data: ByteString = ByteString.EMPTY

      override val metadata: FileMetadata
        get() = FileMetadata(
          isRegularFile = true,
          size = data.size.toLong(),
          createdAt = createdAt,
          lastModifiedAt = lastModifiedAt,
          lastAccessedAt = lastAccessedAt,
          extras = extras,
        )
    }

    class Directory(createdAt: Instant) : Element(createdAt) {
      /** Keys are path segments. */
      val children = mutableMapOf<ByteString, Element>()

      override val metadata: FileMetadata
        get() = FileMetadata(
          isDirectory = true,
          createdAt = createdAt,
          lastModifiedAt = lastModifiedAt,
          lastAccessedAt = lastAccessedAt,
          extras = extras,
        )
    }

    class Symlink(
      createdAt: Instant,
      /** This may be an absolute or relative path. */
      val target: Path,
    ) : Element(createdAt) {
      override val metadata: FileMetadata
        get() = FileMetadata(
          symlinkTarget = target,
          createdAt = createdAt,
          lastModifiedAt = lastModifiedAt,
          lastAccessedAt = lastAccessedAt,
          extras = extras,
        )
    }

    fun access(
      now: Instant,
      modified: Boolean = false,
    ) {
      lastAccessedAt = now
      if (modified) {
        lastModifiedAt = now
      }
    }

    abstract val metadata: FileMetadata
  }

  private fun findOpenFile(
    canonicalPath: Path,
    operation: Operation? = null,
  ): OpenFile? {
    return openFiles.firstOrNull {
      it.canonicalPath == canonicalPath && (operation == null || operation == it.operation)
    }
  }

  private fun checkOffsetAndCount(
    size: Long,
    offset: Long,
    byteCount: Long,
  ) {
    if (offset or byteCount < 0 || offset > size || size - offset < byteCount) {
      throw ArrayIndexOutOfBoundsException(""size=$size offset=$offset byteCount=$byteCount"")
    }
  }

  private class OpenFile(
    val canonicalPath: Path,
    val operation: Operation,
    val backtrace: Throwable,
  )

  private enum class Operation {
    READ,
    WRITE,
  }

  private inner class FakeFileHandle(
    readWrite: Boolean,
    private val openFile: OpenFile,
    private val file: File,
  ) : FileHandle(readWrite) {
    private var closed = false

    override fun protectedResize(size: Long) {
      check(!closed) { ""closed"" }

      val delta = size - file.data.size
      if (delta > 0) {
        file.data = Buffer()
          .write(file.data)
          .write(ByteArray(delta.toInt()))
          .readByteString()
      } else {
        file.data = file.data.substring(0, size.toInt())
      }

      file.access(now = clock.now(), modified = true)
    }

    override fun protectedSize(): Long {
      check(!closed) { ""closed"" }
      return file.data.size.toLong()
    }

    override fun protectedRead(
      fileOffset: Long,
      array: ByteArray,
      arrayOffset: Int,
      byteCount: Int,
    ): Int {
      check(!closed) { ""closed"" }
      checkOffsetAndCount(array.size.toLong(), arrayOffset.toLong(), byteCount.toLong())

      val fileOffsetInt = fileOffset.toInt()
      val toCopy = minOf(file.data.size - fileOffsetInt, byteCount)
      if (toCopy <= 0) return -1
      for (i in 0 until toCopy) {
        array[i + arrayOffset] = file.data[i + fileOffsetInt]
      }
      return toCopy
    }

    override fun protectedWrite(
      fileOffset: Long,
      array: ByteArray,
      arrayOffset: Int,
      byteCount: Int,
    ) {
      check(!closed) { ""closed"" }
      checkOffsetAndCount(array.size.toLong(), arrayOffset.toLong(), byteCount.toLong())

      val buffer = Buffer()
      buffer.write(file.data, 0, minOf(fileOffset.toInt(), file.data.size))
      while (buffer.size < fileOffset) {
        buffer.writeByte(0)
      }
      buffer.write(array, arrayOffset, byteCount)
      if (buffer.size < file.data.size) {
        buffer.write(file.data, buffer.size.toInt(), file.data.size - buffer.size.toInt())
      }
      file.data = buffer.snapshot()
      file.access(now = clock.now(), modified = true)
    }

    override fun protectedFlush() {
      check(!closed) { ""closed"" }
    }

    override fun protectedClose() {
      if (closed) return
      closed = true
      file.access(now = clock.now(), modified = readWrite)
      openFiles -= openFile
    }

    override fun toString() = ""FileHandler(${openFile.canonicalPath})""
  }

  override fun toString() = ""FakeFileSystem""
}","java.lang.UnsupportedOperationException: FirErrorTypeRef is not supported at cursor: @JvmField
  val clock: Clock =in file: /home/ubuntu/jenkins-agent/workspace/cli-ingest/square_okio_master/okio-fakefilesystem/src/commonMain/kotlin/okio/fakefilesystem/FakeFileSystem.kt
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitErrorTypeRef(KotlinParserVisitor.kt:4315)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4361)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitRegularClass(KotlinParserVisitor.kt:3907)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4395)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitFile(KotlinParserVisitor.kt:166)"
github.com,square/okio,master,KotlinParser,"okio/src/appleMain/kotlin/okio/SegmentedByteString.kt",IllegalStateException,,,"java.lang.IllegalStateException: okio/src/appleMain/kotlin/okio/SegmentedByteString.kt is not print idempotent.
  org.openrewrite.Parser.requirePrintEqualsInput(Parser.java:51)"
github.com,square/okio,master,KotlinParser,"okio/src/appleMain/kotlin/okio/ByteString.kt","UnsupportedOperationException","org.jetbrains.kotlin.KtRealSourceElementKind@29aa9249","actual open class ByteString
internal actual constructor(
  internal actual val data: ByteArray,
) : Comparable<ByteString> {
  @Suppress(""SetterBackingFieldAssignment"")
  internal actual var hashCode: Int = 0 // 0 if unknown.
    set(value) {
      // Do nothing to avoid IllegalImmutabilityException.
    }

  @Suppress(""SetterBackingFieldAssignment"")
  internal actual var utf8: String? = null
    set(value) {
      // Do nothing to avoid IllegalImmutabilityException.
    }

  actual open fun utf8(): String = commonUtf8()

  actual open fun base64(): String = commonBase64()

  actual open fun base64Url(): String = commonBase64Url()

  actual open fun hex(): String = commonHex()

  actual fun md5() = digest(Md5())

  actual fun sha1() = digest(Sha1())

  actual fun sha256() = digest(Sha256())

  actual fun sha512() = digest(Sha512())

  /** Returns the 160-bit SHA-1 HMAC of this byte string.  */
  actual fun hmacSha1(key: ByteString) = digest(Hmac.sha1(key))

  /** Returns the 256-bit SHA-256 HMAC of this byte string.  */
  actual fun hmacSha256(key: ByteString) = digest(Hmac.sha256(key))

  /** Returns the 512-bit SHA-512 HMAC of this byte string.  */
  actual fun hmacSha512(key: ByteString) = digest(Hmac.sha512(key))

  internal open fun digest(hashFunction: HashFunction): ByteString {
    hashFunction.update(data, 0, size)
    val digestBytes = hashFunction.digest()
    return ByteString(digestBytes)
  }

  actual open fun toAsciiLowercase(): ByteString = commonToAsciiLowercase()

  actual open fun toAsciiUppercase(): ByteString = commonToAsciiUppercase()

  actual open fun substring(beginIndex: Int, endIndex: Int): ByteString =
    commonSubstring(beginIndex, endIndex)

  internal actual open fun internalGet(pos: Int): Byte {
    if (pos >= size || pos < 0) throw ArrayIndexOutOfBoundsException(""size=$size pos=$pos"")
    return commonGetByte(pos)
  }

  actual operator fun get(index: Int): Byte = internalGet(index)

  actual val size
    get() = getSize()

  internal actual open fun getSize() = commonGetSize()

  actual open fun toByteArray() = commonToByteArray()

  internal actual open fun internalArray() = commonInternalArray()

  internal actual open fun write(buffer: Buffer, offset: Int, byteCount: Int) =
    commonWrite(buffer, offset, byteCount)

  actual open fun rangeEquals(
    offset: Int,
    other: ByteString,
    otherOffset: Int,
    byteCount: Int,
  ): Boolean = commonRangeEquals(offset, other, otherOffset, byteCount)

  actual open fun rangeEquals(
    offset: Int,
    other: ByteArray,
    otherOffset: Int,
    byteCount: Int,
  ): Boolean = commonRangeEquals(offset, other, otherOffset, byteCount)

  actual open fun copyInto(
    offset: Int,
    target: ByteArray,
    targetOffset: Int,
    byteCount: Int,
  ) = commonCopyInto(offset, target, targetOffset, byteCount)

  actual fun startsWith(prefix: ByteString) = commonStartsWith(prefix)

  actual fun startsWith(prefix: ByteArray) = commonStartsWith(prefix)

  actual fun endsWith(suffix: ByteString) = commonEndsWith(suffix)

  actual fun endsWith(suffix: ByteArray) = commonEndsWith(suffix)

  actual fun indexOf(other: ByteString, fromIndex: Int) = indexOf(other.internalArray(), fromIndex)

  actual open fun indexOf(other: ByteArray, fromIndex: Int) = commonIndexOf(other, fromIndex)

  actual fun lastIndexOf(other: ByteString, fromIndex: Int) = commonLastIndexOf(other, fromIndex)

  actual open fun lastIndexOf(other: ByteArray, fromIndex: Int) = commonLastIndexOf(other, fromIndex)

  actual override fun equals(other: Any?) = commonEquals(other)

  actual override fun hashCode() = commonHashCode()

  actual override fun compareTo(other: ByteString) = commonCompareTo(other)

  /**
   * Returns a human-readable string that describes the contents of this byte string. Typically this
   * is a string like `[text=Hello]` or `[hex=0000ffff]`.
   */
  actual override fun toString() = commonToString()

  actual companion object {
    actual val EMPTY: ByteString = ByteString(byteArrayOf())

    actual fun of(vararg data: Byte) = commonOf(data)

    actual fun ByteArray.toByteString(offset: Int, byteCount: Int): ByteString =
      commonToByteString(offset, byteCount)

    actual fun String.encodeUtf8(): ByteString = commonEncodeUtf8()

    actual fun String.decodeBase64(): ByteString? = commonDecodeBase64()

    actual fun String.decodeHex() = commonDecodeHex()

    @OptIn(UnsafeNumber::class)
    @CName(""of"")
    fun NSData.toByteString(): ByteString {
      val data = this
      val size = data.length.toInt()
      return if (size != 0) {
        ByteString(
          ByteArray(size).apply {
            usePinned { pinned ->
              memcpy(pinned.addressOf(0), data.bytes, data.length)
            }
          },
        )
      } else {
        EMPTY
      }
    }
  }
}","java.lang.UnsupportedOperationException: FirErrorTypeRef is not supported at cursor: CName(""of"")
    fun NSData.toBin file: /home/ubuntu/jenkins-agent/workspace/cli-ingest/square_okio_master/okio/src/appleMain/kotlin/okio/ByteString.kt
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitErrorTypeRef(KotlinParserVisitor.kt:4315)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4361)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitAnnotationCall(KotlinParserVisitor.kt:301)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4364)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.mapModifierList(KotlinParserVisitor.kt:4148)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitSimpleFunction(KotlinParserVisitor.kt:2396)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4402)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitRegularClass(KotlinParserVisitor.kt:4026)
  ..."
github.com,square/okio,master,KotlinParser,"okio/src/appleMain/kotlin/okio/ByteString.kt","UnsupportedOperationException","org.jetbrains.kotlin.KtRealSourceElementKind@29aa9249","@Deprecated(
  message = ""Moved to ByteString companion object"",
  replaceWith = ReplaceWith(""this.toByteString()"", ""okio.ByteString.Companion.toByteString""),
)
fun NSData.toByteString(): ByteString {
  with(ByteString) {
    return toByteString()
  }
}","java.lang.UnsupportedOperationException: FirErrorTypeRef is not supported at cursor:  NSData.toByteString(): ByteStin file: /home/ubuntu/jenkins-agent/workspace/cli-ingest/square_okio_master/okio/src/appleMain/kotlin/okio/ByteString.kt
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitErrorTypeRef(KotlinParserVisitor.kt:4315)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4361)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitReceiverParameter(KotlinParserVisitor.kt:2207)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4394)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitSimpleFunction(KotlinParserVisitor.kt:2457)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4402)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitFile(KotlinParserVisitor.kt:166)"
github.com,square/okio,master,KotlinParser,"okio/src/appleMain/kotlin/okio/ApplePosixVariant.kt","UnsupportedOperationException","org.jetbrains.kotlin.KtRealSourceElementKind@29aa9249","internal actual fun PosixFileSystem.variantMetadataOrNull(path: Path): FileMetadata? {
  return memScoped {
    val stat = alloc<stat>()
    if (lstat(path.toString(), stat.ptr) != 0) {
      if (errno == ENOENT) return null
      throw errnoToIOException(errno)
    }
    return@memScoped FileMetadata(
      isRegularFile = stat.st_mode.toInt() and S_IFMT == S_IFREG,
      isDirectory = stat.st_mode.toInt() and S_IFMT == S_IFDIR,
      symlinkTarget = symlinkTarget(stat, path),
      size = stat.st_size,
      createdAtMillis = stat.st_ctimespec.epochMillis,
      lastModifiedAtMillis = stat.st_mtimespec.epochMillis,
      lastAccessedAtMillis = stat.st_atimespec.epochMillis,
    )
  }
}","java.lang.UnsupportedOperationException: FirErrorTypeRef is not supported at cursor:  PosixFileSystem.variantMetadain file: /home/ubuntu/jenkins-agent/workspace/cli-ingest/square_okio_master/okio/src/appleMain/kotlin/okio/ApplePosixVariant.kt
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitErrorTypeRef(KotlinParserVisitor.kt:4315)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4361)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitReceiverParameter(KotlinParserVisitor.kt:2207)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4394)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitSimpleFunction(KotlinParserVisitor.kt:2457)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4402)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitFile(KotlinParserVisitor.kt:166)"
github.com,"bnorm/robocode-gradle-plugin",main,KotlinParser,"src/main/kotlin/com/bnorm/robocode/RobocodeDownload.kt","UnsupportedOperationException","org.jetbrains.kotlin.KtRealSourceElementKind@632e2610","open class RobocodeDownload : DefaultTask() {
    @get:Input
    var downloadDir by project.objects.property<String>()

    @get:Input
    var downloadVersion by project.objects.property<String>()

    /*
     * The only output for this task to care about is the libs directory. Everything else *should*
     * be ignored so this task remains UP-TO-DATE even after running Robocode.
     */
    // TODO Should we only care about specific files in the libs directory? Only Jar files?
    @get:OutputDirectory
    val libsDir: Provider<Directory>
        get() = project.layout.dir(project.provider { project.file(""$downloadDir/libs"") })

    @TaskAction
    fun perform() {
        val setupJar = project.file(""$downloadDir/robocode-$downloadVersion-setup.jar"")

        setupJar.parentFile.mkdirs()
        SourceForge.download(downloadVersion).use { source ->
            source.readAll(setupJar.sink())
        }

        /*
         * Use copy and *not* sync to avoid deleting bot jar files which have been downloaded and
         * any configuration that has been changed by running Robocode.
         */
        project.copy {
            from(project.zipTree(setupJar))
            into(downloadDir)
        }

        /*
         * Automatically add the bot 'bin' directory to the development path of Robocode. This
         * avoids needing to manually configure the directory the first time Robocode is installed.
         */
        val propertiesFile = project.file(""$downloadDir/config/robocode.properties"")
        propertiesFile.parentFile.mkdirs()

        val properties = if (!propertiesFile.exists()) emptyList()
        else propertiesFile.source().buffer().readUtf8().split(""\n"")

        val devPath = ""${project.buildDir}/robocode/robots/bin""
        propertiesFile.sink().buffer().use { sink ->
            var foundDevPath = false
            for (property in properties) {
                sink.writeUtf8(property)
                if (""robocode.options.development.path="" in property) {
                    foundDevPath = true
                    if (devPath !in property) {
                        sink.writeUtf8("","").writeUtf8(devPath)
                    }
                }
                sink.writeUtf8(""\n"")
            }
            if (!foundDevPath) {
                sink.writeUtf8(""robocode.options.development.path=$devPath\n"")
            }
        }
    }
}","java.lang.UnsupportedOperationException: Unexpected property delegation. FirProperty#delegate for name: provideDelegate is not supported at cursor:  by project.objects.property<Sin file: /home/ubuntu/jenkins-agent/workspace/cli-ingest/bnorm_robocode-gradle-plugin_main/src/main/kotlin/com/bnorm/robocode/RobocodeDownload.kt
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitProperty(KotlinParserVisitor.kt:1913)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4391)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitRegularClass(KotlinParserVisitor.kt:4026)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4395)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitFile(KotlinParserVisitor.kt:166)"
github.com,"bnorm/robocode-gradle-plugin",main,KotlinParser,"src/main/kotlin/com/bnorm/robocode/RobocodePlugin.kt","UnsupportedOperationException","org.jetbrains.kotlin.KtRealSourceElementKind@632e2610","class RobocodePlugin : Plugin<Project> {
    override fun apply(target: Project) {
        with(target) {
            apply<JavaLibraryPlugin>()
            apply<ShadowPlugin>()

            val extension = extensions.create<RobocodeExtension>(""robocode"")
            val robocodeBuildDir = project.layout.buildDirectory.dir(""robocode"")

            /*
             * Create 2 configurations `robocode` and `robocodeRuntime`. The robocode configuration
             * will depend only on the robocode.jar file. This allows bots to be built and for a
             * task which can run Robocode from the install directory. The robocodeRuntime
             * configuration is available to extend from if needed for running battles from a unit
             * or integration test.
             */
            val robocode by configurations.registering
            val robocodeRuntime by configurations.registering
            dependencies {
                // Add only the robocode jar for building bots
                robocode.get().invoke(files(extension.robocodeDir.dir(""libs"").file(""robocode.jar"")))
                // Add the entire libs directory for running battles
                robocodeRuntime.get().invoke(extension.robocodeDir.dir(""libs"").asFileTree)
            }
            configurations.named(""implementation"") { extendsFrom(robocode.get()) }

            /*
             * Task which downloads and unpacks the specified version (latest by default) of
             * Robocode to a project level directory. This bootstraps the project which everything
             * required to build a bot in a CI/CD environment.
             */
            val robocodeDownload by tasks.registering(RobocodeDownload::class) {
                group = ""robocode""

                enabled = extension.download
                downloadDir = extension.downloadDir.toString()
                downloadVersion = extension.downloadVersion
            }

            /*
             * Make compilation depend on downloading Robocode so the robocode.jar dependency is
             * available.
             */
            // TODO Is there a better way to do this? Make configuration resolution dependent on the task?
            tasks.named(""compileJava"").configure { dependsOn(robocodeDownload) }
            plugins.withId(""org.jetbrains.kotlin.jvm"") {
                tasks.named(""compileKotlin"").configure { dependsOn(robocodeDownload) }
            }

            /*
             * Task for running Robocode with Gradle. This will either run the downloaded version
             * or the locally installed version depending on what is configured.
             */
            tasks.register<JavaExec>(""robocodeRun"") {
                group = ""robocode""

                dependsOn(robocodeDownload)

                workingDir(extension.robocodeDir)
                classpath(robocode.get().files)
                mainClass.set(""robocode.Robocode"")
            }

            /*
             * ShadowJar for bundling compiled and dependency class files into a single jar file.
             * Robocode requires a single jar file contain no other jar files to run a bot. This
             * works around the natural inability of Robocode to allow dependencies.
             */
            val shadowJar by tasks.named<ShadowJar>(""shadowJar"") {
                excludeRobocode() // Exclude robocode.jar dependency
            }

            /*
             * Extract the ShadowJar into a 'bin' directory to be loaded into Robocode for active
             * development. Robocode allows a local build directory to be indexed for bots, this
             * makes sure all dependency class files are present in the output.
             */
            tasks.register<Sync>(""robotBin"") {
                group = ""robocode""

                dependsOn(shadowJar)
                from(zipTree(shadowJar.archiveFile))
                into(robocodeBuildDir.map { it.dir(""robots/bin"") })
            }

            afterEvaluate {
                /*
                 * Convenience task for building all publishable bot jar files.
                 */
                val robotJars by tasks.registering {
                    group = ""robocode""
                }
                tasks.named(""assemble"").configure { dependsOn(robotJars) }

                /*
                 * Plugin allows multiple bots to be packaged from the same source set. Go through
                 * each bot specified and create the required tasks.
                 */
                for (robot in extension.robots) {
                    val robotBuildDir = robocodeBuildDir.map { it.dir(""robots/${robot.name}"") }
                    val robotResDir = robotBuildDir.map { it.dir(""res"") }

                    /*
                     * Task for creating the properties files required for each bot. This properties
                     * file is only required when publishing the bot, and isn't required for local
                     * development.
                     */
                    val createVersion by tasks.register(""robot${robot.name}Properties"") {
                        group = ""robocode""

                        val propertiesFileName = ""${robot.classPath.replace('.', '/')}.properties""
                        val propertiesFile = robotResDir.map { it.file(propertiesFileName) }.get().asFile
                        val properties = mapOf(
                            ""robocode.version"" to ""1.9"",
                            ""robot.name"" to robot.name,
                            ""robot.classname"" to robot.classPath,
                            ""robot.version"" to robot.version,
                            ""robot.description"" to robot.description
                        ).filterValues { it != null }

                        inputs.properties(properties)
                        outputs.file(propertiesFile)

                        doLast {
                            propertiesFile.parentFile.mkdirs()
                            propertiesFile.writeText(properties.entries
                                .joinToString(separator = ""\n"") { (k, v) -> ""$k=$v"" })
                        }
                    }

                    /*
                     * Build a publishable jar file for the bot. The jar file will contain the
                     * generated properties file and all source code. Also use ShadowJar to bundle
                     * all class files correct, including those from dependencies.
                     */
                    val robotJar by tasks.register<ShadowJar>(""robot${robot.name}Jar"") {
                        group = ""robocode""

                        dependsOn(createVersion)

                        excludeRobocode() // Exclude robocode.jar dependency

                        // Configure jar file name and output directory
                        archiveFileName.set(""${robot.classPath}_${robot.version}.jar"")
                        destinationDirectory.set(robotBuildDir)

                        // Configure source code, properties file, and all class files
                        val main by project.the<SourceSetContainer>().named(""main"")
                        from(main.output)
                        from(main.allSource)
                        from(robotResDir)
                        configurations = listOf(project.configurations.named(""runtimeClasspath"").get())
                    }
                    robotJars.configure { dependsOn(robotJar) }
                }
            }
        }
    }

    /**
     * Exclude files which come from the robocode.jar file and other files which Robocode does not
     * like to appear in a jar file when importing.
     */
    private fun ShadowJar.excludeRobocode() {
        exclude(""/gl4java/**"")
        exclude(""/net/sf/robocode/**"")
        exclude(""/robocode/**"")

        // Filter out other misc files Robocode doesn't like
        exclude(""/META-INF/**/*.properties"")
        exclude(""/META-INF/**/*.xml"")
        exclude(""/META-INF/**/*.class"")
        exclude(""/META-INF/**/*.kotlin_module"")
    }
}","java.lang.UnsupportedOperationException: Unexpected property delegation. FirProperty#delegate for name: provideDelegate is not supported at cursor:  by configurations.registeringin file: /home/ubuntu/jenkins-agent/workspace/cli-ingest/bnorm_robocode-gradle-plugin_main/src/main/kotlin/com/bnorm/robocode/RobocodePlugin.kt
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitProperty(KotlinParserVisitor.kt:1913)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4391)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitBlock(KotlinParserVisitor.kt:766)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitAnonymousFunction(KotlinParserVisitor.kt:448)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitAnonymousFunctionExpression(KotlinParserVisitor.kt:484)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4366)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitLambdaArgumentExpression(KotlinParserVisitor.kt:1816)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4389)
  ..."
github.com,"bnorm/robocode-gradle-plugin",main,KotlinParser,"src/main/kotlin/com/bnorm/robocode/RobocodeExtension.kt","UnsupportedOperationException","org.jetbrains.kotlin.KtRealSourceElementKind@632e2610","open class RobocodeExtension(
    objects: ObjectFactory,
    layout: ProjectLayout,
    providerFactory: ProviderFactory
) {
    var download: Boolean by objects.property<Boolean>().apply {
        // Download Robocode by default to make it easier for CI/CD environments
        convention(true)
    }

    var downloadVersion: String by objects.property<String>().apply {
        // Download the latest version of Robocode by default
        // TODO What if a connection to SourceForge cannot be made?
        //  - Most importantly, a download of Robocode should continue to work.
        convention(providerFactory.provider { SourceForge.findLatestVersion() })
    }

    internal var downloadDir: Directory by objects.directoryProperty().apply {
        // Default directory is outside build directory to avoid a clean clearing robot cache
        convention(layout.projectDirectory.dir("".robocode""))
    }

    var installDir: Directory by objects.directoryProperty().apply {
        val os = OperatingSystem.current()
        val robocodeHomeDir = if (os.isWindows) {
            providerFactory.provider { File(""/"") /* C:\ directory */ }
                .map { File(it, ""robocode"") }
        } else {
            providerFactory.systemProperty(""user.home"")
                .map { File(it, ""robocode"") }
        }
        // Default to the default install directory of Robocode
        convention(layout.dir(robocodeHomeDir))
    }

    val robocodeDir: Directory get() = if (download) downloadDir else installDir

    val robots = objects.domainObjectContainer(RobocodeRobot::class) { RobocodeRobot(it) }
    fun robots(action: Action<in NamedDomainObjectContainer<RobocodeRobot>>) {
        action.execute(robots)
    }
}","java.lang.UnsupportedOperationException: Unexpected property delegation. FirProperty#delegate for name: provideDelegate is not supported at cursor: : Boolean by objects.property<in file: /home/ubuntu/jenkins-agent/workspace/cli-ingest/bnorm_robocode-gradle-plugin_main/src/main/kotlin/com/bnorm/robocode/RobocodeExtension.kt
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitProperty(KotlinParserVisitor.kt:1913)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4391)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitRegularClass(KotlinParserVisitor.kt:4026)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4395)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitFile(KotlinParserVisitor.kt:166)"
github.com,"JetBrains/teamcity-aws-sns-trigger-plugin",master,KotlinParser,"amazon-sns-trigger-server/src/test/kotlin/jetbrains/buildServer/clouds/amazon/sns/trigger/utils/Common.kt",IllegalStateException,,,"java.lang.IllegalStateException: amazon-sns-trigger-server/src/test/kotlin/jetbrains/buildServer/clouds/amazon/sns/trigger/utils/Common.kt is not print idempotent.
  org.openrewrite.Parser.requirePrintEqualsInput(Parser.java:51)"
github.com,"JetBrains/teamcity-aws-sns-trigger-plugin",master,KotlinParser,"amazon-sns-trigger-server/src/test/kotlin/jetbrains/buildServer/clouds/amazon/sns/trigger/utils/AwsSnsSignatureVerificationTest.kt",IllegalStateException,,,"java.lang.IllegalStateException: amazon-sns-trigger-server/src/test/kotlin/jetbrains/buildServer/clouds/amazon/sns/trigger/utils/AwsSnsSignatureVerificationTest.kt is not print idempotent.
  org.openrewrite.Parser.requirePrintEqualsInput(Parser.java:51)"
github.com,"nebula-plugins/gradle-lint-plugin",main,KotlinParser,"src/main/kotlin/com/netflix/nebula/lint/rule/dependency/DuplicateDependencyService.kt","UnsupportedOperationException","org.jetbrains.kotlin.KtRealSourceElementKind@197e9236","class DuplicateDependencyService(val project: Project) {
    companion object {
        val BLACKLISTED_CLASSES = setOf(
                ""package-info"",
                ""module-info""
        )
    }

    val logger: Logger = LoggerFactory.getLogger(DuplicateDependencyService::class.java)

    fun violationsForModules(moduleIds: List<ModuleVersionIdentifier>, conf: Configuration, ignoredDependencies: Set<ModuleVersionIdentifier>): List<String> =
            moduleIds.flatMap { violationsForModule(it, conf.name, ignoredDependencies) }

    fun violationsForModule(mvid: ModuleVersionIdentifier, conf: String, ignoredDependencies: Set<ModuleVersionIdentifier>): List<String> {
        val dependencyService = DependencyService.forProject(project)
        if (ignoredDependencies.contains(mvid)) {
            return emptyList()
        }

        val dependencyClasses = dependencyService.jarContents(mvid.module)?.classes ?: return emptyList()
        val dupeDependencyClasses = dependencyService.artifactsByClass(conf)
                .filter {
                    var allowable = true
                    BLACKLISTED_CLASSES.forEach { bc ->
                        if (it.key.contains(bc)) {
                            allowable = false
                        }
                    }
                    allowable
                }
                .filter {
                    // don't count artifacts that have the same ModuleIdentifier, which are different versions of the same
                    // module coming from extended configurations that are ultimately conflict resolved away anyway
                    val artifacts = it.value
                    dependencyClasses.contains(it.key) && artifacts.any {
                        !ignoredDependencies.contains(it.moduleVersion.id) && it.moduleVersion.id.module != mvid.module
                    }
                }

        val dupeClassesByDependency = TreeMap<ModuleVersionIdentifier, MutableSet<String>>(DependencyService.DEPENDENCY_COMPARATOR)
        dupeDependencyClasses.forEach { (className, resolvedArtifacts) ->
            resolvedArtifacts.forEach { artifact ->
                val moduleId = artifact.moduleVersion.id
                if (!dupeClassesByDependency.containsKey(moduleId)) {
                    dupeClassesByDependency.put(moduleId, mutableSetOf<String>())
                }
                dupeClassesByDependency[artifact.moduleVersion.id]!!.add(className)
            }
        }

        val violations = mutableListOf<String>()
        val configuration = project.configurations.getByName(conf)
        if (!dupeClassesByDependency.isEmpty() && mvid == dupeClassesByDependency.keys.first()) {
            dupeClassesByDependency.forEach { (resolvedMvid, classes) ->
                if (mvid != resolvedMvid) {
                    val message = ""$mvid in $configuration has ${classes.size} classes duplicated by $resolvedMvid""
                    logger.info(""$message. Duplicate classes: $classes"")
                    violations.add(""$message (use --info for detailed class list)"")
                }
            }
        }
        return violations
    }
}","java.lang.UnsupportedOperationException: Unsupported binary operator type.
  org.openrewrite.kotlin.internal.KotlinParserVisitor.mapBinaryOperation(KotlinParserVisitor.kt:1612)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitFunctionCall(KotlinParserVisitor.kt:1023)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4385)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitBinaryLogicExpression(KotlinParserVisitor.kt:674)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4371)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4771)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.mapControlParentheses(KotlinParserVisitor.kt:4588)
  ..."
github.com,"nebula-plugins/gradle-lint-plugin",main,GroovyParser,"src/main/groovy/com/netflix/nebula/lint/UnfixedViolationReason.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/main/groovy/com/netflix/nebula/lint/UnfixedViolationReason.groovy at cursor position 720. The next 10 characters in the original source are `
    Overl`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"nebula-plugins/gradle-lint-plugin",main,GroovyParser,"src/main/groovy/com/netflix/nebula/lint/GradleViolation.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/main/groovy/com/netflix/nebula/lint/GradleViolation.groovy at cursor position 3681. The next 10 characters in the original source are `closure.li`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"nebula-plugins/gradle-lint-plugin",main,GroovyParser,"src/main/groovy/com/netflix/nebula/lint/rule/rename/PluginRenamedRule.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/main/groovy/com/netflix/nebula/lint/rule/rename/PluginRenamedRule.groovy at cursor position 1177. The next 10 characters in the original source are `void visit`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"nebula-plugins/gradle-lint-plugin",main,GroovyParser,"src/main/groovy/com/netflix/nebula/lint/rule/GradleLintRule.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/main/groovy/com/netflix/nebula/lint/rule/GradleLintRule.groovy at cursor position 28842. The next 10 characters in the original source are `{
        `
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"nebula-plugins/gradle-lint-plugin",main,GroovyParser,"src/main/groovy/com/netflix/nebula/lint/rule/GradleDependency.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/main/groovy/com/netflix/nebula/lint/rule/GradleDependency.groovy at cursor position 1511. The next 10 characters in the original source are `ModuleIden`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"nebula-plugins/gradle-lint-plugin",main,GroovyParser,"src/main/groovy/com/netflix/nebula/lint/rule/test/AbstractRuleSpec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/main/groovy/com/netflix/nebula/lint/rule/test/AbstractRuleSpec.groovy at cursor position 2581. The next 10 characters in the original source are `.file = pr`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"nebula-plugins/gradle-lint-plugin",main,GroovyParser,"src/main/groovy/com/netflix/nebula/lint/rule/dependency/DependencyHelper.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/main/groovy/com/netflix/nebula/lint/rule/dependency/DependencyHelper.groovy at cursor position 6756. The next 10 characters in the original source are `essions.cl`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"nebula-plugins/gradle-lint-plugin",main,GroovyParser,"src/main/groovy/com/netflix/nebula/lint/rule/dependency/UnusedDependencyRule.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/main/groovy/com/netflix/nebula/lint/rule/dependency/UnusedDependencyRule.groovy at cursor position 11648. The next 10 characters in the original source are `leClasspat`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"nebula-plugins/gradle-lint-plugin",main,GroovyParser,"src/main/groovy/com/netflix/nebula/lint/rule/dependency/MethodReference.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/main/groovy/com/netflix/nebula/lint/rule/dependency/MethodReference.groovy at cursor position 918. The next 10 characters in the original source are `
        I`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"nebula-plugins/gradle-lint-plugin",main,GroovyParser,"src/main/groovy/com/netflix/nebula/lint/rule/dependency/MethodScanner.groovy",IllegalStateException,,,"java.lang.IllegalStateException: src/main/groovy/com/netflix/nebula/lint/rule/dependency/MethodScanner.groovy is not print idempotent.
  org.openrewrite.Parser.requirePrintEqualsInput(Parser.java:51)"
github.com,"nebula-plugins/gradle-lint-plugin",main,GroovyParser,"src/main/groovy/com/netflix/nebula/lint/rule/dependency/DeprecatedDependencyConfigurationRule.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/main/groovy/com/netflix/nebula/lint/rule/dependency/DeprecatedDependencyConfigurationRule.groovy at cursor position 1784. The next 10 characters in the original source are `GradleKt.v`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"nebula-plugins/gradle-lint-plugin",main,GroovyParser,"src/main/groovy/com/netflix/nebula/lint/rule/dependency/UndeclaredDependencyRule.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/main/groovy/com/netflix/nebula/lint/rule/dependency/UndeclaredDependencyRule.groovy, cursor position likely inaccurate.
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:163)"
github.com,"nebula-plugins/gradle-lint-plugin",main,GroovyParser,"src/main/groovy/com/netflix/nebula/lint/rule/dependency/BypassedForcesRule.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/main/groovy/com/netflix/nebula/lint/rule/dependency/BypassedForcesRule.groovy at cursor position 13328. The next 10 characters in the original source are `ts
       `
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"nebula-plugins/gradle-lint-plugin",main,GroovyParser,"src/main/groovy/com/netflix/nebula/lint/rule/dependency/DependencyService.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/main/groovy/com/netflix/nebula/lint/rule/dependency/DependencyService.groovy at cursor position 24151. The next 10 characters in the original source are `getByName(`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"nebula-plugins/gradle-lint-plugin",main,GroovyParser,"src/main/groovy/com/netflix/nebula/lint/rule/dependency/UnusedDependencyExcludeRule.groovy",IllegalStateException,,,"java.lang.IllegalStateException: src/main/groovy/com/netflix/nebula/lint/rule/dependency/UnusedDependencyExcludeRule.groovy is not print idempotent.
  org.openrewrite.Parser.requirePrintEqualsInput(Parser.java:51)"
github.com,"nebula-plugins/gradle-lint-plugin",main,GroovyParser,"src/main/groovy/com/netflix/nebula/lint/rule/dependency/RecommendedVersionsRule.groovy",IllegalStateException,,,"java.lang.IllegalStateException: src/main/groovy/com/netflix/nebula/lint/rule/dependency/RecommendedVersionsRule.groovy is not print idempotent.
  org.openrewrite.Parser.requirePrintEqualsInput(Parser.java:51)"
github.com,"nebula-plugins/gradle-lint-plugin",main,GroovyParser,"src/main/groovy/com/netflix/nebula/lint/rule/dependency/ModuleDescriptor.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/main/groovy/com/netflix/nebula/lint/rule/dependency/ModuleDescriptor.groovy, cursor position likely inaccurate.
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:163)"
github.com,"nebula-plugins/gradle-lint-plugin",main,GroovyParser,"src/main/groovy/com/netflix/nebula/lint/rule/dependency/DependencyTupleExpressionRule.groovy",IllegalStateException,,,"java.lang.IllegalStateException: src/main/groovy/com/netflix/nebula/lint/rule/dependency/DependencyTupleExpressionRule.groovy is not print idempotent.
  org.openrewrite.Parser.requirePrintEqualsInput(Parser.java:51)"
github.com,"nebula-plugins/gradle-lint-plugin",main,GroovyParser,"src/main/groovy/com/netflix/nebula/lint/rule/dependency/DependencyClassVisitor.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/main/groovy/com/netflix/nebula/lint/rule/dependency/DependencyClassVisitor.groovy, cursor position likely inaccurate.
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:163)"
github.com,"nebula-plugins/gradle-lint-plugin",main,GroovyParser,"src/main/groovy/com/netflix/nebula/lint/rule/dependency/ClassHierarchyUtils.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/main/groovy/com/netflix/nebula/lint/rule/dependency/ClassHierarchyUtils.groovy at cursor position 1445. The next 10 characters in the original source are `[]

      `
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"nebula-plugins/gradle-lint-plugin",main,GroovyParser,"src/main/groovy/com/netflix/nebula/lint/rule/dependency/UnusedExcludeByConfigurationRule.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/main/groovy/com/netflix/nebula/lint/rule/dependency/UnusedExcludeByConfigurationRule.groovy at cursor position 1753. The next 10 characters in the original source are `project.de`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"nebula-plugins/gradle-lint-plugin",main,GroovyParser,"src/main/groovy/com/netflix/nebula/lint/rule/dependency/MultiProjectCircularDependencyRule.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/main/groovy/com/netflix/nebula/lint/rule/dependency/MultiProjectCircularDependencyRule.groovy at cursor position 2987. The next 10 characters in the original source are `ndsOn
    `
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"nebula-plugins/gradle-lint-plugin",main,GroovyParser,"src/main/groovy/com/netflix/nebula/lint/rule/dependency/JarContents.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/main/groovy/com/netflix/nebula/lint/rule/dependency/JarContents.groovy at cursor position 707. The next 10 characters in the original source are `NF') }
   `
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"nebula-plugins/gradle-lint-plugin",main,GroovyParser,"src/main/groovy/com/netflix/nebula/lint/rule/dependency/MinimumDependencyVersionRule.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/main/groovy/com/netflix/nebula/lint/rule/dependency/MinimumDependencyVersionRule.groovy at cursor position 5788. The next 10 characters in the original source are `}
        `
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"nebula-plugins/gradle-lint-plugin",main,GroovyParser,"src/main/groovy/com/netflix/nebula/lint/rule/GradlePlugin.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/main/groovy/com/netflix/nebula/lint/rule/GradlePlugin.groovy at cursor position 156. The next 10 characters in the original source are `{
    Stri`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"nebula-plugins/gradle-lint-plugin",main,GroovyParser,"src/main/groovy/com/netflix/nebula/lint/rule/BuildFiles.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/main/groovy/com/netflix/nebula/lint/rule/BuildFiles.groovy at cursor position 1686. The next 10 characters in the original source are `lineNumber`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"nebula-plugins/gradle-lint-plugin",main,GroovyParser,"src/main/groovy/com/netflix/nebula/lint/plugin/LintPluginTaskConfigurer.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/main/groovy/com/netflix/nebula/lint/plugin/LintPluginTaskConfigurer.groovy at cursor position 996. The next 10 characters in the original source are `}
        `
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"nebula-plugins/gradle-lint-plugin",main,GroovyParser,"src/main/groovy/com/netflix/nebula/lint/plugin/GradleSevenOneAndHigherLintPluginTaskConfigurer.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/main/groovy/com/netflix/nebula/lint/plugin/GradleSevenOneAndHigherLintPluginTaskConfigurer.groovy at cursor position 1028. The next 10 characters in the original source are `}
        `
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"nebula-plugins/gradle-lint-plugin",main,GroovyParser,"src/main/groovy/com/netflix/nebula/lint/plugin/GradleLintReportTask.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/main/groovy/com/netflix/nebula/lint/plugin/GradleLintReportTask.groovy at cursor position 1710. The next 10 characters in the original source are `com.netfli`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"nebula-plugins/gradle-lint-plugin",main,GroovyParser,"src/main/groovy/com/netflix/nebula/lint/plugin/LintRuleDescriptor.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/main/groovy/com/netflix/nebula/lint/plugin/LintRuleDescriptor.groovy at cursor position 1808. The next 10 characters in the original source are `resource) `
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"nebula-plugins/gradle-lint-plugin",main,GroovyParser,"src/main/groovy/com/netflix/nebula/lint/plugin/GradleLintPluginTaskConfigurer.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/main/groovy/com/netflix/nebula/lint/plugin/GradleLintPluginTaskConfigurer.groovy at cursor position 2754. The next 10 characters in the original source are `protected `
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"nebula-plugins/gradle-lint-plugin",main,GroovyParser,"src/main/groovy/com/netflix/nebula/lint/plugin/AbstractLintPluginTaskConfigurer.groovy",IllegalStateException,,,"java.lang.IllegalStateException: src/main/groovy/com/netflix/nebula/lint/plugin/AbstractLintPluginTaskConfigurer.groovy is not print idempotent.
  org.openrewrite.Parser.requirePrintEqualsInput(Parser.java:51)"
github.com,"nebula-plugins/gradle-lint-plugin",main,GroovyParser,"src/main/groovy/com/netflix/nebula/lint/plugin/LintRuleRegistry.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/main/groovy/com/netflix/nebula/lint/plugin/LintRuleRegistry.groovy at cursor position 994. The next 10 characters in the original source are `URL resour`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"nebula-plugins/gradle-lint-plugin",main,GroovyParser,"src/main/groovy/com/netflix/nebula/lint/plugin/LintGradleTask.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/main/groovy/com/netflix/nebula/lint/plugin/LintGradleTask.groovy at cursor position 937. The next 10 characters in the original source are `com.netfli`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"nebula-plugins/gradle-lint-plugin",main,GroovyParser,"src/main/groovy/com/netflix/nebula/lint/plugin/FixGradleLintTask.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/main/groovy/com/netflix/nebula/lint/plugin/FixGradleLintTask.groovy at cursor position 1228. The next 10 characters in the original source are `com.netfli`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"nebula-plugins/gradle-lint-plugin",main,GroovyParser,"src/main/groovy/com/netflix/nebula/lint/plugin/GradleSevenZeroLintPluginTaskConfigurer.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/main/groovy/com/netflix/nebula/lint/plugin/GradleSevenZeroLintPluginTaskConfigurer.groovy at cursor position 1139. The next 10 characters in the original source are `ort.name
 `
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"nebula-plugins/gradle-lint-plugin",main,GroovyParser,"src/main/groovy/com/netflix/nebula/lint/plugin/LintService.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/main/groovy/com/netflix/nebula/lint/plugin/LintService.groovy at cursor position 2395. The next 10 characters in the original source are `violations`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"nebula-plugins/gradle-lint-plugin",main,GroovyParser,"src/main/groovy/com/netflix/nebula/lint/GradleLintInfoBrokerAction.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/main/groovy/com/netflix/nebula/lint/GradleLintInfoBrokerAction.groovy at cursor position 507. The next 10 characters in the original source are `void lintF`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"nebula-plugins/gradle-lint-plugin",main,GroovyParser,"src/main/groovy/com/netflix/nebula/lint/GradleLintFix.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/main/groovy/com/netflix/nebula/lint/GradleLintFix.groovy at cursor position 3108. The next 10 characters in the original source are `Integer to`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"nebula-plugins/gradle-lint-plugin",main,GroovyParser,"src/main/groovy/com/netflix/nebula/lint/FileMode.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/main/groovy/com/netflix/nebula/lint/FileMode.groovy at cursor position 756. The next 10 characters in the original source are `
    Regul`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"nebula-plugins/gradle-lint-plugin",main,GroovyParser,"src/main/groovy/com/netflix/nebula/lint/StyledTextService.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/main/groovy/com/netflix/nebula/lint/StyledTextService.groovy at cursor position 2275. The next 10 characters in the original source are `
        B`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"nebula-plugins/gradle-lint-plugin",main,GroovyParser,"src/main/groovy/com/netflix/nebula/lint/VersionNumber.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/main/groovy/com/netflix/nebula/lint/VersionNumber.groovy, cursor position likely inaccurate.
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:163)"
github.com,"nebula-plugins/gradle-lint-plugin",main,GroovyParser,"src/main/groovy/com/netflix/nebula/lint/GradleLintPatchAction.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/main/groovy/com/netflix/nebula/lint/GradleLintPatchAction.groovy at cursor position 10751. The next 10 characters in the original source are `@ -${empty`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"nebula-plugins/gradle-lint-plugin",main,GroovyParser,"src/main/groovy/com/netflix/nebula/lint/utils/DeprecationLoggerUtils.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/main/groovy/com/netflix/nebula/lint/utils/DeprecationLoggerUtils.groovy at cursor position 1194. The next 10 characters in the original source are `>= GradleV`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"nebula-plugins/gradle-lint-plugin",main,GroovyParser,"src/main/groovy/com/netflix/nebula/config/plugin/ConfigurationEnvironmentPrintTask.groovy",IllegalStateException,,,"java.lang.IllegalStateException: src/main/groovy/com/netflix/nebula/config/plugin/ConfigurationEnvironmentPrintTask.groovy is not print idempotent.
  org.openrewrite.Parser.requirePrintEqualsInput(Parser.java:51)"
github.com,"nebula-plugins/gradle-lint-plugin",main,GroovyParser,"src/main/groovy/com/netflix/nebula/config/plugin/DependencyHierarchyWriter.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/main/groovy/com/netflix/nebula/config/plugin/DependencyHierarchyWriter.groovy at cursor position 40. The next 10 characters in the original source are `;

class D`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"nebula-plugins/gradle-lint-plugin",main,GroovyParser,"src/test/groovy/com/netflix/nebula/lint/TestKitSpecification.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/com/netflix/nebula/lint/TestKitSpecification.groovy at cursor position 5750. The next 10 characters in the original source are `sourceFold`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"nebula-plugins/gradle-lint-plugin",main,GroovyParser,"src/test/groovy/com/netflix/nebula/lint/rule/rename/PluginRenamedRuleSpec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/com/netflix/nebula/lint/rule/rename/PluginRenamedRuleSpec.groovy at cursor position 1144. The next 10 characters in the original source are `are record`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"nebula-plugins/gradle-lint-plugin",main,GroovyParser,"src/test/groovy/com/netflix/nebula/lint/rule/dependency/DependencyServiceSpec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/com/netflix/nebula/lint/rule/dependency/DependencyServiceSpec.groovy at cursor position 3116. The next 10 characters in the original source are `.unusedDep`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"nebula-plugins/gradle-lint-plugin",main,GroovyParser,"src/test/groovy/com/netflix/nebula/lint/rule/dependency/SupportJavaLibrarySpec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/com/netflix/nebula/lint/rule/dependency/SupportJavaLibrarySpec.groovy at cursor position 1907. The next 10 characters in the original source are `if (config`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"nebula-plugins/gradle-lint-plugin",main,GroovyParser,"src/test/groovy/com/netflix/nebula/lint/rule/dependency/UnusedExcludeByConfigurationRuleSpec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/com/netflix/nebula/lint/rule/dependency/UnusedExcludeByConfigurationRuleSpec.groovy at cursor position 1250. The next 10 characters in the original source are `then:
    `
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"nebula-plugins/gradle-lint-plugin",main,GroovyParser,"src/test/groovy/com/netflix/nebula/lint/rule/dependency/DuplicateDependencyClassRuleSpec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/com/netflix/nebula/lint/rule/dependency/DuplicateDependencyClassRuleSpec.groovy at cursor position 3422. The next 10 characters in the original source are `}

       `
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"nebula-plugins/gradle-lint-plugin",main,GroovyParser,"src/test/groovy/com/netflix/nebula/lint/rule/dependency/DependencyServiceWithJavaPlatformSpec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/com/netflix/nebula/lint/rule/dependency/DependencyServiceWithJavaPlatformSpec.groovy at cursor position 1408. The next 10 characters in the original source are `def depend`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"nebula-plugins/gradle-lint-plugin",main,GroovyParser,"src/test/groovy/com/netflix/nebula/lint/rule/dependency/MultiProjectCircularDependencyRuleSpec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/com/netflix/nebula/lint/rule/dependency/MultiProjectCircularDependencyRuleSpec.groovy at cursor position 1044. The next 10 characters in the original source are `then:
    `
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"nebula-plugins/gradle-lint-plugin",main,GroovyParser,"src/test/groovy/com/netflix/nebula/lint/rule/dependency/DependencyViolationUtilSpec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/com/netflix/nebula/lint/rule/dependency/DependencyViolationUtilSpec.groovy at cursor position 1361. The next 10 characters in the original source are `}"").absolu`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"nebula-plugins/gradle-lint-plugin",main,GroovyParser,"src/test/groovy/com/netflix/nebula/lint/rule/dependency/UnusedDependencyExcludeRuleSpec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/com/netflix/nebula/lint/rule/dependency/UnusedDependencyExcludeRuleSpec.groovy at cursor position 4254. The next 10 characters in the original source are `then:
    `
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"nebula-plugins/gradle-lint-plugin",main,GroovyParser,"src/test/groovy/com/netflix/nebula/lint/rule/dependency/DependencyTupleExpressionRuleSpec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/com/netflix/nebula/lint/rule/dependency/DependencyTupleExpressionRuleSpec.groovy at cursor position 1491. The next 10 characters in the original source are `then:
    `
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"nebula-plugins/gradle-lint-plugin",main,GroovyParser,"src/test/groovy/com/netflix/nebula/lint/rule/dependency/FindMethodReferencesSpec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/com/netflix/nebula/lint/rule/dependency/FindMethodReferencesSpec.groovy at cursor position 2983. The next 10 characters in the original source are `}
        `
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"nebula-plugins/gradle-lint-plugin",main,GroovyParser,"src/test/groovy/com/netflix/nebula/lint/rule/dependency/JavaFixture.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/com/netflix/nebula/lint/rule/dependency/JavaFixture.groovy at cursor position 1580. The next 10 characters in the original source are `fullyQuali`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"nebula-plugins/gradle-lint-plugin",main,GroovyParser,"src/test/groovy/com/netflix/nebula/lint/rule/dependency/UndeclaredDependencyRuleSpec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/com/netflix/nebula/lint/rule/dependency/UndeclaredDependencyRuleSpec.groovy at cursor position 27429. The next 10 characters in the original source are `} }
      `
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"nebula-plugins/gradle-lint-plugin",main,GroovyParser,"src/test/groovy/com/netflix/nebula/lint/rule/dependency/provider/ClasspathBasedRecommendationProviderTest.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/com/netflix/nebula/lint/rule/dependency/provider/ClasspathBasedRecommendationProviderTest.groovy at cursor position 1755. The next 10 characters in the original source are `when:
    `
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"nebula-plugins/gradle-lint-plugin",main,GroovyParser,"src/test/groovy/com/netflix/nebula/lint/rule/dependency/provider/MavenBomRecommendationProviderSpec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/com/netflix/nebula/lint/rule/dependency/provider/MavenBomRecommendationProviderSpec.groovy at cursor position 1634. The next 10 characters in the original source are `sampleFile`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"nebula-plugins/gradle-lint-plugin",main,GroovyParser,"src/test/groovy/com/netflix/nebula/lint/rule/dependency/ClassHierarchyUtilsSpec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/com/netflix/nebula/lint/rule/dependency/ClassHierarchyUtilsSpec.groovy at cursor position 1719. The next 10 characters in the original source are `['a.A', 'b`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"nebula-plugins/gradle-lint-plugin",main,GroovyParser,"src/test/groovy/com/netflix/nebula/lint/rule/dependency/UnusedDependencyRuleSpec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/com/netflix/nebula/lint/rule/dependency/UnusedDependencyRuleSpec.groovy at cursor position 22550. The next 10 characters in the original source are `} }
      `
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"nebula-plugins/gradle-lint-plugin",main,GroovyParser,"src/test/groovy/com/netflix/nebula/lint/rule/dependency/DeprecatedDependencyConfigurationRuleSpec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/com/netflix/nebula/lint/rule/dependency/DeprecatedDependencyConfigurationRuleSpec.groovy at cursor position 1056. The next 10 characters in the original source are `then:
    `
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"nebula-plugins/gradle-lint-plugin",main,GroovyParser,"src/test/groovy/com/netflix/nebula/lint/rule/dependency/DependencyHelperSpec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/com/netflix/nebula/lint/rule/dependency/DependencyHelperSpec.groovy at cursor position 941. The next 10 characters in the original source are `new File(d`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"nebula-plugins/gradle-lint-plugin",main,GroovyParser,"src/test/groovy/com/netflix/nebula/lint/rule/dependency/DependencyParenthesesRuleSpec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/com/netflix/nebula/lint/rule/dependency/DependencyParenthesesRuleSpec.groovy at cursor position 1391. The next 10 characters in the original source are `then:
    `
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"nebula-plugins/gradle-lint-plugin",main,GroovyParser,"src/test/groovy/com/netflix/nebula/lint/rule/dependency/ArtifactHelpers.groovy",IllegalStateException,,,"java.lang.IllegalStateException: src/test/groovy/com/netflix/nebula/lint/rule/dependency/ArtifactHelpers.groovy is not print idempotent.
  org.openrewrite.Parser.requirePrintEqualsInput(Parser.java:51)"
github.com,"nebula-plugins/gradle-lint-plugin",main,GroovyParser,"src/test/groovy/com/netflix/nebula/lint/rule/dependency/DependencyClassVisitorSpec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/com/netflix/nebula/lint/rule/dependency/DependencyClassVisitorSpec.groovy at cursor position 1928. The next 10 characters in the original source are `'
        `
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"nebula-plugins/gradle-lint-plugin",main,GroovyParser,"src/test/groovy/com/netflix/nebula/lint/rule/dependency/BypassedForcesWithResolutionRulesSpec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/com/netflix/nebula/lint/rule/dependency/BypassedForcesWithResolutionRulesSpec.groovy at cursor position 2045. The next 10 characters in the original source are `then:
    `
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"nebula-plugins/gradle-lint-plugin",main,GroovyParser,"src/test/groovy/com/netflix/nebula/lint/rule/dependency/MinimumDependencyVersionRuleSpec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/com/netflix/nebula/lint/rule/dependency/MinimumDependencyVersionRuleSpec.groovy at cursor position 6140. The next 10 characters in the original source are `} }
      `
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"nebula-plugins/gradle-lint-plugin",main,GroovyParser,"src/test/groovy/com/netflix/nebula/lint/rule/GradleLintRuleIntegSpec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/com/netflix/nebula/lint/rule/GradleLintRuleIntegSpec.groovy at cursor position 1258. The next 10 characters in the original source are `}

       `
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"nebula-plugins/gradle-lint-plugin",main,GroovyParser,"src/test/groovy/com/netflix/nebula/lint/rule/postprocess/EmptyClosureRuleSpec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/com/netflix/nebula/lint/rule/postprocess/EmptyClosureRuleSpec.groovy at cursor position 1211. The next 10 characters in the original source are `may be lim`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"nebula-plugins/gradle-lint-plugin",main,GroovyParser,"src/test/groovy/com/netflix/nebula/lint/rule/FixmeRuleSpec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/com/netflix/nebula/lint/rule/FixmeRuleSpec.groovy at cursor position 1130. The next 10 characters in the original source are `result.out`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"nebula-plugins/gradle-lint-plugin",main,GroovyParser,"src/test/groovy/com/netflix/nebula/lint/rule/GradleLintPatchActionSpec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/com/netflix/nebula/lint/rule/GradleLintPatchActionSpec.groovy at cursor position 1464. The next 10 characters in the original source are `f.text = '`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"nebula-plugins/gradle-lint-plugin",main,GroovyParser,"src/test/groovy/com/netflix/nebula/lint/rule/BuildFilesTest.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/com/netflix/nebula/lint/rule/BuildFilesTest.groovy at cursor position 1080. The next 10 characters in the original source are `when:
    `
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"nebula-plugins/gradle-lint-plugin",main,GroovyParser,"src/test/groovy/com/netflix/nebula/lint/rule/GradleDependencySpec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/com/netflix/nebula/lint/rule/GradleDependencySpec.groovy at cursor position 515. The next 10 characters in the original source are `then:
    `
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"nebula-plugins/gradle-lint-plugin",main,GroovyParser,"src/test/groovy/com/netflix/nebula/lint/rule/task/TaskDefinitionOperatorRuleSpec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/com/netflix/nebula/lint/rule/task/TaskDefinitionOperatorRuleSpec.groovy at cursor position 785. The next 10 characters in the original source are `{
        `
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"nebula-plugins/gradle-lint-plugin",main,GroovyParser,"src/test/groovy/com/netflix/nebula/lint/rule/GradleLintRuleSpec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/com/netflix/nebula/lint/rule/GradleLintRuleSpec.groovy at cursor position 19989. The next 10 characters in the original source are `{
        `
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"nebula-plugins/gradle-lint-plugin",main,GroovyParser,"src/test/groovy/com/netflix/nebula/lint/plugin/SourceCollectorTest.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/com/netflix/nebula/lint/plugin/SourceCollectorTest.groovy at cursor position 368. The next 10 characters in the original source are `def level1`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"nebula-plugins/gradle-lint-plugin",main,GroovyParser,"src/test/groovy/com/netflix/nebula/lint/plugin/FixGradleLintTaskCriticalRulesSpec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/com/netflix/nebula/lint/plugin/FixGradleLintTaskCriticalRulesSpec.groovy at cursor position 2237. The next 10 characters in the original source are `}
}`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"nebula-plugins/gradle-lint-plugin",main,GroovyParser,"src/test/groovy/com/netflix/nebula/lint/plugin/LintGradleTaskSpec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/com/netflix/nebula/lint/plugin/LintGradleTaskSpec.groovy at cursor position 1831. The next 10 characters in the original source are `if (config`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"nebula-plugins/gradle-lint-plugin",main,GroovyParser,"src/test/groovy/com/netflix/nebula/lint/plugin/LintRuleRegistrySpec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/com/netflix/nebula/lint/plugin/LintRuleRegistrySpec.groovy at cursor position 1251. The next 10 characters in the original source are `def single`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"nebula-plugins/gradle-lint-plugin",main,GroovyParser,"src/test/groovy/com/netflix/nebula/lint/plugin/GradleLintReportTaskSpec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/com/netflix/nebula/lint/plugin/GradleLintReportTaskSpec.groovy at cursor position 8427. The next 10 characters in the original source are `report.tex`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"nebula-plugins/gradle-lint-plugin",main,GroovyParser,"src/test/groovy/com/netflix/nebula/lint/plugin/FixGradleLintTaskSpec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/com/netflix/nebula/lint/plugin/FixGradleLintTaskSpec.groovy at cursor position 3146. The next 10 characters in the original source are `}\r
\r
dep`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"nebula-plugins/gradle-lint-plugin",main,GroovyParser,"src/test/groovy/com/netflix/nebula/lint/plugin/Gradle8LintReportTaskSpec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/com/netflix/nebula/lint/plugin/Gradle8LintReportTaskSpec.groovy at cursor position 8435. The next 10 characters in the original source are `report.tex`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"nebula-plugins/gradle-lint-plugin",main,GroovyParser,"src/test/groovy/com/netflix/nebula/lint/plugin/GradleLintPluginSpec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/com/netflix/nebula/lint/plugin/GradleLintPluginSpec.groovy at cursor position 12063. The next 10 characters in the original source are `where:
   `
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"nebula-plugins/gradle-lint-plugin",main,GroovyParser,"src/test/groovy/com/netflix/nebula/lint/self/AbstractShadedDependencies.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/com/netflix/nebula/lint/self/AbstractShadedDependencies.groovy at cursor position 689. The next 10 characters in the original source are `trait Abst`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"nebula-plugins/gradle-lint-plugin",main,GroovyParser,"src/test/groovy/com/netflix/nebula/lint/self/ShadedArtifactsTest.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/com/netflix/nebula/lint/self/ShadedArtifactsTest.groovy at cursor position 4472. The next 10 characters in the original source are `.filter({ `
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"nebula-plugins/gradle-lint-plugin",main,GroovyParser,"src/test/groovy/com/netflix/nebula/lint/self/ShadedDependenciesTest.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/com/netflix/nebula/lint/self/ShadedDependenciesTest.groovy at cursor position 1348. The next 10 characters in the original source are `}
        `
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"nebula-plugins/gradle-lint-plugin",main,GroovyParser,"src/test/groovy/com/netflix/nebula/lint/VersionNumberTest.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/com/netflix/nebula/lint/VersionNumberTest.groovy at cursor position 8076. The next 10 characters in the original source are `}
}
`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"nebula-plugins/gradle-lint-plugin",main,GroovyParser,"src/test/groovy/com/netflix/nebula/lint/issues/Issue39Spec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/com/netflix/nebula/lint/issues/Issue39Spec.groovy at cursor position 970. The next 10 characters in the original source are `;
        `
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"nebula-plugins/gradle-lint-plugin",main,GroovyParser,"src/test/groovy/com/netflix/nebula/lint/issues/Issue45Spec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/com/netflix/nebula/lint/issues/Issue45Spec.groovy at cursor position 1085. The next 10 characters in the original source are `then:
    `
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"nebula-plugins/gradle-lint-plugin",main,GroovyParser,"src/test/groovy/com/netflix/nebula/lint/issues/Issue37Spec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/com/netflix/nebula/lint/issues/Issue37Spec.groovy at cursor position 902. The next 10 characters in the original source are `+    compi`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"nebula-plugins/gradle-lint-plugin",main,GroovyParser,"src/test/groovy/com/netflix/nebula/lint/issues/Issue314Spec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/com/netflix/nebula/lint/issues/Issue314Spec.groovy at cursor position 949. The next 10 characters in the original source are `}

       `
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"nebula-plugins/gradle-lint-plugin",main,GroovyParser,build.gradle,GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse build.gradle at cursor position 1164. The next 10 characters in the original source are `'nebula-pl`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"googlemaps/android-v3-migration",main,KotlinParser,"v3-beta-migration/src/test/kotlin/com/google/android/libraries/mapsplatform/v3_beta_migration/V3BetaMigrationPluginTest.kt",AssertionError,,,"java.lang.AssertionError: null
  org.openrewrite.java.tree.TypeTree.build(TypeTree.java:95)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitResolvedQualifier(KotlinParserVisitor.kt:2358)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4398)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.mapFunctionCall(KotlinParserVisitor.kt:1116)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitFunctionCall(KotlinParserVisitor.kt:1026)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4385)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitBlock(KotlinParserVisitor.kt:766)
  ..."
github.com,TouK/sputnik,master,JsonParser,"src/test/resources/json/gerrit-listfiles.json",NullPointerException,,,"java.lang.NullPointerException: null
  org.openrewrite.json.internal.JsonParserVisitor.visitValue(JsonParserVisitor.java:230)
  org.openrewrite.json.internal.JsonParserVisitor.lambda$visitJson5$1(JsonParserVisitor.java:112)
  org.openrewrite.json.internal.JsonParserVisitor.convert(JsonParserVisitor.java:277)
  org.openrewrite.json.internal.JsonParserVisitor.visitJson5(JsonParserVisitor.java:103)"
github.com,TouK/sputnik,master,GroovyParser,"src/test/resources/codeNarc/testFiles/FileWithOneViolationPerEachLevel.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/resources/codeNarc/testFiles/FileWithOneViolationPerEachLevel.groovy at cursor position 279. The next 10 characters in the original source are `}
    }

 `
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,gradle/gcc2speedscope,master,KotlinParser,"src/main/kotlin/gcc2speedscope/App.kt",AssertionError,,,"java.lang.AssertionError: null
  org.openrewrite.java.tree.TypeTree.build(TypeTree.java:95)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitResolvedQualifier(KotlinParserVisitor.kt:2358)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4398)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.mapFunctionCall(KotlinParserVisitor.kt:1116)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitFunctionCall(KotlinParserVisitor.kt:1026)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4385)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitBlock(KotlinParserVisitor.kt:766)
  ..."
github.com,"MrRogerHuang/GradleProjectInfoPlugin",master,KotlinParser,"src/test/kotlin/com/github/MrRogerHuang/Test.kt",AssertionError,,,"java.lang.AssertionError: null
  org.openrewrite.java.tree.TypeTree.build(TypeTree.java:95)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitResolvedQualifier(KotlinParserVisitor.kt:2358)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4398)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.mapFunctionCall(KotlinParserVisitor.kt:1116)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitFunctionCall(KotlinParserVisitor.kt:1026)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4385)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitBlock(KotlinParserVisitor.kt:766)
  ..."
github.com,"saltedfishclub/oni-gradle-plugin",master,KotlinParser,"src/main/kotlin/io/ib67/oni/Linker.kt",IllegalStateException,,,"java.lang.IllegalStateException: src/main/kotlin/io/ib67/oni/Linker.kt is not print idempotent.
  org.openrewrite.Parser.requirePrintEqualsInput(Parser.java:51)"
github.com,"saltedfishclub/oni-gradle-plugin",master,KotlinParser,"src/main/kotlin/io/ib67/oni/OniDependency.kt",IllegalStateException,,,"java.lang.IllegalStateException: src/main/kotlin/io/ib67/oni/OniDependency.kt is not print idempotent.
  org.openrewrite.Parser.requirePrintEqualsInput(Parser.java:51)"
github.com,pubnub/java,master,KotlinParser,"src/test/java/com/pubnub/contract/objectV2/members/steps/ThenSteps.kt",AssertionError,,,"java.lang.AssertionError: null
  org.openrewrite.java.tree.TypeTree.build(TypeTree.java:95)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitResolvedQualifier(KotlinParserVisitor.kt:2358)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4398)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.mapFunctionCall(KotlinParserVisitor.kt:1116)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitFunctionCall(KotlinParserVisitor.kt:1026)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4385)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitBlock(KotlinParserVisitor.kt:766)
  ..."
github.com,pubnub/java,master,KotlinParser,"src/test/java/com/pubnub/contract/step/ErrorMessageAndDetailsStep.kt",AssertionError,,,"java.lang.AssertionError: null
  org.openrewrite.java.tree.TypeTree.build(TypeTree.java:95)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitResolvedQualifier(KotlinParserVisitor.kt:2358)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4398)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.mapFunctionCall(KotlinParserVisitor.kt:1116)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitFunctionCall(KotlinParserVisitor.kt:1026)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4385)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitBlock(KotlinParserVisitor.kt:766)
  ..."
github.com,pubnub/java,master,KotlinParser,"src/test/java/com/pubnub/contract/step/ThenSteps.kt",AssertionError,,,"java.lang.AssertionError: null
  org.openrewrite.java.tree.TypeTree.build(TypeTree.java:95)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitResolvedQualifier(KotlinParserVisitor.kt:2358)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4398)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.mapFunctionCall(KotlinParserVisitor.kt:1116)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitFunctionCall(KotlinParserVisitor.kt:1026)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4385)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitBlock(KotlinParserVisitor.kt:766)
  ..."
github.com,pubnub/java,master,KotlinParser,"src/test/java/com/pubnub/contract/Hooks.kt",AssertionError,,,"java.lang.AssertionError: null
  org.openrewrite.java.tree.TypeTree.build(TypeTree.java:95)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitResolvedQualifier(KotlinParserVisitor.kt:2358)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4398)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.mapFunctionCall(KotlinParserVisitor.kt:1116)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitFunctionCall(KotlinParserVisitor.kt:1026)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4385)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitBlock(KotlinParserVisitor.kt:766)
  ..."
github.com,pubnub/java,master,KotlinParser,"src/test/java/com/pubnub/contract/objectV2/uuidmetadata/step/ThenSteps.kt",AssertionError,,,"java.lang.AssertionError: null
  org.openrewrite.java.tree.TypeTree.build(TypeTree.java:95)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitResolvedQualifier(KotlinParserVisitor.kt:2358)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4398)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.mapFunctionCall(KotlinParserVisitor.kt:1116)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitFunctionCall(KotlinParserVisitor.kt:1026)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4385)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitBlock(KotlinParserVisitor.kt:766)
  ..."
github.com,pubnub/java,master,KotlinParser,"src/test/java/com/pubnub/contract/objectV2/channelmetadata/step/ThenSteps.kt",AssertionError,,,"java.lang.AssertionError: null
  org.openrewrite.java.tree.TypeTree.build(TypeTree.java:95)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitResolvedQualifier(KotlinParserVisitor.kt:2358)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4398)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.mapFunctionCall(KotlinParserVisitor.kt:1116)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitFunctionCall(KotlinParserVisitor.kt:1026)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4385)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitBlock(KotlinParserVisitor.kt:766)
  ..."
github.com,pubnub/java,master,KotlinParser,"src/test/java/com/pubnub/contract/objectV2/membership/steps/ThenSteps.kt",AssertionError,,,"java.lang.AssertionError: null
  org.openrewrite.java.tree.TypeTree.build(TypeTree.java:95)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitResolvedQualifier(KotlinParserVisitor.kt:2358)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4398)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.mapFunctionCall(KotlinParserVisitor.kt:1116)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitFunctionCall(KotlinParserVisitor.kt:1026)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4385)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitBlock(KotlinParserVisitor.kt:766)
  ..."
github.com,"grimmjo/jaxrs-analyzer-gradle-plugin",master,KotlinParser,"src/main/kotlin/io/github/grimmjo/jaxrs_analyzer/JaxRsAnalyzerPlugin.kt","UnsupportedOperationException","org.jetbrains.kotlin.KtRealSourceElementKind@68c5382","class JaxRsAnalyzerPlugin : Plugin<Project> {
    override fun apply(project: Project) {

        val jaxRsAnalyzerExtension = project.extensions.create(""jaxRsAnalyzer"", JaxRsAnalyzerExtension::class.java)

        project.tasks.register(""analyze"", JaxRsAnalyserTask::class.java) {
            dependsOn += project.tasks.named(""classes"")
            mainSourceSet.set(
                project.extensions.getByType(SourceSetContainer::class.java).getByName(SourceSet.MAIN_SOURCE_SET_NAME)
            )
            backend.set(jaxRsAnalyzerExtension.backend)
            outputFileBaseName.set(jaxRsAnalyzerExtension.outputFileBaseName)
            schemes.set(jaxRsAnalyzerExtension.schemes)
            domain.set(jaxRsAnalyzerExtension.domain)
            renderTags.set(jaxRsAnalyzerExtension.renderTags)
            tagPathOffset.set(jaxRsAnalyzerExtension.tagPathOffset)
            outputDirectory.set(project.buildDir.resolve(jaxRsAnalyzerExtension.outputDirectory.get()))
        }
    }
}","java.lang.UnsupportedOperationException: Unsupported binary operator type.
  org.openrewrite.kotlin.internal.KotlinParserVisitor.mapBinaryOperation(KotlinParserVisitor.kt:1612)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitFunctionCall(KotlinParserVisitor.kt:1023)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4385)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitBlock(KotlinParserVisitor.kt:766)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitAnonymousFunction(KotlinParserVisitor.kt:448)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitAnonymousFunctionExpression(KotlinParserVisitor.kt:484)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4366)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitLambdaArgumentExpression(KotlinParserVisitor.kt:1816)
  ..."
github.com,"ptkltm/com.github.ptkltm.development.recursiveinclude.gradleplugin",master,KotlinParser,"src/test/kotlin/com/github/ptkltm/development/recursiveinclude/gradleplugin/RecursiveIncludeGradlePluginTest.kt",IllegalStateException,,,"java.lang.IllegalStateException: src/test/kotlin/com/github/ptkltm/development/recursiveinclude/gradleplugin/RecursiveIncludeGradlePluginTest.kt is not print idempotent.
  org.openrewrite.Parser.requirePrintEqualsInput(Parser.java:51)"
github.com,"nebula-plugins/gradle-java-cross-compile-plugin",main,GroovyParser,"src/integTest/groovy/nebula/plugin/compile/JavaCrossCompilePluginIntegrationSpec.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/integTest/groovy/nebula/plugin/compile/JavaCrossCompilePluginIntegrationSpec.groovy at cursor position 2145. The next 10 characters in the original source are `{
        `
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"nebula-plugins/gradle-java-cross-compile-plugin",main,GroovyParser,"src/test/groovy/nebula/plugin/compile/provider/DefaultLocationJDKPathProviderTest.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/nebula/plugin/compile/provider/DefaultLocationJDKPathProviderTest.groovy at cursor position 808. The next 10 characters in the original source are `DefaultLoc`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"nebula-plugins/gradle-java-cross-compile-plugin",main,GroovyParser,build.gradle,GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse build.gradle at cursor position 1516. The next 10 characters in the original source are `'nebula-pl`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,zhcet-amu/zhcet-web,master,KotlinParser,"src/test/java/amu/zhcet/JsTranspilationTest.kt",AssertionError,,,"java.lang.AssertionError: null
  org.openrewrite.java.tree.TypeTree.build(TypeTree.java:95)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitResolvedQualifier(KotlinParserVisitor.kt:2358)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4398)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.mapFunctionCall(KotlinParserVisitor.kt:1116)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitFunctionCall(KotlinParserVisitor.kt:1026)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4385)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitBlock(KotlinParserVisitor.kt:766)
  ..."
github.com,"NyCodeGHG/gradle-spigot-dependency-loader",main,KotlinParser,"src/integrationTest/kotlin/GradleSpigotDependencyLoaderTest.kt",AssertionError,,,"java.lang.AssertionError: null
  org.openrewrite.java.tree.TypeTree.build(TypeTree.java:95)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitResolvedQualifier(KotlinParserVisitor.kt:2358)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4398)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.mapFunctionCall(KotlinParserVisitor.kt:1116)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitFunctionCall(KotlinParserVisitor.kt:1026)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4385)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  ..."
github.com,"NyCodeGHG/gradle-spigot-dependency-loader",main,KotlinParser,"src/main/kotlin/de/nycode/gradle/spigot_dependency_loader/spigot/PluginYml.kt",IllegalStateException,,,"java.lang.IllegalStateException: src/main/kotlin/de/nycode/gradle/spigot_dependency_loader/spigot/PluginYml.kt is not print idempotent.
  org.openrewrite.Parser.requirePrintEqualsInput(Parser.java:51)"
github.com,PaGr0m/kotlin-spm-plugin,master,YamlParser,config/detekt/detekt.yml,"IndexOutOfBoundsException",,,"java.lang.IndexOutOfBoundsException: Index: 3, Size: 3
  java.util.ArrayList.rangeCheck(ArrayList.java:659)
  java.util.ArrayList.get(ArrayList.java:435)
  org.openrewrite.yaml.FormatPreservingReader.readStringFromBuffer(FormatPreservingReader.java:72)"
github.com,square/retrofit,master,ProtoParser,"retrofit-converters/protobuf/src/test/proto/phone.proto",NullPointerException,,,"java.lang.NullPointerException: null
  org.openrewrite.protobuf.internal.ProtoParserVisitor.visitSyntax(ProtoParserVisitor.java:415)
  org.openrewrite.protobuf.internal.ProtoParserVisitor.visitProto(ProtoParserVisitor.java:313)"
github.com,square/retrofit,master,GroovyParser,build.gradle,GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse build.gradle at cursor position 1428. The next 10 characters in the original source are `CheckSever`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,square/retrofit,master,KotlinParser,"retrofit/src/main/java/retrofit2/KotlinExtensions.kt","UnsupportedOperationException","org.jetbrains.kotlin.KtRealSourceElementKind@7aabf78a","inline fun <reified T: Any> Retrofit.create(): T = create(T::class.java)","java.lang.UnsupportedOperationException: FirErrorTypeRef is not supported at cursor:  Retrofit.create(): T = createin file: /home/ubuntu/jenkins-agent/workspace/cli-ingest/square_retrofit_master/retrofit/src/main/java/retrofit2/KotlinExtensions.kt
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitErrorTypeRef(KotlinParserVisitor.kt:4315)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4361)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitReceiverParameter(KotlinParserVisitor.kt:2207)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4394)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitSimpleFunction(KotlinParserVisitor.kt:2457)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4402)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitFile(KotlinParserVisitor.kt:166)"
github.com,square/retrofit,master,KotlinParser,"retrofit/src/main/java/retrofit2/KotlinExtensions.kt","UnsupportedOperationException","org.jetbrains.kotlin.KtRealSourceElementKind@7aabf78a","suspend fun <T : Any> Call<T>.await(): T {
  return suspendCancellableCoroutine { continuation ->
    continuation.invokeOnCancellation {
      cancel()
    }
    enqueue(object : Callback<T> {
      override fun onResponse(call: Call<T>, response: Response<T>) {
        if (response.isSuccessful) {
          val body = response.body()
          if (body == null) {
            val invocation = call.request().tag(Invocation::class.java)!!
            val method = invocation.method()
            val e = KotlinNullPointerException(""Response from "" +
                method.declaringClass.name +
                '.' +
                method.name +
                "" was null but response body type was declared as non-null"")
            continuation.resumeWithException(e)
          } else {
            continuation.resume(body)
          }
        } else {
          continuation.resumeWithException(HttpException(response))
        }
      }

      override fun onFailure(call: Call<T>, t: Throwable) {
        continuation.resumeWithException(t)
      }
    })
  }
}","java.lang.UnsupportedOperationException: FirErrorTypeRef is not supported at cursor:  Call<T>.await(): T {
  returnin file: /home/ubuntu/jenkins-agent/workspace/cli-ingest/square_retrofit_master/retrofit/src/main/java/retrofit2/KotlinExtensions.kt
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitErrorTypeRef(KotlinParserVisitor.kt:4315)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4361)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitReceiverParameter(KotlinParserVisitor.kt:2207)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4394)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitSimpleFunction(KotlinParserVisitor.kt:2457)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4402)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitFile(KotlinParserVisitor.kt:166)"
github.com,square/retrofit,master,KotlinParser,"retrofit/src/main/java/retrofit2/KotlinExtensions.kt","UnsupportedOperationException","org.jetbrains.kotlin.KtRealSourceElementKind@7aabf78a","@JvmName(""awaitNullable"")
suspend fun <T : Any> Call<T?>.await(): T? {
  return suspendCancellableCoroutine { continuation ->
    continuation.invokeOnCancellation {
      cancel()
    }
    enqueue(object : Callback<T?> {
      override fun onResponse(call: Call<T?>, response: Response<T?>) {
        if (response.isSuccessful) {
          continuation.resume(response.body())
        } else {
          continuation.resumeWithException(HttpException(response))
        }
      }

      override fun onFailure(call: Call<T?>, t: Throwable) {
        continuation.resumeWithException(t)
      }
    })
  }
}","java.lang.UnsupportedOperationException: FirErrorTypeRef is not supported at cursor:  Call<T?>.await(): T? {
  retuin file: /home/ubuntu/jenkins-agent/workspace/cli-ingest/square_retrofit_master/retrofit/src/main/java/retrofit2/KotlinExtensions.kt
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitErrorTypeRef(KotlinParserVisitor.kt:4315)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4361)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitReceiverParameter(KotlinParserVisitor.kt:2207)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4394)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitSimpleFunction(KotlinParserVisitor.kt:2457)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4402)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitFile(KotlinParserVisitor.kt:166)"
github.com,square/retrofit,master,KotlinParser,"retrofit/src/main/java/retrofit2/KotlinExtensions.kt","UnsupportedOperationException","org.jetbrains.kotlin.KtRealSourceElementKind@7aabf78a","@JvmName(""awaitUnit"")
suspend fun Call<Unit>.await() {
  @Suppress(""UNCHECKED_CAST"")
  (this as Call<Unit?>).await()
}","java.lang.UnsupportedOperationException: FirErrorTypeRef is not supported at cursor:  Call<Unit>.await() {
  @Supprin file: /home/ubuntu/jenkins-agent/workspace/cli-ingest/square_retrofit_master/retrofit/src/main/java/retrofit2/KotlinExtensions.kt
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitErrorTypeRef(KotlinParserVisitor.kt:4315)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4361)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitReceiverParameter(KotlinParserVisitor.kt:2207)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4394)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitSimpleFunction(KotlinParserVisitor.kt:2457)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4402)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitFile(KotlinParserVisitor.kt:166)"
github.com,square/retrofit,master,KotlinParser,"retrofit/src/main/java/retrofit2/KotlinExtensions.kt","UnsupportedOperationException","org.jetbrains.kotlin.KtRealSourceElementKind@7aabf78a","suspend fun <T> Call<T>.awaitResponse(): Response<T> {
  return suspendCancellableCoroutine { continuation ->
    continuation.invokeOnCancellation {
      cancel()
    }
    enqueue(object : Callback<T> {
      override fun onResponse(call: Call<T>, response: Response<T>) {
        continuation.resume(response)
      }

      override fun onFailure(call: Call<T>, t: Throwable) {
        continuation.resumeWithException(t)
      }
    })
  }
}","java.lang.UnsupportedOperationException: FirErrorTypeRef is not supported at cursor:  Call<T>.awaitResponse(): Respin file: /home/ubuntu/jenkins-agent/workspace/cli-ingest/square_retrofit_master/retrofit/src/main/java/retrofit2/KotlinExtensions.kt
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitErrorTypeRef(KotlinParserVisitor.kt:4315)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4361)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitReceiverParameter(KotlinParserVisitor.kt:2207)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4394)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitSimpleFunction(KotlinParserVisitor.kt:2457)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4402)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitFile(KotlinParserVisitor.kt:166)"
github.com,square/retrofit,master,GroovyParser,retrofit/build.gradle,GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse retrofit/build.gradle at cursor position 656. The next 10 characters in the original source are `ach { majo`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,square/retrofit,master,KotlinParser,"retrofit/kotlin-test/src/test/java/retrofit2/KotlinSuspendTest.kt",AssertionError,,,"java.lang.AssertionError: null
  org.openrewrite.java.tree.TypeTree.build(TypeTree.java:95)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitResolvedQualifier(KotlinParserVisitor.kt:2358)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4398)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.mapFunctionCall(KotlinParserVisitor.kt:1116)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitFunctionCall(KotlinParserVisitor.kt:1026)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4385)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  ..."
github.com,square/retrofit,master,KotlinParser,"retrofit/kotlin-test/src/test/java/retrofit2/KotlinExtensionsTest.kt",AssertionError,,,"java.lang.AssertionError: null
  org.openrewrite.java.tree.TypeTree.build(TypeTree.java:95)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitResolvedQualifier(KotlinParserVisitor.kt:2358)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4398)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.mapFunctionCall(KotlinParserVisitor.kt:1116)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitFunctionCall(KotlinParserVisitor.kt:1026)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4385)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitBlock(KotlinParserVisitor.kt:766)
  ..."
github.com,square/retrofit,master,KotlinParser,"retrofit-mock/src/main/java/retrofit2/mock/KotlinExtensions.kt","UnsupportedOperationException","org.jetbrains.kotlin.KtRealSourceElementKind@45b04d4c","inline fun <reified T> MockRetrofit.create(): BehaviorDelegate<T> = create(T::class.java)","java.lang.UnsupportedOperationException: FirErrorTypeRef is not supported at cursor:  MockRetrofit.create(): Behaviin file: /home/ubuntu/jenkins-agent/workspace/cli-ingest/square_retrofit_master/retrofit-mock/src/main/java/retrofit2/mock/KotlinExtensions.kt
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitErrorTypeRef(KotlinParserVisitor.kt:4315)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4361)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitReceiverParameter(KotlinParserVisitor.kt:2207)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4394)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitSimpleFunction(KotlinParserVisitor.kt:2457)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4402)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitFile(KotlinParserVisitor.kt:166)"
github.com,square/retrofit,master,KotlinParser,"retrofit-mock/src/test/java/retrofit2/mock/BehaviorDelegateKotlinTest.kt",AssertionError,,,"java.lang.AssertionError: null
  org.openrewrite.java.tree.TypeTree.build(TypeTree.java:95)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitResolvedQualifier(KotlinParserVisitor.kt:2358)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4398)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.mapFunctionCall(KotlinParserVisitor.kt:1116)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitFunctionCall(KotlinParserVisitor.kt:1026)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4385)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  ..."
github.com,"corneliudascalu/autoversion",master,KotlinParser,"src/test/kotlin/com/corneliudascalu/NoTagsTest.kt",AssertionError,,,"java.lang.AssertionError: null
  org.openrewrite.java.tree.TypeTree.build(TypeTree.java:95)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitResolvedQualifier(KotlinParserVisitor.kt:2358)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4398)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.mapFunctionCall(KotlinParserVisitor.kt:1116)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitFunctionCall(KotlinParserVisitor.kt:1026)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4385)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  ..."
github.com,"corneliudascalu/autoversion",master,KotlinParser,"src/test/kotlin/com/corneliudascalu/AutoVersionPluginTest.kt",AssertionError,,,"java.lang.AssertionError: null
  org.openrewrite.java.tree.TypeTree.build(TypeTree.java:95)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitResolvedQualifier(KotlinParserVisitor.kt:2358)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4398)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.mapFunctionCall(KotlinParserVisitor.kt:1116)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitFunctionCall(KotlinParserVisitor.kt:1026)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4385)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  ..."
github.com,"jetbrains/gradle-idea-ext-plugin",master,KotlinParser,"src/main/kotlin/org/jetbrains/gradle/ext/IdeaModelUtils.kt",IllegalStateException,,,"java.lang.IllegalStateException: src/main/kotlin/org/jetbrains/gradle/ext/IdeaModelUtils.kt is not print idempotent.
  org.openrewrite.Parser.requirePrintEqualsInput(Parser.java:51)"
github.com,"jetbrains/gradle-idea-ext-plugin",master,GroovyParser,"src/main/groovy/org/jetbrains/gradle/ext/IdeaExtPlugin.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/main/groovy/org/jetbrains/gradle/ext/IdeaExtPlugin.groovy at cursor position 990. The next 10 characters in the original source are `def projec`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"jetbrains/gradle-idea-ext-plugin",master,GroovyParser,"src/main/groovy/org/jetbrains/gradle/ext/IdeArtifacts.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/main/groovy/org/jetbrains/gradle/ext/IdeArtifacts.groovy at cursor position 4318. The next 10 characters in the original source are `buildDirec`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"jetbrains/gradle-idea-ext-plugin",master,GroovyParser,"src/main/groovy/org/jetbrains/gradle/ext/RunConfigurations.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/main/groovy/org/jetbrains/gradle/ext/RunConfigurations.groovy, cursor position likely inaccurate.
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:163)"
github.com,"jetbrains/gradle-idea-ext-plugin",master,GroovyParser,"src/main/groovy/org/jetbrains/gradle/ext/IdeaFilesProcessor.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/main/groovy/org/jetbrains/gradle/ext/IdeaFilesProcessor.groovy at cursor position 7661. The next 10 characters in the original source are `.file(""lay`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"jetbrains/gradle-idea-ext-plugin",master,GroovyParser,"src/main/groovy/org/jetbrains/gradle/ext/ActionDelegationConfig.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/main/groovy/org/jetbrains/gradle/ext/ActionDelegationConfig.groovy at cursor position 164. The next 10 characters in the original source are ` PLATFORM,`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"jetbrains/gradle-idea-ext-plugin",master,GroovyParser,"src/main/groovy/org/jetbrains/gradle/ext/PackagePrefixContainer.groovy",IllegalStateException,,,"java.lang.IllegalStateException: src/main/groovy/org/jetbrains/gradle/ext/PackagePrefixContainer.groovy is not print idempotent.
  org.openrewrite.Parser.requirePrintEqualsInput(Parser.java:51)"
github.com,"jetbrains/gradle-idea-ext-plugin",master,GroovyParser,"src/main/groovy/org/jetbrains/gradle/ext/GroovyCompiler.groovy",IllegalStateException,,,"java.lang.IllegalStateException: src/main/groovy/org/jetbrains/gradle/ext/GroovyCompiler.groovy is not print idempotent.
  org.openrewrite.Parser.requirePrintEqualsInput(Parser.java:51)"
github.com,"jetbrains/gradle-idea-ext-plugin",master,GroovyParser,"src/main/groovy/org/jetbrains/gradle/ext/GradleUtils.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/main/groovy/org/jetbrains/gradle/ext/GradleUtils.groovy, cursor position likely inaccurate.
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:163)"
github.com,"jetbrains/gradle-idea-ext-plugin",master,GroovyParser,"src/main/groovy/org/jetbrains/gradle/ext/Inspections.groovy",IllegalStateException,,,"java.lang.IllegalStateException: src/main/groovy/org/jetbrains/gradle/ext/Inspections.groovy is not print idempotent.
  org.openrewrite.Parser.requirePrintEqualsInput(Parser.java:51)"
github.com,"jetbrains/gradle-idea-ext-plugin",master,GroovyParser,"src/main/groovy/org/jetbrains/gradle/ext/TaskTriggersConfig.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/main/groovy/org/jetbrains/gradle/ext/TaskTriggersConfig.groovy, cursor position likely inaccurate.
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:163)"
github.com,"jetbrains/gradle-idea-ext-plugin",master,GroovyParser,"src/main/groovy/org/jetbrains/gradle/ext/Facets.groovy",IllegalStateException,,,"java.lang.IllegalStateException: src/main/groovy/org/jetbrains/gradle/ext/Facets.groovy is not print idempotent.
  org.openrewrite.Parser.requirePrintEqualsInput(Parser.java:51)"
github.com,"jetbrains/gradle-idea-ext-plugin",master,GroovyParser,"src/main/groovy/org/jetbrains/gradle/ext/EncodingConfiguration.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/main/groovy/org/jetbrains/gradle/ext/EncodingConfiguration.groovy at cursor position 249. The next 10 characters in the original source are `
    WITH_`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"jetbrains/gradle-idea-ext-plugin",master,GroovyParser,"src/main/groovy/org/jetbrains/gradle/ext/CodeStyle.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/main/groovy/org/jetbrains/gradle/ext/CodeStyle.groovy at cursor position 197. The next 10 characters in the original source are `
    DO_NO`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"jetbrains/gradle-idea-ext-plugin",master,GroovyParser,"src/main/groovy/org/jetbrains/gradle/ext/Copyright.groovy",IllegalStateException,,,"java.lang.IllegalStateException: src/main/groovy/org/jetbrains/gradle/ext/Copyright.groovy is not print idempotent.
  org.openrewrite.Parser.requirePrintEqualsInput(Parser.java:51)"
github.com,"jetbrains/gradle-idea-ext-plugin",master,GroovyParser,"src/main/groovy/org/jetbrains/gradle/ext/internal/DefaultRunConfigurationContainer51.groovy",IllegalStateException,,,"java.lang.IllegalStateException: src/main/groovy/org/jetbrains/gradle/ext/internal/DefaultRunConfigurationContainer51.groovy is not print idempotent.
  org.openrewrite.Parser.requirePrintEqualsInput(Parser.java:51)"
github.com,"jetbrains/gradle-idea-ext-plugin",master,GroovyParser,"src/main/groovy/org/jetbrains/gradle/ext/internal/DefaultRunConfigurationContainer.groovy",IllegalStateException,,,"java.lang.IllegalStateException: src/main/groovy/org/jetbrains/gradle/ext/internal/DefaultRunConfigurationContainer.groovy is not print idempotent.
  org.openrewrite.Parser.requirePrintEqualsInput(Parser.java:51)"
github.com,"jetbrains/gradle-idea-ext-plugin",master,GroovyParser,"src/main/groovy/org/jetbrains/gradle/ext/ModuleTypesConfig.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/main/groovy/org/jetbrains/gradle/ext/ModuleTypesConfig.groovy at cursor position 1702. The next 10 characters in the original source are `result
   `
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"jetbrains/gradle-idea-ext-plugin",master,GroovyParser,"src/main/groovy/org/jetbrains/gradle/ext/LayoutFileBuildService.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/main/groovy/org/jetbrains/gradle/ext/LayoutFileBuildService.groovy at cursor position 263. The next 10 characters in the original source are ` implement`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"jetbrains/gradle-idea-ext-plugin",master,GroovyParser,"src/main/groovy/org/jetbrains/gradle/ext/Compiler.groovy",IllegalStateException,,,"java.lang.IllegalStateException: src/main/groovy/org/jetbrains/gradle/ext/Compiler.groovy is not print idempotent.
  org.openrewrite.Parser.requirePrintEqualsInput(Parser.java:51)"
github.com,"jetbrains/gradle-idea-ext-plugin",master,KotlinParser,"src/test/kotlin/org/jetbrains/gradle/ext/SerializationTests.kt",AssertionError,,,"java.lang.AssertionError: null
  org.openrewrite.java.tree.TypeTree.build(TypeTree.java:95)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitResolvedQualifier(KotlinParserVisitor.kt:2358)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4398)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.mapFunctionCall(KotlinParserVisitor.kt:1116)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitFunctionCall(KotlinParserVisitor.kt:1026)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4385)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitBlock(KotlinParserVisitor.kt:766)
  ..."
github.com,"jetbrains/gradle-idea-ext-plugin",master,KotlinParser,"src/test/kotlin/org/jetbrains/gradle/ext/IdeaFilesProcessorTest.kt",AssertionError,,,"java.lang.AssertionError: null
  org.openrewrite.java.tree.TypeTree.build(TypeTree.java:95)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitResolvedQualifier(KotlinParserVisitor.kt:2358)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4398)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.mapFunctionCall(KotlinParserVisitor.kt:1116)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitFunctionCall(KotlinParserVisitor.kt:1026)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4385)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  ..."
github.com,"jetbrains/gradle-idea-ext-plugin",master,KotlinParser,"src/test/kotlin/org/jetbrains/gradle/ext/BuildIdeArtifactTest.kt",AssertionError,,,"java.lang.AssertionError: null
  org.openrewrite.java.tree.TypeTree.build(TypeTree.java:95)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitResolvedQualifier(KotlinParserVisitor.kt:2358)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4398)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.mapFunctionCall(KotlinParserVisitor.kt:1116)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitFunctionCall(KotlinParserVisitor.kt:1026)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4385)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitBlock(KotlinParserVisitor.kt:766)
  ..."
github.com,"jetbrains/gradle-idea-ext-plugin",master,GroovyParser,"src/test/groovy/TestIdeaExtPlugin.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/TestIdeaExtPlugin.groovy at cursor position 40612. The next 10 characters in the original source are `String pre`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"jetbrains/gradle-idea-ext-plugin",master,GroovyParser,"src/test/groovy/TestIdeaExtPluginOnKotlinBuildFile.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/test/groovy/TestIdeaExtPluginOnKotlinBuildFile.groovy at cursor position 28786. The next 10 characters in the original source are `String pre`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"jetbrains/gradle-idea-ext-plugin",master,GroovyParser,build.gradle,GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse build.gradle at cursor position 446. The next 10 characters in the original source are `ProjectExt`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,"coditory/gradle-integration-test-plugin",master,KotlinParser,"src/main/kotlin/com/coditory/gradle/integration/IntegrationTestTaskConfiguration.kt",AssertionError,,,"java.lang.AssertionError: null
  org.openrewrite.java.tree.TypeTree.build(TypeTree.java:95)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitResolvedQualifier(KotlinParserVisitor.kt:2358)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4398)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.mapFunctionCall(KotlinParserVisitor.kt:1116)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitFunctionCall(KotlinParserVisitor.kt:1026)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4385)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  ..."
github.com,"coditory/gradle-integration-test-plugin",master,KotlinParser,"src/main/kotlin/com/coditory/gradle/integration/TestAllTaskConfiguration.kt",AssertionError,,,"java.lang.AssertionError: null
  org.openrewrite.java.tree.TypeTree.build(TypeTree.java:95)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitResolvedQualifier(KotlinParserVisitor.kt:2358)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4398)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.mapFunctionCall(KotlinParserVisitor.kt:1116)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitFunctionCall(KotlinParserVisitor.kt:1026)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4385)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  ..."
github.com,"coditory/gradle-integration-test-plugin",master,KotlinParser,"src/main/kotlin/com/coditory/gradle/integration/TestTaskConfiguration.kt",AssertionError,,,"java.lang.AssertionError: null
  org.openrewrite.java.tree.TypeTree.build(TypeTree.java:95)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitResolvedQualifier(KotlinParserVisitor.kt:2358)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4398)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.mapFunctionCall(KotlinParserVisitor.kt:1116)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitFunctionCall(KotlinParserVisitor.kt:1026)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4385)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  ..."
github.com,"coditory/gradle-integration-test-plugin",master,KotlinParser,"src/test/kotlin/com/coditory/gradle/integration/IntegrationTestTaskConfigurationTest.kt",AssertionError,,,"java.lang.AssertionError: null
  org.openrewrite.java.tree.TypeTree.build(TypeTree.java:95)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitResolvedQualifier(KotlinParserVisitor.kt:2358)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4398)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.mapFunctionCall(KotlinParserVisitor.kt:1116)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitFunctionCall(KotlinParserVisitor.kt:1026)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4385)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  ..."
github.com,"coditory/gradle-integration-test-plugin",master,KotlinParser,"src/test/kotlin/com/coditory/gradle/integration/PluginSetupTest.kt",AssertionError,,,"java.lang.AssertionError: null
  org.openrewrite.java.tree.TypeTree.build(TypeTree.java:95)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitResolvedQualifier(KotlinParserVisitor.kt:2358)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4398)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.mapFunctionCall(KotlinParserVisitor.kt:1116)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitFunctionCall(KotlinParserVisitor.kt:1026)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4385)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  ..."
github.com,"coditory/gradle-integration-test-plugin",master,KotlinParser,"src/test/kotlin/com/coditory/gradle/integration/shared/SemVersionTest.kt","UnsupportedOperationException","org.jetbrains.kotlin.KtRealSourceElementKind@596a3c69","class SemVersionTest {
    @Test
    fun `should parse sem version`() {
        val version = SemVersion.parse(""1.2.3"")
        assertThat(version.major).isEqualTo(1)
        assertThat(version.minor).isEqualTo(2)
        assertThat(version.patch).isEqualTo(3)
    }

    @Test
    fun `should parse sem version without patch`() {
        val version = SemVersion.parse(""1.2"")
        assertThat(version.major).isEqualTo(1)
        assertThat(version.minor).isEqualTo(2)
        assertThat(version.patch).isEqualTo(0)
    }

    @Test
    fun `should parse sem version with major only`() {
        val version = SemVersion.parse(""1"")
        assertThat(version.major).isEqualTo(1)
        assertThat(version.minor).isEqualTo(0)
        assertThat(version.patch).isEqualTo(0)
    }

    @Test
    fun `should compare two sem versions`() {
        assertThat(SemVersion.parse(""1.2.3""))
            .isLessThan(SemVersion.parse(""1.2.4""))
        assertThat(SemVersion.parse(""1.2.3""))
            .isLessThan(SemVersion.parse(""1.3.0""))
        assertThat(SemVersion.parse(""1.2.3""))
            .isLessThan(SemVersion.parse(""2.0.0""))
        assertThat(SemVersion.parse(""1.2.3""))
            .isEqualTo(SemVersion.parse(""1.2.3""))
    }

    @Test
    fun `should throw InvalidArgumentException for invalid sem version`() {
        assertThrows(IllegalArgumentException::class.java) { SemVersion.parse(""WTF"") }
        assertThrows(IllegalArgumentException::class.java) { SemVersion.parse("""") }
        assertThrows(IllegalArgumentException::class.java) { SemVersion.parse(""1.x.3"") }
    }

    @Test
    fun `should parse sem version with prefix and suffix`() {
        val version = SemVersion.parse(""v1.2.3-RELEASE"")
        assertThat(version.major).isEqualTo(1)
        assertThat(version.minor).isEqualTo(2)
        assertThat(version.patch).isEqualTo(3)
    }

    @Test
    fun `should parse sem version for gradle release candidate`() {
        val version = SemVersion.parse(""7.1-rc-1"")
        assertThat(version.major).isEqualTo(7)
        assertThat(version.minor).isEqualTo(1)
        assertThat(version.patch).isEqualTo(0)
    }
}","java.lang.UnsupportedOperationException: FirErrorResolvedQualifier is not supported at cursor: SemVersion.parse(""1.2.3"")
    in file: /home/ubuntu/jenkins-agent/workspace/cli-ingest/coditory_gradle-integration-test-plugin_master/src/test/kotlin/com/coditory/gradle/integration/shared/SemVersionTest.kt
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitErrorResolvedQualifier(KotlinParserVisitor.kt:4311)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4360)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.mapFunctionCall(KotlinParserVisitor.kt:1116)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitFunctionCall(KotlinParserVisitor.kt:1026)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4385)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitProperty(KotlinParserVisitor.kt:1957)
  ..."
github.com,"coditory/gradle-integration-test-plugin",master,KotlinParser,"src/test/kotlin/com/coditory/gradle/integration/acceptance/LombokAcceptanceTest.kt",AssertionError,,,"java.lang.AssertionError: null
  org.openrewrite.java.tree.TypeTree.build(TypeTree.java:95)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitResolvedQualifier(KotlinParserVisitor.kt:2358)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4398)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.mapFunctionCall(KotlinParserVisitor.kt:1116)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitFunctionCall(KotlinParserVisitor.kt:1026)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4385)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  ..."
github.com,"coditory/gradle-integration-test-plugin",master,KotlinParser,"src/test/kotlin/com/coditory/gradle/integration/acceptance/SpockBasedAcceptanceTest.kt",AssertionError,,,"java.lang.AssertionError: null
  org.openrewrite.java.tree.TypeTree.build(TypeTree.java:95)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitResolvedQualifier(KotlinParserVisitor.kt:2358)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4398)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.mapFunctionCall(KotlinParserVisitor.kt:1116)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitFunctionCall(KotlinParserVisitor.kt:1026)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4385)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  ..."
github.com,"coditory/gradle-integration-test-plugin",master,KotlinParser,"src/test/kotlin/com/coditory/gradle/integration/acceptance/Junit4BasedAcceptanceTest.kt",AssertionError,,,"java.lang.AssertionError: null
  org.openrewrite.java.tree.TypeTree.build(TypeTree.java:95)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitResolvedQualifier(KotlinParserVisitor.kt:2358)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4398)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.mapFunctionCall(KotlinParserVisitor.kt:1116)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitFunctionCall(KotlinParserVisitor.kt:1026)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4385)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  ..."
github.com,"coditory/gradle-integration-test-plugin",master,KotlinParser,"src/test/kotlin/com/coditory/gradle/integration/acceptance/KotlinInternalScopeAcceptanceTest.kt",AssertionError,,,"java.lang.AssertionError: null
  org.openrewrite.java.tree.TypeTree.build(TypeTree.java:95)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitResolvedQualifier(KotlinParserVisitor.kt:2358)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4398)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.mapFunctionCall(KotlinParserVisitor.kt:1116)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitFunctionCall(KotlinParserVisitor.kt:1026)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4385)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  ..."
github.com,"coditory/gradle-integration-test-plugin",master,KotlinParser,"src/test/kotlin/com/coditory/gradle/integration/acceptance/Junit5BasedAcceptanceTest.kt",AssertionError,,,"java.lang.AssertionError: null
  org.openrewrite.java.tree.TypeTree.build(TypeTree.java:95)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitResolvedQualifier(KotlinParserVisitor.kt:2358)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4398)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.mapFunctionCall(KotlinParserVisitor.kt:1116)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitFunctionCall(KotlinParserVisitor.kt:1026)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4385)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  ..."
github.com,"coditory/gradle-integration-test-plugin",master,KotlinParser,"src/test/kotlin/com/coditory/gradle/integration/acceptance/CommandLineAcceptanceTest.kt",AssertionError,,,"java.lang.AssertionError: null
  org.openrewrite.java.tree.TypeTree.build(TypeTree.java:95)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitResolvedQualifier(KotlinParserVisitor.kt:2358)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4398)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.mapFunctionCall(KotlinParserVisitor.kt:1116)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitFunctionCall(KotlinParserVisitor.kt:1026)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4385)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  ..."
github.com,"coditory/gradle-integration-test-plugin",master,KotlinParser,"src/test/kotlin/com/coditory/gradle/integration/TestAllTaskConfigurationTest.kt",AssertionError,,,"java.lang.AssertionError: null
  org.openrewrite.java.tree.TypeTree.build(TypeTree.java:95)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitResolvedQualifier(KotlinParserVisitor.kt:2358)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4398)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.mapFunctionCall(KotlinParserVisitor.kt:1116)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitFunctionCall(KotlinParserVisitor.kt:1026)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4385)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  ..."
github.com,an3ll/wsdl2java,master,KotlinParser,"src/main/kotlin/com/github/an3ll/wsdl2java/Wsdl2JavaPlugin.kt",IllegalStateException,,,"java.lang.IllegalStateException: src/main/kotlin/com/github/an3ll/wsdl2java/Wsdl2JavaPlugin.kt is not print idempotent.
  org.openrewrite.Parser.requirePrintEqualsInput(Parser.java:51)"
github.com,an3ll/wsdl2java,master,GroovyParser,"src/main/groovy/no/nils/wsdl2java/Wsdl2JavaTask.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/main/groovy/no/nils/wsdl2java/Wsdl2JavaTask.groovy at cursor position 7453. The next 10 characters in the original source are `"")) {
    `
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,an3ll/wsdl2java,master,GroovyParser,"src/main/groovy/no/nils/wsdl2java/ObjectFactoryMerger.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/main/groovy/no/nils/wsdl2java/ObjectFactoryMerger.groovy at cursor position 25. The next 10 characters in the original source are `;

/**
 * `
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,an3ll/wsdl2java,master,GroovyParser,"src/main/groovy/no/nils/wsdl2java/Wsdl2JavaPlugin.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/main/groovy/no/nils/wsdl2java/Wsdl2JavaPlugin.groovy at cursor position 2732. The next 10 characters in the original source are `d(""compile`
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:168)"
github.com,an3ll/wsdl2java,master,GroovyParser,"src/main/groovy/no/nils/wsdl2java/Wsdl2JavaPluginExtension.groovy",GroovyParsingException,,,"org.openrewrite.groovy.GroovyParsingException: Failed to parse src/main/groovy/no/nils/wsdl2java/Wsdl2JavaPluginExtension.groovy, cursor position likely inaccurate.
  org.openrewrite.groovy.GroovyParserVisitor.visit(GroovyParserVisitor.java:163)"
github.com,"guyboltonking/assertj-generator-gradle-plugin",master,KotlinParser,"src/main/kotlin/com/github/fhermansson/gradle/assertj/plugin/GenerateAssertions.kt","IndexOutOfBoundsException","org.jetbrains.kotlin.KtRealSourceElementKind@236b72f6","open class GenerateAssertions : DefaultTask(), ProjectEvaluationListener {

    @get:Internal
    val extension: AssertjGeneratorExtension by lazy {
        project.extensions.getByType(AssertjGeneratorExtension::class.java)
    }

    val classPath: FileCollection
        @InputFiles
        @CompileClasspath
        get() = sourceSet!!.runtimeClasspath
    /**
     * What kinds of entry point classes to generate.
     */
    var entryPointTypes: Array<AssertionsEntryPointType>? = null
        @Internal
        get() = field ?: extension.entryPointTypes

    val entryPointTypesAsSet
        @Input
        get() = entryPointTypes!!.toSet()
    /**
     * Output directory for generated classes.
     * Any type accepted by Project.file(Object).
     */
    var outputDir: Any? = null
        @Input
        get() = field ?: extension.outputDir ?: ""src/${testSourceSet!!.name}/generated-java""

    val resolvedOutputDir: File
        @OutputDirectory
        get() = project.file(outputDir!!)

    /**
     * The sourceSet containing classes to generate assertions for.
     */
    var sourceSet: SourceSet? = null
        @Internal
        get() = field ?: extension.sourceSet

    /**
     * The target sourceSet for generated assertions.
     */
    var testSourceSet: SourceSet? = null
        @Internal
        get() = field ?: extension.testSourceSet

    /**
     * Destination package for entry point classes. The generator will choose if null.
     */
    var entryPointPackage: String? = null
        @Input
        @Optional
        get() = field ?: extension.entryPointPackage

    /**
     * Entry point classes inherit from core Assertj classes
     */
    var entryPointInherits: Boolean? = null
        @Input
        get() = field ?: extension.entryPointInherits

    /**
     * Classes and packages to generate assertions for.
     */
    var classOrPackageNames: Array<String>? = null
        @Input
        get() = field ?: extension.classOrPackageNames

    /**
     * Clean output directory before generating assertions.
     */
    var cleanOutputDir: Boolean? = null
        @Input
        get() = field ?: extension.cleanOutputDir

    init {
        group = ""assertj""
        description = ""Generate Assertj Assertions""
        project.gradle.addProjectEvaluationListener(this)
    }

    private fun getTemplate(entryPointType: AssertionsEntryPointType): Template {
        val templateType = when (entryPointType) {
            AssertionsEntryPointType.STANDARD -> Template.Type.ASSERTIONS_ENTRY_POINT_CLASS
            AssertionsEntryPointType.BDD -> Template.Type.BDD_ASSERTIONS_ENTRY_POINT_CLASS
            AssertionsEntryPointType.SOFT -> Template.Type.SOFT_ASSERTIONS_ENTRY_POINT_CLASS
            AssertionsEntryPointType.JUNIT_SOFT -> Template.Type.JUNIT_SOFT_ASSERTIONS_ENTRY_POINT_CLASS
            AssertionsEntryPointType.BDD_SOFT -> Template.Type.BDD_SOFT_ASSERTIONS_ENTRY_POINT_CLASS
            AssertionsEntryPointType.JUNIT_BDD_SOFT -> Template.Type.JUNIT_BDD_SOFT_ASSERTIONS_ENTRY_POINT_CLASS
            AssertionsEntryPointType.AUTO_CLOSEABLE_SOFT -> Template.Type.AUTO_CLOSEABLE_SOFT_ASSERTIONS_ENTRY_POINT_CLASS
            AssertionsEntryPointType.AUTO_CLOSEABLE_BDD_SOFT -> Template.Type.AUTO_CLOSEABLE_BDD_SOFT_ASSERTIONS_ENTRY_POINT_CLASS
        }

        val fileName = ""${entryPointType.name.toLowerCase()}_assertions_entry_point_class.txt""
        val templateContent = this.javaClass.classLoader.getResource(fileName).readText()
        return Template(templateType, templateContent)
    }

    override fun afterEvaluate(project: Project, state: ProjectState) {
        if (project == this.project) {
            val sourceClassesTaskName = sourceSet!!.classesTaskName
            dependsOn.add(sourceClassesTaskName)
            testSourceSet!!.java.srcDir(resolvedOutputDir)
            listOf(""java"", ""kotlin"", ""groovy"").forEach {
                project.getTasksByName(testSourceSet!!.getCompileTaskName(it), false).forEach {
                    it.dependsOn(this)
                }
            }
            project.extensions.findByType(IdeaModel::class.java)
                ?.module?.generatedSourceDirs?.add(resolvedOutputDir)
        }
    }

    override fun beforeEvaluate(project: Project) {
    }

    @TaskAction
    fun generateAssertions() {
        if (cleanOutputDir!!) {
            project.delete(resolvedOutputDir)
        }
        val descriptionConverter = ClassToClassDescriptionConverter()
        val assertionGenerator = BaseAssertionGenerator()
        assertionGenerator.setDirectoryWhereAssertionFilesAreGenerated(File(resolvedOutputDir.absolutePath))
        if (entryPointInherits!!) {
            entryPointTypesAsSet.forEach {
                assertionGenerator.register(getTemplate(it))
            }
        }
        val classLoader = URLClassLoader(classPath.map { it.toURI().toURL() }.toTypedArray())
        val classes = ClassUtil.collectClasses(classLoader, *classOrPackageNames!!)
        val classDescriptions = classes.map { descriptionConverter.convertToClassDescription(it) }.toSet()
        val generatedAssertions = classDescriptions.map { assertionGenerator.generateCustomAssertionFor(it) }.toSet()

        val entryPoints =
            if (generatedAssertions.isEmpty())
                emptySet<File>()
            else
                entryPointTypesAsSet.map {
                    assertionGenerator.generateAssertionsEntryPointClassFor(classDescriptions, it, entryPointPackage)
                }.toSet()

        logger.lifecycle(
            ""Generated ${generatedAssertions.size} assertion classes, "" +
                ""${entryPoints.size} entry point classes in $resolvedOutputDir""
        )
    }
}","java.lang.IndexOutOfBoundsException: Index: 1, Size: 1
  java.util.Collections$SingletonList.get(Collections.java:4817)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4341)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitPropertyAccessor(KotlinParserVisitor.kt:2175)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4393)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitProperty(KotlinParserVisitor.kt:1975)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4391)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitRegularClass(KotlinParserVisitor.kt:4026)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4395)
  ..."
github.com,anatawa12/auto-tostring,master,KotlinParser,"lib/src/commonMain/kotlin/com/anatawa12/autoToString/lib.kt",IllegalStateException,,,"java.lang.IllegalStateException: lib/src/commonMain/kotlin/com/anatawa12/autoToString/lib.kt is not print idempotent.
  org.openrewrite.Parser.requirePrintEqualsInput(Parser.java:51)"
github.com,anatawa12/auto-tostring,master,KotlinParser,"compiler-plugin/src/main/java/com/anatawa12/autoToString/compiler/ToStringResolveExtension.kt",IllegalStateException,,,"java.lang.IllegalStateException: compiler-plugin/src/main/java/com/anatawa12/autoToString/compiler/ToStringResolveExtension.kt is not print idempotent.
  org.openrewrite.Parser.requirePrintEqualsInput(Parser.java:51)"
github.com,anatawa12/auto-tostring,master,KotlinParser,"compiler-plugin/src/main/java/com/anatawa12/autoToString/compiler/ToStringGenerationVisitor.kt",IllegalArgumentException,"org.jetbrains.kotlin.KtRealSourceElementKind@5225c25c","class ToStringGenerationVisitor(
    val pluginContext: IrPluginContext,
) : IrElementVisitorVoid {
    override fun visitElement(element: IrElement) = element.acceptChildrenVoid(this)

    override fun visitSimpleFunction(declaration: IrSimpleFunction) {
        processSimpleFunction(declaration)
        super.visitSimpleFunction(declaration)
    }

    fun processSimpleFunction(declaration: IrSimpleFunction) {
        @OptIn(ObsoleteDescriptorBasedAPI::class)
        val data = declaration.descriptor.getUserData(ToStringMethodData) ?: return

        val ownerClass = declaration.parent as IrClass
        val properties = data.properties.map { name -> ownerClass.properties.first { it.name.identifier == name } }

        val receiver = declaration.dispatchReceiverParameter!!

        declaration.body = DeclarationIrBuilder(pluginContext, declaration.symbol).run {
            irBlockBody {
                val concat = irConcat()
                concat.addArgument(irString(ownerClass.name.asString() + ""(""))
                val it = properties.iterator()
                while (it.hasNext()) {
                    val property = it.next()
                    val surroundedWith = findSurroundedWith(property)
                    concat.addArgument(irString(property.name.identifier + ""=""))

                    val irPropertyValue = irGetProperty(irGet(receiver), property)

                    if (surroundedWith == null || (surroundedWith.begin == """" && surroundedWith.end == """")) {
                        concat.addArgument(toStringOrArray(irPropertyValue))
                    } else if (surroundedWith.evenNull) {
                        concat.addArgument(irString(surroundedWith.begin))
                        concat.addArgument(toStringOrArray(irPropertyValue))
                        concat.addArgument(irString(surroundedWith.end))
                    } else {
                        // surround if not null

                        concat.addArgument(irBlock(resultType = context.irBuiltIns.stringType) {
                            val variable = irTemporary(irPropertyValue)
                            +irIfNull(context.irBuiltIns.stringType,
                                subject = irGet(variable),
                                thenPart = irString(""null""),
                                elsePart = irConcat().apply {
                                    addArgument(irString(surroundedWith.begin))
                                    addArgument(toStringOrArray(irGet(variable)))
                                    addArgument(irString(surroundedWith.end))
                                },
                            )
                        })
                    }

                    if (it.hasNext()) concat.addArgument(irString("", ""))
                }
                concat.addArgument(irString("")""))
                +irReturn(concat)
            }
        }
    }

    private fun IrBuilderWithScope.toStringOrArray(irPropertyValue: IrExpression): IrExpression {
        return if (irPropertyValue.type.isArray() || irPropertyValue.type.isNullableArray()
            || irPropertyValue.type.isPrimitiveArray())
            irCall(context.irBuiltIns.dataClassArrayMemberToStringSymbol,
                context.irBuiltIns.stringType).apply {
                putValueArgument(0, irPropertyValue)
            }
        else irPropertyValue
    }

    private fun findSurroundedWith(property: IrProperty): SurroundedWith? {
        val annotation = property.annotations.find { it.type.isClassType(Symbols.surroundedWithAnnotation.toUnsafe()) }
            ?: return findBuiltinSurroundedWith(property)
        var begin: String? = null
        var end: String? = null
        var evenNull = false
        for (valueParameter in annotation.symbol.owner.valueParameters) {
            when (valueParameter.name.asString()) {
                ""begin"" -> begin = annotation.getValueArgument(valueParameter.index).cast<IrConst<*>>().value.cast()
                ""end"" -> end = annotation.getValueArgument(valueParameter.index).cast<IrConst<*>>().value.cast()
                ""evenNull"" -> evenNull = annotation.getValueArgument(valueParameter.index)
                    ?.cast<IrConst<*>>()?.value?.cast() ?: evenNull
            }
        }
        return SurroundedWith(
            begin ?: error(""begin not found: $annotation""),
            end ?: error(""end not found: $annotation""),
            evenNull,
        )
    }

    private fun findBuiltinSurroundedWith(property: IrProperty): SurroundedWith? {
        val type = property.backingField?.type ?: property.getter!!.returnType
        if (type.makeNotNull().isChar()) return charSurroundedWith
        if (type.makeNotNull().isString()) return stringSurroundedWith
        return null
    }

    private data class SurroundedWith(
        val begin: String,
        val end: String,
        val evenNull: Boolean,
    )

    companion object {
        private val charSurroundedWith = SurroundedWith(""'"", ""'"", evenNull = false)
        private val stringSurroundedWith = SurroundedWith(""\"""", ""\"""", evenNull = false)
    }
}","java.lang.IllegalArgumentException: Unsupported condition type.
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitWhenBranch(KotlinParserVisitor.kt:3200)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4417)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitWhenExpression(KotlinParserVisitor.kt:3323)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4418)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitBlock(KotlinParserVisitor.kt:766)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitBlock(KotlinParserVisitor.kt:705)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4372)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitWhileLoop(KotlinParserVisitor.kt:3369)
  ..."
github.com,anatawa12/auto-tostring,master,KotlinParser,"compiler-plugin/src/main/java/com/anatawa12/autoToString/compiler/AnnotationsChecker.kt",IllegalStateException,,,"java.lang.IllegalStateException: compiler-plugin/src/main/java/com/anatawa12/autoToString/compiler/AnnotationsChecker.kt is not print idempotent.
  org.openrewrite.Parser.requirePrintEqualsInput(Parser.java:51)"
github.com,anatawa12/auto-tostring,master,KotlinParser,"compiler-plugin/src/main/java/com/anatawa12/autoToString/compiler/pluginMain.kt",IllegalStateException,,,"java.lang.IllegalStateException: compiler-plugin/src/main/java/com/anatawa12/autoToString/compiler/pluginMain.kt is not print idempotent.
  org.openrewrite.Parser.requirePrintEqualsInput(Parser.java:51)"
github.com,anatawa12/auto-tostring,master,KotlinParser,"compiler-plugin/src/test/kotlin/com/anatawa12/autoToString/compiler/testlib.kt",AssertionError,,,"java.lang.AssertionError: null
  org.openrewrite.java.tree.TypeTree.build(TypeTree.java:95)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitResolvedQualifier(KotlinParserVisitor.kt:2358)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4398)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.mapFunctionCall(KotlinParserVisitor.kt:1116)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitFunctionCall(KotlinParserVisitor.kt:1026)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4385)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitBlock(KotlinParserVisitor.kt:766)
  ..."
github.com,anatawa12/auto-tostring,master,KotlinParser,"compiler-plugin/src/test/kotlin/com/anatawa12/autoToString/compiler/AutoToString.kt",AssertionError,,,"java.lang.AssertionError: null
  org.openrewrite.java.tree.TypeTree.build(TypeTree.java:95)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitResolvedQualifier(KotlinParserVisitor.kt:2358)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4398)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.mapFunctionCall(KotlinParserVisitor.kt:1116)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitFunctionCall(KotlinParserVisitor.kt:1026)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4385)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitBlock(KotlinParserVisitor.kt:766)
  ..."
github.com,anatawa12/auto-tostring,master,KotlinParser,"gradle-plugin/src/main/java/com/anatawa12/autoToString/gradle/AutoToStringGradlePlugin.kt",IllegalStateException,,,"java.lang.IllegalStateException: gradle-plugin/src/main/java/com/anatawa12/autoToString/gradle/AutoToStringGradlePlugin.kt is not print idempotent.
  org.openrewrite.Parser.requirePrintEqualsInput(Parser.java:51)"
github.com,"Heapy/heapy-properties-gradle-plugin",master,KotlinParser,"src/test/kotlin/io/heapy/gradle/properties/PropertiesPluginTest.kt",AssertionError,,,"java.lang.AssertionError: null
  org.openrewrite.java.tree.TypeTree.build(TypeTree.java:95)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitResolvedQualifier(KotlinParserVisitor.kt:2358)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4398)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.mapFunctionCall(KotlinParserVisitor.kt:1116)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitFunctionCall(KotlinParserVisitor.kt:1026)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4385)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitBlock(KotlinParserVisitor.kt:766)
  ..."
github.com,"krakowski/gradle-jextract",master,KotlinParser,"src/main/kotlin/io/github/krakowski/jextract/JextractTask.kt","UnsupportedOperationException","org.jetbrains.kotlin.KtRealSourceElementKind@14865771","abstract class JextractTask : DefaultTask() {

    @get:Input
    val toolchain: Property<String> = project.objects.property()

    /** Arguments which should be passed to clang. */
    @get:Optional @get:Input
    val clangArguments: Property<String> = project.objects.property()

    /** Whether to generate sources or precompiled class files */
    @get:Input
    val sourceMode: Property<Boolean> = project.objects.property<Boolean>()
            .convention(true)

    /** The output directory in which the generated code will be placed. */
    @get:OutputDirectory
    val outputDir: DirectoryProperty = project.objects.directoryProperty()
            .convention(project.layout.buildDirectory.dir(""generated/sources/jextract/main/java""))

    @get:Nested
    val definitions = ArrayList<LibraryDefinition>()

    init {
        group = ""build""
    }

    private fun findExecutable(): Path {

        // Select appropriate executable for operating system
        val operatingSystem = OperatingSystem.current()
        val executable = if (operatingSystem.isWindows) WINDOWS_EXECUTABLE else UNIX_EXECUTABLE

        // Try bundled jextract binary first to ensure compatibility with the currently used JDK
        val bundledExecutable = Paths.get(toolchain.get(), ""bin"", executable)
        if (Files.exists(bundledExecutable)) {
            return bundledExecutable
        }

        // Search for jextract in PATH if JDK has no bundled binary
        val envPath = System.getenv(ENV_PATH)
        val pathExecutable = envPath
                .split(File.pathSeparator)
                .map { path -> Paths.get(path, executable) }
                .filter { path -> Files.exists(path) }

        try {
            return pathExecutable.first()
        } catch (exception: NoSuchElementException) {
            throw GradleException(""jextract binary could not be found in PATH or at ${bundledExecutable}\n\t↳ PATH=${envPath}"")
        }
    }

    @TaskAction
    fun action() {

        val jextractBinary = findExecutable()
        if (Files.isDirectory(jextractBinary)) {
            throw GradleException(""${jextractBinary} is not a regular file but a directory"")
        }

        if (!Files.isExecutable(jextractBinary)) {
            throw GradleException(""${jextractBinary} is not executable"")
        }

        for (definition in definitions) {

            // Initialize argument list
            val arguments = ArrayList<String>()

            // Add jextract binary as first argument
            arguments += jextractBinary.toString()

            // Add source mode flag if it was enabled by the user
            if (sourceMode.get()) {
                arguments += ""--source""
            }

            // Add clang arguments if they are present
            clangArguments.orNull?.let {
                arguments += ""-C""
                arguments += it
            }

            // Include specified functions
            definition.functions.orNull?.forEach {
                arguments += ""--include-function""
                arguments += it
            }

            // Include specified macros
            definition.constants.orNull?.forEach {
                arguments += ""--include-constant""
                arguments += it
            }

            // Include specified structs
            definition.structs.orNull?.forEach {
                arguments += ""--include-struct""
                arguments += it
            }

            // Include specified typedefs
            definition.typedefs.orNull?.forEach {
                arguments += ""--include-typedef""
                arguments += it
            }

            // Include specified functions
            definition.unions.orNull?.forEach {
                arguments += ""--include-union""
                arguments += it
            }

            // Include specified functions
            definition.variables.orNull?.forEach {
                arguments += ""--include-var""
                arguments += it
            }

            // Include specified preprocessor macros
            definition.definedMacros.orNull?.forEach {
                arguments += ""-D""
                arguments += it
            }

            // Add include paths if they are present
            definition.includes.orNull?.forEach {
                arguments += ""-I""
                arguments += it
            }

            // Add library names if they are present
            definition.libraries.orNull?.let {
                for (library in it) {
                    arguments += ""-l""
                    arguments += library
                }
            }

            // Add target package if it is present
            definition.targetPackage.orNull?.let {
                arguments += ""--target-package""
                arguments += it
            }

            definition.className.orNull?.let {
                arguments += ""--header-class-name""
                arguments += it
            }

            // Set output directory
            arguments += ""--output""
            arguments += outputDir.get().toString()

            // Set header file
            arguments += definition.header.get()

            // Execute command
            execute(arguments.toTypedArray())
        }
    }

    fun header(header: String, action: Action<LibraryDefinition>) {
        val definition = project.objects.newInstance<LibraryDefinition>()
        definition.header.set(header)
        action.execute(definition)
        definitions += definition
    }

    private companion object {
        const val ENV_PATH = ""PATH""
        const val UNIX_EXECUTABLE = ""jextract""
        const val WINDOWS_EXECUTABLE = ""jextract.bat""

        private fun execute(command: Array<String>) {
            // Create buffers for stdout and stderr streams
            val stdout = StringBuffer()
            val stderr = StringBuffer()
            val result = Runtime.getRuntime().exec(command)

            // Wait until the process finishes and check if it succeeded
            result.await(stdout, stderr)
            if (result.exitValue() != 0) {
                throw GradleException(""Invoking jextract failed.\n\n"" +
                        "" command: ${command.joinToString("" "")}\n stdout: ${stdout}\n stderr: ${stderr}"")
            }
        }

        fun Process.await(output: Appendable?, error: Appendable?) {
            val out = ProcessGroovyMethods.consumeProcessOutputStream(this, output)
            val err = ProcessGroovyMethods.consumeProcessErrorStream(this, error)
            try {
                try {
                    out.join()
                    err.join()
                    waitFor()
                } catch (_: InterruptedException) {
                    Thread.currentThread().interrupt()
                }
            } finally {
                ProcessGroovyMethods.closeStreams(this)
            }
        }
    }
}","java.lang.UnsupportedOperationException: Unsupported binary operator type.
  org.openrewrite.kotlin.internal.KotlinParserVisitor.mapBinaryOperation(KotlinParserVisitor.kt:1612)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitFunctionCall(KotlinParserVisitor.kt:1023)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4385)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitBlock(KotlinParserVisitor.kt:766)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.mapForLoop(KotlinParserVisitor.kt:4656)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitBlock(KotlinParserVisitor.kt:757)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitBlock(KotlinParserVisitor.kt:705)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4372)
  ..."
github.com,"krakowski/gradle-jextract",master,KotlinParser,"src/main/kotlin/io/github/krakowski/jextract/JextractPlugin.kt","UnsupportedOperationException","org.jetbrains.kotlin.KtRealSourceElementKind@14865771","class JextractPlugin : Plugin<Project> {

    override fun apply(target: Project) {

        // Create and register jextract task
        val jextractTask = target.tasks.create<JextractTask>(""jextract"")

        // Use current JVM as default toolchain for jextract task
        jextractTask.toolchain.convention(Jvm.current().javaHome.absolutePath.toString())

        // Configure Java plugin if it was applied
        target.plugins.withType<JavaPlugin> {

            // Query java plugin extensions
            val extension = target.extensions.getByType<JavaPluginExtension>()
            val service = target.extensions.getByType<JavaToolchainService>()

            // Wire up the selected toolchain with the jextract task or fall back to
            // the current JVM if no toolchain has been specified
            jextractTask.toolchain.convention(
                    service.compilerFor(extension.toolchain)
                           .map { it.metadata.installationPath.asFile.absolutePath.toString() }
                           .orElse(Jvm.current().javaHome.absolutePath.toString())
            )

            // To make the generated classes available for our code,
            // we need to add the output directory to the list of source directories
            extension.sourceSets {
                named(""main"") {

                    // Add generated sources to source set
                    java.srcDirs(
                            java.srcDirs,
                            jextractTask.outputDir.asFile.get()
                    )

                    // This is necessary since jextract generates a compiled class file containing constants
                    compileClasspath += target.files(jextractTask.outputDir)
                    runtimeClasspath += target.files(jextractTask.outputDir)
                }
            }

            // This is necessary in case we use class file mode
            target.dependencies {
                add(""implementation"", target.files(jextractTask.outputDir))
            }

            // Include all generated classes inside our jar archive
            target.tasks.withType<Jar> {
                from(jextractTask.outputDir) {
                    include(""**/*.class"")
                }
            }

            // We need to enable the preview mode, so the compiler sees jdk.lang.foreign classes and
            // the java compiler should only be invoked after jextract generated its source files
            target.tasks.withType<JavaCompile> {
                dependsOn(jextractTask)
                options.compilerArgs.add(""--enable-preview"")
            }

            target.tasks.withType<Test> {
                jvmArgs = listOf(
                    ""--enable-native-access=ALL-UNNAMED"",
                    ""--enable-preview""
                )
            }
        }

        // Configure application plugin if it was applied
        target.plugins.withType<ApplicationPlugin> {

            val extension = target.extensions.getByType<JavaApplication>()

            // We need to enable the preview mode, so that the jdk.lang.foreign classes are visible at runtime
            extension.applicationDefaultJvmArgs += listOf(
                    ""--enable-native-access=ALL-UNNAMED"",
                    ""--enable-preview""
            )
        }
    }
}","java.lang.UnsupportedOperationException: FirVarargArgumentsExpression is not supported at cursor: / This is necessary in case wein file: /home/ubuntu/jenkins-agent/workspace/cli-ingest/krakowski_gradle-jextract_master/src/main/kotlin/io/github/krakowski/jextract/JextractPlugin.kt
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitVarargArgumentsExpression(KotlinParserVisitor.kt:4254)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4462)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.mapFunctionCall(KotlinParserVisitor.kt:1149)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitFunctionCall(KotlinParserVisitor.kt:1026)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4385)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.mapFunctionCall(KotlinParserVisitor.kt:1149)
  ..."
github.com,"krakowski/gradle-jextract",master,KotlinParser,"src/test/kotlin/io/github/krakowski/jextract/JextractPluginFunctionalTest.kt",AssertionError,,,"java.lang.AssertionError: null
  org.openrewrite.java.tree.TypeTree.build(TypeTree.java:95)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitResolvedQualifier(KotlinParserVisitor.kt:2358)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4398)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.convertToExpression(KotlinParserVisitor.kt:4758)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.mapFunctionCall(KotlinParserVisitor.kt:1116)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitFunctionCall(KotlinParserVisitor.kt:1026)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitElement(KotlinParserVisitor.kt:4385)
  org.openrewrite.kotlin.internal.KotlinParserVisitor.visitBlock(KotlinParserVisitor.kt:766)
  ..."
